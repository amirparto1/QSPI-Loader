
QSPI-Loader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001fc  20000004  20000004  00010004  2**0
                  ALLOC
  1 .ARM          00000008  20000200  20000200  00010200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  20000208  20000208  00010208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  2000020c  2000020c  0001020c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001e8  20000210  20000210  00010210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000ac  200003f8  200003f8  000103f8  2**2
                  ALLOC
  6 .text         0000f47c  200004b0  200004b0  000104b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .Dev_info     000000c8  2000f92c  2000f92c  0002f92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata       000004fc  2000f9f8  2000f9f8  0001f9f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 ._user_heap_stack 00000c00  2000fef4  2000fef4  0001fef4  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0002f9f4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018861  00000000  00000000  0002fa22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003f1c  00000000  00000000  00048283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000bc0  00000000  00000000  0004c19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002668  00000000  00000000  0004cd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014c93  00000000  00000000  0004f3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00004abe  00000000  00000000  0006405a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00068b18  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003884  00000000  00000000  00068b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0000f53c  00000000  00000000  0006c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200004b0 <__do_global_dtors_aux>:
200004b0:	b510      	push	{r4, lr}
200004b2:	4c05      	ldr	r4, [pc, #20]	; (200004c8 <__do_global_dtors_aux+0x18>)
200004b4:	7823      	ldrb	r3, [r4, #0]
200004b6:	b933      	cbnz	r3, 200004c6 <__do_global_dtors_aux+0x16>
200004b8:	4b04      	ldr	r3, [pc, #16]	; (200004cc <__do_global_dtors_aux+0x1c>)
200004ba:	b113      	cbz	r3, 200004c2 <__do_global_dtors_aux+0x12>
200004bc:	4804      	ldr	r0, [pc, #16]	; (200004d0 <__do_global_dtors_aux+0x20>)
200004be:	f3af 8000 	nop.w
200004c2:	2301      	movs	r3, #1
200004c4:	7023      	strb	r3, [r4, #0]
200004c6:	bd10      	pop	{r4, pc}
200004c8:	200003f8 	.word	0x200003f8
200004cc:	00000000 	.word	0x00000000
200004d0:	2000f910 	.word	0x2000f910

200004d4 <frame_dummy>:
200004d4:	b508      	push	{r3, lr}
200004d6:	4b03      	ldr	r3, [pc, #12]	; (200004e4 <frame_dummy+0x10>)
200004d8:	b11b      	cbz	r3, 200004e2 <frame_dummy+0xe>
200004da:	4903      	ldr	r1, [pc, #12]	; (200004e8 <frame_dummy+0x14>)
200004dc:	4803      	ldr	r0, [pc, #12]	; (200004ec <frame_dummy+0x18>)
200004de:	f3af 8000 	nop.w
200004e2:	bd08      	pop	{r3, pc}
200004e4:	00000000 	.word	0x00000000
200004e8:	200003fc 	.word	0x200003fc
200004ec:	2000f910 	.word	0x2000f910

200004f0 <_stack_init>:
200004f0:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
200004f4:	4770      	bx	lr
200004f6:	bf00      	nop

200004f8 <_mainCRTStartup>:
200004f8:	4b17      	ldr	r3, [pc, #92]	; (20000558 <_mainCRTStartup+0x60>)
200004fa:	2b00      	cmp	r3, #0
200004fc:	bf08      	it	eq
200004fe:	4b13      	ldreq	r3, [pc, #76]	; (2000054c <_mainCRTStartup+0x54>)
20000500:	469d      	mov	sp, r3
20000502:	f7ff fff5 	bl	200004f0 <_stack_init>
20000506:	2100      	movs	r1, #0
20000508:	468b      	mov	fp, r1
2000050a:	460f      	mov	r7, r1
2000050c:	4813      	ldr	r0, [pc, #76]	; (2000055c <_mainCRTStartup+0x64>)
2000050e:	4a14      	ldr	r2, [pc, #80]	; (20000560 <_mainCRTStartup+0x68>)
20000510:	1a12      	subs	r2, r2, r0
20000512:	f00a fa2f 	bl	2000a974 <memset>
20000516:	4b0e      	ldr	r3, [pc, #56]	; (20000550 <_mainCRTStartup+0x58>)
20000518:	2b00      	cmp	r3, #0
2000051a:	d000      	beq.n	2000051e <_mainCRTStartup+0x26>
2000051c:	4798      	blx	r3
2000051e:	4b0d      	ldr	r3, [pc, #52]	; (20000554 <_mainCRTStartup+0x5c>)
20000520:	2b00      	cmp	r3, #0
20000522:	d000      	beq.n	20000526 <_mainCRTStartup+0x2e>
20000524:	4798      	blx	r3
20000526:	2000      	movs	r0, #0
20000528:	2100      	movs	r1, #0
2000052a:	0004      	movs	r4, r0
2000052c:	000d      	movs	r5, r1
2000052e:	480d      	ldr	r0, [pc, #52]	; (20000564 <_mainCRTStartup+0x6c>)
20000530:	2800      	cmp	r0, #0
20000532:	d002      	beq.n	2000053a <_mainCRTStartup+0x42>
20000534:	480c      	ldr	r0, [pc, #48]	; (20000568 <_mainCRTStartup+0x70>)
20000536:	f3af 8000 	nop.w
2000053a:	f00a f9f7 	bl	2000a92c <__libc_init_array>
2000053e:	0020      	movs	r0, r4
20000540:	0029      	movs	r1, r5
20000542:	f000 fcf9 	bl	20000f38 <main>
20000546:	f00a f9dd 	bl	2000a904 <exit>
2000054a:	bf00      	nop
2000054c:	00080000 	.word	0x00080000
	...
2000055c:	200003f8 	.word	0x200003f8
20000560:	200004a4 	.word	0x200004a4
	...

2000056c <strlen>:
2000056c:	4603      	mov	r3, r0
2000056e:	f813 2b01 	ldrb.w	r2, [r3], #1
20000572:	2a00      	cmp	r2, #0
20000574:	d1fb      	bne.n	2000056e <strlen+0x2>
20000576:	1a18      	subs	r0, r3, r0
20000578:	3801      	subs	r0, #1
2000057a:	4770      	bx	lr
2000057c:	0000      	movs	r0, r0
	...

20000580 <memchr>:
20000580:	f001 01ff 	and.w	r1, r1, #255	; 0xff
20000584:	2a10      	cmp	r2, #16
20000586:	db2b      	blt.n	200005e0 <memchr+0x60>
20000588:	f010 0f07 	tst.w	r0, #7
2000058c:	d008      	beq.n	200005a0 <memchr+0x20>
2000058e:	f810 3b01 	ldrb.w	r3, [r0], #1
20000592:	3a01      	subs	r2, #1
20000594:	428b      	cmp	r3, r1
20000596:	d02d      	beq.n	200005f4 <memchr+0x74>
20000598:	f010 0f07 	tst.w	r0, #7
2000059c:	b342      	cbz	r2, 200005f0 <memchr+0x70>
2000059e:	d1f6      	bne.n	2000058e <memchr+0xe>
200005a0:	b4f0      	push	{r4, r5, r6, r7}
200005a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
200005a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
200005aa:	f022 0407 	bic.w	r4, r2, #7
200005ae:	f07f 0700 	mvns.w	r7, #0
200005b2:	2300      	movs	r3, #0
200005b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
200005b8:	3c08      	subs	r4, #8
200005ba:	ea85 0501 	eor.w	r5, r5, r1
200005be:	ea86 0601 	eor.w	r6, r6, r1
200005c2:	fa85 f547 	uadd8	r5, r5, r7
200005c6:	faa3 f587 	sel	r5, r3, r7
200005ca:	fa86 f647 	uadd8	r6, r6, r7
200005ce:	faa5 f687 	sel	r6, r5, r7
200005d2:	b98e      	cbnz	r6, 200005f8 <memchr+0x78>
200005d4:	d1ee      	bne.n	200005b4 <memchr+0x34>
200005d6:	bcf0      	pop	{r4, r5, r6, r7}
200005d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
200005dc:	f002 0207 	and.w	r2, r2, #7
200005e0:	b132      	cbz	r2, 200005f0 <memchr+0x70>
200005e2:	f810 3b01 	ldrb.w	r3, [r0], #1
200005e6:	3a01      	subs	r2, #1
200005e8:	ea83 0301 	eor.w	r3, r3, r1
200005ec:	b113      	cbz	r3, 200005f4 <memchr+0x74>
200005ee:	d1f8      	bne.n	200005e2 <memchr+0x62>
200005f0:	2000      	movs	r0, #0
200005f2:	4770      	bx	lr
200005f4:	3801      	subs	r0, #1
200005f6:	4770      	bx	lr
200005f8:	2d00      	cmp	r5, #0
200005fa:	bf06      	itte	eq
200005fc:	4635      	moveq	r5, r6
200005fe:	3803      	subeq	r0, #3
20000600:	3807      	subne	r0, #7
20000602:	f015 0f01 	tst.w	r5, #1
20000606:	d107      	bne.n	20000618 <memchr+0x98>
20000608:	3001      	adds	r0, #1
2000060a:	f415 7f80 	tst.w	r5, #256	; 0x100
2000060e:	bf02      	ittt	eq
20000610:	3001      	addeq	r0, #1
20000612:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
20000616:	3001      	addeq	r0, #1
20000618:	bcf0      	pop	{r4, r5, r6, r7}
2000061a:	3801      	subs	r0, #1
2000061c:	4770      	bx	lr
2000061e:	bf00      	nop

20000620 <strcmp>:
20000620:	f810 2b01 	ldrb.w	r2, [r0], #1
20000624:	f811 3b01 	ldrb.w	r3, [r1], #1
20000628:	2a01      	cmp	r2, #1
2000062a:	bf28      	it	cs
2000062c:	429a      	cmpcs	r2, r3
2000062e:	d0f7      	beq.n	20000620 <strcmp>
20000630:	1ad0      	subs	r0, r2, r3
20000632:	4770      	bx	lr

20000634 <__aeabi_drsub>:
20000634:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20000638:	e002      	b.n	20000640 <__adddf3>
2000063a:	bf00      	nop

2000063c <__aeabi_dsub>:
2000063c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

20000640 <__adddf3>:
20000640:	b530      	push	{r4, r5, lr}
20000642:	ea4f 0441 	mov.w	r4, r1, lsl #1
20000646:	ea4f 0543 	mov.w	r5, r3, lsl #1
2000064a:	ea94 0f05 	teq	r4, r5
2000064e:	bf08      	it	eq
20000650:	ea90 0f02 	teqeq	r0, r2
20000654:	bf1f      	itttt	ne
20000656:	ea54 0c00 	orrsne.w	ip, r4, r0
2000065a:	ea55 0c02 	orrsne.w	ip, r5, r2
2000065e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
20000662:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20000666:	f000 80e2 	beq.w	2000082e <__adddf3+0x1ee>
2000066a:	ea4f 5454 	mov.w	r4, r4, lsr #21
2000066e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
20000672:	bfb8      	it	lt
20000674:	426d      	neglt	r5, r5
20000676:	dd0c      	ble.n	20000692 <__adddf3+0x52>
20000678:	442c      	add	r4, r5
2000067a:	ea80 0202 	eor.w	r2, r0, r2
2000067e:	ea81 0303 	eor.w	r3, r1, r3
20000682:	ea82 0000 	eor.w	r0, r2, r0
20000686:	ea83 0101 	eor.w	r1, r3, r1
2000068a:	ea80 0202 	eor.w	r2, r0, r2
2000068e:	ea81 0303 	eor.w	r3, r1, r3
20000692:	2d36      	cmp	r5, #54	; 0x36
20000694:	bf88      	it	hi
20000696:	bd30      	pophi	{r4, r5, pc}
20000698:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
2000069c:	ea4f 3101 	mov.w	r1, r1, lsl #12
200006a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
200006a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
200006a8:	d002      	beq.n	200006b0 <__adddf3+0x70>
200006aa:	4240      	negs	r0, r0
200006ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
200006b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
200006b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
200006b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
200006bc:	d002      	beq.n	200006c4 <__adddf3+0x84>
200006be:	4252      	negs	r2, r2
200006c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
200006c4:	ea94 0f05 	teq	r4, r5
200006c8:	f000 80a7 	beq.w	2000081a <__adddf3+0x1da>
200006cc:	f1a4 0401 	sub.w	r4, r4, #1
200006d0:	f1d5 0e20 	rsbs	lr, r5, #32
200006d4:	db0d      	blt.n	200006f2 <__adddf3+0xb2>
200006d6:	fa02 fc0e 	lsl.w	ip, r2, lr
200006da:	fa22 f205 	lsr.w	r2, r2, r5
200006de:	1880      	adds	r0, r0, r2
200006e0:	f141 0100 	adc.w	r1, r1, #0
200006e4:	fa03 f20e 	lsl.w	r2, r3, lr
200006e8:	1880      	adds	r0, r0, r2
200006ea:	fa43 f305 	asr.w	r3, r3, r5
200006ee:	4159      	adcs	r1, r3
200006f0:	e00e      	b.n	20000710 <__adddf3+0xd0>
200006f2:	f1a5 0520 	sub.w	r5, r5, #32
200006f6:	f10e 0e20 	add.w	lr, lr, #32
200006fa:	2a01      	cmp	r2, #1
200006fc:	fa03 fc0e 	lsl.w	ip, r3, lr
20000700:	bf28      	it	cs
20000702:	f04c 0c02 	orrcs.w	ip, ip, #2
20000706:	fa43 f305 	asr.w	r3, r3, r5
2000070a:	18c0      	adds	r0, r0, r3
2000070c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
20000710:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20000714:	d507      	bpl.n	20000726 <__adddf3+0xe6>
20000716:	f04f 0e00 	mov.w	lr, #0
2000071a:	f1dc 0c00 	rsbs	ip, ip, #0
2000071e:	eb7e 0000 	sbcs.w	r0, lr, r0
20000722:	eb6e 0101 	sbc.w	r1, lr, r1
20000726:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
2000072a:	d31b      	bcc.n	20000764 <__adddf3+0x124>
2000072c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
20000730:	d30c      	bcc.n	2000074c <__adddf3+0x10c>
20000732:	0849      	lsrs	r1, r1, #1
20000734:	ea5f 0030 	movs.w	r0, r0, rrx
20000738:	ea4f 0c3c 	mov.w	ip, ip, rrx
2000073c:	f104 0401 	add.w	r4, r4, #1
20000740:	ea4f 5244 	mov.w	r2, r4, lsl #21
20000744:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20000748:	f080 809a 	bcs.w	20000880 <__adddf3+0x240>
2000074c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20000750:	bf08      	it	eq
20000752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20000756:	f150 0000 	adcs.w	r0, r0, #0
2000075a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000075e:	ea41 0105 	orr.w	r1, r1, r5
20000762:	bd30      	pop	{r4, r5, pc}
20000764:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20000768:	4140      	adcs	r0, r0
2000076a:	eb41 0101 	adc.w	r1, r1, r1
2000076e:	3c01      	subs	r4, #1
20000770:	bf28      	it	cs
20000772:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
20000776:	d2e9      	bcs.n	2000074c <__adddf3+0x10c>
20000778:	f091 0f00 	teq	r1, #0
2000077c:	bf04      	itt	eq
2000077e:	4601      	moveq	r1, r0
20000780:	2000      	moveq	r0, #0
20000782:	fab1 f381 	clz	r3, r1
20000786:	bf08      	it	eq
20000788:	3320      	addeq	r3, #32
2000078a:	f1a3 030b 	sub.w	r3, r3, #11
2000078e:	f1b3 0220 	subs.w	r2, r3, #32
20000792:	da0c      	bge.n	200007ae <__adddf3+0x16e>
20000794:	320c      	adds	r2, #12
20000796:	dd08      	ble.n	200007aa <__adddf3+0x16a>
20000798:	f102 0c14 	add.w	ip, r2, #20
2000079c:	f1c2 020c 	rsb	r2, r2, #12
200007a0:	fa01 f00c 	lsl.w	r0, r1, ip
200007a4:	fa21 f102 	lsr.w	r1, r1, r2
200007a8:	e00c      	b.n	200007c4 <__adddf3+0x184>
200007aa:	f102 0214 	add.w	r2, r2, #20
200007ae:	bfd8      	it	le
200007b0:	f1c2 0c20 	rsble	ip, r2, #32
200007b4:	fa01 f102 	lsl.w	r1, r1, r2
200007b8:	fa20 fc0c 	lsr.w	ip, r0, ip
200007bc:	bfdc      	itt	le
200007be:	ea41 010c 	orrle.w	r1, r1, ip
200007c2:	4090      	lslle	r0, r2
200007c4:	1ae4      	subs	r4, r4, r3
200007c6:	bfa2      	ittt	ge
200007c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
200007cc:	4329      	orrge	r1, r5
200007ce:	bd30      	popge	{r4, r5, pc}
200007d0:	ea6f 0404 	mvn.w	r4, r4
200007d4:	3c1f      	subs	r4, #31
200007d6:	da1c      	bge.n	20000812 <__adddf3+0x1d2>
200007d8:	340c      	adds	r4, #12
200007da:	dc0e      	bgt.n	200007fa <__adddf3+0x1ba>
200007dc:	f104 0414 	add.w	r4, r4, #20
200007e0:	f1c4 0220 	rsb	r2, r4, #32
200007e4:	fa20 f004 	lsr.w	r0, r0, r4
200007e8:	fa01 f302 	lsl.w	r3, r1, r2
200007ec:	ea40 0003 	orr.w	r0, r0, r3
200007f0:	fa21 f304 	lsr.w	r3, r1, r4
200007f4:	ea45 0103 	orr.w	r1, r5, r3
200007f8:	bd30      	pop	{r4, r5, pc}
200007fa:	f1c4 040c 	rsb	r4, r4, #12
200007fe:	f1c4 0220 	rsb	r2, r4, #32
20000802:	fa20 f002 	lsr.w	r0, r0, r2
20000806:	fa01 f304 	lsl.w	r3, r1, r4
2000080a:	ea40 0003 	orr.w	r0, r0, r3
2000080e:	4629      	mov	r1, r5
20000810:	bd30      	pop	{r4, r5, pc}
20000812:	fa21 f004 	lsr.w	r0, r1, r4
20000816:	4629      	mov	r1, r5
20000818:	bd30      	pop	{r4, r5, pc}
2000081a:	f094 0f00 	teq	r4, #0
2000081e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
20000822:	bf06      	itte	eq
20000824:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
20000828:	3401      	addeq	r4, #1
2000082a:	3d01      	subne	r5, #1
2000082c:	e74e      	b.n	200006cc <__adddf3+0x8c>
2000082e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20000832:	bf18      	it	ne
20000834:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20000838:	d029      	beq.n	2000088e <__adddf3+0x24e>
2000083a:	ea94 0f05 	teq	r4, r5
2000083e:	bf08      	it	eq
20000840:	ea90 0f02 	teqeq	r0, r2
20000844:	d005      	beq.n	20000852 <__adddf3+0x212>
20000846:	ea54 0c00 	orrs.w	ip, r4, r0
2000084a:	bf04      	itt	eq
2000084c:	4619      	moveq	r1, r3
2000084e:	4610      	moveq	r0, r2
20000850:	bd30      	pop	{r4, r5, pc}
20000852:	ea91 0f03 	teq	r1, r3
20000856:	bf1e      	ittt	ne
20000858:	2100      	movne	r1, #0
2000085a:	2000      	movne	r0, #0
2000085c:	bd30      	popne	{r4, r5, pc}
2000085e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
20000862:	d105      	bne.n	20000870 <__adddf3+0x230>
20000864:	0040      	lsls	r0, r0, #1
20000866:	4149      	adcs	r1, r1
20000868:	bf28      	it	cs
2000086a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
2000086e:	bd30      	pop	{r4, r5, pc}
20000870:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20000874:	bf3c      	itt	cc
20000876:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2000087a:	bd30      	popcc	{r4, r5, pc}
2000087c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20000880:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20000884:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20000888:	f04f 0000 	mov.w	r0, #0
2000088c:	bd30      	pop	{r4, r5, pc}
2000088e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20000892:	bf1a      	itte	ne
20000894:	4619      	movne	r1, r3
20000896:	4610      	movne	r0, r2
20000898:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
2000089c:	bf1c      	itt	ne
2000089e:	460b      	movne	r3, r1
200008a0:	4602      	movne	r2, r0
200008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
200008a6:	bf06      	itte	eq
200008a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
200008ac:	ea91 0f03 	teqeq	r1, r3
200008b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
200008b4:	bd30      	pop	{r4, r5, pc}
200008b6:	bf00      	nop

200008b8 <__aeabi_ui2d>:
200008b8:	f090 0f00 	teq	r0, #0
200008bc:	bf04      	itt	eq
200008be:	2100      	moveq	r1, #0
200008c0:	4770      	bxeq	lr
200008c2:	b530      	push	{r4, r5, lr}
200008c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
200008c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
200008cc:	f04f 0500 	mov.w	r5, #0
200008d0:	f04f 0100 	mov.w	r1, #0
200008d4:	e750      	b.n	20000778 <__adddf3+0x138>
200008d6:	bf00      	nop

200008d8 <__aeabi_i2d>:
200008d8:	f090 0f00 	teq	r0, #0
200008dc:	bf04      	itt	eq
200008de:	2100      	moveq	r1, #0
200008e0:	4770      	bxeq	lr
200008e2:	b530      	push	{r4, r5, lr}
200008e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
200008e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
200008ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
200008f0:	bf48      	it	mi
200008f2:	4240      	negmi	r0, r0
200008f4:	f04f 0100 	mov.w	r1, #0
200008f8:	e73e      	b.n	20000778 <__adddf3+0x138>
200008fa:	bf00      	nop

200008fc <__aeabi_f2d>:
200008fc:	0042      	lsls	r2, r0, #1
200008fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
20000902:	ea4f 0131 	mov.w	r1, r1, rrx
20000906:	ea4f 7002 	mov.w	r0, r2, lsl #28
2000090a:	bf1f      	itttt	ne
2000090c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
20000910:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20000914:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
20000918:	4770      	bxne	lr
2000091a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
2000091e:	bf08      	it	eq
20000920:	4770      	bxeq	lr
20000922:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
20000926:	bf04      	itt	eq
20000928:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
2000092c:	4770      	bxeq	lr
2000092e:	b530      	push	{r4, r5, lr}
20000930:	f44f 7460 	mov.w	r4, #896	; 0x380
20000934:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20000938:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2000093c:	e71c      	b.n	20000778 <__adddf3+0x138>
2000093e:	bf00      	nop

20000940 <__aeabi_ul2d>:
20000940:	ea50 0201 	orrs.w	r2, r0, r1
20000944:	bf08      	it	eq
20000946:	4770      	bxeq	lr
20000948:	b530      	push	{r4, r5, lr}
2000094a:	f04f 0500 	mov.w	r5, #0
2000094e:	e00a      	b.n	20000966 <__aeabi_l2d+0x16>

20000950 <__aeabi_l2d>:
20000950:	ea50 0201 	orrs.w	r2, r0, r1
20000954:	bf08      	it	eq
20000956:	4770      	bxeq	lr
20000958:	b530      	push	{r4, r5, lr}
2000095a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
2000095e:	d502      	bpl.n	20000966 <__aeabi_l2d+0x16>
20000960:	4240      	negs	r0, r0
20000962:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20000966:	f44f 6480 	mov.w	r4, #1024	; 0x400
2000096a:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000096e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
20000972:	f43f aed8 	beq.w	20000726 <__adddf3+0xe6>
20000976:	f04f 0203 	mov.w	r2, #3
2000097a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2000097e:	bf18      	it	ne
20000980:	3203      	addne	r2, #3
20000982:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20000986:	bf18      	it	ne
20000988:	3203      	addne	r2, #3
2000098a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
2000098e:	f1c2 0320 	rsb	r3, r2, #32
20000992:	fa00 fc03 	lsl.w	ip, r0, r3
20000996:	fa20 f002 	lsr.w	r0, r0, r2
2000099a:	fa01 fe03 	lsl.w	lr, r1, r3
2000099e:	ea40 000e 	orr.w	r0, r0, lr
200009a2:	fa21 f102 	lsr.w	r1, r1, r2
200009a6:	4414      	add	r4, r2
200009a8:	e6bd      	b.n	20000726 <__adddf3+0xe6>
200009aa:	bf00      	nop

200009ac <__aeabi_ldivmod>:
200009ac:	b97b      	cbnz	r3, 200009ce <__aeabi_ldivmod+0x22>
200009ae:	b972      	cbnz	r2, 200009ce <__aeabi_ldivmod+0x22>
200009b0:	2900      	cmp	r1, #0
200009b2:	bfbe      	ittt	lt
200009b4:	2000      	movlt	r0, #0
200009b6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
200009ba:	e006      	blt.n	200009ca <__aeabi_ldivmod+0x1e>
200009bc:	bf08      	it	eq
200009be:	2800      	cmpeq	r0, #0
200009c0:	bf1c      	itt	ne
200009c2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
200009c6:	f04f 30ff 	movne.w	r0, #4294967295
200009ca:	f000 b9f3 	b.w	20000db4 <__aeabi_idiv0>
200009ce:	f1ad 0c08 	sub.w	ip, sp, #8
200009d2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
200009d6:	2900      	cmp	r1, #0
200009d8:	db09      	blt.n	200009ee <__aeabi_ldivmod+0x42>
200009da:	2b00      	cmp	r3, #0
200009dc:	db1a      	blt.n	20000a14 <__aeabi_ldivmod+0x68>
200009de:	f000 f887 	bl	20000af0 <__udivmoddi4>
200009e2:	f8dd e004 	ldr.w	lr, [sp, #4]
200009e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
200009ea:	b004      	add	sp, #16
200009ec:	4770      	bx	lr
200009ee:	4240      	negs	r0, r0
200009f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
200009f4:	2b00      	cmp	r3, #0
200009f6:	db1b      	blt.n	20000a30 <__aeabi_ldivmod+0x84>
200009f8:	f000 f87a 	bl	20000af0 <__udivmoddi4>
200009fc:	f8dd e004 	ldr.w	lr, [sp, #4]
20000a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000a04:	b004      	add	sp, #16
20000a06:	4240      	negs	r0, r0
20000a08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20000a0c:	4252      	negs	r2, r2
20000a0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20000a12:	4770      	bx	lr
20000a14:	4252      	negs	r2, r2
20000a16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20000a1a:	f000 f869 	bl	20000af0 <__udivmoddi4>
20000a1e:	f8dd e004 	ldr.w	lr, [sp, #4]
20000a22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000a26:	b004      	add	sp, #16
20000a28:	4240      	negs	r0, r0
20000a2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20000a2e:	4770      	bx	lr
20000a30:	4252      	negs	r2, r2
20000a32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20000a36:	f000 f85b 	bl	20000af0 <__udivmoddi4>
20000a3a:	f8dd e004 	ldr.w	lr, [sp, #4]
20000a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000a42:	b004      	add	sp, #16
20000a44:	4252      	negs	r2, r2
20000a46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20000a4a:	4770      	bx	lr

20000a4c <__aeabi_uldivmod>:
20000a4c:	b953      	cbnz	r3, 20000a64 <__aeabi_uldivmod+0x18>
20000a4e:	b94a      	cbnz	r2, 20000a64 <__aeabi_uldivmod+0x18>
20000a50:	2900      	cmp	r1, #0
20000a52:	bf08      	it	eq
20000a54:	2800      	cmpeq	r0, #0
20000a56:	bf1c      	itt	ne
20000a58:	f04f 31ff 	movne.w	r1, #4294967295
20000a5c:	f04f 30ff 	movne.w	r0, #4294967295
20000a60:	f000 b9a8 	b.w	20000db4 <__aeabi_idiv0>
20000a64:	f1ad 0c08 	sub.w	ip, sp, #8
20000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20000a6c:	f000 f840 	bl	20000af0 <__udivmoddi4>
20000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
20000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000a78:	b004      	add	sp, #16
20000a7a:	4770      	bx	lr

20000a7c <__aeabi_d2lz>:
20000a7c:	b508      	push	{r3, lr}
20000a7e:	4602      	mov	r2, r0
20000a80:	460b      	mov	r3, r1
20000a82:	ec43 2b17 	vmov	d7, r2, r3
20000a86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
20000a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000a8e:	d403      	bmi.n	20000a98 <__aeabi_d2lz+0x1c>
20000a90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
20000a94:	f000 b80c 	b.w	20000ab0 <__aeabi_d2ulz>
20000a98:	eeb1 7b47 	vneg.f64	d7, d7
20000a9c:	ec51 0b17 	vmov	r0, r1, d7
20000aa0:	f000 f806 	bl	20000ab0 <__aeabi_d2ulz>
20000aa4:	4240      	negs	r0, r0
20000aa6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20000aaa:	bd08      	pop	{r3, pc}
20000aac:	0000      	movs	r0, r0
	...

20000ab0 <__aeabi_d2ulz>:
20000ab0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 20000ae0 <__aeabi_d2ulz+0x30>
20000ab4:	ec41 0b17 	vmov	d7, r0, r1
20000ab8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 20000ae8 <__aeabi_d2ulz+0x38>
20000abc:	ee27 6b06 	vmul.f64	d6, d7, d6
20000ac0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
20000ac4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
20000ac8:	eea4 7b45 	vfms.f64	d7, d4, d5
20000acc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
20000ad0:	ee16 1a10 	vmov	r1, s12
20000ad4:	ee17 0a90 	vmov	r0, s15
20000ad8:	4770      	bx	lr
20000ada:	bf00      	nop
20000adc:	f3af 8000 	nop.w
20000ae0:	00000000 	.word	0x00000000
20000ae4:	3df00000 	.word	0x3df00000
20000ae8:	00000000 	.word	0x00000000
20000aec:	41f00000 	.word	0x41f00000

20000af0 <__udivmoddi4>:
20000af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20000af4:	9d08      	ldr	r5, [sp, #32]
20000af6:	4604      	mov	r4, r0
20000af8:	468c      	mov	ip, r1
20000afa:	2b00      	cmp	r3, #0
20000afc:	f040 8083 	bne.w	20000c06 <__udivmoddi4+0x116>
20000b00:	428a      	cmp	r2, r1
20000b02:	4617      	mov	r7, r2
20000b04:	d947      	bls.n	20000b96 <__udivmoddi4+0xa6>
20000b06:	fab2 f282 	clz	r2, r2
20000b0a:	b142      	cbz	r2, 20000b1e <__udivmoddi4+0x2e>
20000b0c:	f1c2 0020 	rsb	r0, r2, #32
20000b10:	fa24 f000 	lsr.w	r0, r4, r0
20000b14:	4091      	lsls	r1, r2
20000b16:	4097      	lsls	r7, r2
20000b18:	ea40 0c01 	orr.w	ip, r0, r1
20000b1c:	4094      	lsls	r4, r2
20000b1e:	ea4f 4817 	mov.w	r8, r7, lsr #16
20000b22:	0c23      	lsrs	r3, r4, #16
20000b24:	fbbc f6f8 	udiv	r6, ip, r8
20000b28:	fa1f fe87 	uxth.w	lr, r7
20000b2c:	fb08 c116 	mls	r1, r8, r6, ip
20000b30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
20000b34:	fb06 f10e 	mul.w	r1, r6, lr
20000b38:	4299      	cmp	r1, r3
20000b3a:	d909      	bls.n	20000b50 <__udivmoddi4+0x60>
20000b3c:	18fb      	adds	r3, r7, r3
20000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
20000b42:	f080 8119 	bcs.w	20000d78 <__udivmoddi4+0x288>
20000b46:	4299      	cmp	r1, r3
20000b48:	f240 8116 	bls.w	20000d78 <__udivmoddi4+0x288>
20000b4c:	3e02      	subs	r6, #2
20000b4e:	443b      	add	r3, r7
20000b50:	1a5b      	subs	r3, r3, r1
20000b52:	b2a4      	uxth	r4, r4
20000b54:	fbb3 f0f8 	udiv	r0, r3, r8
20000b58:	fb08 3310 	mls	r3, r8, r0, r3
20000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000b60:	fb00 fe0e 	mul.w	lr, r0, lr
20000b64:	45a6      	cmp	lr, r4
20000b66:	d909      	bls.n	20000b7c <__udivmoddi4+0x8c>
20000b68:	193c      	adds	r4, r7, r4
20000b6a:	f100 33ff 	add.w	r3, r0, #4294967295
20000b6e:	f080 8105 	bcs.w	20000d7c <__udivmoddi4+0x28c>
20000b72:	45a6      	cmp	lr, r4
20000b74:	f240 8102 	bls.w	20000d7c <__udivmoddi4+0x28c>
20000b78:	3802      	subs	r0, #2
20000b7a:	443c      	add	r4, r7
20000b7c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000b80:	eba4 040e 	sub.w	r4, r4, lr
20000b84:	2600      	movs	r6, #0
20000b86:	b11d      	cbz	r5, 20000b90 <__udivmoddi4+0xa0>
20000b88:	40d4      	lsrs	r4, r2
20000b8a:	2300      	movs	r3, #0
20000b8c:	e9c5 4300 	strd	r4, r3, [r5]
20000b90:	4631      	mov	r1, r6
20000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000b96:	b902      	cbnz	r2, 20000b9a <__udivmoddi4+0xaa>
20000b98:	deff      	udf	#255	; 0xff
20000b9a:	fab2 f282 	clz	r2, r2
20000b9e:	2a00      	cmp	r2, #0
20000ba0:	d150      	bne.n	20000c44 <__udivmoddi4+0x154>
20000ba2:	1bcb      	subs	r3, r1, r7
20000ba4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
20000ba8:	fa1f f887 	uxth.w	r8, r7
20000bac:	2601      	movs	r6, #1
20000bae:	fbb3 fcfe 	udiv	ip, r3, lr
20000bb2:	0c21      	lsrs	r1, r4, #16
20000bb4:	fb0e 331c 	mls	r3, lr, ip, r3
20000bb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
20000bbc:	fb08 f30c 	mul.w	r3, r8, ip
20000bc0:	428b      	cmp	r3, r1
20000bc2:	d907      	bls.n	20000bd4 <__udivmoddi4+0xe4>
20000bc4:	1879      	adds	r1, r7, r1
20000bc6:	f10c 30ff 	add.w	r0, ip, #4294967295
20000bca:	d202      	bcs.n	20000bd2 <__udivmoddi4+0xe2>
20000bcc:	428b      	cmp	r3, r1
20000bce:	f200 80e9 	bhi.w	20000da4 <__udivmoddi4+0x2b4>
20000bd2:	4684      	mov	ip, r0
20000bd4:	1ac9      	subs	r1, r1, r3
20000bd6:	b2a3      	uxth	r3, r4
20000bd8:	fbb1 f0fe 	udiv	r0, r1, lr
20000bdc:	fb0e 1110 	mls	r1, lr, r0, r1
20000be0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
20000be4:	fb08 f800 	mul.w	r8, r8, r0
20000be8:	45a0      	cmp	r8, r4
20000bea:	d907      	bls.n	20000bfc <__udivmoddi4+0x10c>
20000bec:	193c      	adds	r4, r7, r4
20000bee:	f100 33ff 	add.w	r3, r0, #4294967295
20000bf2:	d202      	bcs.n	20000bfa <__udivmoddi4+0x10a>
20000bf4:	45a0      	cmp	r8, r4
20000bf6:	f200 80d9 	bhi.w	20000dac <__udivmoddi4+0x2bc>
20000bfa:	4618      	mov	r0, r3
20000bfc:	eba4 0408 	sub.w	r4, r4, r8
20000c00:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
20000c04:	e7bf      	b.n	20000b86 <__udivmoddi4+0x96>
20000c06:	428b      	cmp	r3, r1
20000c08:	d909      	bls.n	20000c1e <__udivmoddi4+0x12e>
20000c0a:	2d00      	cmp	r5, #0
20000c0c:	f000 80b1 	beq.w	20000d72 <__udivmoddi4+0x282>
20000c10:	2600      	movs	r6, #0
20000c12:	e9c5 0100 	strd	r0, r1, [r5]
20000c16:	4630      	mov	r0, r6
20000c18:	4631      	mov	r1, r6
20000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000c1e:	fab3 f683 	clz	r6, r3
20000c22:	2e00      	cmp	r6, #0
20000c24:	d14a      	bne.n	20000cbc <__udivmoddi4+0x1cc>
20000c26:	428b      	cmp	r3, r1
20000c28:	d302      	bcc.n	20000c30 <__udivmoddi4+0x140>
20000c2a:	4282      	cmp	r2, r0
20000c2c:	f200 80b8 	bhi.w	20000da0 <__udivmoddi4+0x2b0>
20000c30:	1a84      	subs	r4, r0, r2
20000c32:	eb61 0103 	sbc.w	r1, r1, r3
20000c36:	2001      	movs	r0, #1
20000c38:	468c      	mov	ip, r1
20000c3a:	2d00      	cmp	r5, #0
20000c3c:	d0a8      	beq.n	20000b90 <__udivmoddi4+0xa0>
20000c3e:	e9c5 4c00 	strd	r4, ip, [r5]
20000c42:	e7a5      	b.n	20000b90 <__udivmoddi4+0xa0>
20000c44:	f1c2 0320 	rsb	r3, r2, #32
20000c48:	fa20 f603 	lsr.w	r6, r0, r3
20000c4c:	4097      	lsls	r7, r2
20000c4e:	fa01 f002 	lsl.w	r0, r1, r2
20000c52:	ea4f 4e17 	mov.w	lr, r7, lsr #16
20000c56:	40d9      	lsrs	r1, r3
20000c58:	4330      	orrs	r0, r6
20000c5a:	0c03      	lsrs	r3, r0, #16
20000c5c:	fbb1 f6fe 	udiv	r6, r1, lr
20000c60:	fa1f f887 	uxth.w	r8, r7
20000c64:	fb0e 1116 	mls	r1, lr, r6, r1
20000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
20000c6c:	fb06 f108 	mul.w	r1, r6, r8
20000c70:	4299      	cmp	r1, r3
20000c72:	fa04 f402 	lsl.w	r4, r4, r2
20000c76:	d909      	bls.n	20000c8c <__udivmoddi4+0x19c>
20000c78:	18fb      	adds	r3, r7, r3
20000c7a:	f106 3cff 	add.w	ip, r6, #4294967295
20000c7e:	f080 808d 	bcs.w	20000d9c <__udivmoddi4+0x2ac>
20000c82:	4299      	cmp	r1, r3
20000c84:	f240 808a 	bls.w	20000d9c <__udivmoddi4+0x2ac>
20000c88:	3e02      	subs	r6, #2
20000c8a:	443b      	add	r3, r7
20000c8c:	1a5b      	subs	r3, r3, r1
20000c8e:	b281      	uxth	r1, r0
20000c90:	fbb3 f0fe 	udiv	r0, r3, lr
20000c94:	fb0e 3310 	mls	r3, lr, r0, r3
20000c98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
20000c9c:	fb00 f308 	mul.w	r3, r0, r8
20000ca0:	428b      	cmp	r3, r1
20000ca2:	d907      	bls.n	20000cb4 <__udivmoddi4+0x1c4>
20000ca4:	1879      	adds	r1, r7, r1
20000ca6:	f100 3cff 	add.w	ip, r0, #4294967295
20000caa:	d273      	bcs.n	20000d94 <__udivmoddi4+0x2a4>
20000cac:	428b      	cmp	r3, r1
20000cae:	d971      	bls.n	20000d94 <__udivmoddi4+0x2a4>
20000cb0:	3802      	subs	r0, #2
20000cb2:	4439      	add	r1, r7
20000cb4:	1acb      	subs	r3, r1, r3
20000cb6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
20000cba:	e778      	b.n	20000bae <__udivmoddi4+0xbe>
20000cbc:	f1c6 0c20 	rsb	ip, r6, #32
20000cc0:	fa03 f406 	lsl.w	r4, r3, r6
20000cc4:	fa22 f30c 	lsr.w	r3, r2, ip
20000cc8:	431c      	orrs	r4, r3
20000cca:	fa20 f70c 	lsr.w	r7, r0, ip
20000cce:	fa01 f306 	lsl.w	r3, r1, r6
20000cd2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
20000cd6:	fa21 f10c 	lsr.w	r1, r1, ip
20000cda:	431f      	orrs	r7, r3
20000cdc:	0c3b      	lsrs	r3, r7, #16
20000cde:	fbb1 f9fe 	udiv	r9, r1, lr
20000ce2:	fa1f f884 	uxth.w	r8, r4
20000ce6:	fb0e 1119 	mls	r1, lr, r9, r1
20000cea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
20000cee:	fb09 fa08 	mul.w	sl, r9, r8
20000cf2:	458a      	cmp	sl, r1
20000cf4:	fa02 f206 	lsl.w	r2, r2, r6
20000cf8:	fa00 f306 	lsl.w	r3, r0, r6
20000cfc:	d908      	bls.n	20000d10 <__udivmoddi4+0x220>
20000cfe:	1861      	adds	r1, r4, r1
20000d00:	f109 30ff 	add.w	r0, r9, #4294967295
20000d04:	d248      	bcs.n	20000d98 <__udivmoddi4+0x2a8>
20000d06:	458a      	cmp	sl, r1
20000d08:	d946      	bls.n	20000d98 <__udivmoddi4+0x2a8>
20000d0a:	f1a9 0902 	sub.w	r9, r9, #2
20000d0e:	4421      	add	r1, r4
20000d10:	eba1 010a 	sub.w	r1, r1, sl
20000d14:	b2bf      	uxth	r7, r7
20000d16:	fbb1 f0fe 	udiv	r0, r1, lr
20000d1a:	fb0e 1110 	mls	r1, lr, r0, r1
20000d1e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
20000d22:	fb00 f808 	mul.w	r8, r0, r8
20000d26:	45b8      	cmp	r8, r7
20000d28:	d907      	bls.n	20000d3a <__udivmoddi4+0x24a>
20000d2a:	19e7      	adds	r7, r4, r7
20000d2c:	f100 31ff 	add.w	r1, r0, #4294967295
20000d30:	d22e      	bcs.n	20000d90 <__udivmoddi4+0x2a0>
20000d32:	45b8      	cmp	r8, r7
20000d34:	d92c      	bls.n	20000d90 <__udivmoddi4+0x2a0>
20000d36:	3802      	subs	r0, #2
20000d38:	4427      	add	r7, r4
20000d3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
20000d3e:	eba7 0708 	sub.w	r7, r7, r8
20000d42:	fba0 8902 	umull	r8, r9, r0, r2
20000d46:	454f      	cmp	r7, r9
20000d48:	46c6      	mov	lr, r8
20000d4a:	4649      	mov	r1, r9
20000d4c:	d31a      	bcc.n	20000d84 <__udivmoddi4+0x294>
20000d4e:	d017      	beq.n	20000d80 <__udivmoddi4+0x290>
20000d50:	b15d      	cbz	r5, 20000d6a <__udivmoddi4+0x27a>
20000d52:	ebb3 020e 	subs.w	r2, r3, lr
20000d56:	eb67 0701 	sbc.w	r7, r7, r1
20000d5a:	fa07 fc0c 	lsl.w	ip, r7, ip
20000d5e:	40f2      	lsrs	r2, r6
20000d60:	ea4c 0202 	orr.w	r2, ip, r2
20000d64:	40f7      	lsrs	r7, r6
20000d66:	e9c5 2700 	strd	r2, r7, [r5]
20000d6a:	2600      	movs	r6, #0
20000d6c:	4631      	mov	r1, r6
20000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000d72:	462e      	mov	r6, r5
20000d74:	4628      	mov	r0, r5
20000d76:	e70b      	b.n	20000b90 <__udivmoddi4+0xa0>
20000d78:	4606      	mov	r6, r0
20000d7a:	e6e9      	b.n	20000b50 <__udivmoddi4+0x60>
20000d7c:	4618      	mov	r0, r3
20000d7e:	e6fd      	b.n	20000b7c <__udivmoddi4+0x8c>
20000d80:	4543      	cmp	r3, r8
20000d82:	d2e5      	bcs.n	20000d50 <__udivmoddi4+0x260>
20000d84:	ebb8 0e02 	subs.w	lr, r8, r2
20000d88:	eb69 0104 	sbc.w	r1, r9, r4
20000d8c:	3801      	subs	r0, #1
20000d8e:	e7df      	b.n	20000d50 <__udivmoddi4+0x260>
20000d90:	4608      	mov	r0, r1
20000d92:	e7d2      	b.n	20000d3a <__udivmoddi4+0x24a>
20000d94:	4660      	mov	r0, ip
20000d96:	e78d      	b.n	20000cb4 <__udivmoddi4+0x1c4>
20000d98:	4681      	mov	r9, r0
20000d9a:	e7b9      	b.n	20000d10 <__udivmoddi4+0x220>
20000d9c:	4666      	mov	r6, ip
20000d9e:	e775      	b.n	20000c8c <__udivmoddi4+0x19c>
20000da0:	4630      	mov	r0, r6
20000da2:	e74a      	b.n	20000c3a <__udivmoddi4+0x14a>
20000da4:	f1ac 0c02 	sub.w	ip, ip, #2
20000da8:	4439      	add	r1, r7
20000daa:	e713      	b.n	20000bd4 <__udivmoddi4+0xe4>
20000dac:	3802      	subs	r0, #2
20000dae:	443c      	add	r4, r7
20000db0:	e724      	b.n	20000bfc <__udivmoddi4+0x10c>
20000db2:	bf00      	nop

20000db4 <__aeabi_idiv0>:
20000db4:	4770      	bx	lr
20000db6:	bf00      	nop

20000db8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
20000db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
20000dbc:	4b2d      	ldr	r3, [pc, #180]	; (20000e74 <MX_GPIO_Init+0xbc>)
{
20000dbe:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000dc0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_ERROR_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
20000dc2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 20000e7c <MX_GPIO_Init+0xc4>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
20000dc6:	4d2c      	ldr	r5, [pc, #176]	; (20000e78 <MX_GPIO_Init+0xc0>)
  HAL_GPIO_WritePin(GPIOE, LED_ERROR_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
20000dc8:	210c      	movs	r1, #12
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000dca:	9407      	str	r4, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, LED_ERROR_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
20000dcc:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000dce:	9406      	str	r4, [sp, #24]

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_ERROR_Pin|LED_RUN_Pin;
20000dd0:	2600      	movs	r6, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000dd2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = LED_ERROR_Pin|LED_RUN_Pin;
20000dd4:	2700      	movs	r7, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000dd6:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
20000dda:	6b18      	ldr	r0, [r3, #48]	; 0x30
20000ddc:	f040 0010 	orr.w	r0, r0, #16
20000de0:	6318      	str	r0, [r3, #48]	; 0x30
20000de2:	6b18      	ldr	r0, [r3, #48]	; 0x30
20000de4:	f000 0010 	and.w	r0, r0, #16
20000de8:	9001      	str	r0, [sp, #4]
20000dea:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
20000dec:	6b18      	ldr	r0, [r3, #48]	; 0x30
20000dee:	f040 0020 	orr.w	r0, r0, #32
20000df2:	6318      	str	r0, [r3, #48]	; 0x30
20000df4:	6b18      	ldr	r0, [r3, #48]	; 0x30
20000df6:	f000 0020 	and.w	r0, r0, #32
20000dfa:	9002      	str	r0, [sp, #8]
20000dfc:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
20000dfe:	6b18      	ldr	r0, [r3, #48]	; 0x30
20000e00:	f040 0002 	orr.w	r0, r0, #2
20000e04:	6318      	str	r0, [r3, #48]	; 0x30
20000e06:	6b18      	ldr	r0, [r3, #48]	; 0x30
20000e08:	f000 0002 	and.w	r0, r0, #2
20000e0c:	9003      	str	r0, [sp, #12]
20000e0e:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20000e10:	6b18      	ldr	r0, [r3, #48]	; 0x30
20000e12:	f040 0001 	orr.w	r0, r0, #1
20000e16:	6318      	str	r0, [r3, #48]	; 0x30
20000e18:	6b18      	ldr	r0, [r3, #48]	; 0x30
20000e1a:	f000 0001 	and.w	r0, r0, #1
20000e1e:	9004      	str	r0, [sp, #16]
20000e20:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
20000e22:	6b18      	ldr	r0, [r3, #48]	; 0x30
20000e24:	f440 7080 	orr.w	r0, r0, #256	; 0x100
20000e28:	6318      	str	r0, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LED_ERROR_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
20000e2a:	4640      	mov	r0, r8
  __HAL_RCC_GPIOI_CLK_ENABLE();
20000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
20000e32:	9305      	str	r3, [sp, #20]
20000e34:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOE, LED_ERROR_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
20000e36:	f002 fea5 	bl	20003b84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
20000e3a:	4622      	mov	r2, r4
20000e3c:	4628      	mov	r0, r5
20000e3e:	2180      	movs	r1, #128	; 0x80
20000e40:	f002 fea0 	bl	20003b84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_ERROR_Pin|LED_RUN_Pin;
20000e44:	220c      	movs	r2, #12
20000e46:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
20000e48:	4640      	mov	r0, r8
20000e4a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LED_ERROR_Pin|LED_RUN_Pin;
20000e4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
20000e50:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
20000e54:	f002 fcae 	bl	200037b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OK_Pin;
20000e58:	2280      	movs	r2, #128	; 0x80
20000e5a:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_OK_GPIO_Port, &GPIO_InitStruct);
20000e5c:	a906      	add	r1, sp, #24
20000e5e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LED_OK_Pin;
20000e60:	e9cd 6708 	strd	r6, r7, [sp, #32]
20000e64:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(LED_OK_GPIO_Port, &GPIO_InitStruct);
20000e68:	f002 fca4 	bl	200037b4 <HAL_GPIO_Init>

}
20000e6c:	b00c      	add	sp, #48	; 0x30
20000e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20000e72:	bf00      	nop
20000e74:	40023800 	.word	0x40023800
20000e78:	40022000 	.word	0x40022000
20000e7c:	40021000 	.word	0x40021000

20000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20000e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20000e84:	2300      	movs	r3, #0
{
20000e86:	b097      	sub	sp, #92	; 0x5c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20000e88:	4a29      	ldr	r2, [pc, #164]	; (20000f30 <SystemClock_Config+0xb0>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
20000e8a:	2102      	movs	r1, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20000e8c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
20000e8e:	2501      	movs	r5, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20000e90:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
20000e92:	2410      	movs	r4, #16
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20000e94:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20000e96:	2602      	movs	r6, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20000e98:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20000e9a:	2700      	movs	r7, #0
20000e9c:	f04f 0808 	mov.w	r8, #8
20000ea0:	f04f 09d8 	mov.w	r9, #216	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20000ea4:	a808      	add	r0, sp, #32
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20000ea6:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20000eaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
20000eae:	e9cd 3304 	strd	r3, r3, [sp, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
20000eb2:	6c13      	ldr	r3, [r2, #64]	; 0x40
20000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20000eb8:	6413      	str	r3, [r2, #64]	; 0x40
20000eba:	6c12      	ldr	r2, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20000ebc:	4b1d      	ldr	r3, [pc, #116]	; (20000f34 <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
20000ebe:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
20000ec2:	9200      	str	r2, [sp, #0]
20000ec4:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20000ec6:	681a      	ldr	r2, [r3, #0]
20000ec8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
20000ecc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20000ece:	2202      	movs	r2, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20000ed0:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
20000ed2:	9108      	str	r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20000ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLR = 2;
20000ed8:	9114      	str	r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
20000eda:	950b      	str	r5, [sp, #44]	; 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20000edc:	9301      	str	r3, [sp, #4]
20000ede:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20000ee0:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
20000ee2:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20000ee4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
20000ee8:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
20000eec:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20000ef0:	f008 f87e 	bl	20008ff0 <HAL_RCC_OscConfig>
20000ef4:	b108      	cbz	r0, 20000efa <SystemClock_Config+0x7a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
20000ef6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
20000ef8:	e7fe      	b.n	20000ef8 <SystemClock_Config+0x78>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
20000efa:	f006 fe0f 	bl	20007b1c <HAL_PWREx_EnableOverDrive>
20000efe:	b108      	cbz	r0, 20000f04 <SystemClock_Config+0x84>
20000f00:	b672      	cpsid	i
	while(1)
20000f02:	e7fe      	b.n	20000f02 <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20000f04:	240f      	movs	r4, #15
20000f06:	2502      	movs	r5, #2
20000f08:	2200      	movs	r2, #0
20000f0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
20000f0e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
20000f12:	a802      	add	r0, sp, #8
20000f14:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
20000f16:	9606      	str	r6, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20000f18:	e9cd 4502 	strd	r4, r5, [sp, #8]
20000f1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
20000f20:	f008 fa68 	bl	200093f4 <HAL_RCC_ClockConfig>
20000f24:	b108      	cbz	r0, 20000f2a <SystemClock_Config+0xaa>
20000f26:	b672      	cpsid	i
	while(1)
20000f28:	e7fe      	b.n	20000f28 <SystemClock_Config+0xa8>
}
20000f2a:	b017      	add	sp, #92	; 0x5c
20000f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
20000f30:	40023800 	.word	0x40023800
20000f34:	40007000 	.word	0x40007000

20000f38 <main>:
{
20000f38:	b508      	push	{r3, lr}
  HAL_Init();
20000f3a:	f000 fb9d 	bl	20001678 <HAL_Init>
  SystemClock_Config();
20000f3e:	f7ff ff9f 	bl	20000e80 <SystemClock_Config>
  MX_GPIO_Init();
20000f42:	f7ff ff39 	bl	20000db8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
20000f46:	f000 f805 	bl	20000f54 <MX_QUADSPI_Init>
  BSP_QSPI_Init();
20000f4a:	f009 f9e9 	bl	2000a320 <BSP_QSPI_Init>
  while (1)
20000f4e:	e7fe      	b.n	20000f4e <main+0x16>

20000f50 <Error_Handler>:
20000f50:	b672      	cpsid	i
	while(1)
20000f52:	e7fe      	b.n	20000f52 <Error_Handler+0x2>

20000f54 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
20000f54:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
20000f56:	480c      	ldr	r0, [pc, #48]	; (20000f88 <MX_QUADSPI_Init+0x34>)
  hqspi.Init.ClockPrescaler = 1;
20000f58:	2501      	movs	r5, #1
  hqspi.Instance = QUADSPI;
20000f5a:	4b0c      	ldr	r3, [pc, #48]	; (20000f8c <MX_QUADSPI_Init+0x38>)
  hqspi.Init.FifoThreshold = 32;
20000f5c:	2420      	movs	r4, #32
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
20000f5e:	2110      	movs	r1, #16
  hqspi.Init.FlashSize = 25-1;
20000f60:	2218      	movs	r2, #24
  hqspi.Instance = QUADSPI;
20000f62:	6003      	str	r3, [r0, #0]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
20000f64:	2300      	movs	r3, #0
  hqspi.Init.FifoThreshold = 32;
20000f66:	e9c0 5401 	strd	r5, r4, [r0, #4]
  hqspi.Init.FlashSize = 25-1;
20000f6a:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
20000f6e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
20000f72:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
20000f76:	f006 fff9 	bl	20007f6c <HAL_QSPI_Init>
20000f7a:	b900      	cbnz	r0, 20000f7e <MX_QUADSPI_Init+0x2a>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
20000f7c:	bd38      	pop	{r3, r4, r5, pc}
20000f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
20000f82:	f7ff bfe5 	b.w	20000f50 <Error_Handler>
20000f86:	bf00      	nop
20000f88:	20000428 	.word	0x20000428
20000f8c:	a0001000 	.word	0xa0001000

20000f90 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(qspiHandle->Instance==QUADSPI)
20000f90:	4a2c      	ldr	r2, [pc, #176]	; (20001044 <HAL_QSPI_MspInit+0xb4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000f92:	2300      	movs	r3, #0
  if(qspiHandle->Instance==QUADSPI)
20000f94:	6801      	ldr	r1, [r0, #0]
{
20000f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(qspiHandle->Instance==QUADSPI)
20000f9a:	4291      	cmp	r1, r2
{
20000f9c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000f9e:	e9cd 3304 	strd	r3, r3, [sp, #16]
20000fa2:	e9cd 3306 	strd	r3, r3, [sp, #24]
20000fa6:	9308      	str	r3, [sp, #32]
  if(qspiHandle->Instance==QUADSPI)
20000fa8:	d002      	beq.n	20000fb0 <HAL_QSPI_MspInit+0x20>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
20000faa:	b00a      	add	sp, #40	; 0x28
20000fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_QSPI_CLK_ENABLE();
20000fb0:	4b25      	ldr	r3, [pc, #148]	; (20001048 <HAL_QSPI_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
20000fb2:	2400      	movs	r4, #0
20000fb4:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
20000fb6:	f04f 0809 	mov.w	r8, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
20000fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
20000fbc:	26c0      	movs	r6, #192	; 0xc0
20000fbe:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
20000fc0:	a904      	add	r1, sp, #16
    __HAL_RCC_QSPI_CLK_ENABLE();
20000fc2:	f042 0202 	orr.w	r2, r2, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
20000fc6:	4821      	ldr	r0, [pc, #132]	; (2000104c <HAL_QSPI_MspInit+0xbc>)
    __HAL_RCC_QSPI_CLK_ENABLE();
20000fc8:	639a      	str	r2, [r3, #56]	; 0x38
20000fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000fcc:	f002 0202 	and.w	r2, r2, #2
20000fd0:	9201      	str	r2, [sp, #4]
20000fd2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
20000fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000fd6:	f042 0220 	orr.w	r2, r2, #32
20000fda:	631a      	str	r2, [r3, #48]	; 0x30
20000fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000fde:	f002 0220 	and.w	r2, r2, #32
20000fe2:	9202      	str	r2, [sp, #8]
20000fe4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20000fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000fe8:	f042 0202 	orr.w	r2, r2, #2
20000fec:	631a      	str	r2, [r3, #48]	; 0x30
20000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
20000ff0:	f8cd 8020 	str.w	r8, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20000ff4:	f003 0302 	and.w	r3, r3, #2
20000ff8:	9303      	str	r3, [sp, #12]
20000ffa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
20000ffc:	e9cd 6704 	strd	r6, r7, [sp, #16]
20001000:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
20001004:	f44f 7640 	mov.w	r6, #768	; 0x300
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
20001008:	f002 fbd4 	bl	200037b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
2000100c:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
2000100e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
20001010:	a904      	add	r1, sp, #16
20001012:	480e      	ldr	r0, [pc, #56]	; (2000104c <HAL_QSPI_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
20001014:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
20001016:	e9cd 4506 	strd	r4, r5, [sp, #24]
2000101a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
2000101e:	f002 fbc9 	bl	200037b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
20001022:	f240 4204 	movw	r2, #1028	; 0x404
20001026:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20001028:	a904      	add	r1, sp, #16
2000102a:	4809      	ldr	r0, [pc, #36]	; (20001050 <HAL_QSPI_MspInit+0xc0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
2000102c:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
20001030:	e9cd 4506 	strd	r4, r5, [sp, #24]
20001034:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20001038:	f002 fbbc 	bl	200037b4 <HAL_GPIO_Init>
}
2000103c:	b00a      	add	sp, #40	; 0x28
2000103e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20001042:	bf00      	nop
20001044:	a0001000 	.word	0xa0001000
20001048:	40023800 	.word	0x40023800
2000104c:	40021400 	.word	0x40021400
20001050:	40020400 	.word	0x40020400

20001054 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{

  if(qspiHandle->Instance==QUADSPI)
20001054:	6802      	ldr	r2, [r0, #0]
{
20001056:	b508      	push	{r3, lr}
  if(qspiHandle->Instance==QUADSPI)
20001058:	4b0a      	ldr	r3, [pc, #40]	; (20001084 <HAL_QSPI_MspDeInit+0x30>)
2000105a:	429a      	cmp	r2, r3
2000105c:	d000      	beq.n	20001060 <HAL_QSPI_MspDeInit+0xc>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
2000105e:	bd08      	pop	{r3, pc}
    __HAL_RCC_QSPI_CLK_DISABLE();
20001060:	4a09      	ldr	r2, [pc, #36]	; (20001088 <HAL_QSPI_MspDeInit+0x34>)
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
20001062:	f44f 7170 	mov.w	r1, #960	; 0x3c0
20001066:	4809      	ldr	r0, [pc, #36]	; (2000108c <HAL_QSPI_MspDeInit+0x38>)
    __HAL_RCC_QSPI_CLK_DISABLE();
20001068:	6b93      	ldr	r3, [r2, #56]	; 0x38
2000106a:	f023 0302 	bic.w	r3, r3, #2
2000106e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
20001070:	f002 fcc0 	bl	200039f4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_10);
20001074:	f240 4104 	movw	r1, #1028	; 0x404
20001078:	4805      	ldr	r0, [pc, #20]	; (20001090 <HAL_QSPI_MspDeInit+0x3c>)
}
2000107a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_10);
2000107e:	f002 bcb9 	b.w	200039f4 <HAL_GPIO_DeInit>
20001082:	bf00      	nop
20001084:	a0001000 	.word	0xa0001000
20001088:	40023800 	.word	0x40023800
2000108c:	40021400 	.word	0x40021400
20001090:	40020400 	.word	0x40020400

20001094 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
20001094:	4b0a      	ldr	r3, [pc, #40]	; (200010c0 <HAL_MspInit+0x2c>)
{
20001096:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
20001098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2000109a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2000109e:	641a      	str	r2, [r3, #64]	; 0x40
200010a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
200010a2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
200010a6:	9200      	str	r2, [sp, #0]
200010a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
200010aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200010ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200010b0:	645a      	str	r2, [r3, #68]	; 0x44
200010b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200010b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
200010b8:	9301      	str	r3, [sp, #4]
200010ba:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
200010bc:	b002      	add	sp, #8
200010be:	4770      	bx	lr
200010c0:	40023800 	.word	0x40023800

200010c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
200010c4:	e7fe      	b.n	200010c4 <NMI_Handler>
200010c6:	bf00      	nop

200010c8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
200010c8:	e7fe      	b.n	200010c8 <HardFault_Handler>
200010ca:	bf00      	nop

200010cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
200010cc:	e7fe      	b.n	200010cc <MemManage_Handler>
200010ce:	bf00      	nop

200010d0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
200010d0:	e7fe      	b.n	200010d0 <BusFault_Handler>
200010d2:	bf00      	nop

200010d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
200010d4:	e7fe      	b.n	200010d4 <UsageFault_Handler>
200010d6:	bf00      	nop

200010d8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
200010d8:	4770      	bx	lr
200010da:	bf00      	nop

200010dc <DebugMon_Handler>:
200010dc:	4770      	bx	lr
200010de:	bf00      	nop

200010e0 <PendSV_Handler>:
200010e0:	4770      	bx	lr
200010e2:	bf00      	nop

200010e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
200010e4:	f000 bad4 	b.w	20001690 <HAL_IncTick>

200010e8 <initialise_monitor_handles>:


/* Functions */
void initialise_monitor_handles()
{
}
200010e8:	4770      	bx	lr
200010ea:	bf00      	nop

200010ec <_getpid>:

int _getpid(void)
{
	return 1;
}
200010ec:	2001      	movs	r0, #1
200010ee:	4770      	bx	lr

200010f0 <_kill>:

int _kill(int pid, int sig)
{
200010f0:	b508      	push	{r3, lr}
	errno = EINVAL;
200010f2:	f009 fc01 	bl	2000a8f8 <__errno>
200010f6:	2216      	movs	r2, #22
200010f8:	4603      	mov	r3, r0
	return -1;
}
200010fa:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
200010fe:	601a      	str	r2, [r3, #0]
}
20001100:	bd08      	pop	{r3, pc}
20001102:	bf00      	nop

20001104 <_exit>:

void _exit (int status)
{
20001104:	b508      	push	{r3, lr}
	errno = EINVAL;
20001106:	f009 fbf7 	bl	2000a8f8 <__errno>
2000110a:	2316      	movs	r3, #22
2000110c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
2000110e:	e7fe      	b.n	2000110e <_exit+0xa>

20001110 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
20001110:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
20001112:	1e16      	subs	r6, r2, #0
20001114:	dd07      	ble.n	20001126 <_read+0x16>
20001116:	460c      	mov	r4, r1
20001118:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
2000111a:	f3af 8000 	nop.w
2000111e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
20001122:	42a5      	cmp	r5, r4
20001124:	d1f9      	bne.n	2000111a <_read+0xa>
	}

return len;
}
20001126:	4630      	mov	r0, r6
20001128:	bd70      	pop	{r4, r5, r6, pc}
2000112a:	bf00      	nop

2000112c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
2000112c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
2000112e:	1e16      	subs	r6, r2, #0
20001130:	dd07      	ble.n	20001142 <_write+0x16>
20001132:	460c      	mov	r4, r1
20001134:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
20001136:	f814 0b01 	ldrb.w	r0, [r4], #1
2000113a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
2000113e:	42ac      	cmp	r4, r5
20001140:	d1f9      	bne.n	20001136 <_write+0xa>
	}
	return len;
}
20001142:	4630      	mov	r0, r6
20001144:	bd70      	pop	{r4, r5, r6, pc}
20001146:	bf00      	nop

20001148 <_close>:

int _close(int file)
{
	return -1;
}
20001148:	f04f 30ff 	mov.w	r0, #4294967295
2000114c:	4770      	bx	lr
2000114e:	bf00      	nop

20001150 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
20001150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
20001154:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
20001156:	604b      	str	r3, [r1, #4]
}
20001158:	4770      	bx	lr
2000115a:	bf00      	nop

2000115c <_isatty>:

int _isatty(int file)
{
	return 1;
}
2000115c:	2001      	movs	r0, #1
2000115e:	4770      	bx	lr

20001160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
20001160:	2000      	movs	r0, #0
20001162:	4770      	bx	lr

20001164 <_open>:

int _open(char *path, int flags, ...)
{
	/* Pretend like we always fail */
	return -1;
}
20001164:	f04f 30ff 	mov.w	r0, #4294967295
{
20001168:	b40e      	push	{r1, r2, r3}
}
2000116a:	b003      	add	sp, #12
2000116c:	4770      	bx	lr
2000116e:	bf00      	nop

20001170 <_wait>:

int _wait(int *status)
{
20001170:	b508      	push	{r3, lr}
	errno = ECHILD;
20001172:	f009 fbc1 	bl	2000a8f8 <__errno>
20001176:	220a      	movs	r2, #10
20001178:	4603      	mov	r3, r0
	return -1;
}
2000117a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = ECHILD;
2000117e:	601a      	str	r2, [r3, #0]
}
20001180:	bd08      	pop	{r3, pc}
20001182:	bf00      	nop

20001184 <_unlink>:

int _unlink(char *name)
{
20001184:	b508      	push	{r3, lr}
	errno = ENOENT;
20001186:	f009 fbb7 	bl	2000a8f8 <__errno>
2000118a:	2202      	movs	r2, #2
2000118c:	4603      	mov	r3, r0
	return -1;
}
2000118e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = ENOENT;
20001192:	601a      	str	r2, [r3, #0]
}
20001194:	bd08      	pop	{r3, pc}
20001196:	bf00      	nop

20001198 <_times>:

int _times(struct tms *buf)
{
	return -1;
}
20001198:	f04f 30ff 	mov.w	r0, #4294967295
2000119c:	4770      	bx	lr
2000119e:	bf00      	nop

200011a0 <_stat>:

int _stat(char *file, struct stat *st)
{
	st->st_mode = S_IFCHR;
200011a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
200011a4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
200011a6:	604b      	str	r3, [r1, #4]
}
200011a8:	4770      	bx	lr
200011aa:	bf00      	nop

200011ac <_link>:

int _link(char *old, char *new)
{
200011ac:	b508      	push	{r3, lr}
	errno = EMLINK;
200011ae:	f009 fba3 	bl	2000a8f8 <__errno>
200011b2:	221f      	movs	r2, #31
200011b4:	4603      	mov	r3, r0
	return -1;
}
200011b6:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EMLINK;
200011ba:	601a      	str	r2, [r3, #0]
}
200011bc:	bd08      	pop	{r3, pc}
200011be:	bf00      	nop

200011c0 <_fork>:

int _fork(void)
{
200011c0:	b508      	push	{r3, lr}
	errno = EAGAIN;
200011c2:	f009 fb99 	bl	2000a8f8 <__errno>
200011c6:	220b      	movs	r2, #11
200011c8:	4603      	mov	r3, r0
	return -1;
}
200011ca:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EAGAIN;
200011ce:	601a      	str	r2, [r3, #0]
}
200011d0:	bd08      	pop	{r3, pc}
200011d2:	bf00      	nop

200011d4 <_execve>:

int _execve(char *name, char **argv, char **env)
{
200011d4:	b508      	push	{r3, lr}
	errno = ENOMEM;
200011d6:	f009 fb8f 	bl	2000a8f8 <__errno>
200011da:	220c      	movs	r2, #12
200011dc:	4603      	mov	r3, r0
	return -1;
}
200011de:	f04f 30ff 	mov.w	r0, #4294967295
	errno = ENOMEM;
200011e2:	601a      	str	r2, [r3, #0]
}
200011e4:	bd08      	pop	{r3, pc}
200011e6:	bf00      	nop

200011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
200011e8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
200011ea:	4c0d      	ldr	r4, [pc, #52]	; (20001220 <_sbrk+0x38>)
{
200011ec:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
200011ee:	490d      	ldr	r1, [pc, #52]	; (20001224 <_sbrk+0x3c>)
200011f0:	480d      	ldr	r0, [pc, #52]	; (20001228 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
200011f2:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
200011f4:	1a09      	subs	r1, r1, r0
  if (NULL == __sbrk_heap_end)
200011f6:	b12a      	cbz	r2, 20001204 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
200011f8:	4413      	add	r3, r2
200011fa:	428b      	cmp	r3, r1
200011fc:	d808      	bhi.n	20001210 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
200011fe:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
20001200:	6023      	str	r3, [r4, #0]
}
20001202:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
20001204:	4809      	ldr	r0, [pc, #36]	; (2000122c <_sbrk+0x44>)
20001206:	4602      	mov	r2, r0
20001208:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
2000120a:	4413      	add	r3, r2
2000120c:	428b      	cmp	r3, r1
2000120e:	d9f6      	bls.n	200011fe <_sbrk+0x16>
    errno = ENOMEM;
20001210:	f009 fb72 	bl	2000a8f8 <__errno>
20001214:	230c      	movs	r3, #12
    return (void *)-1;
20001216:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
2000121a:	6003      	str	r3, [r0, #0]
}
2000121c:	4610      	mov	r0, r2
2000121e:	bd10      	pop	{r4, pc}
20001220:	20000418 	.word	0x20000418
20001224:	20080004 	.word	0x20080004
20001228:	00000800 	.word	0x00000800
2000122c:	2000fef4 	.word	0x2000fef4

20001230 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20001230:	4a03      	ldr	r2, [pc, #12]	; (20001240 <SystemInit+0x10>)
20001232:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
20001236:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
2000123a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
2000123e:	4770      	bx	lr
20001240:	e000ed00 	.word	0xe000ed00

20001244 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20001244:	4a16      	ldr	r2, [pc, #88]	; (200012a0 <SystemCoreClockUpdate+0x5c>)
20001246:	6893      	ldr	r3, [r2, #8]
20001248:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
2000124c:	2b04      	cmp	r3, #4
2000124e:	d00c      	beq.n	2000126a <SystemCoreClockUpdate+0x26>
20001250:	2b08      	cmp	r3, #8
20001252:	d00c      	beq.n	2000126e <SystemCoreClockUpdate+0x2a>
20001254:	4b13      	ldr	r3, [pc, #76]	; (200012a4 <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
20001256:	4a12      	ldr	r2, [pc, #72]	; (200012a0 <SystemCoreClockUpdate+0x5c>)
20001258:	4813      	ldr	r0, [pc, #76]	; (200012a8 <SystemCoreClockUpdate+0x64>)
2000125a:	6892      	ldr	r2, [r2, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
2000125c:	4913      	ldr	r1, [pc, #76]	; (200012ac <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
2000125e:	f3c2 1203 	ubfx	r2, r2, #4, #4
20001262:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
20001264:	40d3      	lsrs	r3, r2
20001266:	600b      	str	r3, [r1, #0]
}
20001268:	4770      	bx	lr
  switch (tmp)
2000126a:	4b11      	ldr	r3, [pc, #68]	; (200012b0 <SystemCoreClockUpdate+0x6c>)
2000126c:	e7f3      	b.n	20001256 <SystemCoreClockUpdate+0x12>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
2000126e:	6850      	ldr	r0, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20001270:	6851      	ldr	r1, [r2, #4]
      if (pllsource != 0)
20001272:	0243      	lsls	r3, r0, #9
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20001274:	6852      	ldr	r2, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20001276:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000127a:	bf48      	it	mi
2000127c:	4b0c      	ldrmi	r3, [pc, #48]	; (200012b0 <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
2000127e:	f3c2 1288 	ubfx	r2, r2, #6, #9
20001282:	bf58      	it	pl
20001284:	4b07      	ldrpl	r3, [pc, #28]	; (200012a4 <SystemCoreClockUpdate+0x60>)
20001286:	fbb3 f3f1 	udiv	r3, r3, r1
2000128a:	fb03 f302 	mul.w	r3, r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
2000128e:	4a04      	ldr	r2, [pc, #16]	; (200012a0 <SystemCoreClockUpdate+0x5c>)
20001290:	6852      	ldr	r2, [r2, #4]
20001292:	f3c2 4201 	ubfx	r2, r2, #16, #2
20001296:	3201      	adds	r2, #1
20001298:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
2000129a:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
2000129e:	e7da      	b.n	20001256 <SystemCoreClockUpdate+0x12>
200012a0:	40023800 	.word	0x40023800
200012a4:	00f42400 	.word	0x00f42400
200012a8:	2000f9f8 	.word	0x2000f9f8
200012ac:	20000218 	.word	0x20000218
200012b0:	017d7840 	.word	0x017d7840

200012b4 <Init>:
 * @param  None
 * @retval  LOADER_OK = 1   : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Init(void)
{
200012b4:	b538      	push	{r3, r4, r5, lr}

//*(uint32_t*) 0xE000EDF0 = 0xA05F0000;//enable interrupts in debug

	SystemInit();
200012b6:	f7ff ffbb 	bl	20001230 <SystemInit>

//	SCB->VTOR = 0x20000000 | 0x200;

//	__set_PRIMASK(0);//enable interrupts

	HAL_Init();
200012ba:	f000 f9dd 	bl	20001678 <HAL_Init>

	SystemClock_Config();
200012be:	f7ff fddf 	bl	20000e80 <SystemClock_Config>

	MX_GPIO_Init();
200012c2:	f7ff fd79 	bl	20000db8 <MX_GPIO_Init>

	__HAL_RCC_QSPI_FORCE_RESET();//completely reset peripheral
200012c6:	4b1f      	ldr	r3, [pc, #124]	; (20001344 <Init+0x90>)
	__HAL_RCC_QSPI_RELEASE_RESET();

	if(HAL_QSPI_DeInit(&hqspi) != HAL_OK)
200012c8:	481f      	ldr	r0, [pc, #124]	; (20001348 <Init+0x94>)
	__HAL_RCC_QSPI_FORCE_RESET();//completely reset peripheral
200012ca:	699a      	ldr	r2, [r3, #24]
200012cc:	f042 0202 	orr.w	r2, r2, #2
200012d0:	619a      	str	r2, [r3, #24]
	__HAL_RCC_QSPI_RELEASE_RESET();
200012d2:	699a      	ldr	r2, [r3, #24]
200012d4:	f022 0202 	bic.w	r2, r2, #2
200012d8:	619a      	str	r2, [r3, #24]
	if(HAL_QSPI_DeInit(&hqspi) != HAL_OK)
200012da:	f006 fead 	bl	20008038 <HAL_QSPI_DeInit>
200012de:	bb08      	cbnz	r0, 20001324 <Init+0x70>
	{
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
		return LOADER_FAIL;
	}

	MX_QUADSPI_Init();
200012e0:	4604      	mov	r4, r0
200012e2:	f7ff fe37 	bl	20000f54 <MX_QUADSPI_Init>
	if(BSP_QSPI_Init() != QSPI_OK)
200012e6:	f009 f81b 	bl	2000a320 <BSP_QSPI_Init>
200012ea:	4605      	mov	r5, r0
200012ec:	b988      	cbnz	r0, 20001312 <Init+0x5e>
		__set_PRIMASK(1);//disable interrupts
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
		return LOADER_FAIL;
	}

	if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
200012ee:	4816      	ldr	r0, [pc, #88]	; (20001348 <Init+0x94>)
200012f0:	f007 fd02 	bl	20008cf8 <HAL_QSPI_Abort>
200012f4:	4604      	mov	r4, r0
200012f6:	b9e0      	cbnz	r0, 20001332 <Init+0x7e>
		__set_PRIMASK(1);//disable interrupts
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
		return LOADER_FAIL;
	}

	if(BSP_QSPI_MemoryMappedMode() != QSPI_OK)
200012f8:	f009 fa90 	bl	2000a81c <BSP_QSPI_MemoryMappedMode>
200012fc:	b948      	cbnz	r0, 20001312 <Init+0x5e>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200012fe:	2401      	movs	r4, #1
20001300:	f384 8810 	msr	PRIMASK, r4
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
		return LOADER_FAIL;
	}

	__set_PRIMASK(1);//disable interrupts
	HAL_GPIO_WritePin(LED_RUN_GPIO_Port, LED_RUN_Pin, GPIO_PIN_SET);
20001304:	2108      	movs	r1, #8
20001306:	4622      	mov	r2, r4
20001308:	4810      	ldr	r0, [pc, #64]	; (2000134c <Init+0x98>)
2000130a:	f002 fc3b 	bl	20003b84 <HAL_GPIO_WritePin>
	return LOADER_OK;
2000130e:	4620      	mov	r0, r4
}
20001310:	bd38      	pop	{r3, r4, r5, pc}
20001312:	2201      	movs	r2, #1
20001314:	f382 8810 	msr	PRIMASK, r2
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
20001318:	2104      	movs	r1, #4
2000131a:	480c      	ldr	r0, [pc, #48]	; (2000134c <Init+0x98>)
2000131c:	f002 fc32 	bl	20003b84 <HAL_GPIO_WritePin>
		return LOADER_FAIL;
20001320:	4620      	mov	r0, r4
}
20001322:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
20001324:	2201      	movs	r2, #1
20001326:	2104      	movs	r1, #4
20001328:	4808      	ldr	r0, [pc, #32]	; (2000134c <Init+0x98>)
2000132a:	f002 fc2b 	bl	20003b84 <HAL_GPIO_WritePin>
		return LOADER_FAIL;
2000132e:	2000      	movs	r0, #0
}
20001330:	bd38      	pop	{r3, r4, r5, pc}
20001332:	2201      	movs	r2, #1
20001334:	f382 8810 	msr	PRIMASK, r2
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
20001338:	2104      	movs	r1, #4
2000133a:	4804      	ldr	r0, [pc, #16]	; (2000134c <Init+0x98>)
2000133c:	f002 fc22 	bl	20003b84 <HAL_GPIO_WritePin>
		return LOADER_FAIL;
20001340:	4628      	mov	r0, r5
}
20001342:	bd38      	pop	{r3, r4, r5, pc}
20001344:	40023800 	.word	0x40023800
20001348:	20000428 	.word	0x20000428
2000134c:	40021000 	.word	0x40021000

20001350 <Write>:
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Write(uint32_t Address , uint32_t Size , uint8_t *buffer)
{
20001350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001352:	4613      	mov	r3, r2
20001354:	4606      	mov	r6, r0
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
20001356:	2200      	movs	r2, #0
20001358:	4814      	ldr	r0, [pc, #80]	; (200013ac <Write+0x5c>)
{
2000135a:	460f      	mov	r7, r1
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
2000135c:	2180      	movs	r1, #128	; 0x80
{
2000135e:	461d      	mov	r5, r3
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
20001360:	f002 fc10 	bl	20003b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
20001364:	4812      	ldr	r0, [pc, #72]	; (200013b0 <Write+0x60>)
20001366:	2200      	movs	r2, #0
20001368:	2104      	movs	r1, #4
2000136a:	f002 fc0b 	bl	20003b84 <HAL_GPIO_WritePin>
//	__set_PRIMASK(0);//enable interrupts

	if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
2000136e:	4811      	ldr	r0, [pc, #68]	; (200013b4 <Write+0x64>)
20001370:	f007 fcc2 	bl	20008cf8 <HAL_QSPI_Abort>
20001374:	b980      	cbnz	r0, 20001398 <Write+0x48>
		__set_PRIMASK(1);//disable interrupts
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
		return LOADER_FAIL;
	}

	if(BSP_QSPI_Write((uint8_t*) buffer, (Address & (0x0fffffff)), Size) != QSPI_OK)
20001376:	463a      	mov	r2, r7
20001378:	f026 4170 	bic.w	r1, r6, #4026531840	; 0xf0000000
2000137c:	4628      	mov	r0, r5
2000137e:	f009 f8a9 	bl	2000a4d4 <BSP_QSPI_Write>
20001382:	b948      	cbnz	r0, 20001398 <Write+0x48>
20001384:	2401      	movs	r4, #1
20001386:	f384 8810 	msr	PRIMASK, r4
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
		return LOADER_FAIL;
	}

	__set_PRIMASK(1);//disable interrupts
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_SET);
2000138a:	2180      	movs	r1, #128	; 0x80
2000138c:	4622      	mov	r2, r4
2000138e:	4807      	ldr	r0, [pc, #28]	; (200013ac <Write+0x5c>)
20001390:	f002 fbf8 	bl	20003b84 <HAL_GPIO_WritePin>
	return LOADER_OK;
20001394:	4620      	mov	r0, r4
}
20001396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001398:	2201      	movs	r2, #1
2000139a:	f382 8810 	msr	PRIMASK, r2
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
2000139e:	2104      	movs	r1, #4
200013a0:	4803      	ldr	r0, [pc, #12]	; (200013b0 <Write+0x60>)
200013a2:	f002 fbef 	bl	20003b84 <HAL_GPIO_WritePin>
		return LOADER_FAIL;
200013a6:	2000      	movs	r0, #0
}
200013a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200013aa:	bf00      	nop
200013ac:	40022000 	.word	0x40022000
200013b0:	40021000 	.word	0x40021000
200013b4:	20000428 	.word	0x20000428

200013b8 <SectorErase>:
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int SectorErase(uint32_t EraseStartAddress , uint32_t EraseEndAddress)
{
200013b8:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
200013ba:	2200      	movs	r2, #0
{
200013bc:	4605      	mov	r5, r0
200013be:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
200013c0:	4812      	ldr	r0, [pc, #72]	; (2000140c <SectorErase+0x54>)
200013c2:	2180      	movs	r1, #128	; 0x80
200013c4:	f002 fbde 	bl	20003b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
200013c8:	4811      	ldr	r0, [pc, #68]	; (20001410 <SectorErase+0x58>)
200013ca:	2200      	movs	r2, #0
200013cc:	2104      	movs	r1, #4
200013ce:	f002 fbd9 	bl	20003b84 <HAL_GPIO_WritePin>
//	__set_PRIMASK(0);//enable interrupts

	if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
200013d2:	4810      	ldr	r0, [pc, #64]	; (20001414 <SectorErase+0x5c>)
200013d4:	f007 fc90 	bl	20008cf8 <HAL_QSPI_Abort>
200013d8:	b970      	cbnz	r0, 200013f8 <SectorErase+0x40>
		__set_PRIMASK(1);//disable interrupts
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
		return LOADER_FAIL;
	}

	if(BSP_QSPI_Erase_Sector(EraseStartAddress, EraseEndAddress) != QSPI_OK)
200013da:	4631      	mov	r1, r6
200013dc:	4628      	mov	r0, r5
200013de:	f009 f8f7 	bl	2000a5d0 <BSP_QSPI_Erase_Sector>
200013e2:	b948      	cbnz	r0, 200013f8 <SectorErase+0x40>
200013e4:	2401      	movs	r4, #1
200013e6:	f384 8810 	msr	PRIMASK, r4
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
		return LOADER_FAIL;
	}

	__set_PRIMASK(1);//disable interrupts
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_SET);
200013ea:	2180      	movs	r1, #128	; 0x80
200013ec:	4622      	mov	r2, r4
200013ee:	4807      	ldr	r0, [pc, #28]	; (2000140c <SectorErase+0x54>)
200013f0:	f002 fbc8 	bl	20003b84 <HAL_GPIO_WritePin>
	return LOADER_OK;
200013f4:	4620      	mov	r0, r4
}
200013f6:	bd70      	pop	{r4, r5, r6, pc}
200013f8:	2201      	movs	r2, #1
200013fa:	f382 8810 	msr	PRIMASK, r2
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
200013fe:	2104      	movs	r1, #4
20001400:	4803      	ldr	r0, [pc, #12]	; (20001410 <SectorErase+0x58>)
20001402:	f002 fbbf 	bl	20003b84 <HAL_GPIO_WritePin>
		return LOADER_FAIL;
20001406:	2000      	movs	r0, #0
}
20001408:	bd70      	pop	{r4, r5, r6, pc}
2000140a:	bf00      	nop
2000140c:	40022000 	.word	0x40022000
20001410:	40021000 	.word	0x40021000
20001414:	20000428 	.word	0x20000428

20001418 <MassErase>:
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int MassErase(void)
{
20001418:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
2000141a:	2200      	movs	r2, #0
2000141c:	2180      	movs	r1, #128	; 0x80
2000141e:	4811      	ldr	r0, [pc, #68]	; (20001464 <MassErase+0x4c>)
20001420:	f002 fbb0 	bl	20003b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
20001424:	4810      	ldr	r0, [pc, #64]	; (20001468 <MassErase+0x50>)
20001426:	2200      	movs	r2, #0
20001428:	2104      	movs	r1, #4
2000142a:	f002 fbab 	bl	20003b84 <HAL_GPIO_WritePin>
//	__set_PRIMASK(0);//enable interrupts

	if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
2000142e:	480f      	ldr	r0, [pc, #60]	; (2000146c <MassErase+0x54>)
20001430:	f007 fc62 	bl	20008cf8 <HAL_QSPI_Abort>
20001434:	b960      	cbnz	r0, 20001450 <MassErase+0x38>
		__set_PRIMASK(1);//disable interrupts
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
		return LOADER_FAIL;
	}

	if(BSP_QSPI_Erase_Chip() != QSPI_OK)
20001436:	f009 f935 	bl	2000a6a4 <BSP_QSPI_Erase_Chip>
2000143a:	b948      	cbnz	r0, 20001450 <MassErase+0x38>
2000143c:	2401      	movs	r4, #1
2000143e:	f384 8810 	msr	PRIMASK, r4
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
		return LOADER_FAIL;
	}

	__set_PRIMASK(1);//disable interrupts
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_SET);
20001442:	2180      	movs	r1, #128	; 0x80
20001444:	4622      	mov	r2, r4
20001446:	4807      	ldr	r0, [pc, #28]	; (20001464 <MassErase+0x4c>)
20001448:	f002 fb9c 	bl	20003b84 <HAL_GPIO_WritePin>
	return LOADER_OK;
2000144c:	4620      	mov	r0, r4
}
2000144e:	bd10      	pop	{r4, pc}
20001450:	2201      	movs	r2, #1
20001452:	f382 8810 	msr	PRIMASK, r2
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
20001456:	2104      	movs	r1, #4
20001458:	4803      	ldr	r0, [pc, #12]	; (20001468 <MassErase+0x50>)
2000145a:	f002 fb93 	bl	20003b84 <HAL_GPIO_WritePin>
		return LOADER_FAIL;
2000145e:	2000      	movs	r0, #0
}
20001460:	bd10      	pop	{r4, pc}
20001462:	bf00      	nop
20001464:	40022000 	.word	0x40022000
20001468:	40021000 	.word	0x40021000
2000146c:	20000428 	.word	0x20000428

20001470 <CheckSum>:
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t CheckSum(uint32_t StartAddress , uint32_t Size , uint32_t InitVal)
{
20001470:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t missalignementAddress = StartAddress % 4;
20001472:	f000 0303 	and.w	r3, r0, #3
	uint8_t missalignementSize = Size;
	int cnt;
	uint32_t Val;

	StartAddress -= StartAddress % 4;
20001476:	f020 0503 	bic.w	r5, r0, #3
	Size += (Size % 4 == 0) ? 0 : 4 - (Size % 4);
2000147a:	f011 0003 	ands.w	r0, r1, #3
	uint8_t missalignementSize = Size;
2000147e:	b2cf      	uxtb	r7, r1
	Size += (Size % 4 == 0) ? 0 : 4 - (Size % 4);
20001480:	d001      	beq.n	20001486 <CheckSum+0x16>
20001482:	3104      	adds	r1, #4
20001484:	1a09      	subs	r1, r1, r0

	for(cnt = 0 ; cnt < Size ; cnt += 4)
20001486:	2900      	cmp	r1, #0
20001488:	d062      	beq.n	20001550 <CheckSum+0xe0>
	{
		Val = *(uint32_t*) StartAddress;
2000148a:	682e      	ldr	r6, [r5, #0]
		if(missalignementAddress)
2000148c:	b3e3      	cbz	r3, 20001508 <CheckSum+0x98>
		{
			switch(missalignementAddress)
2000148e:	2b02      	cmp	r3, #2
20001490:	eb02 6016 	add.w	r0, r2, r6, lsr #24
20001494:	d034      	beq.n	20001500 <CheckSum+0x90>
20001496:	2b03      	cmp	r3, #3
20001498:	d005      	beq.n	200014a6 <CheckSum+0x36>
			{
				case 1:
					InitVal += (uint8_t) (Val >> 8 & 0xff);
					InitVal += (uint8_t) (Val >> 16 & 0xff);
					InitVal += (uint8_t) (Val >> 24 & 0xff);
2000149a:	f3c6 2207 	ubfx	r2, r6, #8, #8
2000149e:	f3c6 4407 	ubfx	r4, r6, #16, #8
200014a2:	4410      	add	r0, r2
200014a4:	4420      	add	r0, r4
	for(cnt = 0 ; cnt < Size ; cnt += 4)
200014a6:	2904      	cmp	r1, #4
			InitVal += (uint8_t) Val;
			InitVal += (uint8_t) (Val >> 8 & 0xff);
			InitVal += (uint8_t) (Val >> 16 & 0xff);
			InitVal += (uint8_t) (Val >> 24 & 0xff);
		}
		StartAddress += 4;
200014a8:	f105 0504 	add.w	r5, r5, #4
	for(cnt = 0 ; cnt < Size ; cnt += 4)
200014ac:	d927      	bls.n	200014fe <CheckSum+0x8e>
200014ae:	2304      	movs	r3, #4
		Val = *(uint32_t*) StartAddress;
200014b0:	682e      	ldr	r6, [r5, #0]
	for(cnt = 0 ; cnt < Size ; cnt += 4)
200014b2:	461a      	mov	r2, r3
200014b4:	1aed      	subs	r5, r5, r3
200014b6:	eba1 0c07 	sub.w	ip, r1, r7
200014ba:	3304      	adds	r3, #4
200014bc:	e010      	b.n	200014e0 <CheckSum+0x70>
		else if((Size - missalignementSize) % 4 && (Size - cnt) <= 4)
200014be:	1a8a      	subs	r2, r1, r2
200014c0:	2a04      	cmp	r2, #4
200014c2:	d810      	bhi.n	200014e6 <CheckSum+0x76>
			switch(Size - missalignementSize)
200014c4:	f1bc 0f02 	cmp.w	ip, #2
200014c8:	d038      	beq.n	2000153c <CheckSum+0xcc>
200014ca:	f1bc 0f03 	cmp.w	ip, #3
200014ce:	d02e      	beq.n	2000152e <CheckSum+0xbe>
200014d0:	f1bc 0f01 	cmp.w	ip, #1
200014d4:	d01b      	beq.n	2000150e <CheckSum+0x9e>
	for(cnt = 0 ; cnt < Size ; cnt += 4)
200014d6:	428b      	cmp	r3, r1
200014d8:	d211      	bcs.n	200014fe <CheckSum+0x8e>
		Val = *(uint32_t*) StartAddress;
200014da:	58ee      	ldr	r6, [r5, r3]
	for(cnt = 0 ; cnt < Size ; cnt += 4)
200014dc:	461a      	mov	r2, r3
200014de:	3304      	adds	r3, #4
		else if((Size - missalignementSize) % 4 && (Size - cnt) <= 4)
200014e0:	f01c 0f03 	tst.w	ip, #3
200014e4:	d1eb      	bne.n	200014be <CheckSum+0x4e>
			InitVal += (uint8_t) (Val >> 24 & 0xff);
200014e6:	b2f4      	uxtb	r4, r6
200014e8:	f3c6 2e07 	ubfx	lr, r6, #8, #8
200014ec:	f3c6 4207 	ubfx	r2, r6, #16, #8
	for(cnt = 0 ; cnt < Size ; cnt += 4)
200014f0:	428b      	cmp	r3, r1
200014f2:	eb04 6416 	add.w	r4, r4, r6, lsr #24
200014f6:	4420      	add	r0, r4
200014f8:	4470      	add	r0, lr
			InitVal += (uint8_t) (Val >> 24 & 0xff);
200014fa:	4410      	add	r0, r2
	for(cnt = 0 ; cnt < Size ; cnt += 4)
200014fc:	d3ed      	bcc.n	200014da <CheckSum+0x6a>
	}
	return (InitVal);
}
200014fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
					InitVal += (uint8_t) (Val >> 24 & 0xff);
20001500:	f3c6 4407 	ubfx	r4, r6, #16, #8
20001504:	4420      	add	r0, r4
					break;
20001506:	e7ce      	b.n	200014a6 <CheckSum+0x36>
		if(missalignementAddress)
20001508:	4610      	mov	r0, r2
	for(cnt = 0 ; cnt < Size ; cnt += 4)
2000150a:	461a      	mov	r2, r3
2000150c:	e7d2      	b.n	200014b4 <CheckSum+0x44>
					InitVal += (uint8_t) Val;
2000150e:	fa50 f086 	uxtab	r0, r0, r6
					InitVal += (uint8_t) (Val >> 8 & 0xff);
20001512:	f3c6 2207 	ubfx	r2, r6, #8, #8
					missalignementSize -= 1;
20001516:	3f01      	subs	r7, #1
					InitVal += (uint8_t) (Val >> 16 & 0xff);
20001518:	f3c6 4407 	ubfx	r4, r6, #16, #8
					InitVal += (uint8_t) (Val >> 8 & 0xff);
2000151c:	4410      	add	r0, r2
	for(cnt = 0 ; cnt < Size ; cnt += 4)
2000151e:	428b      	cmp	r3, r1
					missalignementSize -= 1;
20001520:	b2ff      	uxtb	r7, r7
					InitVal += (uint8_t) (Val >> 16 & 0xff);
20001522:	4420      	add	r0, r4
	for(cnt = 0 ; cnt < Size ; cnt += 4)
20001524:	d2eb      	bcs.n	200014fe <CheckSum+0x8e>
		Val = *(uint32_t*) StartAddress;
20001526:	58ee      	ldr	r6, [r5, r3]
		if(missalignementAddress)
20001528:	eba1 0c07 	sub.w	ip, r1, r7
2000152c:	e7d6      	b.n	200014dc <CheckSum+0x6c>
					missalignementSize -= 3;
2000152e:	3f03      	subs	r7, #3
	for(cnt = 0 ; cnt < Size ; cnt += 4)
20001530:	428b      	cmp	r3, r1
					InitVal += (uint8_t) Val;
20001532:	fa50 f086 	uxtab	r0, r0, r6
					missalignementSize -= 3;
20001536:	b2ff      	uxtb	r7, r7
	for(cnt = 0 ; cnt < Size ; cnt += 4)
20001538:	d3f5      	bcc.n	20001526 <CheckSum+0xb6>
}
2000153a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					InitVal += (uint8_t) Val;
2000153c:	fa50 f086 	uxtab	r0, r0, r6
					InitVal += (uint8_t) (Val >> 8 & 0xff);
20001540:	f3c6 2407 	ubfx	r4, r6, #8, #8
					missalignementSize -= 2;
20001544:	3f02      	subs	r7, #2
	for(cnt = 0 ; cnt < Size ; cnt += 4)
20001546:	428b      	cmp	r3, r1
					InitVal += (uint8_t) (Val >> 8 & 0xff);
20001548:	4420      	add	r0, r4
					missalignementSize -= 2;
2000154a:	b2ff      	uxtb	r7, r7
	for(cnt = 0 ; cnt < Size ; cnt += 4)
2000154c:	d3eb      	bcc.n	20001526 <CheckSum+0xb6>
}
2000154e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(cnt = 0 ; cnt < Size ; cnt += 4)
20001550:	4610      	mov	r0, r2
}
20001552:	bdf0      	pop	{r4, r5, r6, r7, pc}

20001554 <Verify>:
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t Verify(uint32_t MemoryAddr , uint32_t RAMBufferAddr , uint32_t Size ,
				uint32_t missalignement)
{
20001554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20001558:	4607      	mov	r7, r0
2000155a:	4688      	mov	r8, r1
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
2000155c:	4825      	ldr	r0, [pc, #148]	; (200015f4 <Verify+0xa0>)
2000155e:	2180      	movs	r1, #128	; 0x80
{
20001560:	4616      	mov	r6, r2
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
20001562:	2200      	movs	r2, #0
{
20001564:	461d      	mov	r5, r3
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
20001566:	f002 fb0d 	bl	20003b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
2000156a:	2200      	movs	r2, #0
2000156c:	2104      	movs	r1, #4
2000156e:	4822      	ldr	r0, [pc, #136]	; (200015f8 <Verify+0xa4>)
20001570:	f002 fb08 	bl	20003b84 <HAL_GPIO_WritePin>
//	__set_PRIMASK(0);//enable interrupts
	uint32_t VerifiedData = 0, InitVal = 0;
	uint64_t checksum;
	Size *= 4;

	if(BSP_QSPI_MemoryMappedMode() != QSPI_OK)
20001574:	f009 f952 	bl	2000a81c <BSP_QSPI_MemoryMappedMode>
20001578:	bb88      	cbnz	r0, 200015de <Verify+0x8a>
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
		return LOADER_FAIL;
	}

	checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf), Size
								- ((missalignement >> 16) & 0xF), InitVal);
2000157a:	f3c5 4103 	ubfx	r1, r5, #16, #4
2000157e:	00b6      	lsls	r6, r6, #2
	checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf), Size
20001580:	f005 050f 	and.w	r5, r5, #15
20001584:	4602      	mov	r2, r0
20001586:	4604      	mov	r4, r0
20001588:	1a71      	subs	r1, r6, r1
2000158a:	19e8      	adds	r0, r5, r7
2000158c:	f7ff ff70 	bl	20001470 <CheckSum>
20001590:	4681      	mov	r9, r0
	while(Size > VerifiedData)
20001592:	b1ce      	cbz	r6, 200015c8 <Verify+0x74>
20001594:	1c7a      	adds	r2, r7, #1
20001596:	e002      	b.n	2000159e <Verify+0x4a>
		{
			__set_PRIMASK(1);//disable interrupts
			HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
			return ((checksum << 32) + (MemoryAddr + VerifiedData));
		}
		VerifiedData++;
20001598:	3401      	adds	r4, #1
	while(Size > VerifiedData)
2000159a:	42a6      	cmp	r6, r4
2000159c:	d014      	beq.n	200015c8 <Verify+0x74>
		if(*(uint8_t*) MemoryAddr++ != *((uint8_t*) RAMBufferAddr + VerifiedData))
2000159e:	5d3d      	ldrb	r5, [r7, r4]
200015a0:	eb02 0a04 	add.w	sl, r2, r4
200015a4:	f818 3004 	ldrb.w	r3, [r8, r4]
200015a8:	429d      	cmp	r5, r3
200015aa:	d0f5      	beq.n	20001598 <Verify+0x44>
200015ac:	2201      	movs	r2, #1
200015ae:	f382 8810 	msr	PRIMASK, r2
			HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
200015b2:	2104      	movs	r1, #4
200015b4:	4810      	ldr	r0, [pc, #64]	; (200015f8 <Verify+0xa4>)
200015b6:	f002 fae5 	bl	20003b84 <HAL_GPIO_WritePin>
			return ((checksum << 32) + (MemoryAddr + VerifiedData));
200015ba:	4454      	add	r4, sl
200015bc:	2000      	movs	r0, #0
200015be:	1900      	adds	r0, r0, r4
200015c0:	f149 0100 	adc.w	r1, r9, #0
	}

	__set_PRIMASK(1);//disable interrupts
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_SET);
	return (checksum << 32);
}
200015c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200015c8:	2201      	movs	r2, #1
200015ca:	f382 8810 	msr	PRIMASK, r2
	HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_SET);
200015ce:	2180      	movs	r1, #128	; 0x80
200015d0:	4808      	ldr	r0, [pc, #32]	; (200015f4 <Verify+0xa0>)
200015d2:	f002 fad7 	bl	20003b84 <HAL_GPIO_WritePin>
	return (checksum << 32);
200015d6:	2000      	movs	r0, #0
200015d8:	4649      	mov	r1, r9
}
200015da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200015de:	2201      	movs	r2, #1
200015e0:	f382 8810 	msr	PRIMASK, r2
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
200015e4:	2104      	movs	r1, #4
200015e6:	4804      	ldr	r0, [pc, #16]	; (200015f8 <Verify+0xa4>)
200015e8:	f002 facc 	bl	20003b84 <HAL_GPIO_WritePin>
		return LOADER_FAIL;
200015ec:	2000      	movs	r0, #0
200015ee:	2100      	movs	r1, #0
}
200015f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200015f4:	40022000 	.word	0x40022000
200015f8:	40021000 	.word	0x40021000
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
200015fc:	4770      	bx	lr
200015fe:	bf00      	nop

20001600 <HAL_MspDeInit>:
20001600:	4770      	bx	lr
20001602:	bf00      	nop

20001604 <HAL_DeInit>:
{
20001604:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
20001606:	4b09      	ldr	r3, [pc, #36]	; (2000162c <HAL_DeInit+0x28>)
20001608:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
2000160c:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
2000160e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
20001610:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
20001612:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
20001614:	625c      	str	r4, [r3, #36]	; 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
20001616:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
20001618:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
2000161a:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
2000161c:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
2000161e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
20001620:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
20001622:	f7ff ffed 	bl	20001600 <HAL_MspDeInit>
}
20001626:	4620      	mov	r0, r4
20001628:	bd10      	pop	{r4, pc}
2000162a:	bf00      	nop
2000162c:	40023800 	.word	0x40023800

20001630 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20001630:	490e      	ldr	r1, [pc, #56]	; (2000166c <HAL_InitTick+0x3c>)
20001632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
20001636:	4a0e      	ldr	r2, [pc, #56]	; (20001670 <HAL_InitTick+0x40>)
{
20001638:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
2000163a:	7809      	ldrb	r1, [r1, #0]
{
2000163c:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
2000163e:	6812      	ldr	r2, [r2, #0]
20001640:	fbb3 f3f1 	udiv	r3, r3, r1
20001644:	fbb2 f0f3 	udiv	r0, r2, r3
20001648:	f000 f97c 	bl	20001944 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2000164c:	b908      	cbnz	r0, 20001652 <HAL_InitTick+0x22>
2000164e:	2c0f      	cmp	r4, #15
20001650:	d901      	bls.n	20001656 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
20001652:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
20001654:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20001656:	2200      	movs	r2, #0
20001658:	4621      	mov	r1, r4
2000165a:	f04f 30ff 	mov.w	r0, #4294967295
2000165e:	f000 f903 	bl	20001868 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20001662:	4b04      	ldr	r3, [pc, #16]	; (20001674 <HAL_InitTick+0x44>)
20001664:	2000      	movs	r0, #0
20001666:	601c      	str	r4, [r3, #0]
}
20001668:	bd10      	pop	{r4, pc}
2000166a:	bf00      	nop
2000166c:	2000021c 	.word	0x2000021c
20001670:	20000218 	.word	0x20000218
20001674:	20000220 	.word	0x20000220

20001678 <HAL_Init>:
{
20001678:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000167a:	2003      	movs	r0, #3
2000167c:	f000 f8e0 	bl	20001840 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
20001680:	200f      	movs	r0, #15
20001682:	f7ff ffd5 	bl	20001630 <HAL_InitTick>
  HAL_MspInit();
20001686:	f7ff fd05 	bl	20001094 <HAL_MspInit>
}
2000168a:	2000      	movs	r0, #0
2000168c:	bd08      	pop	{r3, pc}
2000168e:	bf00      	nop

20001690 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
20001690:	4a03      	ldr	r2, [pc, #12]	; (200016a0 <HAL_IncTick+0x10>)
20001692:	4b04      	ldr	r3, [pc, #16]	; (200016a4 <HAL_IncTick+0x14>)
20001694:	6811      	ldr	r1, [r2, #0]
20001696:	781b      	ldrb	r3, [r3, #0]
20001698:	440b      	add	r3, r1
2000169a:	6013      	str	r3, [r2, #0]
}
2000169c:	4770      	bx	lr
2000169e:	bf00      	nop
200016a0:	20000474 	.word	0x20000474
200016a4:	2000021c 	.word	0x2000021c

200016a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
200016a8:	4b01      	ldr	r3, [pc, #4]	; (200016b0 <HAL_GetTick+0x8>)
200016aa:	6818      	ldr	r0, [r3, #0]
}
200016ac:	4770      	bx	lr
200016ae:	bf00      	nop
200016b0:	20000474 	.word	0x20000474

200016b4 <HAL_GetTickPrio>:
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
200016b4:	4b01      	ldr	r3, [pc, #4]	; (200016bc <HAL_GetTickPrio+0x8>)
}
200016b6:	6818      	ldr	r0, [r3, #0]
200016b8:	4770      	bx	lr
200016ba:	bf00      	nop
200016bc:	20000220 	.word	0x20000220

200016c0 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
200016c0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
200016c2:	4c07      	ldr	r4, [pc, #28]	; (200016e0 <HAL_SetTickFreq+0x20>)
200016c4:	7825      	ldrb	r5, [r4, #0]
200016c6:	4285      	cmp	r5, r0
200016c8:	d101      	bne.n	200016ce <HAL_SetTickFreq+0xe>
  HAL_StatusTypeDef status  = HAL_OK;
200016ca:	2000      	movs	r0, #0
      uwTickFreq = prevTickFreq;
    }
  }

  return status;
}
200016cc:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_InitTick(uwTickPrio);
200016ce:	4b05      	ldr	r3, [pc, #20]	; (200016e4 <HAL_SetTickFreq+0x24>)
    uwTickFreq = Freq;
200016d0:	7020      	strb	r0, [r4, #0]
    status = HAL_InitTick(uwTickPrio);
200016d2:	6818      	ldr	r0, [r3, #0]
200016d4:	f7ff ffac 	bl	20001630 <HAL_InitTick>
    if (status != HAL_OK)
200016d8:	2800      	cmp	r0, #0
200016da:	d0f7      	beq.n	200016cc <HAL_SetTickFreq+0xc>
      uwTickFreq = prevTickFreq;
200016dc:	7025      	strb	r5, [r4, #0]
}
200016de:	bd38      	pop	{r3, r4, r5, pc}
200016e0:	2000021c 	.word	0x2000021c
200016e4:	20000220 	.word	0x20000220

200016e8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
200016e8:	4b01      	ldr	r3, [pc, #4]	; (200016f0 <HAL_GetTickFreq+0x8>)
}
200016ea:	7818      	ldrb	r0, [r3, #0]
200016ec:	4770      	bx	lr
200016ee:	bf00      	nop
200016f0:	2000021c 	.word	0x2000021c

200016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
200016f4:	b538      	push	{r3, r4, r5, lr}
200016f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
200016f8:	f7ff ffd6 	bl	200016a8 <HAL_GetTick>
200016fc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
200016fe:	1c63      	adds	r3, r4, #1
20001700:	d002      	beq.n	20001708 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
20001702:	4b04      	ldr	r3, [pc, #16]	; (20001714 <HAL_Delay+0x20>)
20001704:	781b      	ldrb	r3, [r3, #0]
20001706:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
20001708:	f7ff ffce 	bl	200016a8 <HAL_GetTick>
2000170c:	1b43      	subs	r3, r0, r5
2000170e:	42a3      	cmp	r3, r4
20001710:	d3fa      	bcc.n	20001708 <HAL_Delay+0x14>
  {
  }
}
20001712:	bd38      	pop	{r3, r4, r5, pc}
20001714:	2000021c 	.word	0x2000021c

20001718 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
20001718:	4a02      	ldr	r2, [pc, #8]	; (20001724 <HAL_SuspendTick+0xc>)
2000171a:	6813      	ldr	r3, [r2, #0]
2000171c:	f023 0302 	bic.w	r3, r3, #2
20001720:	6013      	str	r3, [r2, #0]
}
20001722:	4770      	bx	lr
20001724:	e000e010 	.word	0xe000e010

20001728 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
20001728:	4a02      	ldr	r2, [pc, #8]	; (20001734 <HAL_ResumeTick+0xc>)
2000172a:	6813      	ldr	r3, [r2, #0]
2000172c:	f043 0302 	orr.w	r3, r3, #2
20001730:	6013      	str	r3, [r2, #0]
}
20001732:	4770      	bx	lr
20001734:	e000e010 	.word	0xe000e010

20001738 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F7xx_HAL_VERSION;
}
20001738:	4800      	ldr	r0, [pc, #0]	; (2000173c <HAL_GetHalVersion+0x4>)
2000173a:	4770      	bx	lr
2000173c:	01020900 	.word	0x01020900

20001740 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
20001740:	4b01      	ldr	r3, [pc, #4]	; (20001748 <HAL_GetREVID+0x8>)
20001742:	6818      	ldr	r0, [r3, #0]
}
20001744:	0c00      	lsrs	r0, r0, #16
20001746:	4770      	bx	lr
20001748:	e0042000 	.word	0xe0042000

2000174c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
2000174c:	4b02      	ldr	r3, [pc, #8]	; (20001758 <HAL_GetDEVID+0xc>)
2000174e:	6818      	ldr	r0, [r3, #0]
}
20001750:	f3c0 000b 	ubfx	r0, r0, #0, #12
20001754:	4770      	bx	lr
20001756:	bf00      	nop
20001758:	e0042000 	.word	0xe0042000

2000175c <HAL_GetUIDw0>:
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
   return(READ_REG(*((uint32_t *)UID_BASE)));
2000175c:	4b01      	ldr	r3, [pc, #4]	; (20001764 <HAL_GetUIDw0+0x8>)
}
2000175e:	6818      	ldr	r0, [r3, #0]
20001760:	4770      	bx	lr
20001762:	bf00      	nop
20001764:	1ff0f420 	.word	0x1ff0f420

20001768 <HAL_GetUIDw1>:
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
20001768:	4b01      	ldr	r3, [pc, #4]	; (20001770 <HAL_GetUIDw1+0x8>)
}
2000176a:	6818      	ldr	r0, [r3, #0]
2000176c:	4770      	bx	lr
2000176e:	bf00      	nop
20001770:	1ff0f424 	.word	0x1ff0f424

20001774 <HAL_GetUIDw2>:
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
20001774:	4b01      	ldr	r3, [pc, #4]	; (2000177c <HAL_GetUIDw2+0x8>)
}
20001776:	6818      	ldr	r0, [r3, #0]
20001778:	4770      	bx	lr
2000177a:	bf00      	nop
2000177c:	1ff0f428 	.word	0x1ff0f428

20001780 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20001780:	4a02      	ldr	r2, [pc, #8]	; (2000178c <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
20001782:	6853      	ldr	r3, [r2, #4]
20001784:	f043 0301 	orr.w	r3, r3, #1
20001788:	6053      	str	r3, [r2, #4]
}
2000178a:	4770      	bx	lr
2000178c:	e0042000 	.word	0xe0042000

20001790 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20001790:	4a02      	ldr	r2, [pc, #8]	; (2000179c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
20001792:	6853      	ldr	r3, [r2, #4]
20001794:	f023 0301 	bic.w	r3, r3, #1
20001798:	6053      	str	r3, [r2, #4]
}
2000179a:	4770      	bx	lr
2000179c:	e0042000 	.word	0xe0042000

200017a0 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
200017a0:	4a02      	ldr	r2, [pc, #8]	; (200017ac <HAL_DBGMCU_EnableDBGStopMode+0xc>)
200017a2:	6853      	ldr	r3, [r2, #4]
200017a4:	f043 0302 	orr.w	r3, r3, #2
200017a8:	6053      	str	r3, [r2, #4]
}
200017aa:	4770      	bx	lr
200017ac:	e0042000 	.word	0xe0042000

200017b0 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
200017b0:	4a02      	ldr	r2, [pc, #8]	; (200017bc <HAL_DBGMCU_DisableDBGStopMode+0xc>)
200017b2:	6853      	ldr	r3, [r2, #4]
200017b4:	f023 0302 	bic.w	r3, r3, #2
200017b8:	6053      	str	r3, [r2, #4]
}
200017ba:	4770      	bx	lr
200017bc:	e0042000 	.word	0xe0042000

200017c0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
200017c0:	4a02      	ldr	r2, [pc, #8]	; (200017cc <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
200017c2:	6853      	ldr	r3, [r2, #4]
200017c4:	f043 0304 	orr.w	r3, r3, #4
200017c8:	6053      	str	r3, [r2, #4]
}
200017ca:	4770      	bx	lr
200017cc:	e0042000 	.word	0xe0042000

200017d0 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
200017d0:	4a02      	ldr	r2, [pc, #8]	; (200017dc <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
200017d2:	6853      	ldr	r3, [r2, #4]
200017d4:	f023 0304 	bic.w	r3, r3, #4
200017d8:	6053      	str	r3, [r2, #4]
}
200017da:	4770      	bx	lr
200017dc:	e0042000 	.word	0xe0042000

200017e0 <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
200017e0:	4a02      	ldr	r2, [pc, #8]	; (200017ec <HAL_EnableCompensationCell+0xc>)
200017e2:	6a13      	ldr	r3, [r2, #32]
200017e4:	f043 0301 	orr.w	r3, r3, #1
200017e8:	6213      	str	r3, [r2, #32]
}
200017ea:	4770      	bx	lr
200017ec:	40013800 	.word	0x40013800

200017f0 <HAL_DisableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
  SYSCFG->CMPCR &= (uint32_t)~((uint32_t)SYSCFG_CMPCR_CMP_PD);
200017f0:	4a02      	ldr	r2, [pc, #8]	; (200017fc <HAL_DisableCompensationCell+0xc>)
200017f2:	6a13      	ldr	r3, [r2, #32]
200017f4:	f023 0301 	bic.w	r3, r3, #1
200017f8:	6213      	str	r3, [r2, #32]
}
200017fa:	4770      	bx	lr
200017fc:	40013800 	.word	0x40013800

20001800 <HAL_EnableFMCMemorySwapping>:
  *
  * @retval None
  */
void HAL_EnableFMCMemorySwapping(void)
{
  SYSCFG->MEMRMP |= SYSCFG_MEMRMP_SWP_FMC_0;
20001800:	4a02      	ldr	r2, [pc, #8]	; (2000180c <HAL_EnableFMCMemorySwapping+0xc>)
20001802:	6813      	ldr	r3, [r2, #0]
20001804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20001808:	6013      	str	r3, [r2, #0]
}
2000180a:	4770      	bx	lr
2000180c:	40013800 	.word	0x40013800

20001810 <HAL_DisableFMCMemorySwapping>:
  * @retval None
  */
void HAL_DisableFMCMemorySwapping(void)
{

  SYSCFG->MEMRMP &= (uint32_t)~((uint32_t)SYSCFG_MEMRMP_SWP_FMC);
20001810:	4a02      	ldr	r2, [pc, #8]	; (2000181c <HAL_DisableFMCMemorySwapping+0xc>)
20001812:	6813      	ldr	r3, [r2, #0]
20001814:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
20001818:	6013      	str	r3, [r2, #0]
}
2000181a:	4770      	bx	lr
2000181c:	40013800 	.word	0x40013800

20001820 <HAL_EnableMemorySwappingBank>:
*
* @retval None
*/
void HAL_EnableMemorySwappingBank(void)
{
  SET_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_SWP_FB);
20001820:	4a02      	ldr	r2, [pc, #8]	; (2000182c <HAL_EnableMemorySwappingBank+0xc>)
20001822:	6813      	ldr	r3, [r2, #0]
20001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001828:	6013      	str	r3, [r2, #0]
}
2000182a:	4770      	bx	lr
2000182c:	40013800 	.word	0x40013800

20001830 <HAL_DisableMemorySwappingBank>:
*           
* @retval None
*/
void HAL_DisableMemorySwappingBank(void)
{
  CLEAR_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_SWP_FB);
20001830:	4a02      	ldr	r2, [pc, #8]	; (2000183c <HAL_DisableMemorySwappingBank+0xc>)
20001832:	6813      	ldr	r3, [r2, #0]
20001834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
20001838:	6013      	str	r3, [r2, #0]
}
2000183a:	4770      	bx	lr
2000183c:	40013800 	.word	0x40013800

20001840 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20001840:	4907      	ldr	r1, [pc, #28]	; (20001860 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20001842:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
20001844:	4b07      	ldr	r3, [pc, #28]	; (20001864 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20001846:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20001848:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000184c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000184e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
20001852:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
20001854:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20001858:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
2000185a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
2000185c:	60cb      	str	r3, [r1, #12]
2000185e:	4770      	bx	lr
20001860:	e000ed00 	.word	0xe000ed00
20001864:	05fa0000 	.word	0x05fa0000

20001868 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20001868:	4b19      	ldr	r3, [pc, #100]	; (200018d0 <HAL_NVIC_SetPriority+0x68>)
2000186a:	68db      	ldr	r3, [r3, #12]
2000186c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
20001870:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20001872:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20001876:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20001878:	2d04      	cmp	r5, #4
2000187a:	bf28      	it	cs
2000187c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000187e:	2c06      	cmp	r4, #6
20001880:	d919      	bls.n	200018b6 <HAL_NVIC_SetPriority+0x4e>
20001882:	3b03      	subs	r3, #3
20001884:	f04f 34ff 	mov.w	r4, #4294967295
20001888:	409c      	lsls	r4, r3
2000188a:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000188e:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
20001892:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001894:	fa04 f405 	lsl.w	r4, r4, r5
20001898:	ea21 0104 	bic.w	r1, r1, r4
2000189c:	fa01 f103 	lsl.w	r1, r1, r3
200018a0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
200018a4:	db0a      	blt.n	200018bc <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200018a6:	0109      	lsls	r1, r1, #4
200018a8:	4b0a      	ldr	r3, [pc, #40]	; (200018d4 <HAL_NVIC_SetPriority+0x6c>)
200018aa:	b2c9      	uxtb	r1, r1
200018ac:	4403      	add	r3, r0
200018ae:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
200018b2:	bc30      	pop	{r4, r5}
200018b4:	4770      	bx	lr
200018b6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200018b8:	4613      	mov	r3, r2
200018ba:	e7e8      	b.n	2000188e <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200018bc:	f000 000f 	and.w	r0, r0, #15
200018c0:	0109      	lsls	r1, r1, #4
200018c2:	4b05      	ldr	r3, [pc, #20]	; (200018d8 <HAL_NVIC_SetPriority+0x70>)
200018c4:	b2c9      	uxtb	r1, r1
200018c6:	4403      	add	r3, r0
200018c8:	7619      	strb	r1, [r3, #24]
200018ca:	bc30      	pop	{r4, r5}
200018cc:	4770      	bx	lr
200018ce:	bf00      	nop
200018d0:	e000ed00 	.word	0xe000ed00
200018d4:	e000e100 	.word	0xe000e100
200018d8:	e000ecfc 	.word	0xe000ecfc

200018dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
200018dc:	2800      	cmp	r0, #0
200018de:	db07      	blt.n	200018f0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
200018e0:	f000 011f 	and.w	r1, r0, #31
200018e4:	2301      	movs	r3, #1
200018e6:	0940      	lsrs	r0, r0, #5
200018e8:	4a02      	ldr	r2, [pc, #8]	; (200018f4 <HAL_NVIC_EnableIRQ+0x18>)
200018ea:	408b      	lsls	r3, r1
200018ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
200018f0:	4770      	bx	lr
200018f2:	bf00      	nop
200018f4:	e000e100 	.word	0xe000e100

200018f8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
200018f8:	2800      	cmp	r0, #0
200018fa:	db0d      	blt.n	20001918 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
200018fc:	0943      	lsrs	r3, r0, #5
200018fe:	2201      	movs	r2, #1
20001900:	f000 001f 	and.w	r0, r0, #31
20001904:	4905      	ldr	r1, [pc, #20]	; (2000191c <HAL_NVIC_DisableIRQ+0x24>)
20001906:	3320      	adds	r3, #32
20001908:	fa02 f000 	lsl.w	r0, r2, r0
2000190c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
20001910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
20001914:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
20001918:	4770      	bx	lr
2000191a:	bf00      	nop
2000191c:	e000e100 	.word	0xe000e100

20001920 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
20001920:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
20001924:	4905      	ldr	r1, [pc, #20]	; (2000193c <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
20001926:	4b06      	ldr	r3, [pc, #24]	; (20001940 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
20001928:	68ca      	ldr	r2, [r1, #12]
2000192a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
2000192e:	4313      	orrs	r3, r2
20001930:	60cb      	str	r3, [r1, #12]
20001932:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
20001936:	bf00      	nop
  for(;;)                                                           /* wait until reset */
20001938:	e7fd      	b.n	20001936 <HAL_NVIC_SystemReset+0x16>
2000193a:	bf00      	nop
2000193c:	e000ed00 	.word	0xe000ed00
20001940:	05fa0004 	.word	0x05fa0004

20001944 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20001944:	3801      	subs	r0, #1
20001946:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
2000194a:	d20d      	bcs.n	20001968 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000194c:	4b07      	ldr	r3, [pc, #28]	; (2000196c <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000194e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001950:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
20001952:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001954:	25f0      	movs	r5, #240	; 0xf0
20001956:	4c06      	ldr	r4, [pc, #24]	; (20001970 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20001958:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
2000195a:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000195c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001962:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
20001964:	bc30      	pop	{r4, r5}
20001966:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
20001968:	2001      	movs	r0, #1
2000196a:	4770      	bx	lr
2000196c:	e000e010 	.word	0xe000e010
20001970:	e000ed00 	.word	0xe000ed00

20001974 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
20001974:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
20001978:	4a04      	ldr	r2, [pc, #16]	; (2000198c <HAL_MPU_Disable+0x18>)
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
2000197a:	2000      	movs	r0, #0
2000197c:	4904      	ldr	r1, [pc, #16]	; (20001990 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
2000197e:	6a53      	ldr	r3, [r2, #36]	; 0x24
20001980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20001984:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
20001986:	6048      	str	r0, [r1, #4]
}
20001988:	4770      	bx	lr
2000198a:	bf00      	nop
2000198c:	e000ed00 	.word	0xe000ed00
20001990:	e000ed90 	.word	0xe000ed90

20001994 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
20001994:	4a06      	ldr	r2, [pc, #24]	; (200019b0 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
20001996:	f040 0001 	orr.w	r0, r0, #1
2000199a:	4b06      	ldr	r3, [pc, #24]	; (200019b4 <HAL_MPU_Enable+0x20>)
2000199c:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
2000199e:	6a53      	ldr	r3, [r2, #36]	; 0x24
200019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200019a4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
200019a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
200019aa:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
200019ae:	4770      	bx	lr
200019b0:	e000ed00 	.word	0xe000ed00
200019b4:	e000ed90 	.word	0xe000ed90

200019b8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
200019b8:	4a12      	ldr	r2, [pc, #72]	; (20001a04 <HAL_MPU_ConfigRegion+0x4c>)
200019ba:	7843      	ldrb	r3, [r0, #1]
200019bc:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
200019be:	7801      	ldrb	r1, [r0, #0]
200019c0:	b1e9      	cbz	r1, 200019fe <HAL_MPU_ConfigRegion+0x46>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
200019c2:	6843      	ldr	r3, [r0, #4]
{
200019c4:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
200019c6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
200019c8:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200019ca:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
200019cc:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
200019ce:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
200019d0:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200019d2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
200019d6:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
200019d8:	430b      	orrs	r3, r1
200019da:	7a01      	ldrb	r1, [r0, #8]
200019dc:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
200019e0:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
200019e2:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
200019e6:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
200019e8:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
200019ec:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
200019f0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
200019f4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
200019f8:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200019fa:	6113      	str	r3, [r2, #16]
}
200019fc:	4770      	bx	lr
    MPU->RBAR = 0x00;
200019fe:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
20001a00:	6111      	str	r1, [r2, #16]
20001a02:	4770      	bx	lr
20001a04:	e000ed90 	.word	0xe000ed90

20001a08 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20001a08:	4b02      	ldr	r3, [pc, #8]	; (20001a14 <HAL_NVIC_GetPriorityGrouping+0xc>)
20001a0a:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
20001a0c:	f3c0 2002 	ubfx	r0, r0, #8, #3
20001a10:	4770      	bx	lr
20001a12:	bf00      	nop
20001a14:	e000ed00 	.word	0xe000ed00

20001a18 <HAL_NVIC_GetPriority>:
  if ((int32_t)(IRQn) >= 0)
20001a18:	2800      	cmp	r0, #0
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
20001a1a:	b430      	push	{r4, r5}
20001a1c:	db1e      	blt.n	20001a5c <HAL_NVIC_GetPriority+0x44>
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
20001a1e:	4c12      	ldr	r4, [pc, #72]	; (20001a68 <HAL_NVIC_GetPriority+0x50>)
20001a20:	5c20      	ldrb	r0, [r4, r0]
20001a22:	0900      	lsrs	r0, r0, #4
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20001a24:	f001 0107 	and.w	r1, r1, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20001a28:	f1c1 0507 	rsb	r5, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20001a2c:	1d0c      	adds	r4, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20001a2e:	2d04      	cmp	r5, #4
20001a30:	bf28      	it	cs
20001a32:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20001a34:	2c06      	cmp	r4, #6
20001a36:	d90f      	bls.n	20001a58 <HAL_NVIC_GetPriority+0x40>
20001a38:	3903      	subs	r1, #3
20001a3a:	f04f 34ff 	mov.w	r4, #4294967295
20001a3e:	408c      	lsls	r4, r1
20001a40:	ea20 0404 	bic.w	r4, r0, r4
20001a44:	40c8      	lsrs	r0, r1
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
20001a46:	f04f 31ff 	mov.w	r1, #4294967295
20001a4a:	40a9      	lsls	r1, r5
20001a4c:	ea20 0001 	bic.w	r0, r0, r1
20001a50:	6010      	str	r0, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
20001a52:	601c      	str	r4, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
20001a54:	bc30      	pop	{r4, r5}
20001a56:	4770      	bx	lr
20001a58:	2400      	movs	r4, #0
20001a5a:	e7f4      	b.n	20001a46 <HAL_NVIC_GetPriority+0x2e>
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
20001a5c:	f000 000f 	and.w	r0, r0, #15
20001a60:	4c02      	ldr	r4, [pc, #8]	; (20001a6c <HAL_NVIC_GetPriority+0x54>)
20001a62:	5c20      	ldrb	r0, [r4, r0]
20001a64:	0900      	lsrs	r0, r0, #4
20001a66:	e7dd      	b.n	20001a24 <HAL_NVIC_GetPriority+0xc>
20001a68:	e000e400 	.word	0xe000e400
20001a6c:	e000ed14 	.word	0xe000ed14

20001a70 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
20001a70:	2800      	cmp	r0, #0
20001a72:	db09      	blt.n	20001a88 <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20001a74:	0943      	lsrs	r3, r0, #5
20001a76:	2201      	movs	r2, #1
20001a78:	f000 001f 	and.w	r0, r0, #31
20001a7c:	4903      	ldr	r1, [pc, #12]	; (20001a8c <HAL_NVIC_SetPendingIRQ+0x1c>)
20001a7e:	3340      	adds	r3, #64	; 0x40
20001a80:	fa02 f000 	lsl.w	r0, r2, r0
20001a84:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
20001a88:	4770      	bx	lr
20001a8a:	bf00      	nop
20001a8c:	e000e100 	.word	0xe000e100

20001a90 <HAL_NVIC_GetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
20001a90:	2800      	cmp	r0, #0
20001a92:	db0b      	blt.n	20001aac <HAL_NVIC_GetPendingIRQ+0x1c>
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
20001a94:	0943      	lsrs	r3, r0, #5
20001a96:	4a06      	ldr	r2, [pc, #24]	; (20001ab0 <HAL_NVIC_GetPendingIRQ+0x20>)
20001a98:	f000 001f 	and.w	r0, r0, #31
20001a9c:	3340      	adds	r3, #64	; 0x40
20001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20001aa2:	fa23 f000 	lsr.w	r0, r3, r0
20001aa6:	f000 0001 	and.w	r0, r0, #1
20001aaa:	4770      	bx	lr
    return(0U);
20001aac:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
20001aae:	4770      	bx	lr
20001ab0:	e000e100 	.word	0xe000e100

20001ab4 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
20001ab4:	2800      	cmp	r0, #0
20001ab6:	db09      	blt.n	20001acc <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20001ab8:	0943      	lsrs	r3, r0, #5
20001aba:	2201      	movs	r2, #1
20001abc:	f000 001f 	and.w	r0, r0, #31
20001ac0:	4903      	ldr	r1, [pc, #12]	; (20001ad0 <HAL_NVIC_ClearPendingIRQ+0x1c>)
20001ac2:	3360      	adds	r3, #96	; 0x60
20001ac4:	fa02 f000 	lsl.w	r0, r2, r0
20001ac8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
20001acc:	4770      	bx	lr
20001ace:	bf00      	nop
20001ad0:	e000e100 	.word	0xe000e100

20001ad4 <HAL_NVIC_GetActive>:
  if ((int32_t)(IRQn) >= 0)
20001ad4:	2800      	cmp	r0, #0
20001ad6:	db0b      	blt.n	20001af0 <HAL_NVIC_GetActive+0x1c>
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
20001ad8:	0943      	lsrs	r3, r0, #5
20001ada:	4a06      	ldr	r2, [pc, #24]	; (20001af4 <HAL_NVIC_GetActive+0x20>)
20001adc:	f000 001f 	and.w	r0, r0, #31
20001ae0:	3380      	adds	r3, #128	; 0x80
20001ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20001ae6:	fa23 f000 	lsr.w	r0, r3, r0
20001aea:	f000 0001 	and.w	r0, r0, #1
20001aee:	4770      	bx	lr
    return(0U);
20001af0:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
20001af2:	4770      	bx	lr
20001af4:	e000e100 	.word	0xe000e100

20001af8 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
20001af8:	4a04      	ldr	r2, [pc, #16]	; (20001b0c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
20001afa:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
20001afc:	6813      	ldr	r3, [r2, #0]
20001afe:	bf0c      	ite	eq
20001b00:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
20001b04:	f023 0304 	bicne.w	r3, r3, #4
20001b08:	6013      	str	r3, [r2, #0]
  }
}
20001b0a:	4770      	bx	lr
20001b0c:	e000e010 	.word	0xe000e010

20001b10 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
20001b10:	4770      	bx	lr
20001b12:	bf00      	nop

20001b14 <HAL_SYSTICK_IRQHandler>:
{
20001b14:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
20001b16:	f7ff fffb 	bl	20001b10 <HAL_SYSTICK_Callback>
}
20001b1a:	bd08      	pop	{r3, pc}

20001b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
20001b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001b1e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
20001b20:	f7ff fdc2 	bl	200016a8 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
20001b24:	2c00      	cmp	r4, #0
20001b26:	d057      	beq.n	20001bd8 <HAL_DMA_Init+0xbc>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
20001b28:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
20001b2a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
20001b2c:	2100      	movs	r1, #0
20001b2e:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
20001b30:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
20001b34:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
20001b38:	681a      	ldr	r2, [r3, #0]
20001b3a:	f022 0201 	bic.w	r2, r2, #1
20001b3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20001b40:	e005      	b.n	20001b4e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
20001b42:	f7ff fdb1 	bl	200016a8 <HAL_GetTick>
20001b46:	1b43      	subs	r3, r0, r5
20001b48:	2b05      	cmp	r3, #5
20001b4a:	d83e      	bhi.n	20001bca <HAL_DMA_Init+0xae>
20001b4c:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20001b4e:	681a      	ldr	r2, [r3, #0]
20001b50:	07d1      	lsls	r1, r2, #31
20001b52:	d4f6      	bmi.n	20001b42 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
20001b54:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
20001b58:	68e5      	ldr	r5, [r4, #12]
20001b5a:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CR;
20001b5c:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
20001b5e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
20001b62:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
20001b64:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
20001b66:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
20001b68:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
20001b6c:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
20001b6e:	4936      	ldr	r1, [pc, #216]	; (20001c48 <HAL_DMA_Init+0x12c>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
20001b70:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
20001b72:	4039      	ands	r1, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
20001b74:	432a      	orrs	r2, r5

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
20001b76:	6a65      	ldr	r5, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
20001b78:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
20001b7a:	2d04      	cmp	r5, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
20001b7c:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
20001b80:	d02c      	beq.n	20001bdc <HAL_DMA_Init+0xc0>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
20001b82:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
20001b84:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
20001b86:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
20001b8a:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20001b8c:	b2da      	uxtb	r2, r3
20001b8e:	492f      	ldr	r1, [pc, #188]	; (20001c4c <HAL_DMA_Init+0x130>)
  hdma->Instance->FCR = tmp;
20001b90:	615d      	str	r5, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20001b92:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
20001b94:	482e      	ldr	r0, [pc, #184]	; (20001c50 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20001b96:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
20001b9a:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
20001b9c:	4a2d      	ldr	r2, [pc, #180]	; (20001c54 <HAL_DMA_Init+0x138>)
  hdma->State = HAL_DMA_STATE_READY;
20001b9e:	f04f 0501 	mov.w	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20001ba2:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
20001ba6:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20001baa:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
20001bae:	5c40      	ldrb	r0, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20001bb0:	f04f 0100 	mov.w	r1, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
20001bb4:	bf88      	it	hi
20001bb6:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20001bb8:	4083      	lsls	r3, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
20001bba:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
20001bbc:	65a2      	str	r2, [r4, #88]	; 0x58
  return HAL_OK;
20001bbe:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20001bc0:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20001bc2:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
20001bc4:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
20001bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
20001bca:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20001bcc:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
20001bce:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20001bd0:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
20001bd2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
20001bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
20001bd8:	2001      	movs	r0, #1
}
20001bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
20001bdc:	e9d4 700b 	ldrd	r7, r0, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
20001be0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
20001be2:	4338      	orrs	r0, r7
20001be4:	4301      	orrs	r1, r0
  hdma->Instance->CR = tmp;  
20001be6:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
20001be8:	695d      	ldr	r5, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
20001bea:	f025 0507 	bic.w	r5, r5, #7
20001bee:	4315      	orrs	r5, r2
    tmp |= hdma->Init.FIFOThreshold;
20001bf0:	f045 0504 	orr.w	r5, r5, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
20001bf4:	2f00      	cmp	r7, #0
20001bf6:	d0c9      	beq.n	20001b8c <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
20001bf8:	b17e      	cbz	r6, 20001c1a <HAL_DMA_Init+0xfe>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
20001bfa:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
20001bfe:	d012      	beq.n	20001c26 <HAL_DMA_Init+0x10a>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
20001c00:	2a02      	cmp	r2, #2
20001c02:	d903      	bls.n	20001c0c <HAL_DMA_Init+0xf0>
20001c04:	2a03      	cmp	r2, #3
20001c06:	d1c1      	bne.n	20001b8c <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20001c08:	01fa      	lsls	r2, r7, #7
20001c0a:	d5bf      	bpl.n	20001b8c <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
20001c0c:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
20001c0e:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
20001c10:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
20001c12:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
20001c14:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
20001c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
20001c1a:	2a01      	cmp	r2, #1
20001c1c:	d010      	beq.n	20001c40 <HAL_DMA_Init+0x124>
20001c1e:	f032 0202 	bics.w	r2, r2, #2
20001c22:	d1b3      	bne.n	20001b8c <HAL_DMA_Init+0x70>
20001c24:	e7f0      	b.n	20001c08 <HAL_DMA_Init+0xec>
    switch (tmp)
20001c26:	2a03      	cmp	r2, #3
20001c28:	d8b0      	bhi.n	20001b8c <HAL_DMA_Init+0x70>
20001c2a:	a101      	add	r1, pc, #4	; (adr r1, 20001c30 <HAL_DMA_Init+0x114>)
20001c2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
20001c30:	20001c0d 	.word	0x20001c0d
20001c34:	20001c09 	.word	0x20001c09
20001c38:	20001c0d 	.word	0x20001c0d
20001c3c:	20001c41 	.word	0x20001c41
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
20001c40:	f1b7 7fc0 	cmp.w	r7, #25165824	; 0x1800000
20001c44:	d1a2      	bne.n	20001b8c <HAL_DMA_Init+0x70>
20001c46:	e7e1      	b.n	20001c0c <HAL_DMA_Init+0xf0>
20001c48:	e010803f 	.word	0xe010803f
20001c4c:	aaaaaaab 	.word	0xaaaaaaab
20001c50:	2000fa10 	.word	0x2000fa10
20001c54:	fffffc00 	.word	0xfffffc00

20001c58 <HAL_DMA_DeInit>:
{
20001c58:	b4f0      	push	{r4, r5, r6, r7}
  if(hdma == NULL)
20001c5a:	2800      	cmp	r0, #0
20001c5c:	d038      	beq.n	20001cd0 <HAL_DMA_DeInit+0x78>
  if(hdma->State == HAL_DMA_STATE_BUSY)
20001c5e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
20001c62:	2b02      	cmp	r3, #2
20001c64:	b2dc      	uxtb	r4, r3
20001c66:	d02b      	beq.n	20001cc0 <HAL_DMA_DeInit+0x68>
  __HAL_DMA_DISABLE(hdma);
20001c68:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
20001c6a:	2200      	movs	r2, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20001c6c:	491a      	ldr	r1, [pc, #104]	; (20001cd8 <HAL_DMA_DeInit+0x80>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
20001c6e:	2621      	movs	r6, #33	; 0x21
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20001c70:	b2dc      	uxtb	r4, r3
  __HAL_DMA_DISABLE(hdma);
20001c72:	681d      	ldr	r5, [r3, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20001c74:	3c10      	subs	r4, #16
  __HAL_DMA_DISABLE(hdma);
20001c76:	f025 0501 	bic.w	r5, r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20001c7a:	fba1 7104 	umull	r7, r1, r1, r4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
20001c7e:	4f17      	ldr	r7, [pc, #92]	; (20001cdc <HAL_DMA_DeInit+0x84>)
  __HAL_DMA_DISABLE(hdma);
20001c80:	601d      	str	r5, [r3, #0]
  if (stream_number > 3U)
20001c82:	2c5f      	cmp	r4, #95	; 0x5f
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20001c84:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->Instance->CR   = 0U;
20001c88:	601a      	str	r2, [r3, #0]
  hdma->Instance->NDTR = 0U;
20001c8a:	605a      	str	r2, [r3, #4]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
20001c8c:	5c7d      	ldrb	r5, [r7, r1]
  hdma->Instance->PAR  = 0U;
20001c8e:	609a      	str	r2, [r3, #8]
  hdma->Instance->M0AR = 0U;
20001c90:	60da      	str	r2, [r3, #12]
  hdma->Instance->M1AR = 0U;
20001c92:	611a      	str	r2, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
20001c94:	615e      	str	r6, [r3, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
20001c96:	65c5      	str	r5, [r0, #92]	; 0x5c
  if (stream_number > 3U)
20001c98:	d815      	bhi.n	20001cc6 <HAL_DMA_DeInit+0x6e>
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
20001c9a:	4a11      	ldr	r2, [pc, #68]	; (20001ce0 <HAL_DMA_DeInit+0x88>)
20001c9c:	401a      	ands	r2, r3
  hdma->XferCpltCallback = NULL;
20001c9e:	2300      	movs	r3, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20001ca0:	213f      	movs	r1, #63	; 0x3f
20001ca2:	6582      	str	r2, [r0, #88]	; 0x58
20001ca4:	40a9      	lsls	r1, r5
  return HAL_OK;
20001ca6:	461c      	mov	r4, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20001ca8:	6091      	str	r1, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20001caa:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_UNLOCK(hdma);
20001cac:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
20001cb0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
20001cb4:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
20001cb8:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
20001cbc:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
}
20001cc0:	4620      	mov	r0, r4
20001cc2:	bcf0      	pop	{r4, r5, r6, r7}
20001cc4:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
20001cc6:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
20001cca:	401a      	ands	r2, r3
20001ccc:	3204      	adds	r2, #4
20001cce:	e7e6      	b.n	20001c9e <HAL_DMA_DeInit+0x46>
    return HAL_ERROR;
20001cd0:	2401      	movs	r4, #1
}
20001cd2:	4620      	mov	r0, r4
20001cd4:	bcf0      	pop	{r4, r5, r6, r7}
20001cd6:	4770      	bx	lr
20001cd8:	aaaaaaab 	.word	0xaaaaaaab
20001cdc:	2000fa10 	.word	0x2000fa10
20001ce0:	fffffc00 	.word	0xfffffc00

20001ce4 <HAL_DMA_Start>:
{
20001ce4:	b470      	push	{r4, r5, r6}
20001ce6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
20001ce8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
20001cec:	2801      	cmp	r0, #1
20001cee:	d026      	beq.n	20001d3e <HAL_DMA_Start+0x5a>
20001cf0:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
20001cf2:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
20001cf6:	42a8      	cmp	r0, r5
  __HAL_LOCK(hdma);
20001cf8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
20001cfc:	d005      	beq.n	20001d0a <HAL_DMA_Start+0x26>
    __HAL_UNLOCK(hdma);
20001cfe:	2300      	movs	r3, #0
    status = HAL_BUSY;
20001d00:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
20001d02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
20001d06:	bc70      	pop	{r4, r5, r6}
20001d08:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
20001d0a:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20001d0c:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_BUSY;
20001d0e:	2602      	movs	r6, #2
20001d10:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20001d14:	6560      	str	r0, [r4, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20001d16:	68a4      	ldr	r4, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
20001d18:	6828      	ldr	r0, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20001d1a:	2c40      	cmp	r4, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
20001d1c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
20001d20:	6028      	str	r0, [r5, #0]
  hdma->Instance->NDTR = DataLength;
20001d22:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20001d24:	d008      	beq.n	20001d38 <HAL_DMA_Start+0x54>
    hdma->Instance->PAR = SrcAddress;
20001d26:	60a9      	str	r1, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
20001d28:	60ea      	str	r2, [r5, #12]
    __HAL_DMA_ENABLE(hdma);
20001d2a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
20001d2c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
20001d2e:	f043 0301 	orr.w	r3, r3, #1
20001d32:	602b      	str	r3, [r5, #0]
}
20001d34:	bc70      	pop	{r4, r5, r6}
20001d36:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
20001d38:	60aa      	str	r2, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
20001d3a:	60e9      	str	r1, [r5, #12]
20001d3c:	e7f5      	b.n	20001d2a <HAL_DMA_Start+0x46>
  __HAL_LOCK(hdma);
20001d3e:	2002      	movs	r0, #2
}
20001d40:	bc70      	pop	{r4, r5, r6}
20001d42:	4770      	bx	lr

20001d44 <HAL_DMA_Start_IT>:
{
20001d44:	b4f0      	push	{r4, r5, r6, r7}
20001d46:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
20001d48:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
20001d4c:	2801      	cmp	r0, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20001d4e:	6da6      	ldr	r6, [r4, #88]	; 0x58
  __HAL_LOCK(hdma);
20001d50:	d038      	beq.n	20001dc4 <HAL_DMA_Start_IT+0x80>
20001d52:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
20001d54:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
20001d58:	42a8      	cmp	r0, r5
  __HAL_LOCK(hdma);
20001d5a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
20001d5e:	d005      	beq.n	20001d6c <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
20001d60:	2300      	movs	r3, #0
    status = HAL_BUSY;
20001d62:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
20001d64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
20001d68:	bcf0      	pop	{r4, r5, r6, r7}
20001d6a:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
20001d6c:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
20001d6e:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20001d70:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_BUSY;
20001d72:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20001d76:	68a7      	ldr	r7, [r4, #8]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20001d78:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
20001d7a:	6828      	ldr	r0, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20001d7c:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
20001d7e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
20001d82:	6028      	str	r0, [r5, #0]
  hdma->Instance->NDTR = DataLength;
20001d84:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20001d86:	d01a      	beq.n	20001dbe <HAL_DMA_Start_IT+0x7a>
    hdma->Instance->PAR = SrcAddress;
20001d88:	60a9      	str	r1, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
20001d8a:	60ea      	str	r2, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20001d8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
20001d8e:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
20001d90:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20001d92:	408b      	lsls	r3, r1
20001d94:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
20001d96:	682b      	ldr	r3, [r5, #0]
20001d98:	f043 0316 	orr.w	r3, r3, #22
20001d9c:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
20001d9e:	696b      	ldr	r3, [r5, #20]
20001da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20001da4:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
20001da6:	b11a      	cbz	r2, 20001db0 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CR  |= DMA_IT_HT;
20001da8:	682b      	ldr	r3, [r5, #0]
20001daa:	f043 0308 	orr.w	r3, r3, #8
20001dae:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
20001db0:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
20001db2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
20001db4:	f043 0301 	orr.w	r3, r3, #1
20001db8:	602b      	str	r3, [r5, #0]
}
20001dba:	bcf0      	pop	{r4, r5, r6, r7}
20001dbc:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
20001dbe:	60aa      	str	r2, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
20001dc0:	60e9      	str	r1, [r5, #12]
20001dc2:	e7e3      	b.n	20001d8c <HAL_DMA_Start_IT+0x48>
  __HAL_LOCK(hdma);
20001dc4:	2002      	movs	r0, #2
}
20001dc6:	bcf0      	pop	{r4, r5, r6, r7}
20001dc8:	4770      	bx	lr
20001dca:	bf00      	nop

20001dcc <HAL_DMA_Abort>:
{
20001dcc:	b570      	push	{r4, r5, r6, lr}
20001dce:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20001dd0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
20001dd2:	f7ff fc69 	bl	200016a8 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
20001dd6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
20001dda:	2b02      	cmp	r3, #2
20001ddc:	d006      	beq.n	20001dec <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20001dde:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
20001de0:	2300      	movs	r3, #0
    return HAL_ERROR;
20001de2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20001de4:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
20001de6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
20001dea:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20001dec:	6823      	ldr	r3, [r4, #0]
20001dee:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20001df0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20001df2:	681a      	ldr	r2, [r3, #0]
20001df4:	f022 0216 	bic.w	r2, r2, #22
20001df8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
20001dfa:	695a      	ldr	r2, [r3, #20]
20001dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20001e00:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20001e02:	b339      	cbz	r1, 20001e54 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
20001e04:	681a      	ldr	r2, [r3, #0]
20001e06:	f022 0208 	bic.w	r2, r2, #8
20001e0a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
20001e0c:	681a      	ldr	r2, [r3, #0]
20001e0e:	f022 0201 	bic.w	r2, r2, #1
20001e12:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20001e14:	e005      	b.n	20001e22 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
20001e16:	f7ff fc47 	bl	200016a8 <HAL_GetTick>
20001e1a:	1b43      	subs	r3, r0, r5
20001e1c:	2b05      	cmp	r3, #5
20001e1e:	d80f      	bhi.n	20001e40 <HAL_DMA_Abort+0x74>
20001e20:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20001e22:	681b      	ldr	r3, [r3, #0]
20001e24:	f013 0301 	ands.w	r3, r3, #1
20001e28:	d1f5      	bne.n	20001e16 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20001e2a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
20001e2c:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
20001e2e:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20001e30:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
20001e32:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20001e34:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
20001e36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
20001e3a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
20001e3e:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
20001e40:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20001e42:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
20001e44:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20001e46:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
20001e48:	4618      	mov	r0, r3
        __HAL_UNLOCK(hdma);
20001e4a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
20001e4e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
20001e52:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20001e54:	6ca2      	ldr	r2, [r4, #72]	; 0x48
20001e56:	2a00      	cmp	r2, #0
20001e58:	d1d4      	bne.n	20001e04 <HAL_DMA_Abort+0x38>
20001e5a:	e7d7      	b.n	20001e0c <HAL_DMA_Abort+0x40>

20001e5c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
20001e5c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
20001e60:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
20001e62:	2a02      	cmp	r2, #2
20001e64:	d003      	beq.n	20001e6e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20001e66:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
20001e68:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20001e6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20001e6c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
20001e6e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
20001e70:	2105      	movs	r1, #5
  return HAL_OK;
20001e72:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
20001e74:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
20001e78:	6813      	ldr	r3, [r2, #0]
20001e7a:	f023 0301 	bic.w	r3, r3, #1
20001e7e:	6013      	str	r3, [r2, #0]
}
20001e80:	4770      	bx	lr
20001e82:	bf00      	nop

20001e84 <HAL_DMA_PollForTransfer>:
{
20001e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20001e88:	4604      	mov	r4, r0
20001e8a:	b083      	sub	sp, #12
20001e8c:	4615      	mov	r5, r2
20001e8e:	9101      	str	r1, [sp, #4]
  uint32_t tickstart = HAL_GetTick(); 
20001e90:	f7ff fc0a 	bl	200016a8 <HAL_GetTick>
  if(HAL_DMA_STATE_BUSY != hdma->State)
20001e94:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
20001e98:	2b02      	cmp	r3, #2
20001e9a:	d008      	beq.n	20001eae <HAL_DMA_PollForTransfer+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20001e9c:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
20001e9e:	2300      	movs	r3, #0
    return HAL_ERROR;
20001ea0:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20001ea2:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
20001ea4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
20001ea8:	b003      	add	sp, #12
20001eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
20001eae:	6823      	ldr	r3, [r4, #0]
20001eb0:	681b      	ldr	r3, [r3, #0]
20001eb2:	05d9      	lsls	r1, r3, #23
20001eb4:	d45d      	bmi.n	20001f72 <HAL_DMA_PollForTransfer+0xee>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20001eb6:	9b01      	ldr	r3, [sp, #4]
20001eb8:	4606      	mov	r6, r0
20001eba:	2b00      	cmp	r3, #0
20001ebc:	d060      	beq.n	20001f80 <HAL_DMA_PollForTransfer+0xfc>
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
20001ebe:	f04f 0b10 	mov.w	fp, #16
20001ec2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
20001ec4:	fa0b fb01 	lsl.w	fp, fp, r1
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20001ec8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
  tmpisr = regs->ISR;
20001ecc:	f8da 3000 	ldr.w	r3, [sl]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20001ed0:	ea1b 0f03 	tst.w	fp, r3
20001ed4:	d13a      	bne.n	20001f4c <HAL_DMA_PollForTransfer+0xc8>
20001ed6:	1c6a      	adds	r2, r5, #1
20001ed8:	d067      	beq.n	20001faa <HAL_DMA_PollForTransfer+0x126>
20001eda:	2d00      	cmp	r5, #0
20001edc:	d056      	beq.n	20001f8c <HAL_DMA_PollForTransfer+0x108>
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20001ede:	f04f 0908 	mov.w	r9, #8
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20001ee2:	f04f 0801 	mov.w	r8, #1
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20001ee6:	2704      	movs	r7, #4
20001ee8:	e02d      	b.n	20001f46 <HAL_DMA_PollForTransfer+0xc2>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
20001eea:	f7ff fbdd 	bl	200016a8 <HAL_GetTick>
20001eee:	1b80      	subs	r0, r0, r6
20001ef0:	4285      	cmp	r5, r0
20001ef2:	d34e      	bcc.n	20001f92 <HAL_DMA_PollForTransfer+0x10e>
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20001ef4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    tmpisr = regs->ISR;
20001ef6:	f8da 3000 	ldr.w	r3, [sl]
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20001efa:	fa09 fc01 	lsl.w	ip, r9, r1
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20001efe:	fa08 f001 	lsl.w	r0, r8, r1
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20001f02:	fa07 f201 	lsl.w	r2, r7, r1
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20001f06:	ea13 0f0c 	tst.w	r3, ip
20001f0a:	d007      	beq.n	20001f1c <HAL_DMA_PollForTransfer+0x98>
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
20001f0c:	f8d4 e054 	ldr.w	lr, [r4, #84]	; 0x54
20001f10:	f04e 0e01 	orr.w	lr, lr, #1
20001f14:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20001f18:	f8ca c008 	str.w	ip, [sl, #8]
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20001f1c:	4203      	tst	r3, r0
20001f1e:	d007      	beq.n	20001f30 <HAL_DMA_PollForTransfer+0xac>
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20001f20:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
20001f24:	f04c 0c02 	orr.w	ip, ip, #2
20001f28:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20001f2c:	f8ca 0008 	str.w	r0, [sl, #8]
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20001f30:	4213      	tst	r3, r2
20001f32:	d005      	beq.n	20001f40 <HAL_DMA_PollForTransfer+0xbc>
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20001f34:	6d60      	ldr	r0, [r4, #84]	; 0x54
20001f36:	f040 0004 	orr.w	r0, r0, #4
20001f3a:	6560      	str	r0, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20001f3c:	f8ca 2008 	str.w	r2, [sl, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20001f40:	ea1b 0f03 	tst.w	fp, r3
20001f44:	d102      	bne.n	20001f4c <HAL_DMA_PollForTransfer+0xc8>
20001f46:	6d63      	ldr	r3, [r4, #84]	; 0x54
20001f48:	07db      	lsls	r3, r3, #31
20001f4a:	d5ce      	bpl.n	20001eea <HAL_DMA_PollForTransfer+0x66>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20001f4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
20001f4e:	b113      	cbz	r3, 20001f56 <HAL_DMA_PollForTransfer+0xd2>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
20001f50:	6d63      	ldr	r3, [r4, #84]	; 0x54
20001f52:	07db      	lsls	r3, r3, #31
20001f54:	d458      	bmi.n	20002008 <HAL_DMA_PollForTransfer+0x184>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20001f56:	9801      	ldr	r0, [sp, #4]
20001f58:	2800      	cmp	r0, #0
20001f5a:	d14e      	bne.n	20001ffa <HAL_DMA_PollForTransfer+0x176>
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20001f5c:	2330      	movs	r3, #48	; 0x30
    hdma->State = HAL_DMA_STATE_READY;
20001f5e:	2201      	movs	r2, #1
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20001f60:	fa03 f101 	lsl.w	r1, r3, r1
20001f64:	f8ca 1008 	str.w	r1, [sl, #8]
    __HAL_UNLOCK(hdma);
20001f68:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
20001f6c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
20001f70:	e79a      	b.n	20001ea8 <HAL_DMA_PollForTransfer+0x24>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20001f72:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
20001f76:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20001f78:	6563      	str	r3, [r4, #84]	; 0x54
}
20001f7a:	b003      	add	sp, #12
20001f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
20001f80:	f04f 0b20 	mov.w	fp, #32
20001f84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
20001f86:	fa0b fb01 	lsl.w	fp, fp, r1
20001f8a:	e79d      	b.n	20001ec8 <HAL_DMA_PollForTransfer+0x44>
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20001f8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
20001f8e:	07da      	lsls	r2, r3, #31
20001f90:	d4dc      	bmi.n	20001f4c <HAL_DMA_PollForTransfer+0xc8>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20001f92:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
20001f94:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_READY;
20001f96:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
20001f98:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20001f9a:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
20001f9c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
20001fa0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
20001fa4:	b003      	add	sp, #12
20001fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20001faa:	2608      	movs	r6, #8
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20001fac:	2501      	movs	r5, #1
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20001fae:	2004      	movs	r0, #4
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20001fb0:	408e      	lsls	r6, r1
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20001fb2:	408d      	lsls	r5, r1
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20001fb4:	4088      	lsls	r0, r1
20001fb6:	e01c      	b.n	20001ff2 <HAL_DMA_PollForTransfer+0x16e>
    tmpisr = regs->ISR;
20001fb8:	f8da 3000 	ldr.w	r3, [sl]
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20001fbc:	421e      	tst	r6, r3
20001fbe:	d005      	beq.n	20001fcc <HAL_DMA_PollForTransfer+0x148>
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
20001fc0:	6d62      	ldr	r2, [r4, #84]	; 0x54
20001fc2:	f042 0201 	orr.w	r2, r2, #1
20001fc6:	6562      	str	r2, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20001fc8:	f8ca 6008 	str.w	r6, [sl, #8]
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20001fcc:	422b      	tst	r3, r5
20001fce:	d005      	beq.n	20001fdc <HAL_DMA_PollForTransfer+0x158>
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20001fd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
20001fd2:	f042 0202 	orr.w	r2, r2, #2
20001fd6:	6562      	str	r2, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20001fd8:	f8ca 5008 	str.w	r5, [sl, #8]
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20001fdc:	4203      	tst	r3, r0
20001fde:	d005      	beq.n	20001fec <HAL_DMA_PollForTransfer+0x168>
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20001fe0:	6d62      	ldr	r2, [r4, #84]	; 0x54
20001fe2:	f042 0204 	orr.w	r2, r2, #4
20001fe6:	6562      	str	r2, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20001fe8:	f8ca 0008 	str.w	r0, [sl, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20001fec:	ea1b 0f03 	tst.w	fp, r3
20001ff0:	d1ac      	bne.n	20001f4c <HAL_DMA_PollForTransfer+0xc8>
20001ff2:	6d63      	ldr	r3, [r4, #84]	; 0x54
20001ff4:	07df      	lsls	r7, r3, #31
20001ff6:	d4a9      	bmi.n	20001f4c <HAL_DMA_PollForTransfer+0xc8>
20001ff8:	e7de      	b.n	20001fb8 <HAL_DMA_PollForTransfer+0x134>
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
20001ffa:	2310      	movs	r3, #16
  return status;
20001ffc:	2000      	movs	r0, #0
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
20001ffe:	fa03 f101 	lsl.w	r1, r3, r1
20002002:	f8ca 1008 	str.w	r1, [sl, #8]
20002006:	e74f      	b.n	20001ea8 <HAL_DMA_PollForTransfer+0x24>
      HAL_DMA_Abort(hdma);
20002008:	4620      	mov	r0, r4
2000200a:	f7ff fedf 	bl	20001dcc <HAL_DMA_Abort>
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
2000200e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
20002010:	2330      	movs	r3, #48	; 0x30
      hdma->State= HAL_DMA_STATE_READY;
20002012:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
20002014:	2100      	movs	r1, #0
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20002016:	4083      	lsls	r3, r0
      return HAL_ERROR;
20002018:	4610      	mov	r0, r2
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
2000201a:	f8ca 3008 	str.w	r3, [sl, #8]
      __HAL_UNLOCK(hdma);
2000201e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State= HAL_DMA_STATE_READY;
20002022:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      return HAL_ERROR;
20002026:	e73f      	b.n	20001ea8 <HAL_DMA_PollForTransfer+0x24>

20002028 <HAL_DMA_IRQHandler>:
  uint32_t timeout = SystemCoreClock / 9600;
20002028:	4b75      	ldr	r3, [pc, #468]	; (20002200 <HAL_DMA_IRQHandler+0x1d8>)
  __IO uint32_t count = 0;
2000202a:	2100      	movs	r1, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
2000202c:	2208      	movs	r2, #8
{
2000202e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout = SystemCoreClock / 9600;
20002032:	681d      	ldr	r5, [r3, #0]
{
20002034:	b082      	sub	sp, #8
20002036:	4680      	mov	r8, r0
  __IO uint32_t count = 0;
20002038:	9101      	str	r1, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
2000203a:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
2000203e:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20002040:	409a      	lsls	r2, r3
20002042:	4222      	tst	r2, r4
20002044:	d004      	beq.n	20002050 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
20002046:	6801      	ldr	r1, [r0, #0]
20002048:	680f      	ldr	r7, [r1, #0]
2000204a:	0778      	lsls	r0, r7, #29
2000204c:	f100 808a 	bmi.w	20002164 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20002050:	2201      	movs	r2, #1
20002052:	409a      	lsls	r2, r3
20002054:	4222      	tst	r2, r4
20002056:	d004      	beq.n	20002062 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
20002058:	f8d8 1000 	ldr.w	r1, [r8]
2000205c:	6949      	ldr	r1, [r1, #20]
2000205e:	0609      	lsls	r1, r1, #24
20002060:	d478      	bmi.n	20002154 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20002062:	2204      	movs	r2, #4
20002064:	409a      	lsls	r2, r3
20002066:	4222      	tst	r2, r4
20002068:	d004      	beq.n	20002074 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
2000206a:	f8d8 1000 	ldr.w	r1, [r8]
2000206e:	6809      	ldr	r1, [r1, #0]
20002070:	078f      	lsls	r7, r1, #30
20002072:	d467      	bmi.n	20002144 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
20002074:	2210      	movs	r2, #16
20002076:	409a      	lsls	r2, r3
20002078:	4222      	tst	r2, r4
2000207a:	d004      	beq.n	20002086 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
2000207c:	f8d8 1000 	ldr.w	r1, [r8]
20002080:	680f      	ldr	r7, [r1, #0]
20002082:	0738      	lsls	r0, r7, #28
20002084:	d449      	bmi.n	2000211a <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
20002086:	2220      	movs	r2, #32
20002088:	409a      	lsls	r2, r3
2000208a:	4222      	tst	r2, r4
2000208c:	d017      	beq.n	200020be <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
2000208e:	f8d8 1000 	ldr.w	r1, [r8]
20002092:	680c      	ldr	r4, [r1, #0]
20002094:	06e0      	lsls	r0, r4, #27
20002096:	d512      	bpl.n	200020be <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
20002098:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
2000209a:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
2000209e:	2a05      	cmp	r2, #5
200020a0:	d073      	beq.n	2000218a <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
200020a2:	680b      	ldr	r3, [r1, #0]
200020a4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
200020a8:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
200020aa:	f000 8090 	beq.w	200021ce <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
200020ae:	0319      	lsls	r1, r3, #12
200020b0:	f140 809b 	bpl.w	200021ea <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
200020b4:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
200020b8:	b10b      	cbz	r3, 200020be <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
200020ba:	4640      	mov	r0, r8
200020bc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
200020be:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
200020c2:	b33b      	cbz	r3, 20002114 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
200020c4:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
200020c8:	07da      	lsls	r2, r3, #31
200020ca:	d51b      	bpl.n	20002104 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
200020cc:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
200020d0:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
200020d2:	4b4c      	ldr	r3, [pc, #304]	; (20002204 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
200020d4:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
200020d8:	fba3 3505 	umull	r3, r5, r3, r5
      __HAL_DMA_DISABLE(hdma);
200020dc:	6813      	ldr	r3, [r2, #0]
200020de:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
200020e2:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
200020e4:	6013      	str	r3, [r2, #0]
200020e6:	e002      	b.n	200020ee <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
200020e8:	6813      	ldr	r3, [r2, #0]
200020ea:	07db      	lsls	r3, r3, #31
200020ec:	d504      	bpl.n	200020f8 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
200020ee:	9b01      	ldr	r3, [sp, #4]
200020f0:	3301      	adds	r3, #1
200020f2:	42ab      	cmp	r3, r5
200020f4:	9301      	str	r3, [sp, #4]
200020f6:	d9f7      	bls.n	200020e8 <HAL_DMA_IRQHandler+0xc0>
      __HAL_UNLOCK(hdma);
200020f8:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
200020fa:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
200020fc:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
20002100:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
20002104:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
20002108:	b123      	cbz	r3, 20002114 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
2000210a:	4640      	mov	r0, r8
}
2000210c:	b002      	add	sp, #8
2000210e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
20002112:	4718      	bx	r3
}
20002114:	b002      	add	sp, #8
20002116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
2000211a:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
2000211c:	680a      	ldr	r2, [r1, #0]
2000211e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
20002122:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
20002124:	d12a      	bne.n	2000217c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
20002126:	05d7      	lsls	r7, r2, #23
20002128:	d403      	bmi.n	20002132 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
2000212a:	680a      	ldr	r2, [r1, #0]
2000212c:	f022 0208 	bic.w	r2, r2, #8
20002130:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
20002132:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
20002136:	2a00      	cmp	r2, #0
20002138:	d0a5      	beq.n	20002086 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
2000213a:	4640      	mov	r0, r8
2000213c:	4790      	blx	r2
2000213e:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
20002142:	e7a0      	b.n	20002086 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20002144:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20002146:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
2000214a:	f042 0204 	orr.w	r2, r2, #4
2000214e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
20002152:	e78f      	b.n	20002074 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20002154:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20002156:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
2000215a:	f042 0202 	orr.w	r2, r2, #2
2000215e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
20002162:	e77e      	b.n	20002062 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
20002164:	680f      	ldr	r7, [r1, #0]
20002166:	f027 0704 	bic.w	r7, r7, #4
2000216a:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
2000216c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
2000216e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
20002172:	f042 0201 	orr.w	r2, r2, #1
20002176:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
2000217a:	e769      	b.n	20002050 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
2000217c:	0312      	lsls	r2, r2, #12
2000217e:	d5d8      	bpl.n	20002132 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
20002180:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
20002184:	2a00      	cmp	r2, #0
20002186:	d1d8      	bne.n	2000213a <HAL_DMA_IRQHandler+0x112>
20002188:	e77d      	b.n	20002086 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
2000218a:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
2000218c:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20002190:	f022 0216 	bic.w	r2, r2, #22
20002194:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
20002196:	694a      	ldr	r2, [r1, #20]
20002198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2000219c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
2000219e:	b354      	cbz	r4, 200021f6 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
200021a0:	680a      	ldr	r2, [r1, #0]
200021a2:	f022 0208 	bic.w	r2, r2, #8
200021a6:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
200021a8:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
200021aa:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
200021ac:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
200021ae:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
200021b2:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
200021b6:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
200021b8:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
200021bc:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
200021c0:	2a00      	cmp	r2, #0
200021c2:	d0a7      	beq.n	20002114 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
200021c4:	4640      	mov	r0, r8
}
200021c6:	b002      	add	sp, #8
200021c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
200021cc:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
200021ce:	f413 7380 	ands.w	r3, r3, #256	; 0x100
200021d2:	f47f af6f 	bne.w	200020b4 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
200021d6:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
200021d8:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
200021da:	f022 0210 	bic.w	r2, r2, #16
200021de:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
200021e0:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
200021e4:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
200021e8:	e764      	b.n	200020b4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
200021ea:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
200021ee:	2b00      	cmp	r3, #0
200021f0:	f47f af63 	bne.w	200020ba <HAL_DMA_IRQHandler+0x92>
200021f4:	e763      	b.n	200020be <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
200021f6:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
200021fa:	2a00      	cmp	r2, #0
200021fc:	d1d0      	bne.n	200021a0 <HAL_DMA_IRQHandler+0x178>
200021fe:	e7d3      	b.n	200021a8 <HAL_DMA_IRQHandler+0x180>
20002200:	20000218 	.word	0x20000218
20002204:	1b4e81b5 	.word	0x1b4e81b5

20002208 <HAL_DMA_RegisterCallback>:
{
20002208:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
2000220a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
2000220e:	2801      	cmp	r0, #1
20002210:	d00f      	beq.n	20002232 <HAL_DMA_RegisterCallback+0x2a>
  if(HAL_DMA_STATE_READY == hdma->State)
20002212:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
20002216:	2801      	cmp	r0, #1
20002218:	d004      	beq.n	20002224 <HAL_DMA_RegisterCallback+0x1c>
    status =  HAL_ERROR;
2000221a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
2000221c:	2200      	movs	r2, #0
2000221e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return status;
20002222:	4770      	bx	lr
    switch (CallbackID)
20002224:	2905      	cmp	r1, #5
20002226:	d818      	bhi.n	2000225a <HAL_DMA_RegisterCallback+0x52>
20002228:	e8df f001 	tbb	[pc, r1]
2000222c:	0b0e1114 	.word	0x0b0e1114
20002230:	0508      	.short	0x0508
  __HAL_LOCK(hdma);
20002232:	2002      	movs	r0, #2
}
20002234:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
20002236:	2000      	movs	r0, #0
      hdma->XferAbortCallback = pCallback;
20002238:	651a      	str	r2, [r3, #80]	; 0x50
      break;
2000223a:	e7ef      	b.n	2000221c <HAL_DMA_RegisterCallback+0x14>
  HAL_StatusTypeDef status = HAL_OK;
2000223c:	2000      	movs	r0, #0
      hdma->XferErrorCallback = pCallback;
2000223e:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
20002240:	e7ec      	b.n	2000221c <HAL_DMA_RegisterCallback+0x14>
  HAL_StatusTypeDef status = HAL_OK;
20002242:	2000      	movs	r0, #0
      hdma->XferM1HalfCpltCallback = pCallback;
20002244:	649a      	str	r2, [r3, #72]	; 0x48
      break;
20002246:	e7e9      	b.n	2000221c <HAL_DMA_RegisterCallback+0x14>
  HAL_StatusTypeDef status = HAL_OK;
20002248:	2000      	movs	r0, #0
      hdma->XferM1CpltCallback = pCallback;
2000224a:	645a      	str	r2, [r3, #68]	; 0x44
      break;
2000224c:	e7e6      	b.n	2000221c <HAL_DMA_RegisterCallback+0x14>
  HAL_StatusTypeDef status = HAL_OK;
2000224e:	2000      	movs	r0, #0
      hdma->XferHalfCpltCallback = pCallback;
20002250:	641a      	str	r2, [r3, #64]	; 0x40
      break;
20002252:	e7e3      	b.n	2000221c <HAL_DMA_RegisterCallback+0x14>
  HAL_StatusTypeDef status = HAL_OK;
20002254:	4608      	mov	r0, r1
      hdma->XferCpltCallback = pCallback;
20002256:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
20002258:	e7e0      	b.n	2000221c <HAL_DMA_RegisterCallback+0x14>
  if(HAL_DMA_STATE_READY == hdma->State)
2000225a:	2000      	movs	r0, #0
2000225c:	e7de      	b.n	2000221c <HAL_DMA_RegisterCallback+0x14>
2000225e:	bf00      	nop

20002260 <HAL_DMA_UnRegisterCallback>:
  __HAL_LOCK(hdma);
20002260:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
20002264:	2b01      	cmp	r3, #1
20002266:	d018      	beq.n	2000229a <HAL_DMA_UnRegisterCallback+0x3a>
{
20002268:	b410      	push	{r4}
  __HAL_LOCK(hdma);
2000226a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
2000226c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
20002270:	42a2      	cmp	r2, r4
20002272:	b2d3      	uxtb	r3, r2
  __HAL_LOCK(hdma);
20002274:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
20002278:	d007      	beq.n	2000228a <HAL_DMA_UnRegisterCallback+0x2a>
    status = HAL_ERROR;
2000227a:	4623      	mov	r3, r4
  __HAL_UNLOCK(hdma);
2000227c:	2200      	movs	r2, #0
2000227e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
20002282:	4618      	mov	r0, r3
20002284:	f85d 4b04 	ldr.w	r4, [sp], #4
20002288:	4770      	bx	lr
    switch (CallbackID)
2000228a:	2906      	cmp	r1, #6
2000228c:	d8f6      	bhi.n	2000227c <HAL_DMA_UnRegisterCallback+0x1c>
2000228e:	e8df f001 	tbb	[pc, r1]
20002292:	1c1f      	.short	0x1c1f
20002294:	10131619 	.word	0x10131619
20002298:	07          	.byte	0x07
20002299:	00          	.byte	0x00
  __HAL_LOCK(hdma);
2000229a:	2302      	movs	r3, #2
}
2000229c:	4618      	mov	r0, r3
2000229e:	4770      	bx	lr
      hdma->XferCpltCallback = NULL;
200022a0:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
200022a2:	4613      	mov	r3, r2
      hdma->XferCpltCallback = NULL;
200022a4:	63c2      	str	r2, [r0, #60]	; 0x3c
      hdma->XferAbortCallback = NULL;
200022a6:	6502      	str	r2, [r0, #80]	; 0x50
      hdma->XferM1CpltCallback = NULL;
200022a8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
      hdma->XferErrorCallback = NULL;
200022ac:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
      break; 
200022b0:	e7e4      	b.n	2000227c <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferAbortCallback = NULL;
200022b2:	2300      	movs	r3, #0
200022b4:	6503      	str	r3, [r0, #80]	; 0x50
      break; 
200022b6:	e7e1      	b.n	2000227c <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferErrorCallback = NULL;
200022b8:	2300      	movs	r3, #0
200022ba:	64c3      	str	r3, [r0, #76]	; 0x4c
      break;
200022bc:	e7de      	b.n	2000227c <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferM1HalfCpltCallback = NULL;
200022be:	2300      	movs	r3, #0
200022c0:	6483      	str	r3, [r0, #72]	; 0x48
      break;
200022c2:	e7db      	b.n	2000227c <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferM1CpltCallback = NULL;
200022c4:	2300      	movs	r3, #0
200022c6:	6443      	str	r3, [r0, #68]	; 0x44
      break;
200022c8:	e7d8      	b.n	2000227c <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferHalfCpltCallback = NULL;
200022ca:	2300      	movs	r3, #0
200022cc:	6403      	str	r3, [r0, #64]	; 0x40
      break;
200022ce:	e7d5      	b.n	2000227c <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferCpltCallback = NULL;
200022d0:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
200022d2:	460b      	mov	r3, r1
      hdma->XferCpltCallback = NULL;
200022d4:	63c2      	str	r2, [r0, #60]	; 0x3c
      break;
200022d6:	e7d1      	b.n	2000227c <HAL_DMA_UnRegisterCallback+0x1c>

200022d8 <HAL_DMA_GetState>:
  return hdma->State;
200022d8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
200022dc:	4770      	bx	lr
200022de:	bf00      	nop

200022e0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
200022e0:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
200022e2:	4770      	bx	lr

200022e4 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
200022e4:	b470      	push	{r4, r5, r6}
200022e6:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
200022e8:	6880      	ldr	r0, [r0, #8]
200022ea:	2880      	cmp	r0, #128	; 0x80
200022ec:	d023      	beq.n	20002336 <HAL_DMAEx_MultiBufferStart+0x52>
    status = HAL_ERROR;
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
200022ee:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
200022f2:	2d01      	cmp	r5, #1
200022f4:	d006      	beq.n	20002304 <HAL_DMAEx_MultiBufferStart+0x20>
200022f6:	2601      	movs	r6, #1
    
    if(HAL_DMA_STATE_READY == hdma->State)
200022f8:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
200022fc:	42b5      	cmp	r5, r6
    __HAL_LOCK(hdma);
200022fe:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    if(HAL_DMA_STATE_READY == hdma->State)
20002302:	d002      	beq.n	2000230a <HAL_DMAEx_MultiBufferStart+0x26>
    __HAL_LOCK(hdma);
20002304:	2002      	movs	r0, #2
      /* Return error status */
      status = HAL_BUSY;
    }
  }
  return status;
}
20002306:	bc70      	pop	{r4, r5, r6}
20002308:	4770      	bx	lr
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
2000230a:	6825      	ldr	r5, [r4, #0]
      hdma->State = HAL_DMA_STATE_BUSY; 
2000230c:	2602      	movs	r6, #2
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2000230e:	2840      	cmp	r0, #64	; 0x40
      hdma->State = HAL_DMA_STATE_BUSY; 
20002310:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
20002314:	682c      	ldr	r4, [r5, #0]
20002316:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
2000231a:	602c      	str	r4, [r5, #0]
      hdma->Instance->M1AR = SecondMemAddress;
2000231c:	612b      	str	r3, [r5, #16]
  hdma->Instance->NDTR = DataLength;
2000231e:	9b03      	ldr	r3, [sp, #12]
20002320:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20002322:	d00e      	beq.n	20002342 <HAL_DMAEx_MultiBufferStart+0x5e>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
20002324:	60a9      	str	r1, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
20002326:	60ea      	str	r2, [r5, #12]
      __HAL_DMA_ENABLE(hdma);
20002328:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000232a:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE(hdma);
2000232c:	f043 0301 	orr.w	r3, r3, #1
20002330:	602b      	str	r3, [r5, #0]
}
20002332:	bc70      	pop	{r4, r5, r6}
20002334:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20002336:	f44f 7380 	mov.w	r3, #256	; 0x100
    status = HAL_ERROR;
2000233a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
2000233c:	6563      	str	r3, [r4, #84]	; 0x54
}
2000233e:	bc70      	pop	{r4, r5, r6}
20002340:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
20002342:	60aa      	str	r2, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
20002344:	60e9      	str	r1, [r5, #12]
20002346:	e7ef      	b.n	20002328 <HAL_DMAEx_MultiBufferStart+0x44>

20002348 <HAL_DMAEx_MultiBufferStart_IT>:
{
20002348:	b4f0      	push	{r4, r5, r6, r7}
2000234a:	4604      	mov	r4, r0
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
2000234c:	6880      	ldr	r0, [r0, #8]
2000234e:	2880      	cmp	r0, #128	; 0x80
20002350:	d05a      	beq.n	20002408 <HAL_DMAEx_MultiBufferStart_IT+0xc0>
  __HAL_LOCK(hdma);
20002352:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
20002356:	2d01      	cmp	r5, #1
20002358:	f000 8085 	beq.w	20002466 <HAL_DMAEx_MultiBufferStart_IT+0x11e>
2000235c:	2601      	movs	r6, #1
  if(HAL_DMA_STATE_READY == hdma->State)
2000235e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
20002362:	42b5      	cmp	r5, r6
  __HAL_LOCK(hdma);
20002364:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
20002368:	d005      	beq.n	20002376 <HAL_DMAEx_MultiBufferStart_IT+0x2e>
    __HAL_UNLOCK(hdma);	  
2000236a:	2300      	movs	r3, #0
    status = HAL_BUSY;
2000236c:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
2000236e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
20002372:	bcf0      	pop	{r4, r5, r6, r7}
20002374:	4770      	bx	lr
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
20002376:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20002378:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
2000237a:	2702      	movs	r7, #2
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2000237c:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
2000237e:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20002382:	6566      	str	r6, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
20002384:	682e      	ldr	r6, [r5, #0]
20002386:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
2000238a:	602e      	str	r6, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
2000238c:	612b      	str	r3, [r5, #16]
  hdma->Instance->NDTR = DataLength;
2000238e:	9b04      	ldr	r3, [sp, #16]
20002390:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20002392:	d061      	beq.n	20002458 <HAL_DMAEx_MultiBufferStart_IT+0x110>
    hdma->Instance->PAR = SrcAddress;
20002394:	60a9      	str	r1, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
20002396:	60ea      	str	r2, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002398:	4b9f      	ldr	r3, [pc, #636]	; (20002618 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
2000239a:	429d      	cmp	r5, r3
2000239c:	d93a      	bls.n	20002414 <HAL_DMAEx_MultiBufferStart_IT+0xcc>
2000239e:	3b48      	subs	r3, #72	; 0x48
200023a0:	499e      	ldr	r1, [pc, #632]	; (2000261c <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
200023a2:	4a9f      	ldr	r2, [pc, #636]	; (20002620 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
200023a4:	429d      	cmp	r5, r3
200023a6:	bf18      	it	ne
200023a8:	428d      	cmpne	r5, r1
200023aa:	bf14      	ite	ne
200023ac:	2301      	movne	r3, #1
200023ae:	2300      	moveq	r3, #0
200023b0:	4295      	cmp	r5, r2
200023b2:	bf0c      	ite	eq
200023b4:	2300      	moveq	r3, #0
200023b6:	f003 0301 	andne.w	r3, r3, #1
200023ba:	b11b      	cbz	r3, 200023c4 <HAL_DMAEx_MultiBufferStart_IT+0x7c>
200023bc:	4b99      	ldr	r3, [pc, #612]	; (20002624 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
200023be:	429d      	cmp	r5, r3
200023c0:	f040 8108 	bne.w	200025d4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>
200023c4:	4b98      	ldr	r3, [pc, #608]	; (20002628 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
200023c6:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
200023c8:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200023ca:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
200023cc:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200023ce:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
200023d0:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200023d2:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200023d4:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200023d6:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200023d8:	4b93      	ldr	r3, [pc, #588]	; (20002628 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
200023da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
200023dc:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
200023de:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
200023e0:	f043 0316 	orr.w	r3, r3, #22
200023e4:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
200023e6:	696b      	ldr	r3, [r5, #20]
200023e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
200023ec:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
200023ee:	2a00      	cmp	r2, #0
200023f0:	d035      	beq.n	2000245e <HAL_DMAEx_MultiBufferStart_IT+0x116>
      hdma->Instance->CR  |= DMA_IT_HT;
200023f2:	682b      	ldr	r3, [r5, #0]
200023f4:	f043 0308 	orr.w	r3, r3, #8
200023f8:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
200023fa:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
200023fc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
200023fe:	f043 0301 	orr.w	r3, r3, #1
20002402:	602b      	str	r3, [r5, #0]
}
20002404:	bcf0      	pop	{r4, r5, r6, r7}
20002406:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20002408:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
2000240c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
2000240e:	6563      	str	r3, [r4, #84]	; 0x54
}
20002410:	bcf0      	pop	{r4, r5, r6, r7}
20002412:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002414:	4b85      	ldr	r3, [pc, #532]	; (2000262c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
20002416:	429d      	cmp	r5, r3
20002418:	d927      	bls.n	2000246a <HAL_DMAEx_MultiBufferStart_IT+0x122>
2000241a:	3ba8      	subs	r3, #168	; 0xa8
2000241c:	4984      	ldr	r1, [pc, #528]	; (20002630 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
2000241e:	4a80      	ldr	r2, [pc, #512]	; (20002620 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
20002420:	429d      	cmp	r5, r3
20002422:	bf18      	it	ne
20002424:	428d      	cmpne	r5, r1
20002426:	bf14      	ite	ne
20002428:	2301      	movne	r3, #1
2000242a:	2300      	moveq	r3, #0
2000242c:	4295      	cmp	r5, r2
2000242e:	bf0c      	ite	eq
20002430:	2300      	moveq	r3, #0
20002432:	f003 0301 	andne.w	r3, r3, #1
20002436:	b113      	cbz	r3, 2000243e <HAL_DMAEx_MultiBufferStart_IT+0xf6>
20002438:	4b7a      	ldr	r3, [pc, #488]	; (20002624 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
2000243a:	429d      	cmp	r5, r3
2000243c:	d158      	bne.n	200024f0 <HAL_DMAEx_MultiBufferStart_IT+0x1a8>
2000243e:	4b7a      	ldr	r3, [pc, #488]	; (20002628 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
20002440:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002442:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20002444:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002446:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002448:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
2000244a:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
2000244c:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
2000244e:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002450:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20002452:	4b75      	ldr	r3, [pc, #468]	; (20002628 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
20002454:	609a      	str	r2, [r3, #8]
20002456:	e7c1      	b.n	200023dc <HAL_DMAEx_MultiBufferStart_IT+0x94>
    hdma->Instance->PAR = DstAddress;
20002458:	60aa      	str	r2, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
2000245a:	60e9      	str	r1, [r5, #12]
2000245c:	e79c      	b.n	20002398 <HAL_DMAEx_MultiBufferStart_IT+0x50>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
2000245e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
20002460:	2b00      	cmp	r3, #0
20002462:	d1c6      	bne.n	200023f2 <HAL_DMAEx_MultiBufferStart_IT+0xaa>
20002464:	e7c9      	b.n	200023fa <HAL_DMAEx_MultiBufferStart_IT+0xb2>
  __HAL_LOCK(hdma);
20002466:	2002      	movs	r0, #2
20002468:	e783      	b.n	20002372 <HAL_DMAEx_MultiBufferStart_IT+0x2a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
2000246a:	4b72      	ldr	r3, [pc, #456]	; (20002634 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
2000246c:	429d      	cmp	r5, r3
2000246e:	d91f      	bls.n	200024b0 <HAL_DMAEx_MultiBufferStart_IT+0x168>
20002470:	3b48      	subs	r3, #72	; 0x48
20002472:	496f      	ldr	r1, [pc, #444]	; (20002630 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
20002474:	4a6a      	ldr	r2, [pc, #424]	; (20002620 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
20002476:	429d      	cmp	r5, r3
20002478:	bf18      	it	ne
2000247a:	428d      	cmpne	r5, r1
2000247c:	bf14      	ite	ne
2000247e:	2301      	movne	r3, #1
20002480:	2300      	moveq	r3, #0
20002482:	4295      	cmp	r5, r2
20002484:	bf0c      	ite	eq
20002486:	2300      	moveq	r3, #0
20002488:	f003 0301 	andne.w	r3, r3, #1
2000248c:	b11b      	cbz	r3, 20002496 <HAL_DMAEx_MultiBufferStart_IT+0x14e>
2000248e:	4b65      	ldr	r3, [pc, #404]	; (20002624 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
20002490:	429d      	cmp	r5, r3
20002492:	f040 814f 	bne.w	20002734 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
20002496:	4b68      	ldr	r3, [pc, #416]	; (20002638 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
20002498:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
2000249a:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
2000249c:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
2000249e:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200024a0:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
200024a2:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200024a4:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200024a6:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200024a8:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200024aa:	4b63      	ldr	r3, [pc, #396]	; (20002638 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
200024ac:	60da      	str	r2, [r3, #12]
200024ae:	e795      	b.n	200023dc <HAL_DMAEx_MultiBufferStart_IT+0x94>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
200024b0:	4b5f      	ldr	r3, [pc, #380]	; (20002630 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
200024b2:	495a      	ldr	r1, [pc, #360]	; (2000261c <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
200024b4:	4a5a      	ldr	r2, [pc, #360]	; (20002620 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
200024b6:	429d      	cmp	r5, r3
200024b8:	bf18      	it	ne
200024ba:	428d      	cmpne	r5, r1
200024bc:	bf14      	ite	ne
200024be:	2301      	movne	r3, #1
200024c0:	2300      	moveq	r3, #0
200024c2:	4295      	cmp	r5, r2
200024c4:	bf0c      	ite	eq
200024c6:	2300      	moveq	r3, #0
200024c8:	f003 0301 	andne.w	r3, r3, #1
200024cc:	b11b      	cbz	r3, 200024d6 <HAL_DMAEx_MultiBufferStart_IT+0x18e>
200024ce:	4b55      	ldr	r3, [pc, #340]	; (20002624 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
200024d0:	429d      	cmp	r5, r3
200024d2:	f040 80bb 	bne.w	2000264c <HAL_DMAEx_MultiBufferStart_IT+0x304>
200024d6:	4b58      	ldr	r3, [pc, #352]	; (20002638 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
200024d8:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
200024da:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200024dc:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
200024de:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200024e0:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
200024e2:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200024e4:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200024e6:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200024e8:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200024ea:	4b53      	ldr	r3, [pc, #332]	; (20002638 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
200024ec:	609a      	str	r2, [r3, #8]
200024ee:	e775      	b.n	200023dc <HAL_DMAEx_MultiBufferStart_IT+0x94>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
200024f0:	3b48      	subs	r3, #72	; 0x48
200024f2:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
200024f6:	3218      	adds	r2, #24
200024f8:	429d      	cmp	r5, r3
200024fa:	bf18      	it	ne
200024fc:	428d      	cmpne	r5, r1
200024fe:	bf14      	ite	ne
20002500:	2301      	movne	r3, #1
20002502:	2300      	moveq	r3, #0
20002504:	4295      	cmp	r5, r2
20002506:	bf0c      	ite	eq
20002508:	2300      	moveq	r3, #0
2000250a:	f003 0301 	andne.w	r3, r3, #1
2000250e:	b11b      	cbz	r3, 20002518 <HAL_DMAEx_MultiBufferStart_IT+0x1d0>
20002510:	4b4a      	ldr	r3, [pc, #296]	; (2000263c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
20002512:	429d      	cmp	r5, r3
20002514:	f040 8212 	bne.w	2000293c <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
20002518:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
2000251c:	4b48      	ldr	r3, [pc, #288]	; (20002640 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
2000251e:	4a49      	ldr	r2, [pc, #292]	; (20002644 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
20002520:	4849      	ldr	r0, [pc, #292]	; (20002648 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
20002522:	429d      	cmp	r5, r3
20002524:	bf18      	it	ne
20002526:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002528:	f842 1c20 	str.w	r1, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
2000252c:	bf14      	ite	ne
2000252e:	2301      	movne	r3, #1
20002530:	2300      	moveq	r3, #0
20002532:	4285      	cmp	r5, r0
20002534:	bf0c      	ite	eq
20002536:	2300      	moveq	r3, #0
20002538:	f003 0301 	andne.w	r3, r3, #1
2000253c:	b11b      	cbz	r3, 20002546 <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
2000253e:	4b3f      	ldr	r3, [pc, #252]	; (2000263c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
20002540:	429d      	cmp	r5, r3
20002542:	f040 8215 	bne.w	20002970 <HAL_DMAEx_MultiBufferStart_IT+0x628>
20002546:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
2000254a:	4b3d      	ldr	r3, [pc, #244]	; (20002640 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
2000254c:	493d      	ldr	r1, [pc, #244]	; (20002644 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
2000254e:	483e      	ldr	r0, [pc, #248]	; (20002648 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
20002550:	429d      	cmp	r5, r3
20002552:	bf18      	it	ne
20002554:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002556:	f841 2c20 	str.w	r2, [r1, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
2000255a:	bf14      	ite	ne
2000255c:	2301      	movne	r3, #1
2000255e:	2300      	moveq	r3, #0
20002560:	4285      	cmp	r5, r0
20002562:	bf0c      	ite	eq
20002564:	2300      	moveq	r3, #0
20002566:	f003 0301 	andne.w	r3, r3, #1
2000256a:	b11b      	cbz	r3, 20002574 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
2000256c:	4b33      	ldr	r3, [pc, #204]	; (2000263c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
2000256e:	429d      	cmp	r5, r3
20002570:	f040 822e 	bne.w	200029d0 <HAL_DMAEx_MultiBufferStart_IT+0x688>
20002574:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002578:	4b32      	ldr	r3, [pc, #200]	; (20002644 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
2000257a:	4931      	ldr	r1, [pc, #196]	; (20002640 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
2000257c:	4832      	ldr	r0, [pc, #200]	; (20002648 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
2000257e:	429d      	cmp	r5, r3
20002580:	bf18      	it	ne
20002582:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20002584:	f8c1 23e0 	str.w	r2, [r1, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002588:	bf14      	ite	ne
2000258a:	2301      	movne	r3, #1
2000258c:	2300      	moveq	r3, #0
2000258e:	4285      	cmp	r5, r0
20002590:	bf0c      	ite	eq
20002592:	2300      	moveq	r3, #0
20002594:	f003 0301 	andne.w	r3, r3, #1
20002598:	b11b      	cbz	r3, 200025a2 <HAL_DMAEx_MultiBufferStart_IT+0x25a>
2000259a:	4b28      	ldr	r3, [pc, #160]	; (2000263c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
2000259c:	429d      	cmp	r5, r3
2000259e:	f040 81ff 	bne.w	200029a0 <HAL_DMAEx_MultiBufferStart_IT+0x658>
200025a2:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200025a6:	4b27      	ldr	r3, [pc, #156]	; (20002644 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
200025a8:	4925      	ldr	r1, [pc, #148]	; (20002640 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
200025aa:	4827      	ldr	r0, [pc, #156]	; (20002648 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
200025ac:	429d      	cmp	r5, r3
200025ae:	bf18      	it	ne
200025b0:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200025b2:	f8c1 23e0 	str.w	r2, [r1, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200025b6:	bf14      	ite	ne
200025b8:	2301      	movne	r3, #1
200025ba:	2300      	moveq	r3, #0
200025bc:	4285      	cmp	r5, r0
200025be:	bf0c      	ite	eq
200025c0:	2300      	moveq	r3, #0
200025c2:	f003 0301 	andne.w	r3, r3, #1
200025c6:	b11b      	cbz	r3, 200025d0 <HAL_DMAEx_MultiBufferStart_IT+0x288>
200025c8:	4b1c      	ldr	r3, [pc, #112]	; (2000263c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
200025ca:	429d      	cmp	r5, r3
200025cc:	f040 8218 	bne.w	20002a00 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
200025d0:	2240      	movs	r2, #64	; 0x40
200025d2:	e73e      	b.n	20002452 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
200025d4:	3b48      	subs	r3, #72	; 0x48
200025d6:	3118      	adds	r1, #24
200025d8:	3218      	adds	r2, #24
200025da:	429d      	cmp	r5, r3
200025dc:	bf18      	it	ne
200025de:	428d      	cmpne	r5, r1
200025e0:	bf14      	ite	ne
200025e2:	2301      	movne	r3, #1
200025e4:	2300      	moveq	r3, #0
200025e6:	4295      	cmp	r5, r2
200025e8:	bf0c      	ite	eq
200025ea:	2300      	moveq	r3, #0
200025ec:	f003 0301 	andne.w	r3, r3, #1
200025f0:	b11b      	cbz	r3, 200025fa <HAL_DMAEx_MultiBufferStart_IT+0x2b2>
200025f2:	4b12      	ldr	r3, [pc, #72]	; (2000263c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
200025f4:	429d      	cmp	r5, r3
200025f6:	f040 8112 	bne.w	2000281e <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
200025fa:	4b0b      	ldr	r3, [pc, #44]	; (20002628 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
200025fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002600:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20002604:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002608:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
2000260a:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
2000260e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20002610:	2240      	movs	r2, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20002612:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002614:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20002616:	e6df      	b.n	200023d8 <HAL_DMAEx_MultiBufferStart_IT+0x90>
20002618:	40026458 	.word	0x40026458
2000261c:	40026010 	.word	0x40026010
20002620:	40026070 	.word	0x40026070
20002624:	40026470 	.word	0x40026470
20002628:	40026400 	.word	0x40026400
2000262c:	400260b8 	.word	0x400260b8
20002630:	40026410 	.word	0x40026410
20002634:	40026058 	.word	0x40026058
20002638:	40026000 	.word	0x40026000
2000263c:	40026488 	.word	0x40026488
20002640:	40026028 	.word	0x40026028
20002644:	40026428 	.word	0x40026428
20002648:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
2000264c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
20002650:	f501 6183 	add.w	r1, r1, #1048	; 0x418
20002654:	3218      	adds	r2, #24
20002656:	429d      	cmp	r5, r3
20002658:	bf18      	it	ne
2000265a:	428d      	cmpne	r5, r1
2000265c:	bf14      	ite	ne
2000265e:	2301      	movne	r3, #1
20002660:	2300      	moveq	r3, #0
20002662:	4295      	cmp	r5, r2
20002664:	bf0c      	ite	eq
20002666:	2300      	moveq	r3, #0
20002668:	f003 0301 	andne.w	r3, r3, #1
2000266c:	b11b      	cbz	r3, 20002676 <HAL_DMAEx_MultiBufferStart_IT+0x32e>
2000266e:	4bab      	ldr	r3, [pc, #684]	; (2000291c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
20002670:	429d      	cmp	r5, r3
20002672:	f040 81dd 	bne.w	20002a30 <HAL_DMAEx_MultiBufferStart_IT+0x6e8>
20002676:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
2000267a:	4ba9      	ldr	r3, [pc, #676]	; (20002920 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
2000267c:	4aa9      	ldr	r2, [pc, #676]	; (20002924 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
2000267e:	48aa      	ldr	r0, [pc, #680]	; (20002928 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
20002680:	429d      	cmp	r5, r3
20002682:	bf18      	it	ne
20002684:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002686:	f842 1c20 	str.w	r1, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
2000268a:	bf14      	ite	ne
2000268c:	2301      	movne	r3, #1
2000268e:	2300      	moveq	r3, #0
20002690:	4285      	cmp	r5, r0
20002692:	bf0c      	ite	eq
20002694:	2300      	moveq	r3, #0
20002696:	f003 0301 	andne.w	r3, r3, #1
2000269a:	b11b      	cbz	r3, 200026a4 <HAL_DMAEx_MultiBufferStart_IT+0x35c>
2000269c:	4b9f      	ldr	r3, [pc, #636]	; (2000291c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
2000269e:	429d      	cmp	r5, r3
200026a0:	f040 81df 	bne.w	20002a62 <HAL_DMAEx_MultiBufferStart_IT+0x71a>
200026a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200026a8:	4b9d      	ldr	r3, [pc, #628]	; (20002920 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
200026aa:	499e      	ldr	r1, [pc, #632]	; (20002924 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
200026ac:	489e      	ldr	r0, [pc, #632]	; (20002928 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
200026ae:	429d      	cmp	r5, r3
200026b0:	bf18      	it	ne
200026b2:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
200026b4:	f841 2c20 	str.w	r2, [r1, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200026b8:	bf14      	ite	ne
200026ba:	2301      	movne	r3, #1
200026bc:	2300      	moveq	r3, #0
200026be:	4285      	cmp	r5, r0
200026c0:	bf0c      	ite	eq
200026c2:	2300      	moveq	r3, #0
200026c4:	f003 0301 	andne.w	r3, r3, #1
200026c8:	b11b      	cbz	r3, 200026d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
200026ca:	4b94      	ldr	r3, [pc, #592]	; (2000291c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
200026cc:	429d      	cmp	r5, r3
200026ce:	f040 8228 	bne.w	20002b22 <HAL_DMAEx_MultiBufferStart_IT+0x7da>
200026d2:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200026d6:	4b93      	ldr	r3, [pc, #588]	; (20002924 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
200026d8:	4991      	ldr	r1, [pc, #580]	; (20002920 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
200026da:	4893      	ldr	r0, [pc, #588]	; (20002928 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
200026dc:	429d      	cmp	r5, r3
200026de:	bf18      	it	ne
200026e0:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200026e2:	f5a1 6185 	sub.w	r1, r1, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200026e6:	bf14      	ite	ne
200026e8:	2301      	movne	r3, #1
200026ea:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200026ec:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200026ee:	4285      	cmp	r5, r0
200026f0:	bf0c      	ite	eq
200026f2:	2300      	moveq	r3, #0
200026f4:	f003 0301 	andne.w	r3, r3, #1
200026f8:	b11b      	cbz	r3, 20002702 <HAL_DMAEx_MultiBufferStart_IT+0x3ba>
200026fa:	4b88      	ldr	r3, [pc, #544]	; (2000291c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
200026fc:	429d      	cmp	r5, r3
200026fe:	f040 81e0 	bne.w	20002ac2 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
20002702:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20002706:	4b86      	ldr	r3, [pc, #536]	; (20002920 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
20002708:	4986      	ldr	r1, [pc, #536]	; (20002924 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
2000270a:	4887      	ldr	r0, [pc, #540]	; (20002928 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
2000270c:	429d      	cmp	r5, r3
2000270e:	bf18      	it	ne
20002710:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002712:	f841 2c20 	str.w	r2, [r1, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20002716:	bf14      	ite	ne
20002718:	2301      	movne	r3, #1
2000271a:	2300      	moveq	r3, #0
2000271c:	4285      	cmp	r5, r0
2000271e:	bf0c      	ite	eq
20002720:	2300      	moveq	r3, #0
20002722:	f003 0301 	andne.w	r3, r3, #1
20002726:	b11b      	cbz	r3, 20002730 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
20002728:	4b7c      	ldr	r3, [pc, #496]	; (2000291c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
2000272a:	429d      	cmp	r5, r3
2000272c:	f040 8229 	bne.w	20002b82 <HAL_DMAEx_MultiBufferStart_IT+0x83a>
20002730:	2240      	movs	r2, #64	; 0x40
20002732:	e6da      	b.n	200024ea <HAL_DMAEx_MultiBufferStart_IT+0x1a2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002734:	3b48      	subs	r3, #72	; 0x48
20002736:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
2000273a:	3218      	adds	r2, #24
2000273c:	429d      	cmp	r5, r3
2000273e:	bf18      	it	ne
20002740:	428d      	cmpne	r5, r1
20002742:	bf14      	ite	ne
20002744:	2301      	movne	r3, #1
20002746:	2300      	moveq	r3, #0
20002748:	4295      	cmp	r5, r2
2000274a:	bf0c      	ite	eq
2000274c:	2300      	moveq	r3, #0
2000274e:	f003 0301 	andne.w	r3, r3, #1
20002752:	b11b      	cbz	r3, 2000275c <HAL_DMAEx_MultiBufferStart_IT+0x414>
20002754:	4b71      	ldr	r3, [pc, #452]	; (2000291c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
20002756:	429d      	cmp	r5, r3
20002758:	f040 81cb 	bne.w	20002af2 <HAL_DMAEx_MultiBufferStart_IT+0x7aa>
2000275c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002760:	4b70      	ldr	r3, [pc, #448]	; (20002924 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
20002762:	4a6f      	ldr	r2, [pc, #444]	; (20002920 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
20002764:	4870      	ldr	r0, [pc, #448]	; (20002928 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
20002766:	429d      	cmp	r5, r3
20002768:	bf18      	it	ne
2000276a:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
2000276c:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002770:	bf14      	ite	ne
20002772:	2301      	movne	r3, #1
20002774:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002776:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002778:	4285      	cmp	r5, r0
2000277a:	bf0c      	ite	eq
2000277c:	2300      	moveq	r3, #0
2000277e:	f003 0301 	andne.w	r3, r3, #1
20002782:	b11b      	cbz	r3, 2000278c <HAL_DMAEx_MultiBufferStart_IT+0x444>
20002784:	4b65      	ldr	r3, [pc, #404]	; (2000291c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
20002786:	429d      	cmp	r5, r3
20002788:	f040 8183 	bne.w	20002a92 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
2000278c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20002790:	4b63      	ldr	r3, [pc, #396]	; (20002920 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
20002792:	4964      	ldr	r1, [pc, #400]	; (20002924 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
20002794:	4864      	ldr	r0, [pc, #400]	; (20002928 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
20002796:	429d      	cmp	r5, r3
20002798:	bf18      	it	ne
2000279a:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
2000279c:	f841 2c1c 	str.w	r2, [r1, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200027a0:	bf14      	ite	ne
200027a2:	2301      	movne	r3, #1
200027a4:	2300      	moveq	r3, #0
200027a6:	4285      	cmp	r5, r0
200027a8:	bf0c      	ite	eq
200027aa:	2300      	moveq	r3, #0
200027ac:	f003 0301 	andne.w	r3, r3, #1
200027b0:	b11b      	cbz	r3, 200027ba <HAL_DMAEx_MultiBufferStart_IT+0x472>
200027b2:	4b5a      	ldr	r3, [pc, #360]	; (2000291c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
200027b4:	429d      	cmp	r5, r3
200027b6:	f040 81fa 	bne.w	20002bae <HAL_DMAEx_MultiBufferStart_IT+0x866>
200027ba:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200027be:	4b59      	ldr	r3, [pc, #356]	; (20002924 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
200027c0:	4957      	ldr	r1, [pc, #348]	; (20002920 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
200027c2:	4859      	ldr	r0, [pc, #356]	; (20002928 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
200027c4:	429d      	cmp	r5, r3
200027c6:	bf18      	it	ne
200027c8:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200027ca:	f5a1 6185 	sub.w	r1, r1, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200027ce:	bf14      	ite	ne
200027d0:	2301      	movne	r3, #1
200027d2:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200027d4:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200027d6:	4285      	cmp	r5, r0
200027d8:	bf0c      	ite	eq
200027da:	2300      	moveq	r3, #0
200027dc:	f003 0301 	andne.w	r3, r3, #1
200027e0:	b11b      	cbz	r3, 200027ea <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
200027e2:	4b4e      	ldr	r3, [pc, #312]	; (2000291c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
200027e4:	429d      	cmp	r5, r3
200027e6:	f040 81b4 	bne.w	20002b52 <HAL_DMAEx_MultiBufferStart_IT+0x80a>
200027ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200027ee:	4b4d      	ldr	r3, [pc, #308]	; (20002924 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
200027f0:	494b      	ldr	r1, [pc, #300]	; (20002920 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
200027f2:	484d      	ldr	r0, [pc, #308]	; (20002928 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
200027f4:	429d      	cmp	r5, r3
200027f6:	bf18      	it	ne
200027f8:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200027fa:	f5a1 6185 	sub.w	r1, r1, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200027fe:	bf14      	ite	ne
20002800:	2301      	movne	r3, #1
20002802:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002804:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20002806:	4285      	cmp	r5, r0
20002808:	bf0c      	ite	eq
2000280a:	2300      	moveq	r3, #0
2000280c:	f003 0301 	andne.w	r3, r3, #1
20002810:	b11b      	cbz	r3, 2000281a <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
20002812:	4b42      	ldr	r3, [pc, #264]	; (2000291c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
20002814:	429d      	cmp	r5, r3
20002816:	f040 81e0 	bne.w	20002bda <HAL_DMAEx_MultiBufferStart_IT+0x892>
2000281a:	2240      	movs	r2, #64	; 0x40
2000281c:	e645      	b.n	200024aa <HAL_DMAEx_MultiBufferStart_IT+0x162>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
2000281e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
20002822:	f501 6183 	add.w	r1, r1, #1048	; 0x418
20002826:	3218      	adds	r2, #24
20002828:	429d      	cmp	r5, r3
2000282a:	bf18      	it	ne
2000282c:	428d      	cmpne	r5, r1
2000282e:	bf14      	ite	ne
20002830:	2301      	movne	r3, #1
20002832:	2300      	moveq	r3, #0
20002834:	4295      	cmp	r5, r2
20002836:	bf0c      	ite	eq
20002838:	2300      	moveq	r3, #0
2000283a:	f003 0301 	andne.w	r3, r3, #1
2000283e:	2b00      	cmp	r3, #0
20002840:	f000 81f5 	beq.w	20002c2e <HAL_DMAEx_MultiBufferStart_IT+0x8e6>
20002844:	4b39      	ldr	r3, [pc, #228]	; (2000292c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
20002846:	429d      	cmp	r5, r3
20002848:	f000 81f1 	beq.w	20002c2e <HAL_DMAEx_MultiBufferStart_IT+0x8e6>
2000284c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002850:	4b37      	ldr	r3, [pc, #220]	; (20002930 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
20002852:	4a38      	ldr	r2, [pc, #224]	; (20002934 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
20002854:	4838      	ldr	r0, [pc, #224]	; (20002938 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
20002856:	429d      	cmp	r5, r3
20002858:	bf18      	it	ne
2000285a:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
2000285c:	f842 1c34 	str.w	r1, [r2, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002860:	bf14      	ite	ne
20002862:	2301      	movne	r3, #1
20002864:	2300      	moveq	r3, #0
20002866:	4285      	cmp	r5, r0
20002868:	bf0c      	ite	eq
2000286a:	2300      	moveq	r3, #0
2000286c:	f003 0301 	andne.w	r3, r3, #1
20002870:	2b00      	cmp	r3, #0
20002872:	f000 81d9 	beq.w	20002c28 <HAL_DMAEx_MultiBufferStart_IT+0x8e0>
20002876:	4b2d      	ldr	r3, [pc, #180]	; (2000292c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
20002878:	429d      	cmp	r5, r3
2000287a:	f000 81d5 	beq.w	20002c28 <HAL_DMAEx_MultiBufferStart_IT+0x8e0>
2000287e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20002882:	4b2b      	ldr	r3, [pc, #172]	; (20002930 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
20002884:	492b      	ldr	r1, [pc, #172]	; (20002934 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
20002886:	482c      	ldr	r0, [pc, #176]	; (20002938 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
20002888:	429d      	cmp	r5, r3
2000288a:	bf18      	it	ne
2000288c:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
2000288e:	f841 2c34 	str.w	r2, [r1, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20002892:	bf14      	ite	ne
20002894:	2301      	movne	r3, #1
20002896:	2300      	moveq	r3, #0
20002898:	4285      	cmp	r5, r0
2000289a:	bf0c      	ite	eq
2000289c:	2300      	moveq	r3, #0
2000289e:	f003 0301 	andne.w	r3, r3, #1
200028a2:	2b00      	cmp	r3, #0
200028a4:	f000 81b5 	beq.w	20002c12 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
200028a8:	4b20      	ldr	r3, [pc, #128]	; (2000292c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
200028aa:	429d      	cmp	r5, r3
200028ac:	f000 81b1 	beq.w	20002c12 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
200028b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200028b4:	4b1e      	ldr	r3, [pc, #120]	; (20002930 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
200028b6:	491f      	ldr	r1, [pc, #124]	; (20002934 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
200028b8:	481f      	ldr	r0, [pc, #124]	; (20002938 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
200028ba:	429d      	cmp	r5, r3
200028bc:	bf18      	it	ne
200028be:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200028c0:	f841 2c34 	str.w	r2, [r1, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200028c4:	bf14      	ite	ne
200028c6:	2301      	movne	r3, #1
200028c8:	2300      	moveq	r3, #0
200028ca:	4285      	cmp	r5, r0
200028cc:	bf0c      	ite	eq
200028ce:	2300      	moveq	r3, #0
200028d0:	f003 0301 	andne.w	r3, r3, #1
200028d4:	2b00      	cmp	r3, #0
200028d6:	f000 8199 	beq.w	20002c0c <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
200028da:	4b14      	ldr	r3, [pc, #80]	; (2000292c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
200028dc:	429d      	cmp	r5, r3
200028de:	f000 8195 	beq.w	20002c0c <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
200028e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200028e6:	4b12      	ldr	r3, [pc, #72]	; (20002930 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
200028e8:	4912      	ldr	r1, [pc, #72]	; (20002934 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
200028ea:	4813      	ldr	r0, [pc, #76]	; (20002938 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
200028ec:	429d      	cmp	r5, r3
200028ee:	bf18      	it	ne
200028f0:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200028f2:	f841 2c34 	str.w	r2, [r1, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200028f6:	bf14      	ite	ne
200028f8:	2301      	movne	r3, #1
200028fa:	2300      	moveq	r3, #0
200028fc:	4285      	cmp	r5, r0
200028fe:	bf0c      	ite	eq
20002900:	2300      	moveq	r3, #0
20002902:	f003 0301 	andne.w	r3, r3, #1
20002906:	2b00      	cmp	r3, #0
20002908:	f000 817c 	beq.w	20002c04 <HAL_DMAEx_MultiBufferStart_IT+0x8bc>
2000290c:	4b07      	ldr	r3, [pc, #28]	; (2000292c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
2000290e:	429d      	cmp	r5, r3
20002910:	f000 8178 	beq.w	20002c04 <HAL_DMAEx_MultiBufferStart_IT+0x8bc>
20002914:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
20002918:	e55e      	b.n	200023d8 <HAL_DMAEx_MultiBufferStart_IT+0x90>
2000291a:	bf00      	nop
2000291c:	40026488 	.word	0x40026488
20002920:	40026428 	.word	0x40026428
20002924:	40026028 	.word	0x40026028
20002928:	40026088 	.word	0x40026088
2000292c:	400264a0 	.word	0x400264a0
20002930:	40026040 	.word	0x40026040
20002934:	40026440 	.word	0x40026440
20002938:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
2000293c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
20002940:	f501 6183 	add.w	r1, r1, #1048	; 0x418
20002944:	3218      	adds	r2, #24
20002946:	429d      	cmp	r5, r3
20002948:	bf18      	it	ne
2000294a:	428d      	cmpne	r5, r1
2000294c:	bf14      	ite	ne
2000294e:	2301      	movne	r3, #1
20002950:	2300      	moveq	r3, #0
20002952:	4295      	cmp	r5, r2
20002954:	bf0c      	ite	eq
20002956:	2300      	moveq	r3, #0
20002958:	f003 0301 	andne.w	r3, r3, #1
2000295c:	2b00      	cmp	r3, #0
2000295e:	f000 816c 	beq.w	20002c3a <HAL_DMAEx_MultiBufferStart_IT+0x8f2>
20002962:	4bad      	ldr	r3, [pc, #692]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002964:	429d      	cmp	r5, r3
20002966:	f000 8168 	beq.w	20002c3a <HAL_DMAEx_MultiBufferStart_IT+0x8f2>
2000296a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
2000296e:	e5d5      	b.n	2000251c <HAL_DMAEx_MultiBufferStart_IT+0x1d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002970:	4baa      	ldr	r3, [pc, #680]	; (20002c1c <HAL_DMAEx_MultiBufferStart_IT+0x8d4>)
20002972:	49ab      	ldr	r1, [pc, #684]	; (20002c20 <HAL_DMAEx_MultiBufferStart_IT+0x8d8>)
20002974:	4aab      	ldr	r2, [pc, #684]	; (20002c24 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>)
20002976:	429d      	cmp	r5, r3
20002978:	bf18      	it	ne
2000297a:	428d      	cmpne	r5, r1
2000297c:	bf14      	ite	ne
2000297e:	2301      	movne	r3, #1
20002980:	2300      	moveq	r3, #0
20002982:	4295      	cmp	r5, r2
20002984:	bf0c      	ite	eq
20002986:	2300      	moveq	r3, #0
20002988:	f003 0301 	andne.w	r3, r3, #1
2000298c:	2b00      	cmp	r3, #0
2000298e:	f000 815a 	beq.w	20002c46 <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
20002992:	4ba1      	ldr	r3, [pc, #644]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002994:	429d      	cmp	r5, r3
20002996:	f000 8156 	beq.w	20002c46 <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
2000299a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
2000299e:	e5d4      	b.n	2000254a <HAL_DMAEx_MultiBufferStart_IT+0x202>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
200029a0:	4b9f      	ldr	r3, [pc, #636]	; (20002c20 <HAL_DMAEx_MultiBufferStart_IT+0x8d8>)
200029a2:	499e      	ldr	r1, [pc, #632]	; (20002c1c <HAL_DMAEx_MultiBufferStart_IT+0x8d4>)
200029a4:	4a9f      	ldr	r2, [pc, #636]	; (20002c24 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>)
200029a6:	429d      	cmp	r5, r3
200029a8:	bf18      	it	ne
200029aa:	428d      	cmpne	r5, r1
200029ac:	bf14      	ite	ne
200029ae:	2301      	movne	r3, #1
200029b0:	2300      	moveq	r3, #0
200029b2:	4295      	cmp	r5, r2
200029b4:	bf0c      	ite	eq
200029b6:	2300      	moveq	r3, #0
200029b8:	f003 0301 	andne.w	r3, r3, #1
200029bc:	2b00      	cmp	r3, #0
200029be:	f000 813f 	beq.w	20002c40 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
200029c2:	4b95      	ldr	r3, [pc, #596]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
200029c4:	429d      	cmp	r5, r3
200029c6:	f000 813b 	beq.w	20002c40 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
200029ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
200029ce:	e5ea      	b.n	200025a6 <HAL_DMAEx_MultiBufferStart_IT+0x25e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200029d0:	4b93      	ldr	r3, [pc, #588]	; (20002c20 <HAL_DMAEx_MultiBufferStart_IT+0x8d8>)
200029d2:	4992      	ldr	r1, [pc, #584]	; (20002c1c <HAL_DMAEx_MultiBufferStart_IT+0x8d4>)
200029d4:	4a93      	ldr	r2, [pc, #588]	; (20002c24 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>)
200029d6:	429d      	cmp	r5, r3
200029d8:	bf18      	it	ne
200029da:	428d      	cmpne	r5, r1
200029dc:	bf14      	ite	ne
200029de:	2301      	movne	r3, #1
200029e0:	2300      	moveq	r3, #0
200029e2:	4295      	cmp	r5, r2
200029e4:	bf0c      	ite	eq
200029e6:	2300      	moveq	r3, #0
200029e8:	f003 0301 	andne.w	r3, r3, #1
200029ec:	2b00      	cmp	r3, #0
200029ee:	f000 812d 	beq.w	20002c4c <HAL_DMAEx_MultiBufferStart_IT+0x904>
200029f2:	4b89      	ldr	r3, [pc, #548]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
200029f4:	429d      	cmp	r5, r3
200029f6:	f000 8129 	beq.w	20002c4c <HAL_DMAEx_MultiBufferStart_IT+0x904>
200029fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
200029fe:	e5bb      	b.n	20002578 <HAL_DMAEx_MultiBufferStart_IT+0x230>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20002a00:	4b87      	ldr	r3, [pc, #540]	; (20002c20 <HAL_DMAEx_MultiBufferStart_IT+0x8d8>)
20002a02:	4986      	ldr	r1, [pc, #536]	; (20002c1c <HAL_DMAEx_MultiBufferStart_IT+0x8d4>)
20002a04:	4a87      	ldr	r2, [pc, #540]	; (20002c24 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>)
20002a06:	429d      	cmp	r5, r3
20002a08:	bf18      	it	ne
20002a0a:	428d      	cmpne	r5, r1
20002a0c:	bf14      	ite	ne
20002a0e:	2301      	movne	r3, #1
20002a10:	2300      	moveq	r3, #0
20002a12:	4295      	cmp	r5, r2
20002a14:	bf0c      	ite	eq
20002a16:	2300      	moveq	r3, #0
20002a18:	f003 0301 	andne.w	r3, r3, #1
20002a1c:	2b00      	cmp	r3, #0
20002a1e:	f000 8109 	beq.w	20002c34 <HAL_DMAEx_MultiBufferStart_IT+0x8ec>
20002a22:	4b7d      	ldr	r3, [pc, #500]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002a24:	429d      	cmp	r5, r3
20002a26:	f000 8105 	beq.w	20002c34 <HAL_DMAEx_MultiBufferStart_IT+0x8ec>
20002a2a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
20002a2e:	e510      	b.n	20002452 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002a30:	3b48      	subs	r3, #72	; 0x48
20002a32:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
20002a36:	3218      	adds	r2, #24
20002a38:	429d      	cmp	r5, r3
20002a3a:	bf18      	it	ne
20002a3c:	428d      	cmpne	r5, r1
20002a3e:	bf14      	ite	ne
20002a40:	2301      	movne	r3, #1
20002a42:	2300      	moveq	r3, #0
20002a44:	4295      	cmp	r5, r2
20002a46:	bf0c      	ite	eq
20002a48:	2300      	moveq	r3, #0
20002a4a:	f003 0301 	andne.w	r3, r3, #1
20002a4e:	2b00      	cmp	r3, #0
20002a50:	f000 8111 	beq.w	20002c76 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
20002a54:	4b70      	ldr	r3, [pc, #448]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002a56:	429d      	cmp	r5, r3
20002a58:	f000 810d 	beq.w	20002c76 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
20002a5c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
20002a60:	e60b      	b.n	2000267a <HAL_DMAEx_MultiBufferStart_IT+0x332>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002a62:	4b6f      	ldr	r3, [pc, #444]	; (20002c20 <HAL_DMAEx_MultiBufferStart_IT+0x8d8>)
20002a64:	496d      	ldr	r1, [pc, #436]	; (20002c1c <HAL_DMAEx_MultiBufferStart_IT+0x8d4>)
20002a66:	4a6f      	ldr	r2, [pc, #444]	; (20002c24 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>)
20002a68:	429d      	cmp	r5, r3
20002a6a:	bf18      	it	ne
20002a6c:	428d      	cmpne	r5, r1
20002a6e:	bf14      	ite	ne
20002a70:	2301      	movne	r3, #1
20002a72:	2300      	moveq	r3, #0
20002a74:	4295      	cmp	r5, r2
20002a76:	bf0c      	ite	eq
20002a78:	2300      	moveq	r3, #0
20002a7a:	f003 0301 	andne.w	r3, r3, #1
20002a7e:	2b00      	cmp	r3, #0
20002a80:	f000 80ed 	beq.w	20002c5e <HAL_DMAEx_MultiBufferStart_IT+0x916>
20002a84:	4b64      	ldr	r3, [pc, #400]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002a86:	429d      	cmp	r5, r3
20002a88:	f000 80e9 	beq.w	20002c5e <HAL_DMAEx_MultiBufferStart_IT+0x916>
20002a8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
20002a90:	e60a      	b.n	200026a8 <HAL_DMAEx_MultiBufferStart_IT+0x360>
20002a92:	4b62      	ldr	r3, [pc, #392]	; (20002c1c <HAL_DMAEx_MultiBufferStart_IT+0x8d4>)
20002a94:	4962      	ldr	r1, [pc, #392]	; (20002c20 <HAL_DMAEx_MultiBufferStart_IT+0x8d8>)
20002a96:	4a63      	ldr	r2, [pc, #396]	; (20002c24 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>)
20002a98:	429d      	cmp	r5, r3
20002a9a:	bf18      	it	ne
20002a9c:	428d      	cmpne	r5, r1
20002a9e:	bf14      	ite	ne
20002aa0:	2301      	movne	r3, #1
20002aa2:	2300      	moveq	r3, #0
20002aa4:	4295      	cmp	r5, r2
20002aa6:	bf0c      	ite	eq
20002aa8:	2300      	moveq	r3, #0
20002aaa:	f003 0301 	andne.w	r3, r3, #1
20002aae:	2b00      	cmp	r3, #0
20002ab0:	f000 80e7 	beq.w	20002c82 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
20002ab4:	4b58      	ldr	r3, [pc, #352]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002ab6:	429d      	cmp	r5, r3
20002ab8:	f000 80e3 	beq.w	20002c82 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
20002abc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
20002ac0:	e666      	b.n	20002790 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002ac2:	4b56      	ldr	r3, [pc, #344]	; (20002c1c <HAL_DMAEx_MultiBufferStart_IT+0x8d4>)
20002ac4:	4956      	ldr	r1, [pc, #344]	; (20002c20 <HAL_DMAEx_MultiBufferStart_IT+0x8d8>)
20002ac6:	4a57      	ldr	r2, [pc, #348]	; (20002c24 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>)
20002ac8:	429d      	cmp	r5, r3
20002aca:	bf18      	it	ne
20002acc:	428d      	cmpne	r5, r1
20002ace:	bf14      	ite	ne
20002ad0:	2301      	movne	r3, #1
20002ad2:	2300      	moveq	r3, #0
20002ad4:	4295      	cmp	r5, r2
20002ad6:	bf0c      	ite	eq
20002ad8:	2300      	moveq	r3, #0
20002ada:	f003 0301 	andne.w	r3, r3, #1
20002ade:	2b00      	cmp	r3, #0
20002ae0:	f000 80ba 	beq.w	20002c58 <HAL_DMAEx_MultiBufferStart_IT+0x910>
20002ae4:	4b4c      	ldr	r3, [pc, #304]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002ae6:	429d      	cmp	r5, r3
20002ae8:	f000 80b6 	beq.w	20002c58 <HAL_DMAEx_MultiBufferStart_IT+0x910>
20002aec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20002af0:	e609      	b.n	20002706 <HAL_DMAEx_MultiBufferStart_IT+0x3be>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002af2:	3b48      	subs	r3, #72	; 0x48
20002af4:	3118      	adds	r1, #24
20002af6:	3218      	adds	r2, #24
20002af8:	429d      	cmp	r5, r3
20002afa:	bf18      	it	ne
20002afc:	428d      	cmpne	r5, r1
20002afe:	bf14      	ite	ne
20002b00:	2301      	movne	r3, #1
20002b02:	2300      	moveq	r3, #0
20002b04:	4295      	cmp	r5, r2
20002b06:	bf0c      	ite	eq
20002b08:	2300      	moveq	r3, #0
20002b0a:	f003 0301 	andne.w	r3, r3, #1
20002b0e:	2b00      	cmp	r3, #0
20002b10:	f000 80b4 	beq.w	20002c7c <HAL_DMAEx_MultiBufferStart_IT+0x934>
20002b14:	4b40      	ldr	r3, [pc, #256]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002b16:	429d      	cmp	r5, r3
20002b18:	f000 80b0 	beq.w	20002c7c <HAL_DMAEx_MultiBufferStart_IT+0x934>
20002b1c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
20002b20:	e61e      	b.n	20002760 <HAL_DMAEx_MultiBufferStart_IT+0x418>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20002b22:	4b3f      	ldr	r3, [pc, #252]	; (20002c20 <HAL_DMAEx_MultiBufferStart_IT+0x8d8>)
20002b24:	493d      	ldr	r1, [pc, #244]	; (20002c1c <HAL_DMAEx_MultiBufferStart_IT+0x8d4>)
20002b26:	4a3f      	ldr	r2, [pc, #252]	; (20002c24 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>)
20002b28:	429d      	cmp	r5, r3
20002b2a:	bf18      	it	ne
20002b2c:	428d      	cmpne	r5, r1
20002b2e:	bf14      	ite	ne
20002b30:	2301      	movne	r3, #1
20002b32:	2300      	moveq	r3, #0
20002b34:	4295      	cmp	r5, r2
20002b36:	bf0c      	ite	eq
20002b38:	2300      	moveq	r3, #0
20002b3a:	f003 0301 	andne.w	r3, r3, #1
20002b3e:	2b00      	cmp	r3, #0
20002b40:	f000 8093 	beq.w	20002c6a <HAL_DMAEx_MultiBufferStart_IT+0x922>
20002b44:	4b34      	ldr	r3, [pc, #208]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002b46:	429d      	cmp	r5, r3
20002b48:	f000 808f 	beq.w	20002c6a <HAL_DMAEx_MultiBufferStart_IT+0x922>
20002b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
20002b50:	e5c1      	b.n	200026d6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002b52:	4b32      	ldr	r3, [pc, #200]	; (20002c1c <HAL_DMAEx_MultiBufferStart_IT+0x8d4>)
20002b54:	4932      	ldr	r1, [pc, #200]	; (20002c20 <HAL_DMAEx_MultiBufferStart_IT+0x8d8>)
20002b56:	4a33      	ldr	r2, [pc, #204]	; (20002c24 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>)
20002b58:	429d      	cmp	r5, r3
20002b5a:	bf18      	it	ne
20002b5c:	428d      	cmpne	r5, r1
20002b5e:	bf14      	ite	ne
20002b60:	2301      	movne	r3, #1
20002b62:	2300      	moveq	r3, #0
20002b64:	4295      	cmp	r5, r2
20002b66:	bf0c      	ite	eq
20002b68:	2300      	moveq	r3, #0
20002b6a:	f003 0301 	andne.w	r3, r3, #1
20002b6e:	2b00      	cmp	r3, #0
20002b70:	f000 808a 	beq.w	20002c88 <HAL_DMAEx_MultiBufferStart_IT+0x940>
20002b74:	4b28      	ldr	r3, [pc, #160]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002b76:	429d      	cmp	r5, r3
20002b78:	f000 8086 	beq.w	20002c88 <HAL_DMAEx_MultiBufferStart_IT+0x940>
20002b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20002b80:	e635      	b.n	200027ee <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20002b82:	4b27      	ldr	r3, [pc, #156]	; (20002c20 <HAL_DMAEx_MultiBufferStart_IT+0x8d8>)
20002b84:	4925      	ldr	r1, [pc, #148]	; (20002c1c <HAL_DMAEx_MultiBufferStart_IT+0x8d4>)
20002b86:	4a27      	ldr	r2, [pc, #156]	; (20002c24 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>)
20002b88:	429d      	cmp	r5, r3
20002b8a:	bf18      	it	ne
20002b8c:	428d      	cmpne	r5, r1
20002b8e:	bf14      	ite	ne
20002b90:	2301      	movne	r3, #1
20002b92:	2300      	moveq	r3, #0
20002b94:	4295      	cmp	r5, r2
20002b96:	bf0c      	ite	eq
20002b98:	2300      	moveq	r3, #0
20002b9a:	f003 0301 	andne.w	r3, r3, #1
20002b9e:	2b00      	cmp	r3, #0
20002ba0:	d060      	beq.n	20002c64 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
20002ba2:	4b1d      	ldr	r3, [pc, #116]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002ba4:	429d      	cmp	r5, r3
20002ba6:	d05d      	beq.n	20002c64 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
20002ba8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
20002bac:	e49d      	b.n	200024ea <HAL_DMAEx_MultiBufferStart_IT+0x1a2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20002bae:	4b1c      	ldr	r3, [pc, #112]	; (20002c20 <HAL_DMAEx_MultiBufferStart_IT+0x8d8>)
20002bb0:	491a      	ldr	r1, [pc, #104]	; (20002c1c <HAL_DMAEx_MultiBufferStart_IT+0x8d4>)
20002bb2:	4a1c      	ldr	r2, [pc, #112]	; (20002c24 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>)
20002bb4:	429d      	cmp	r5, r3
20002bb6:	bf18      	it	ne
20002bb8:	428d      	cmpne	r5, r1
20002bba:	bf14      	ite	ne
20002bbc:	2301      	movne	r3, #1
20002bbe:	2300      	moveq	r3, #0
20002bc0:	4295      	cmp	r5, r2
20002bc2:	bf0c      	ite	eq
20002bc4:	2300      	moveq	r3, #0
20002bc6:	f003 0301 	andne.w	r3, r3, #1
20002bca:	2b00      	cmp	r3, #0
20002bcc:	d050      	beq.n	20002c70 <HAL_DMAEx_MultiBufferStart_IT+0x928>
20002bce:	4b12      	ldr	r3, [pc, #72]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002bd0:	429d      	cmp	r5, r3
20002bd2:	d04d      	beq.n	20002c70 <HAL_DMAEx_MultiBufferStart_IT+0x928>
20002bd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
20002bd8:	e5f1      	b.n	200027be <HAL_DMAEx_MultiBufferStart_IT+0x476>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20002bda:	4b11      	ldr	r3, [pc, #68]	; (20002c20 <HAL_DMAEx_MultiBufferStart_IT+0x8d8>)
20002bdc:	490f      	ldr	r1, [pc, #60]	; (20002c1c <HAL_DMAEx_MultiBufferStart_IT+0x8d4>)
20002bde:	4a11      	ldr	r2, [pc, #68]	; (20002c24 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>)
20002be0:	429d      	cmp	r5, r3
20002be2:	bf18      	it	ne
20002be4:	428d      	cmpne	r5, r1
20002be6:	bf14      	ite	ne
20002be8:	2301      	movne	r3, #1
20002bea:	2300      	moveq	r3, #0
20002bec:	4295      	cmp	r5, r2
20002bee:	bf0c      	ite	eq
20002bf0:	2300      	moveq	r3, #0
20002bf2:	f003 0301 	andne.w	r3, r3, #1
20002bf6:	b363      	cbz	r3, 20002c52 <HAL_DMAEx_MultiBufferStart_IT+0x90a>
20002bf8:	4b07      	ldr	r3, [pc, #28]	; (20002c18 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>)
20002bfa:	429d      	cmp	r5, r3
20002bfc:	d029      	beq.n	20002c52 <HAL_DMAEx_MultiBufferStart_IT+0x90a>
20002bfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
20002c02:	e452      	b.n	200024aa <HAL_DMAEx_MultiBufferStart_IT+0x162>
20002c04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20002c08:	f7ff bbe6 	b.w	200023d8 <HAL_DMAEx_MultiBufferStart_IT+0x90>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002c0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
20002c10:	e669      	b.n	200028e6 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20002c12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
20002c16:	e64d      	b.n	200028b4 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
20002c18:	400264a0 	.word	0x400264a0
20002c1c:	40026440 	.word	0x40026440
20002c20:	40026040 	.word	0x40026040
20002c24:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002c28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
20002c2c:	e629      	b.n	20002882 <HAL_DMAEx_MultiBufferStart_IT+0x53a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002c2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
20002c32:	e60d      	b.n	20002850 <HAL_DMAEx_MultiBufferStart_IT+0x508>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20002c34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20002c38:	e40b      	b.n	20002452 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002c3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
20002c3e:	e46d      	b.n	2000251c <HAL_DMAEx_MultiBufferStart_IT+0x1d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002c40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
20002c44:	e4af      	b.n	200025a6 <HAL_DMAEx_MultiBufferStart_IT+0x25e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002c46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
20002c4a:	e47e      	b.n	2000254a <HAL_DMAEx_MultiBufferStart_IT+0x202>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20002c4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
20002c50:	e492      	b.n	20002578 <HAL_DMAEx_MultiBufferStart_IT+0x230>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20002c52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20002c56:	e428      	b.n	200024aa <HAL_DMAEx_MultiBufferStart_IT+0x162>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002c58:	f44f 2280 	mov.w	r2, #262144	; 0x40000
20002c5c:	e553      	b.n	20002706 <HAL_DMAEx_MultiBufferStart_IT+0x3be>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002c5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
20002c62:	e521      	b.n	200026a8 <HAL_DMAEx_MultiBufferStart_IT+0x360>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20002c64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20002c68:	e43f      	b.n	200024ea <HAL_DMAEx_MultiBufferStart_IT+0x1a2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20002c6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
20002c6e:	e532      	b.n	200026d6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
20002c70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
20002c74:	e5a3      	b.n	200027be <HAL_DMAEx_MultiBufferStart_IT+0x476>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002c76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
20002c7a:	e4fe      	b.n	2000267a <HAL_DMAEx_MultiBufferStart_IT+0x332>
20002c7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
20002c80:	e56e      	b.n	20002760 <HAL_DMAEx_MultiBufferStart_IT+0x418>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20002c82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
20002c86:	e583      	b.n	20002790 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20002c88:	f44f 2280 	mov.w	r2, #262144	; 0x40000
20002c8c:	e5af      	b.n	200027ee <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
20002c8e:	bf00      	nop

20002c90 <HAL_DMAEx_ChangeMemory>:
    hdma->Instance->M0AR = Address;
20002c90:	6803      	ldr	r3, [r0, #0]
  if(memory == MEMORY0)
20002c92:	b912      	cbnz	r2, 20002c9a <HAL_DMAEx_ChangeMemory+0xa>
}
20002c94:	2000      	movs	r0, #0
    hdma->Instance->M0AR = Address;
20002c96:	60d9      	str	r1, [r3, #12]
}
20002c98:	4770      	bx	lr
20002c9a:	2000      	movs	r0, #0
    hdma->Instance->M1AR = Address;
20002c9c:	6119      	str	r1, [r3, #16]
}
20002c9e:	4770      	bx	lr

20002ca0 <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
20002ca0:	2800      	cmp	r0, #0
20002ca2:	d039      	beq.n	20002d18 <HAL_EXTI_SetConfigLine+0x78>
20002ca4:	2900      	cmp	r1, #0
20002ca6:	d037      	beq.n	20002d18 <HAL_EXTI_SetConfigLine+0x78>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
20002ca8:	680b      	ldr	r3, [r1, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
  maskline = (1uL << linepos);
20002caa:	2201      	movs	r2, #1
{
20002cac:	b470      	push	{r4, r5, r6}
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
20002cae:	f003 041f 	and.w	r4, r3, #31
  hexti->Line = pExtiConfig->Line;
20002cb2:	6003      	str	r3, [r0, #0]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
20002cb4:	0198      	lsls	r0, r3, #6
  maskline = (1uL << linepos);
20002cb6:	fa02 f204 	lsl.w	r2, r2, r4
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
20002cba:	d515      	bpl.n	20002ce8 <HAL_EXTI_SetConfigLine+0x48>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
20002cbc:	6888      	ldr	r0, [r1, #8]
    {
      EXTI->RTSR |= maskline;
20002cbe:	4e21      	ldr	r6, [pc, #132]	; (20002d44 <HAL_EXTI_SetConfigLine+0xa4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
20002cc0:	f010 0f01 	tst.w	r0, #1
      EXTI->RTSR |= maskline;
20002cc4:	68b5      	ldr	r5, [r6, #8]
20002cc6:	bf14      	ite	ne
20002cc8:	4315      	orrne	r5, r2
    }
    else
    {
      EXTI->RTSR &= ~maskline;
20002cca:	4395      	biceq	r5, r2
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
20002ccc:	f010 0f02 	tst.w	r0, #2
      EXTI->RTSR &= ~maskline;
20002cd0:	60b5      	str	r5, [r6, #8]
    {
      EXTI->FTSR |= maskline;
20002cd2:	4d1c      	ldr	r5, [pc, #112]	; (20002d44 <HAL_EXTI_SetConfigLine+0xa4>)
20002cd4:	68e8      	ldr	r0, [r5, #12]
20002cd6:	bf14      	ite	ne
20002cd8:	4310      	orrne	r0, r2
    }
    else
    {
      EXTI->FTSR &= ~maskline;
20002cda:	4390      	biceq	r0, r2
20002cdc:	60e8      	str	r0, [r5, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
20002cde:	f003 60c0 	and.w	r0, r3, #100663296	; 0x6000000
20002ce2:	f1b0 6fc0 	cmp.w	r0, #100663296	; 0x6000000
20002ce6:	d019      	beq.n	20002d1c <HAL_EXTI_SetConfigLine+0x7c>
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
20002ce8:	6848      	ldr	r0, [r1, #4]
  {
    EXTI->IMR |= maskline;
20002cea:	4916      	ldr	r1, [pc, #88]	; (20002d44 <HAL_EXTI_SetConfigLine+0xa4>)
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
20002cec:	07c4      	lsls	r4, r0, #31
    EXTI->IMR |= maskline;
20002cee:	680b      	ldr	r3, [r1, #0]
20002cf0:	bf4c      	ite	mi
20002cf2:	4313      	orrmi	r3, r2
  }
  else
  {
    EXTI->IMR &= ~maskline;
20002cf4:	4393      	bicpl	r3, r2
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
20002cf6:	f010 0002 	ands.w	r0, r0, #2
    EXTI->IMR &= ~maskline;
20002cfa:	600b      	str	r3, [r1, #0]
  {
    EXTI->EMR |= maskline;
20002cfc:	4911      	ldr	r1, [pc, #68]	; (20002d44 <HAL_EXTI_SetConfigLine+0xa4>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
20002cfe:	d105      	bne.n	20002d0c <HAL_EXTI_SetConfigLine+0x6c>
  }
  else
  {
    EXTI->EMR &= ~maskline;
20002d00:	684b      	ldr	r3, [r1, #4]
20002d02:	ea23 0202 	bic.w	r2, r3, r2
  }

  return HAL_OK;
}
20002d06:	bc70      	pop	{r4, r5, r6}
    EXTI->EMR &= ~maskline;
20002d08:	604a      	str	r2, [r1, #4]
}
20002d0a:	4770      	bx	lr
    EXTI->EMR |= maskline;
20002d0c:	684b      	ldr	r3, [r1, #4]
  return HAL_OK;
20002d0e:	2000      	movs	r0, #0
    EXTI->EMR |= maskline;
20002d10:	431a      	orrs	r2, r3
}
20002d12:	bc70      	pop	{r4, r5, r6}
    EXTI->EMR |= maskline;
20002d14:	604a      	str	r2, [r1, #4]
}
20002d16:	4770      	bx	lr
    return HAL_ERROR;
20002d18:	2001      	movs	r0, #1
}
20002d1a:	4770      	bx	lr
      regval = SYSCFG->EXTICR[linepos >> 2u];
20002d1c:	f004 041c 	and.w	r4, r4, #28
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20002d20:	f003 0303 	and.w	r3, r3, #3
20002d24:	4d08      	ldr	r5, [pc, #32]	; (20002d48 <HAL_EXTI_SetConfigLine+0xa8>)
20002d26:	260f      	movs	r6, #15
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20002d28:	68c8      	ldr	r0, [r1, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20002d2a:	009b      	lsls	r3, r3, #2
20002d2c:	4425      	add	r5, r4
20002d2e:	fa06 f403 	lsl.w	r4, r6, r3
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20002d32:	fa00 f303 	lsl.w	r3, r0, r3
      regval = SYSCFG->EXTICR[linepos >> 2u];
20002d36:	68a8      	ldr	r0, [r5, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20002d38:	ea20 0004 	bic.w	r0, r0, r4
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20002d3c:	4303      	orrs	r3, r0
      SYSCFG->EXTICR[linepos >> 2u] = regval;
20002d3e:	60ab      	str	r3, [r5, #8]
20002d40:	e7d2      	b.n	20002ce8 <HAL_EXTI_SetConfigLine+0x48>
20002d42:	bf00      	nop
20002d44:	40013c00 	.word	0x40013c00
20002d48:	40013800 	.word	0x40013800

20002d4c <HAL_EXTI_GetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
20002d4c:	2800      	cmp	r0, #0
20002d4e:	d030      	beq.n	20002db2 <HAL_EXTI_GetConfigLine+0x66>
20002d50:	2900      	cmp	r1, #0
20002d52:	d02e      	beq.n	20002db2 <HAL_EXTI_GetConfigLine+0x66>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
20002d54:	6803      	ldr	r3, [r0, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
  maskline = (1uL << linepos);
20002d56:	2201      	movs	r2, #1
{
20002d58:	b430      	push	{r4, r5}

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
20002d5a:	4d23      	ldr	r5, [pc, #140]	; (20002de8 <HAL_EXTI_GetConfigLine+0x9c>)
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
20002d5c:	f003 041f 	and.w	r4, r3, #31
  pExtiConfig->Line = hexti->Line;
20002d60:	600b      	str	r3, [r1, #0]
  maskline = (1uL << linepos);
20002d62:	40a2      	lsls	r2, r4
  if ((EXTI->IMR & maskline) != 0x00u)
20002d64:	6828      	ldr	r0, [r5, #0]
20002d66:	4210      	tst	r0, r2
20002d68:	bf14      	ite	ne
20002d6a:	2001      	movne	r0, #1
20002d6c:	2000      	moveq	r0, #0
20002d6e:	6048      	str	r0, [r1, #4]
    pExtiConfig->Mode = EXTI_MODE_NONE;
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
20002d70:	686d      	ldr	r5, [r5, #4]
20002d72:	4215      	tst	r5, r2
20002d74:	d002      	beq.n	20002d7c <HAL_EXTI_GetConfigLine+0x30>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
20002d76:	f040 0002 	orr.w	r0, r0, #2
20002d7a:	6048      	str	r0, [r1, #4]
  }

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
20002d7c:	f013 7500 	ands.w	r5, r3, #33554432	; 0x2000000
20002d80:	d104      	bne.n	20002d8c <HAL_EXTI_GetConfigLine+0x40>
    /* No Trigger selected */
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
    pExtiConfig->GPIOSel = 0x00u;
  }

  return HAL_OK;
20002d82:	4628      	mov	r0, r5
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
20002d84:	608d      	str	r5, [r1, #8]
    pExtiConfig->GPIOSel = 0x00u;
20002d86:	60cd      	str	r5, [r1, #12]
}
20002d88:	bc30      	pop	{r4, r5}
20002d8a:	4770      	bx	lr
    if ((EXTI->RTSR & maskline) != 0x00u)
20002d8c:	4d16      	ldr	r5, [pc, #88]	; (20002de8 <HAL_EXTI_GetConfigLine+0x9c>)
20002d8e:	68a8      	ldr	r0, [r5, #8]
20002d90:	4210      	tst	r0, r2
20002d92:	bf14      	ite	ne
20002d94:	2001      	movne	r0, #1
20002d96:	2000      	moveq	r0, #0
20002d98:	6088      	str	r0, [r1, #8]
    if ((EXTI->FTSR & maskline) != 0x00u)
20002d9a:	68ed      	ldr	r5, [r5, #12]
20002d9c:	4215      	tst	r5, r2
20002d9e:	d10a      	bne.n	20002db6 <HAL_EXTI_GetConfigLine+0x6a>
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
20002da0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
20002da4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
20002da8:	d00d      	beq.n	20002dc6 <HAL_EXTI_GetConfigLine+0x7a>
      pExtiConfig->GPIOSel = 0x00u;
20002daa:	2000      	movs	r0, #0
}
20002dac:	bc30      	pop	{r4, r5}
      pExtiConfig->GPIOSel = 0x00u;
20002dae:	60c8      	str	r0, [r1, #12]
}
20002db0:	4770      	bx	lr
    return HAL_ERROR;
20002db2:	2001      	movs	r0, #1
}
20002db4:	4770      	bx	lr
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
20002db6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
20002dba:	f040 0002 	orr.w	r0, r0, #2
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
20002dbe:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
20002dc2:	6088      	str	r0, [r1, #8]
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
20002dc4:	d1f1      	bne.n	20002daa <HAL_EXTI_GetConfigLine+0x5e>
      regval = SYSCFG->EXTICR[linepos >> 2u];
20002dc6:	08a3      	lsrs	r3, r4, #2
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
20002dc8:	43e4      	mvns	r4, r4
      regval = SYSCFG->EXTICR[linepos >> 2u];
20002dca:	4a08      	ldr	r2, [pc, #32]	; (20002dec <HAL_EXTI_GetConfigLine+0xa0>)
  return HAL_OK;
20002dcc:	2000      	movs	r0, #0
      regval = SYSCFG->EXTICR[linepos >> 2u];
20002dce:	3302      	adds	r3, #2
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
20002dd0:	f004 0403 	and.w	r4, r4, #3
      regval = SYSCFG->EXTICR[linepos >> 2u];
20002dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
20002dd8:	00a4      	lsls	r4, r4, #2
20002dda:	fa03 f404 	lsl.w	r4, r3, r4
20002dde:	0e24      	lsrs	r4, r4, #24
20002de0:	60cc      	str	r4, [r1, #12]
}
20002de2:	bc30      	pop	{r4, r5}
20002de4:	4770      	bx	lr
20002de6:	bf00      	nop
20002de8:	40013c00 	.word	0x40013c00
20002dec:	40013800 	.word	0x40013800

20002df0 <HAL_EXTI_ClearConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
20002df0:	2800      	cmp	r0, #0
20002df2:	d030      	beq.n	20002e56 <HAL_EXTI_ClearConfigLine+0x66>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
20002df4:	6801      	ldr	r1, [r0, #0]
  maskline = (1uL << linepos);
20002df6:	2201      	movs	r2, #1

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
20002df8:	4b18      	ldr	r3, [pc, #96]	; (20002e5c <HAL_EXTI_ClearConfigLine+0x6c>)
{
20002dfa:	b430      	push	{r4, r5}
  linepos = (hexti->Line & EXTI_PIN_MASK);
20002dfc:	f001 051f 	and.w	r5, r1, #31
  EXTI->IMR = (EXTI->IMR & ~maskline);
20002e00:	6818      	ldr	r0, [r3, #0]
  maskline = (1uL << linepos);
20002e02:	40aa      	lsls	r2, r5
  EXTI->IMR = (EXTI->IMR & ~maskline);
20002e04:	ea20 0002 	bic.w	r0, r0, r2
20002e08:	43d4      	mvns	r4, r2
20002e0a:	6018      	str	r0, [r3, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
20002e0c:	6858      	ldr	r0, [r3, #4]
20002e0e:	ea20 0202 	bic.w	r2, r0, r2
20002e12:	605a      	str	r2, [r3, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
20002e14:	018a      	lsls	r2, r1, #6
20002e16:	d402      	bmi.n	20002e1e <HAL_EXTI_ClearConfigLine+0x2e>
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
      SYSCFG->EXTICR[linepos >> 2u] = regval;
    }
  }

  return HAL_OK;
20002e18:	2000      	movs	r0, #0
}
20002e1a:	bc30      	pop	{r4, r5}
20002e1c:	4770      	bx	lr
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
20002e1e:	6898      	ldr	r0, [r3, #8]
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
20002e20:	f001 62c0 	and.w	r2, r1, #100663296	; 0x6000000
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
20002e24:	4020      	ands	r0, r4
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
20002e26:	f1b2 6fc0 	cmp.w	r2, #100663296	; 0x6000000
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
20002e2a:	6098      	str	r0, [r3, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
20002e2c:	68d8      	ldr	r0, [r3, #12]
20002e2e:	ea04 0400 	and.w	r4, r4, r0
20002e32:	60dc      	str	r4, [r3, #12]
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
20002e34:	d1f0      	bne.n	20002e18 <HAL_EXTI_ClearConfigLine+0x28>
      regval = SYSCFG->EXTICR[linepos >> 2u];
20002e36:	f005 051c 	and.w	r5, r5, #28
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20002e3a:	f001 0103 	and.w	r1, r1, #3
20002e3e:	4b08      	ldr	r3, [pc, #32]	; (20002e60 <HAL_EXTI_ClearConfigLine+0x70>)
20002e40:	220f      	movs	r2, #15
20002e42:	0089      	lsls	r1, r1, #2
  return HAL_OK;
20002e44:	2000      	movs	r0, #0
20002e46:	442b      	add	r3, r5
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20002e48:	408a      	lsls	r2, r1
      regval = SYSCFG->EXTICR[linepos >> 2u];
20002e4a:	6899      	ldr	r1, [r3, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20002e4c:	ea21 0102 	bic.w	r1, r1, r2
}
20002e50:	bc30      	pop	{r4, r5}
      SYSCFG->EXTICR[linepos >> 2u] = regval;
20002e52:	6099      	str	r1, [r3, #8]
}
20002e54:	4770      	bx	lr
    return HAL_ERROR;
20002e56:	2001      	movs	r0, #1
}
20002e58:	4770      	bx	lr
20002e5a:	bf00      	nop
20002e5c:	40013c00 	.word	0x40013c00
20002e60:	40013800 	.word	0x40013800

20002e64 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
20002e64:	b911      	cbnz	r1, 20002e6c <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
20002e66:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
20002e68:	4608      	mov	r0, r1
      break;
20002e6a:	4770      	bx	lr

    default:
      status = HAL_ERROR;
20002e6c:	2001      	movs	r0, #1
      break;
  }

  return status;
}
20002e6e:	4770      	bx	lr

20002e70 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
20002e70:	b110      	cbz	r0, 20002e78 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
20002e72:	6001      	str	r1, [r0, #0]

    return HAL_OK;
20002e74:	2000      	movs	r0, #0
20002e76:	4770      	bx	lr
    return HAL_ERROR;
20002e78:	2001      	movs	r0, #1
  }
}
20002e7a:	4770      	bx	lr

20002e7c <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20002e7c:	6802      	ldr	r2, [r0, #0]
20002e7e:	2301      	movs	r3, #1

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
20002e80:	4908      	ldr	r1, [pc, #32]	; (20002ea4 <HAL_EXTI_IRQHandler+0x28>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20002e82:	f002 021f 	and.w	r2, r2, #31
{
20002e86:	b410      	push	{r4}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20002e88:	4093      	lsls	r3, r2
  regval = (EXTI->PR & maskline);
20002e8a:	694c      	ldr	r4, [r1, #20]
  if (regval != 0x00u)
20002e8c:	421c      	tst	r4, r3
20002e8e:	d005      	beq.n	20002e9c <HAL_EXTI_IRQHandler+0x20>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;

    /* Call callback */
    if (hexti->PendingCallback != NULL)
20002e90:	6842      	ldr	r2, [r0, #4]
    EXTI->PR = maskline;
20002e92:	614b      	str	r3, [r1, #20]
    if (hexti->PendingCallback != NULL)
20002e94:	b112      	cbz	r2, 20002e9c <HAL_EXTI_IRQHandler+0x20>
    {
      hexti->PendingCallback();
    }
  }
}
20002e96:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
20002e9a:	4710      	bx	r2
}
20002e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
20002ea0:	4770      	bx	lr
20002ea2:	bf00      	nop
20002ea4:	40013c00 	.word	0x40013c00

20002ea8 <HAL_EXTI_GetPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
20002ea8:	6800      	ldr	r0, [r0, #0]
  maskline = (1uL << linepos);
20002eaa:	2301      	movs	r3, #1

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
20002eac:	4a04      	ldr	r2, [pc, #16]	; (20002ec0 <HAL_EXTI_GetPending+0x18>)
  linepos = (hexti->Line & EXTI_PIN_MASK);
20002eae:	f000 001f 	and.w	r0, r0, #31
  regval = ((EXTI->PR & maskline) >> linepos);
20002eb2:	6952      	ldr	r2, [r2, #20]
  maskline = (1uL << linepos);
20002eb4:	4083      	lsls	r3, r0
  regval = ((EXTI->PR & maskline) >> linepos);
20002eb6:	4013      	ands	r3, r2
  return regval;
}
20002eb8:	fa23 f000 	lsr.w	r0, r3, r0
20002ebc:	4770      	bx	lr
20002ebe:	bf00      	nop
20002ec0:	40013c00 	.word	0x40013c00

20002ec4 <HAL_EXTI_ClearPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20002ec4:	6802      	ldr	r2, [r0, #0]
20002ec6:	2301      	movs	r3, #1

  /* Clear Pending bit */
  EXTI->PR =  maskline;
20002ec8:	4902      	ldr	r1, [pc, #8]	; (20002ed4 <HAL_EXTI_ClearPending+0x10>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20002eca:	f002 021f 	and.w	r2, r2, #31
20002ece:	4093      	lsls	r3, r2
  EXTI->PR =  maskline;
20002ed0:	614b      	str	r3, [r1, #20]
}
20002ed2:	4770      	bx	lr
20002ed4:	40013c00 	.word	0x40013c00

20002ed8 <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20002ed8:	6802      	ldr	r2, [r0, #0]
20002eda:	2301      	movs	r3, #1

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
20002edc:	4902      	ldr	r1, [pc, #8]	; (20002ee8 <HAL_EXTI_GenerateSWI+0x10>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20002ede:	f002 021f 	and.w	r2, r2, #31
20002ee2:	4093      	lsls	r3, r2
  EXTI->SWIER = maskline;
20002ee4:	610b      	str	r3, [r1, #16]
}
20002ee6:	4770      	bx	lr
20002ee8:	40013c00 	.word	0x40013c00

20002eec <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
20002eec:	4b18      	ldr	r3, [pc, #96]	; (20002f50 <FLASH_SetErrorCode+0x64>)
20002eee:	68db      	ldr	r3, [r3, #12]
20002ef0:	079b      	lsls	r3, r3, #30
20002ef2:	d504      	bpl.n	20002efe <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
20002ef4:	4a17      	ldr	r2, [pc, #92]	; (20002f54 <FLASH_SetErrorCode+0x68>)
20002ef6:	6993      	ldr	r3, [r2, #24]
20002ef8:	f043 0320 	orr.w	r3, r3, #32
20002efc:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
20002efe:	4b14      	ldr	r3, [pc, #80]	; (20002f50 <FLASH_SetErrorCode+0x64>)
20002f00:	68db      	ldr	r3, [r3, #12]
20002f02:	06d8      	lsls	r0, r3, #27
20002f04:	d504      	bpl.n	20002f10 <FLASH_SetErrorCode+0x24>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
20002f06:	4a13      	ldr	r2, [pc, #76]	; (20002f54 <FLASH_SetErrorCode+0x68>)
20002f08:	6993      	ldr	r3, [r2, #24]
20002f0a:	f043 0310 	orr.w	r3, r3, #16
20002f0e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
20002f10:	4b0f      	ldr	r3, [pc, #60]	; (20002f50 <FLASH_SetErrorCode+0x64>)
20002f12:	68db      	ldr	r3, [r3, #12]
20002f14:	0699      	lsls	r1, r3, #26
20002f16:	d504      	bpl.n	20002f22 <FLASH_SetErrorCode+0x36>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
20002f18:	4a0e      	ldr	r2, [pc, #56]	; (20002f54 <FLASH_SetErrorCode+0x68>)
20002f1a:	6993      	ldr	r3, [r2, #24]
20002f1c:	f043 0308 	orr.w	r3, r3, #8
20002f20:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
20002f22:	4b0b      	ldr	r3, [pc, #44]	; (20002f50 <FLASH_SetErrorCode+0x64>)
20002f24:	68db      	ldr	r3, [r3, #12]
20002f26:	065a      	lsls	r2, r3, #25
20002f28:	d504      	bpl.n	20002f34 <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
20002f2a:	4a0a      	ldr	r2, [pc, #40]	; (20002f54 <FLASH_SetErrorCode+0x68>)
20002f2c:	6993      	ldr	r3, [r2, #24]
20002f2e:	f043 0304 	orr.w	r3, r3, #4
20002f32:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
20002f34:	4b06      	ldr	r3, [pc, #24]	; (20002f50 <FLASH_SetErrorCode+0x64>)
20002f36:	68db      	ldr	r3, [r3, #12]
20002f38:	061b      	lsls	r3, r3, #24
20002f3a:	d504      	bpl.n	20002f46 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
20002f3c:	4a05      	ldr	r2, [pc, #20]	; (20002f54 <FLASH_SetErrorCode+0x68>)
20002f3e:	6993      	ldr	r3, [r2, #24]
20002f40:	f043 0302 	orr.w	r3, r3, #2
20002f44:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
20002f46:	4b02      	ldr	r3, [pc, #8]	; (20002f50 <FLASH_SetErrorCode+0x64>)
20002f48:	22f2      	movs	r2, #242	; 0xf2
20002f4a:	60da      	str	r2, [r3, #12]
}
20002f4c:	4770      	bx	lr
20002f4e:	bf00      	nop
20002f50:	40023c00 	.word	0x40023c00
20002f54:	20000478 	.word	0x20000478

20002f58 <HAL_FLASH_Program>:
{
20002f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
20002f5c:	4c56      	ldr	r4, [pc, #344]	; (200030b8 <HAL_FLASH_Program+0x160>)
20002f5e:	f894 c014 	ldrb.w	ip, [r4, #20]
20002f62:	f1bc 0f01 	cmp.w	ip, #1
20002f66:	d061      	beq.n	2000302c <HAL_FLASH_Program+0xd4>
20002f68:	4616      	mov	r6, r2
20002f6a:	4699      	mov	r9, r3
20002f6c:	2201      	movs	r2, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20002f6e:	2300      	movs	r3, #0
20002f70:	4605      	mov	r5, r0
20002f72:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
20002f74:	7522      	strb	r2, [r4, #20]
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
20002f76:	f24c 3b50 	movw	fp, #50000	; 0xc350
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20002f7a:	61a3      	str	r3, [r4, #24]
  tickstart = HAL_GetTick();
20002f7c:	f7fe fb94 	bl	200016a8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20002f80:	f8df a138 	ldr.w	sl, [pc, #312]	; 200030bc <HAL_FLASH_Program+0x164>
  tickstart = HAL_GetTick();
20002f84:	4680      	mov	r8, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20002f86:	e005      	b.n	20002f94 <HAL_FLASH_Program+0x3c>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
20002f88:	f7fe fb8e 	bl	200016a8 <HAL_GetTick>
20002f8c:	eba0 0008 	sub.w	r0, r0, r8
20002f90:	4558      	cmp	r0, fp
20002f92:	d846      	bhi.n	20003022 <HAL_FLASH_Program+0xca>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20002f94:	f8da 300c 	ldr.w	r3, [sl, #12]
20002f98:	03d9      	lsls	r1, r3, #15
20002f9a:	d4f5      	bmi.n	20002f88 <HAL_FLASH_Program+0x30>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
20002f9c:	f8da 300c 	ldr.w	r3, [sl, #12]
20002fa0:	f013 0ff2 	tst.w	r3, #242	; 0xf2
20002fa4:	d17f      	bne.n	200030a6 <HAL_FLASH_Program+0x14e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20002fa6:	f8da 300c 	ldr.w	r3, [sl, #12]
20002faa:	07da      	lsls	r2, r3, #31
20002fac:	d502      	bpl.n	20002fb4 <HAL_FLASH_Program+0x5c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20002fae:	2301      	movs	r3, #1
20002fb0:	f8ca 300c 	str.w	r3, [sl, #12]
    switch(TypeProgram)
20002fb4:	2d03      	cmp	r5, #3
20002fb6:	d812      	bhi.n	20002fde <HAL_FLASH_Program+0x86>
20002fb8:	e8df f005 	tbb	[pc, r5]
20002fbc:	4d623b02 	.word	0x4d623b02
  FLASH->CR &= CR_PSIZE_MASK;
20002fc0:	4b3e      	ldr	r3, [pc, #248]	; (200030bc <HAL_FLASH_Program+0x164>)
        FLASH_Program_Byte(Address, (uint8_t) Data);
20002fc2:	b2f6      	uxtb	r6, r6
  FLASH->CR &= CR_PSIZE_MASK;
20002fc4:	6919      	ldr	r1, [r3, #16]
20002fc6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
20002fca:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
20002fcc:	691a      	ldr	r2, [r3, #16]
20002fce:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
20002fd0:	6919      	ldr	r1, [r3, #16]
20002fd2:	f041 0101 	orr.w	r1, r1, #1
20002fd6:	6119      	str	r1, [r3, #16]
  *(__IO uint8_t*)Address = Data;
20002fd8:	703e      	strb	r6, [r7, #0]
  __ASM volatile ("dsb 0xF":::"memory");
20002fda:	f3bf 8f4f 	dsb	sy
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20002fde:	2300      	movs	r3, #0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20002fe0:	4e36      	ldr	r6, [pc, #216]	; (200030bc <HAL_FLASH_Program+0x164>)
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
20002fe2:	f24c 3750 	movw	r7, #50000	; 0xc350
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20002fe6:	61a3      	str	r3, [r4, #24]
  tickstart = HAL_GetTick();
20002fe8:	f7fe fb5e 	bl	200016a8 <HAL_GetTick>
20002fec:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20002fee:	e004      	b.n	20002ffa <HAL_FLASH_Program+0xa2>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
20002ff0:	f7fe fb5a 	bl	200016a8 <HAL_GetTick>
20002ff4:	1b43      	subs	r3, r0, r5
20002ff6:	42bb      	cmp	r3, r7
20002ff8:	d853      	bhi.n	200030a2 <HAL_FLASH_Program+0x14a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20002ffa:	68f3      	ldr	r3, [r6, #12]
20002ffc:	03db      	lsls	r3, r3, #15
20002ffe:	d4f7      	bmi.n	20002ff0 <HAL_FLASH_Program+0x98>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
20003000:	68f2      	ldr	r2, [r6, #12]
20003002:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
20003006:	d152      	bne.n	200030ae <HAL_FLASH_Program+0x156>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20003008:	68f0      	ldr	r0, [r6, #12]
2000300a:	f010 0001 	ands.w	r0, r0, #1
2000300e:	d002      	beq.n	20003016 <HAL_FLASH_Program+0xbe>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20003010:	2301      	movs	r3, #1
  return HAL_OK;
20003012:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20003014:	60f3      	str	r3, [r6, #12]
    FLASH->CR &= (~FLASH_CR_PG);
20003016:	4a29      	ldr	r2, [pc, #164]	; (200030bc <HAL_FLASH_Program+0x164>)
20003018:	6913      	ldr	r3, [r2, #16]
2000301a:	f023 0301 	bic.w	r3, r3, #1
2000301e:	6113      	str	r3, [r2, #16]
20003020:	e000      	b.n	20003024 <HAL_FLASH_Program+0xcc>
20003022:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
20003024:	2300      	movs	r3, #0
20003026:	7523      	strb	r3, [r4, #20]
}
20003028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
2000302c:	2002      	movs	r0, #2
}
2000302e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  FLASH->CR &= CR_PSIZE_MASK;
20003032:	4b22      	ldr	r3, [pc, #136]	; (200030bc <HAL_FLASH_Program+0x164>)
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
20003034:	b2b6      	uxth	r6, r6
  FLASH->CR &= CR_PSIZE_MASK;
20003036:	6919      	ldr	r1, [r3, #16]
20003038:	f421 7140 	bic.w	r1, r1, #768	; 0x300
2000303c:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
2000303e:	6919      	ldr	r1, [r3, #16]
20003040:	f441 7180 	orr.w	r1, r1, #256	; 0x100
20003044:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
20003046:	6919      	ldr	r1, [r3, #16]
20003048:	f041 0101 	orr.w	r1, r1, #1
2000304c:	6119      	str	r1, [r3, #16]
  *(__IO uint16_t*)Address = Data;
2000304e:	803e      	strh	r6, [r7, #0]
20003050:	f3bf 8f4f 	dsb	sy
}
20003054:	e7c3      	b.n	20002fde <HAL_FLASH_Program+0x86>
  FLASH->CR &= CR_PSIZE_MASK;
20003056:	4b19      	ldr	r3, [pc, #100]	; (200030bc <HAL_FLASH_Program+0x164>)
20003058:	691a      	ldr	r2, [r3, #16]
2000305a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
2000305e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
20003060:	691a      	ldr	r2, [r3, #16]
20003062:	f442 7240 	orr.w	r2, r2, #768	; 0x300
20003066:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
20003068:	691a      	ldr	r2, [r3, #16]
2000306a:	f042 0201 	orr.w	r2, r2, #1
2000306e:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
20003070:	603e      	str	r6, [r7, #0]
  __ASM volatile ("isb 0xF":::"memory");
20003072:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
20003076:	f8c7 9004 	str.w	r9, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
2000307a:	f3bf 8f4f 	dsb	sy
}
2000307e:	e7ae      	b.n	20002fde <HAL_FLASH_Program+0x86>
  FLASH->CR &= CR_PSIZE_MASK;
20003080:	4b0e      	ldr	r3, [pc, #56]	; (200030bc <HAL_FLASH_Program+0x164>)
20003082:	691a      	ldr	r2, [r3, #16]
20003084:	f422 7240 	bic.w	r2, r2, #768	; 0x300
20003088:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
2000308a:	691a      	ldr	r2, [r3, #16]
2000308c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20003090:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
20003092:	691a      	ldr	r2, [r3, #16]
20003094:	f042 0201 	orr.w	r2, r2, #1
20003098:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
2000309a:	603e      	str	r6, [r7, #0]
2000309c:	f3bf 8f4f 	dsb	sy
}
200030a0:	e79d      	b.n	20002fde <HAL_FLASH_Program+0x86>
        return HAL_TIMEOUT;
200030a2:	2003      	movs	r0, #3
200030a4:	e7b7      	b.n	20003016 <HAL_FLASH_Program+0xbe>
    FLASH_SetErrorCode();
200030a6:	f7ff ff21 	bl	20002eec <FLASH_SetErrorCode>
    return HAL_ERROR;
200030aa:	2001      	movs	r0, #1
200030ac:	e7ba      	b.n	20003024 <HAL_FLASH_Program+0xcc>
    FLASH_SetErrorCode();
200030ae:	f7ff ff1d 	bl	20002eec <FLASH_SetErrorCode>
    return HAL_ERROR;
200030b2:	2001      	movs	r0, #1
200030b4:	e7af      	b.n	20003016 <HAL_FLASH_Program+0xbe>
200030b6:	bf00      	nop
200030b8:	20000478 	.word	0x20000478
200030bc:	40023c00 	.word	0x40023c00

200030c0 <HAL_FLASH_Program_IT>:
{
200030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
200030c2:	4d36      	ldr	r5, [pc, #216]	; (2000319c <HAL_FLASH_Program_IT+0xdc>)
200030c4:	7d2c      	ldrb	r4, [r5, #20]
200030c6:	2c01      	cmp	r4, #1
200030c8:	d064      	beq.n	20003194 <HAL_FLASH_Program_IT+0xd4>
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
200030ca:	4c35      	ldr	r4, [pc, #212]	; (200031a0 <HAL_FLASH_Program_IT+0xe0>)
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
200030cc:	f04f 0cf3 	mov.w	ip, #243	; 0xf3
  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
200030d0:	2703      	movs	r7, #3
  __HAL_LOCK(&pFlash);
200030d2:	f04f 0e01 	mov.w	lr, #1
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
200030d6:	6926      	ldr	r6, [r4, #16]
200030d8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
200030dc:	6126      	str	r6, [r4, #16]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
200030de:	6926      	ldr	r6, [r4, #16]
  __HAL_LOCK(&pFlash);
200030e0:	f885 e014 	strb.w	lr, [r5, #20]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
200030e4:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
200030e8:	6126      	str	r6, [r4, #16]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
200030ea:	f8c4 c00c 	str.w	ip, [r4, #12]
  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
200030ee:	702f      	strb	r7, [r5, #0]
  pFlash.Address = Address;
200030f0:	6129      	str	r1, [r5, #16]
  switch(TypeProgram)
200030f2:	42b8      	cmp	r0, r7
200030f4:	d850      	bhi.n	20003198 <HAL_FLASH_Program_IT+0xd8>
200030f6:	e8df f000 	tbb	[pc, r0]
200030fa:	2817      	.short	0x2817
200030fc:	023b      	.short	0x023b
  FLASH->CR &= CR_PSIZE_MASK;
200030fe:	4828      	ldr	r0, [pc, #160]	; (200031a0 <HAL_FLASH_Program_IT+0xe0>)
20003100:	6904      	ldr	r4, [r0, #16]
20003102:	f424 7440 	bic.w	r4, r4, #768	; 0x300
20003106:	6104      	str	r4, [r0, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
20003108:	6904      	ldr	r4, [r0, #16]
2000310a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
2000310e:	6104      	str	r4, [r0, #16]
  FLASH->CR |= FLASH_CR_PG;
20003110:	6904      	ldr	r4, [r0, #16]
20003112:	f044 0401 	orr.w	r4, r4, #1
20003116:	6104      	str	r4, [r0, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
20003118:	600a      	str	r2, [r1, #0]
  __ASM volatile ("isb 0xF":::"memory");
2000311a:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
2000311e:	604b      	str	r3, [r1, #4]
  __ASM volatile ("dsb 0xF":::"memory");
20003120:	f3bf 8f4f 	dsb	sy
  return status;
20003124:	2000      	movs	r0, #0
}
20003126:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FLASH->CR &= CR_PSIZE_MASK;
20003128:	4b1d      	ldr	r3, [pc, #116]	; (200031a0 <HAL_FLASH_Program_IT+0xe0>)
      FLASH_Program_Byte(Address, (uint8_t) Data);
2000312a:	b2d2      	uxtb	r2, r2
  FLASH->CR &= CR_PSIZE_MASK;
2000312c:	6918      	ldr	r0, [r3, #16]
2000312e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
20003132:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
20003134:	6918      	ldr	r0, [r3, #16]
20003136:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
20003138:	6918      	ldr	r0, [r3, #16]
2000313a:	f040 0001 	orr.w	r0, r0, #1
2000313e:	6118      	str	r0, [r3, #16]
  *(__IO uint8_t*)Address = Data;
20003140:	700a      	strb	r2, [r1, #0]
20003142:	f3bf 8f4f 	dsb	sy
  return status;
20003146:	2000      	movs	r0, #0
}
20003148:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FLASH->CR &= CR_PSIZE_MASK;
2000314a:	4b15      	ldr	r3, [pc, #84]	; (200031a0 <HAL_FLASH_Program_IT+0xe0>)
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
2000314c:	b292      	uxth	r2, r2
  FLASH->CR &= CR_PSIZE_MASK;
2000314e:	6918      	ldr	r0, [r3, #16]
20003150:	f420 7040 	bic.w	r0, r0, #768	; 0x300
20003154:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
20003156:	6918      	ldr	r0, [r3, #16]
20003158:	f440 7080 	orr.w	r0, r0, #256	; 0x100
2000315c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
2000315e:	6918      	ldr	r0, [r3, #16]
20003160:	f040 0001 	orr.w	r0, r0, #1
20003164:	6118      	str	r0, [r3, #16]
  *(__IO uint16_t*)Address = Data;
20003166:	800a      	strh	r2, [r1, #0]
20003168:	f3bf 8f4f 	dsb	sy
  return status;
2000316c:	2000      	movs	r0, #0
}
2000316e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FLASH->CR &= CR_PSIZE_MASK;
20003170:	4b0b      	ldr	r3, [pc, #44]	; (200031a0 <HAL_FLASH_Program_IT+0xe0>)
20003172:	6918      	ldr	r0, [r3, #16]
20003174:	f420 7040 	bic.w	r0, r0, #768	; 0x300
20003178:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
2000317a:	6918      	ldr	r0, [r3, #16]
2000317c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
20003180:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
20003182:	6918      	ldr	r0, [r3, #16]
20003184:	f040 0001 	orr.w	r0, r0, #1
20003188:	6118      	str	r0, [r3, #16]
  *(__IO uint32_t*)Address = Data;
2000318a:	600a      	str	r2, [r1, #0]
2000318c:	f3bf 8f4f 	dsb	sy
  return status;
20003190:	2000      	movs	r0, #0
}
20003192:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
20003194:	2002      	movs	r0, #2
}
20003196:	bdf0      	pop	{r4, r5, r6, r7, pc}
  pFlash.Address = Address;
20003198:	2000      	movs	r0, #0
}
2000319a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000319c:	20000478 	.word	0x20000478
200031a0:	40023c00 	.word	0x40023c00

200031a4 <HAL_FLASH_EndOfOperationCallback>:
}
200031a4:	4770      	bx	lr
200031a6:	bf00      	nop

200031a8 <HAL_FLASH_OperationErrorCallback>:
200031a8:	4770      	bx	lr
200031aa:	bf00      	nop

200031ac <HAL_FLASH_IRQHandler>:
  FLASH->CR &= (~FLASH_CR_PG);
200031ac:	4b3a      	ldr	r3, [pc, #232]	; (20003298 <HAL_FLASH_IRQHandler+0xec>)
  FLASH->CR &= (~FLASH_MER_BIT);
200031ae:	4a3b      	ldr	r2, [pc, #236]	; (2000329c <HAL_FLASH_IRQHandler+0xf0>)
  FLASH->CR &= (~FLASH_CR_PG);
200031b0:	6919      	ldr	r1, [r3, #16]
200031b2:	f021 0101 	bic.w	r1, r1, #1
{
200031b6:	b570      	push	{r4, r5, r6, lr}
  FLASH->CR &= (~FLASH_CR_PG);
200031b8:	6119      	str	r1, [r3, #16]
  FLASH->CR &= (~FLASH_CR_SER);
200031ba:	6919      	ldr	r1, [r3, #16]
200031bc:	f021 0102 	bic.w	r1, r1, #2
200031c0:	6119      	str	r1, [r3, #16]
  FLASH->CR &= SECTOR_MASK; 
200031c2:	6919      	ldr	r1, [r3, #16]
200031c4:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
200031c8:	6119      	str	r1, [r3, #16]
  FLASH->CR &= (~FLASH_MER_BIT);
200031ca:	6919      	ldr	r1, [r3, #16]
200031cc:	400a      	ands	r2, r1
200031ce:	611a      	str	r2, [r3, #16]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
200031d0:	68dc      	ldr	r4, [r3, #12]
200031d2:	f014 0401 	ands.w	r4, r4, #1
200031d6:	d123      	bne.n	20003220 <HAL_FLASH_IRQHandler+0x74>
200031d8:	4d31      	ldr	r5, [pc, #196]	; (200032a0 <HAL_FLASH_IRQHandler+0xf4>)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
200031da:	4b2f      	ldr	r3, [pc, #188]	; (20003298 <HAL_FLASH_IRQHandler+0xec>)
200031dc:	68db      	ldr	r3, [r3, #12]
200031de:	f013 0ff2 	tst.w	r3, #242	; 0xf2
200031e2:	d00e      	beq.n	20003202 <HAL_FLASH_IRQHandler+0x56>
    switch (pFlash.ProcedureOnGoing)
200031e4:	782a      	ldrb	r2, [r5, #0]
200031e6:	2a02      	cmp	r2, #2
200031e8:	b2d3      	uxtb	r3, r2
200031ea:	d044      	beq.n	20003276 <HAL_FLASH_IRQHandler+0xca>
200031ec:	2b03      	cmp	r3, #3
200031ee:	d03b      	beq.n	20003268 <HAL_FLASH_IRQHandler+0xbc>
200031f0:	2b01      	cmp	r3, #1
200031f2:	d03b      	beq.n	2000326c <HAL_FLASH_IRQHandler+0xc0>
    FLASH_SetErrorCode();
200031f4:	f7ff fe7a 	bl	20002eec <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(temp);
200031f8:	4620      	mov	r0, r4
200031fa:	f7ff ffd5 	bl	200031a8 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
200031fe:	2300      	movs	r3, #0
20003200:	702b      	strb	r3, [r5, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
20003202:	782b      	ldrb	r3, [r5, #0]
20003204:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20003208:	b94b      	cbnz	r3, 2000321e <HAL_FLASH_IRQHandler+0x72>
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
2000320a:	4b23      	ldr	r3, [pc, #140]	; (20003298 <HAL_FLASH_IRQHandler+0xec>)
2000320c:	691a      	ldr	r2, [r3, #16]
2000320e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
20003212:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
20003214:	691a      	ldr	r2, [r3, #16]
20003216:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
2000321a:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
2000321c:	7529      	strb	r1, [r5, #20]
}
2000321e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20003220:	2201      	movs	r2, #1
    switch (pFlash.ProcedureOnGoing)
20003222:	4d1f      	ldr	r5, [pc, #124]	; (200032a0 <HAL_FLASH_IRQHandler+0xf4>)
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20003224:	60da      	str	r2, [r3, #12]
    switch (pFlash.ProcedureOnGoing)
20003226:	782a      	ldrb	r2, [r5, #0]
20003228:	2a02      	cmp	r2, #2
2000322a:	b2d3      	uxtb	r3, r2
2000322c:	d025      	beq.n	2000327a <HAL_FLASH_IRQHandler+0xce>
2000322e:	2b03      	cmp	r3, #3
20003230:	d003      	beq.n	2000323a <HAL_FLASH_IRQHandler+0x8e>
20003232:	2b01      	cmp	r3, #1
20003234:	d008      	beq.n	20003248 <HAL_FLASH_IRQHandler+0x9c>
20003236:	2400      	movs	r4, #0
20003238:	e7cf      	b.n	200031da <HAL_FLASH_IRQHandler+0x2e>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
2000323a:	6928      	ldr	r0, [r5, #16]
2000323c:	f7ff ffb2 	bl	200031a4 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20003240:	2000      	movs	r0, #0
  uint32_t temp = 0;
20003242:	4604      	mov	r4, r0
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20003244:	7028      	strb	r0, [r5, #0]
        break;
20003246:	e7c8      	b.n	200031da <HAL_FLASH_IRQHandler+0x2e>
        pFlash.NbSectorsToErase--;
20003248:	686b      	ldr	r3, [r5, #4]
2000324a:	3b01      	subs	r3, #1
2000324c:	606b      	str	r3, [r5, #4]
        if(pFlash.NbSectorsToErase != 0)
2000324e:	686e      	ldr	r6, [r5, #4]
20003250:	b1d6      	cbz	r6, 20003288 <HAL_FLASH_IRQHandler+0xdc>
          temp = pFlash.Sector;
20003252:	68e8      	ldr	r0, [r5, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
20003254:	f7ff ffa6 	bl	200031a4 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
20003258:	68ec      	ldr	r4, [r5, #12]
2000325a:	3401      	adds	r4, #1
2000325c:	60ec      	str	r4, [r5, #12]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
2000325e:	4620      	mov	r0, r4
20003260:	7a29      	ldrb	r1, [r5, #8]
20003262:	f000 fa7d 	bl	20003760 <FLASH_Erase_Sector>
20003266:	e7b8      	b.n	200031da <HAL_FLASH_IRQHandler+0x2e>
        temp = pFlash.Address;
20003268:	692c      	ldr	r4, [r5, #16]
        break;
2000326a:	e7c3      	b.n	200031f4 <HAL_FLASH_IRQHandler+0x48>
        pFlash.Sector = 0xFFFFFFFFU;
2000326c:	f04f 33ff 	mov.w	r3, #4294967295
        temp = pFlash.Sector;
20003270:	68ec      	ldr	r4, [r5, #12]
        pFlash.Sector = 0xFFFFFFFFU;
20003272:	60eb      	str	r3, [r5, #12]
        break;
20003274:	e7be      	b.n	200031f4 <HAL_FLASH_IRQHandler+0x48>
    switch (pFlash.ProcedureOnGoing)
20003276:	2400      	movs	r4, #0
20003278:	e7bc      	b.n	200031f4 <HAL_FLASH_IRQHandler+0x48>
        HAL_FLASH_EndOfOperationCallback(0);
2000327a:	2000      	movs	r0, #0
2000327c:	f7ff ff92 	bl	200031a4 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20003280:	2000      	movs	r0, #0
  uint32_t temp = 0;
20003282:	4604      	mov	r4, r0
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20003284:	7028      	strb	r0, [r5, #0]
        break;
20003286:	e7a8      	b.n	200031da <HAL_FLASH_IRQHandler+0x2e>
          pFlash.Sector = temp = 0xFFFFFFFFU;
20003288:	f04f 30ff 	mov.w	r0, #4294967295
2000328c:	4604      	mov	r4, r0
2000328e:	60e8      	str	r0, [r5, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
20003290:	f7ff ff88 	bl	200031a4 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20003294:	702e      	strb	r6, [r5, #0]
20003296:	e7a0      	b.n	200031da <HAL_FLASH_IRQHandler+0x2e>
20003298:	40023c00 	.word	0x40023c00
2000329c:	ffff7ffb 	.word	0xffff7ffb
200032a0:	20000478 	.word	0x20000478

200032a4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
200032a4:	4b06      	ldr	r3, [pc, #24]	; (200032c0 <HAL_FLASH_Unlock+0x1c>)
200032a6:	691a      	ldr	r2, [r3, #16]
200032a8:	2a00      	cmp	r2, #0
200032aa:	db01      	blt.n	200032b0 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
200032ac:	2000      	movs	r0, #0
}
200032ae:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
200032b0:	4904      	ldr	r1, [pc, #16]	; (200032c4 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
200032b2:	4a05      	ldr	r2, [pc, #20]	; (200032c8 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
200032b4:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
200032b6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
200032b8:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
200032ba:	0fc0      	lsrs	r0, r0, #31
200032bc:	4770      	bx	lr
200032be:	bf00      	nop
200032c0:	40023c00 	.word	0x40023c00
200032c4:	45670123 	.word	0x45670123
200032c8:	cdef89ab 	.word	0xcdef89ab

200032cc <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
200032cc:	4a03      	ldr	r2, [pc, #12]	; (200032dc <HAL_FLASH_Lock+0x10>)
}
200032ce:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
200032d0:	6913      	ldr	r3, [r2, #16]
200032d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
200032d6:	6113      	str	r3, [r2, #16]
}
200032d8:	4770      	bx	lr
200032da:	bf00      	nop
200032dc:	40023c00 	.word	0x40023c00

200032e0 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
200032e0:	4b05      	ldr	r3, [pc, #20]	; (200032f8 <HAL_FLASH_OB_Unlock+0x18>)
200032e2:	695a      	ldr	r2, [r3, #20]
200032e4:	07d2      	lsls	r2, r2, #31
200032e6:	d505      	bpl.n	200032f4 <HAL_FLASH_OB_Unlock+0x14>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
200032e8:	4904      	ldr	r1, [pc, #16]	; (200032fc <HAL_FLASH_OB_Unlock+0x1c>)
  return HAL_OK;  
200032ea:	2000      	movs	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
200032ec:	4a04      	ldr	r2, [pc, #16]	; (20003300 <HAL_FLASH_OB_Unlock+0x20>)
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
200032ee:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
200032f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
200032f2:	4770      	bx	lr
    return HAL_ERROR;
200032f4:	2001      	movs	r0, #1
}
200032f6:	4770      	bx	lr
200032f8:	40023c00 	.word	0x40023c00
200032fc:	08192a3b 	.word	0x08192a3b
20003300:	4c5d6e7f 	.word	0x4c5d6e7f

20003304 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
20003304:	4a03      	ldr	r2, [pc, #12]	; (20003314 <HAL_FLASH_OB_Lock+0x10>)
}
20003306:	2000      	movs	r0, #0
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
20003308:	6953      	ldr	r3, [r2, #20]
2000330a:	f043 0301 	orr.w	r3, r3, #1
2000330e:	6153      	str	r3, [r2, #20]
}
20003310:	4770      	bx	lr
20003312:	bf00      	nop
20003314:	40023c00 	.word	0x40023c00

20003318 <HAL_FLASH_OB_Launch>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
20003318:	4b14      	ldr	r3, [pc, #80]	; (2000336c <HAL_FLASH_OB_Launch+0x54>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
2000331a:	2000      	movs	r0, #0
2000331c:	4914      	ldr	r1, [pc, #80]	; (20003370 <HAL_FLASH_OB_Launch+0x58>)
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
2000331e:	695a      	ldr	r2, [r3, #20]
20003320:	f042 0202 	orr.w	r2, r2, #2
{
20003324:	b570      	push	{r4, r5, r6, lr}
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
20003326:	615a      	str	r2, [r3, #20]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20003328:	461d      	mov	r5, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
2000332a:	6188      	str	r0, [r1, #24]
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
2000332c:	f24c 3650 	movw	r6, #50000	; 0xc350
  tickstart = HAL_GetTick();
20003330:	f7fe f9ba 	bl	200016a8 <HAL_GetTick>
20003334:	4604      	mov	r4, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20003336:	e004      	b.n	20003342 <HAL_FLASH_OB_Launch+0x2a>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
20003338:	f7fe f9b6 	bl	200016a8 <HAL_GetTick>
2000333c:	1b00      	subs	r0, r0, r4
2000333e:	42b0      	cmp	r0, r6
20003340:	d80e      	bhi.n	20003360 <HAL_FLASH_OB_Launch+0x48>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20003342:	68eb      	ldr	r3, [r5, #12]
20003344:	03db      	lsls	r3, r3, #15
20003346:	d4f7      	bmi.n	20003338 <HAL_FLASH_OB_Launch+0x20>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
20003348:	68ea      	ldr	r2, [r5, #12]
2000334a:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
2000334e:	d109      	bne.n	20003364 <HAL_FLASH_OB_Launch+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20003350:	68e8      	ldr	r0, [r5, #12]
20003352:	f010 0001 	ands.w	r0, r0, #1
20003356:	d002      	beq.n	2000335e <HAL_FLASH_OB_Launch+0x46>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20003358:	2301      	movs	r3, #1
  return HAL_OK;
2000335a:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
2000335c:	60eb      	str	r3, [r5, #12]
}
2000335e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
20003360:	2003      	movs	r0, #3
}
20003362:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
20003364:	f7ff fdc2 	bl	20002eec <FLASH_SetErrorCode>
    return HAL_ERROR;
20003368:	2001      	movs	r0, #1
}
2000336a:	bd70      	pop	{r4, r5, r6, pc}
2000336c:	40023c00 	.word	0x40023c00
20003370:	20000478 	.word	0x20000478

20003374 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
20003374:	4b01      	ldr	r3, [pc, #4]	; (2000337c <HAL_FLASH_GetError+0x8>)
20003376:	6998      	ldr	r0, [r3, #24]
}  
20003378:	4770      	bx	lr
2000337a:	bf00      	nop
2000337c:	20000478 	.word	0x20000478

20003380 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20003380:	4b15      	ldr	r3, [pc, #84]	; (200033d8 <FLASH_WaitForLastOperation+0x58>)
20003382:	2200      	movs	r2, #0
{ 
20003384:	b570      	push	{r4, r5, r6, lr}
20003386:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20003388:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
2000338a:	4e14      	ldr	r6, [pc, #80]	; (200033dc <FLASH_WaitForLastOperation+0x5c>)
  tickstart = HAL_GetTick();
2000338c:	f7fe f98c 	bl	200016a8 <HAL_GetTick>
20003390:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20003392:	1c60      	adds	r0, r4, #1
20003394:	d110      	bne.n	200033b8 <FLASH_WaitForLastOperation+0x38>
20003396:	4a11      	ldr	r2, [pc, #68]	; (200033dc <FLASH_WaitForLastOperation+0x5c>)
20003398:	68d3      	ldr	r3, [r2, #12]
2000339a:	03d9      	lsls	r1, r3, #15
2000339c:	d4fc      	bmi.n	20003398 <FLASH_WaitForLastOperation+0x18>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
2000339e:	490f      	ldr	r1, [pc, #60]	; (200033dc <FLASH_WaitForLastOperation+0x5c>)
200033a0:	68ca      	ldr	r2, [r1, #12]
200033a2:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
200033a6:	d112      	bne.n	200033ce <FLASH_WaitForLastOperation+0x4e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
200033a8:	68c8      	ldr	r0, [r1, #12]
200033aa:	f010 0001 	ands.w	r0, r0, #1
200033ae:	d002      	beq.n	200033b6 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
200033b0:	2301      	movs	r3, #1
  return HAL_OK;
200033b2:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
200033b4:	60cb      	str	r3, [r1, #12]
}  
200033b6:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
200033b8:	68f3      	ldr	r3, [r6, #12]
200033ba:	03db      	lsls	r3, r3, #15
200033bc:	d5ef      	bpl.n	2000339e <FLASH_WaitForLastOperation+0x1e>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
200033be:	b124      	cbz	r4, 200033ca <FLASH_WaitForLastOperation+0x4a>
200033c0:	f7fe f972 	bl	200016a8 <HAL_GetTick>
200033c4:	1b40      	subs	r0, r0, r5
200033c6:	42a0      	cmp	r0, r4
200033c8:	d9e3      	bls.n	20003392 <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
200033ca:	2003      	movs	r0, #3
}  
200033cc:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
200033ce:	f7ff fd8d 	bl	20002eec <FLASH_SetErrorCode>
    return HAL_ERROR;
200033d2:	2001      	movs	r0, #1
}  
200033d4:	bd70      	pop	{r4, r5, r6, pc}
200033d6:	bf00      	nop
200033d8:	20000478 	.word	0x20000478
200033dc:	40023c00 	.word	0x40023c00

200033e0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
200033e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
200033e4:	4f49      	ldr	r7, [pc, #292]	; (2000350c <HAL_FLASHEx_Erase+0x12c>)
200033e6:	7d3b      	ldrb	r3, [r7, #20]
200033e8:	2b01      	cmp	r3, #1
200033ea:	f000 8081 	beq.w	200034f0 <HAL_FLASHEx_Erase+0x110>
200033ee:	2301      	movs	r3, #1
200033f0:	4681      	mov	r9, r0

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200033f2:	f24c 3050 	movw	r0, #50000	; 0xc350
200033f6:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
200033f8:	753b      	strb	r3, [r7, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200033fa:	f7ff ffc1 	bl	20003380 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
200033fe:	4606      	mov	r6, r0
20003400:	2800      	cmp	r0, #0
20003402:	d170      	bne.n	200034e6 <HAL_FLASHEx_Erase+0x106>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
20003404:	f04f 33ff 	mov.w	r3, #4294967295
20003408:	f8c8 3000 	str.w	r3, [r8]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
2000340c:	f8d9 3000 	ldr.w	r3, [r9]
20003410:	2b01      	cmp	r3, #1
20003412:	d042      	beq.n	2000349a <HAL_FLASHEx_Erase+0xba>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20003414:	e9d9 5302 	ldrd	r5, r3, [r9, #8]
20003418:	442b      	add	r3, r5
2000341a:	429d      	cmp	r5, r3
2000341c:	d263      	bcs.n	200034e6 <HAL_FLASHEx_Erase+0x106>
  {
    Sector += 4;
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
2000341e:	4c3c      	ldr	r4, [pc, #240]	; (20003510 <HAL_FLASHEx_Erase+0x130>)
20003420:	e032      	b.n	20003488 <HAL_FLASHEx_Erase+0xa8>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
20003422:	2b02      	cmp	r3, #2
20003424:	bf0c      	ite	eq
20003426:	f44f 7300 	moveq.w	r3, #512	; 0x200
2000342a:	f44f 7340 	movne.w	r3, #768	; 0x300
  FLASH->CR &= CR_PSIZE_MASK;
2000342e:	6922      	ldr	r2, [r4, #16]
  if(Sector > FLASH_SECTOR_11) 
20003430:	2d0b      	cmp	r5, #11
20003432:	4629      	mov	r1, r5
  FLASH->CR &= CR_PSIZE_MASK;
20003434:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    Sector += 4;
20003438:	bf88      	it	hi
2000343a:	1d29      	addhi	r1, r5, #4
  FLASH->CR &= CR_PSIZE_MASK;
2000343c:	6122      	str	r2, [r4, #16]
  FLASH->CR |= tmp_psize;
2000343e:	6922      	ldr	r2, [r4, #16]
20003440:	4313      	orrs	r3, r2
20003442:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
20003444:	6922      	ldr	r2, [r4, #16]
20003446:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
2000344a:	6122      	str	r2, [r4, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
2000344c:	6923      	ldr	r3, [r4, #16]
2000344e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
20003452:	f043 0302 	orr.w	r3, r3, #2
20003456:	6123      	str	r3, [r4, #16]
  FLASH->CR |= FLASH_CR_STRT;
20003458:	6923      	ldr	r3, [r4, #16]
2000345a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000345e:	6123      	str	r3, [r4, #16]
20003460:	f3bf 8f4f 	dsb	sy
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20003464:	f24c 3050 	movw	r0, #50000	; 0xc350
20003468:	f7ff ff8a 	bl	20003380 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
2000346c:	6923      	ldr	r3, [r4, #16]
2000346e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
20003472:	6123      	str	r3, [r4, #16]
        if(status != HAL_OK) 
20003474:	2800      	cmp	r0, #0
20003476:	d13f      	bne.n	200034f8 <HAL_FLASHEx_Erase+0x118>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20003478:	f8d9 300c 	ldr.w	r3, [r9, #12]
2000347c:	3501      	adds	r5, #1
2000347e:	f8d9 2008 	ldr.w	r2, [r9, #8]
20003482:	4413      	add	r3, r2
20003484:	42ab      	cmp	r3, r5
20003486:	d92e      	bls.n	200034e6 <HAL_FLASHEx_Erase+0x106>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
20003488:	f899 3010 	ldrb.w	r3, [r9, #16]
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
2000348c:	2b00      	cmp	r3, #0
2000348e:	d0ce      	beq.n	2000342e <HAL_FLASHEx_Erase+0x4e>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
20003490:	2b01      	cmp	r3, #1
20003492:	d1c6      	bne.n	20003422 <HAL_FLASHEx_Erase+0x42>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
20003494:	f44f 7380 	mov.w	r3, #256	; 0x100
20003498:	e7c9      	b.n	2000342e <HAL_FLASHEx_Erase+0x4e>
  FLASH->CR &= CR_PSIZE_MASK;
2000349a:	4a1d      	ldr	r2, [pc, #116]	; (20003510 <HAL_FLASHEx_Erase+0x130>)
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
2000349c:	f8d9 0004 	ldr.w	r0, [r9, #4]
  FLASH->CR &= CR_PSIZE_MASK;
200034a0:	6911      	ldr	r1, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
200034a2:	2803      	cmp	r0, #3
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
200034a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
  FLASH->CR &= CR_PSIZE_MASK;
200034a8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
200034ac:	6111      	str	r1, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
200034ae:	d027      	beq.n	20003500 <HAL_FLASHEx_Erase+0x120>
    FLASH->CR |= FLASH_CR_MER2;
200034b0:	6911      	ldr	r1, [r2, #16]
  else if(Banks == FLASH_BANK_2)
200034b2:	2802      	cmp	r0, #2
    FLASH->CR |= FLASH_CR_MER2;
200034b4:	bf0c      	ite	eq
200034b6:	f441 4100 	orreq.w	r1, r1, #32768	; 0x8000
    FLASH->CR |= FLASH_CR_MER1;    
200034ba:	f041 0104 	orrne.w	r1, r1, #4
200034be:	6111      	str	r1, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
200034c0:	4c13      	ldr	r4, [pc, #76]	; (20003510 <HAL_FLASHEx_Erase+0x130>)
200034c2:	021b      	lsls	r3, r3, #8
200034c4:	6922      	ldr	r2, [r4, #16]
200034c6:	b29b      	uxth	r3, r3
200034c8:	4313      	orrs	r3, r2
200034ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200034ce:	6123      	str	r3, [r4, #16]
200034d0:	f3bf 8f4f 	dsb	sy
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200034d4:	f24c 3050 	movw	r0, #50000	; 0xc350
200034d8:	f7ff ff52 	bl	20003380 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
200034dc:	6922      	ldr	r2, [r4, #16]
200034de:	4b0d      	ldr	r3, [pc, #52]	; (20003514 <HAL_FLASHEx_Erase+0x134>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200034e0:	4606      	mov	r6, r0
      FLASH->CR &= (~FLASH_MER_BIT);
200034e2:	4013      	ands	r3, r2
200034e4:	6123      	str	r3, [r4, #16]
  __HAL_UNLOCK(&pFlash);
200034e6:	2300      	movs	r3, #0
}
200034e8:	4630      	mov	r0, r6
  __HAL_UNLOCK(&pFlash);
200034ea:	753b      	strb	r3, [r7, #20]
}
200034ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
200034f0:	2602      	movs	r6, #2
}
200034f2:	4630      	mov	r0, r6
200034f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200034f8:	4606      	mov	r6, r0
          *SectorError = index;
200034fa:	f8c8 5000 	str.w	r5, [r8]
          break;
200034fe:	e7f2      	b.n	200034e6 <HAL_FLASHEx_Erase+0x106>
    FLASH->CR |= FLASH_MER_BIT;
20003500:	6910      	ldr	r0, [r2, #16]
20003502:	f248 0104 	movw	r1, #32772	; 0x8004
20003506:	4301      	orrs	r1, r0
20003508:	6111      	str	r1, [r2, #16]
2000350a:	e7d9      	b.n	200034c0 <HAL_FLASHEx_Erase+0xe0>
2000350c:	20000478 	.word	0x20000478
20003510:	40023c00 	.word	0x40023c00
20003514:	ffff7ffb 	.word	0xffff7ffb

20003518 <HAL_FLASHEx_Erase_IT>:
{
20003518:	b430      	push	{r4, r5}
  __HAL_LOCK(&pFlash);
2000351a:	4c37      	ldr	r4, [pc, #220]	; (200035f8 <HAL_FLASHEx_Erase_IT+0xe0>)
2000351c:	7d23      	ldrb	r3, [r4, #20]
2000351e:	2b01      	cmp	r3, #1
20003520:	d067      	beq.n	200035f2 <HAL_FLASHEx_Erase_IT+0xda>
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
20003522:	4b36      	ldr	r3, [pc, #216]	; (200035fc <HAL_FLASHEx_Erase_IT+0xe4>)
  __HAL_LOCK(&pFlash);
20003524:	2101      	movs	r1, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
20003526:	25f3      	movs	r5, #243	; 0xf3
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
20003528:	691a      	ldr	r2, [r3, #16]
  __HAL_LOCK(&pFlash);
2000352a:	7521      	strb	r1, [r4, #20]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
2000352c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
20003530:	611a      	str	r2, [r3, #16]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
20003532:	691a      	ldr	r2, [r3, #16]
20003534:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
20003538:	611a      	str	r2, [r3, #16]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
2000353a:	60dd      	str	r5, [r3, #12]
  if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
2000353c:	6802      	ldr	r2, [r0, #0]
2000353e:	428a      	cmp	r2, r1
20003540:	d02f      	beq.n	200035a2 <HAL_FLASHEx_Erase_IT+0x8a>
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
20003542:	7c03      	ldrb	r3, [r0, #16]
    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
20003544:	7021      	strb	r1, [r4, #0]
    pFlash.Sector = pEraseInit->Sector;
20003546:	e9d0 5202 	ldrd	r5, r2, [r0, #8]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
2000354a:	6062      	str	r2, [r4, #4]
    pFlash.Sector = pEraseInit->Sector;
2000354c:	60e5      	str	r5, [r4, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
2000354e:	7223      	strb	r3, [r4, #8]
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
20003550:	b9f3      	cbnz	r3, 20003590 <HAL_FLASHEx_Erase_IT+0x78>
     tmp_psize = FLASH_PSIZE_BYTE;
20003552:	461a      	mov	r2, r3
  FLASH->CR &= CR_PSIZE_MASK;
20003554:	4b29      	ldr	r3, [pc, #164]	; (200035fc <HAL_FLASHEx_Erase_IT+0xe4>)
  if(Sector > FLASH_SECTOR_11) 
20003556:	2d0b      	cmp	r5, #11
  FLASH->CR &= CR_PSIZE_MASK;
20003558:	6919      	ldr	r1, [r3, #16]
    Sector += 4;
2000355a:	bf88      	it	hi
2000355c:	3504      	addhi	r5, #4
  FLASH->CR &= CR_PSIZE_MASK;
2000355e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
20003562:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
20003564:	6919      	ldr	r1, [r3, #16]
20003566:	430a      	orrs	r2, r1
20003568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
2000356a:	6919      	ldr	r1, [r3, #16]
2000356c:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
20003570:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
20003572:	691a      	ldr	r2, [r3, #16]
20003574:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
20003578:	f042 0202 	orr.w	r2, r2, #2
2000357c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
2000357e:	691a      	ldr	r2, [r3, #16]
20003580:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
20003584:	611a      	str	r2, [r3, #16]
20003586:	f3bf 8f4f 	dsb	sy
  return status;
2000358a:	2000      	movs	r0, #0
}
2000358c:	bc30      	pop	{r4, r5}
2000358e:	4770      	bx	lr
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
20003590:	2b01      	cmp	r3, #1
20003592:	d02b      	beq.n	200035ec <HAL_FLASHEx_Erase_IT+0xd4>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
20003594:	2b02      	cmp	r3, #2
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
20003596:	bf0c      	ite	eq
20003598:	f44f 7200 	moveq.w	r2, #512	; 0x200
2000359c:	f44f 7240 	movne.w	r2, #768	; 0x300
200035a0:	e7d8      	b.n	20003554 <HAL_FLASHEx_Erase_IT+0x3c>
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
200035a2:	2102      	movs	r1, #2
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
200035a4:	6845      	ldr	r5, [r0, #4]
200035a6:	6902      	ldr	r2, [r0, #16]
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
200035a8:	7021      	strb	r1, [r4, #0]
  if(Banks == FLASH_BANK_BOTH)
200035aa:	2d03      	cmp	r5, #3
  FLASH->CR &= CR_PSIZE_MASK;
200035ac:	6919      	ldr	r1, [r3, #16]
200035ae:	f421 7140 	bic.w	r1, r1, #768	; 0x300
200035b2:	6119      	str	r1, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
200035b4:	d014      	beq.n	200035e0 <HAL_FLASHEx_Erase_IT+0xc8>
    FLASH->CR |= FLASH_CR_MER2;
200035b6:	6919      	ldr	r1, [r3, #16]
  else if(Banks == FLASH_BANK_2)
200035b8:	2d02      	cmp	r5, #2
    FLASH->CR |= FLASH_CR_MER2;
200035ba:	bf0c      	ite	eq
200035bc:	f441 4100 	orreq.w	r1, r1, #32768	; 0x8000
    FLASH->CR |= FLASH_CR_MER1;    
200035c0:	f041 0104 	orrne.w	r1, r1, #4
200035c4:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
200035c6:	0213      	lsls	r3, r2, #8
200035c8:	4a0c      	ldr	r2, [pc, #48]	; (200035fc <HAL_FLASHEx_Erase_IT+0xe4>)
200035ca:	b29b      	uxth	r3, r3
200035cc:	6911      	ldr	r1, [r2, #16]
200035ce:	430b      	orrs	r3, r1
200035d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200035d4:	6113      	str	r3, [r2, #16]
200035d6:	f3bf 8f4f 	dsb	sy
  return status;
200035da:	2000      	movs	r0, #0
}
200035dc:	bc30      	pop	{r4, r5}
200035de:	4770      	bx	lr
    FLASH->CR |= FLASH_MER_BIT;
200035e0:	6918      	ldr	r0, [r3, #16]
200035e2:	f248 0104 	movw	r1, #32772	; 0x8004
200035e6:	4301      	orrs	r1, r0
200035e8:	6119      	str	r1, [r3, #16]
200035ea:	e7ec      	b.n	200035c6 <HAL_FLASHEx_Erase_IT+0xae>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
200035ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200035f0:	e7b0      	b.n	20003554 <HAL_FLASHEx_Erase_IT+0x3c>
  __HAL_LOCK(&pFlash);
200035f2:	2002      	movs	r0, #2
}
200035f4:	bc30      	pop	{r4, r5}
200035f6:	4770      	bx	lr
200035f8:	20000478 	.word	0x20000478
200035fc:	40023c00 	.word	0x40023c00

20003600 <HAL_FLASHEx_OBProgram>:
{
20003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
20003602:	4d3a      	ldr	r5, [pc, #232]	; (200036ec <HAL_FLASHEx_OBProgram+0xec>)
20003604:	7d2b      	ldrb	r3, [r5, #20]
20003606:	2b01      	cmp	r3, #1
20003608:	d06e      	beq.n	200036e8 <HAL_FLASHEx_OBProgram+0xe8>
2000360a:	2201      	movs	r2, #1
2000360c:	4604      	mov	r4, r0
2000360e:	752a      	strb	r2, [r5, #20]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
20003610:	6803      	ldr	r3, [r0, #0]
20003612:	07d9      	lsls	r1, r3, #31
20003614:	d415      	bmi.n	20003642 <HAL_FLASHEx_OBProgram+0x42>
  HAL_StatusTypeDef status = HAL_ERROR;
20003616:	4610      	mov	r0, r2
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
20003618:	079f      	lsls	r7, r3, #30
2000361a:	d422      	bmi.n	20003662 <HAL_FLASHEx_OBProgram+0x62>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
2000361c:	075e      	lsls	r6, r3, #29
2000361e:	d42c      	bmi.n	2000367a <HAL_FLASHEx_OBProgram+0x7a>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
20003620:	0719      	lsls	r1, r3, #28
20003622:	d507      	bpl.n	20003634 <HAL_FLASHEx_OBProgram+0x34>
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
20003624:	4e32      	ldr	r6, [pc, #200]	; (200036f0 <HAL_FLASHEx_OBProgram+0xf0>)
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
20003626:	2000      	movs	r0, #0
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
20003628:	7c22      	ldrb	r2, [r4, #16]
2000362a:	6971      	ldr	r1, [r6, #20]
2000362c:	f021 010c 	bic.w	r1, r1, #12
20003630:	430a      	orrs	r2, r1
20003632:	6172      	str	r2, [r6, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
20003634:	06da      	lsls	r2, r3, #27
20003636:	d43e      	bmi.n	200036b6 <HAL_FLASHEx_OBProgram+0xb6>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
20003638:	069b      	lsls	r3, r3, #26
2000363a:	d42e      	bmi.n	2000369a <HAL_FLASHEx_OBProgram+0x9a>
  __HAL_UNLOCK(&pFlash);
2000363c:	2300      	movs	r3, #0
2000363e:	752b      	strb	r3, [r5, #20]
}
20003640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
20003642:	6843      	ldr	r3, [r0, #4]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20003644:	f24c 3050 	movw	r0, #50000	; 0xc350
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
20003648:	68a6      	ldr	r6, [r4, #8]
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
2000364a:	4293      	cmp	r3, r2
2000364c:	d041      	beq.n	200036d2 <HAL_FLASHEx_OBProgram+0xd2>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000364e:	f7ff fe97 	bl	20003380 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
20003652:	b918      	cbnz	r0, 2000365c <HAL_FLASHEx_OBProgram+0x5c>
    FLASH->OPTCR |= (WRPSector); 
20003654:	4b26      	ldr	r3, [pc, #152]	; (200036f0 <HAL_FLASHEx_OBProgram+0xf0>)
20003656:	695a      	ldr	r2, [r3, #20]
20003658:	4316      	orrs	r6, r2
2000365a:	615e      	str	r6, [r3, #20]
2000365c:	6823      	ldr	r3, [r4, #0]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
2000365e:	079f      	lsls	r7, r3, #30
20003660:	d5dc      	bpl.n	2000361c <HAL_FLASHEx_OBProgram+0x1c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20003662:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
20003666:	68e6      	ldr	r6, [r4, #12]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20003668:	f7ff fe8a 	bl	20003380 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
2000366c:	b910      	cbnz	r0, 20003674 <HAL_FLASHEx_OBProgram+0x74>
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
2000366e:	b2f6      	uxtb	r6, r6
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
20003670:	4b20      	ldr	r3, [pc, #128]	; (200036f4 <HAL_FLASHEx_OBProgram+0xf4>)
20003672:	701e      	strb	r6, [r3, #0]
20003674:	6823      	ldr	r3, [r4, #0]
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
20003676:	075e      	lsls	r6, r3, #29
20003678:	d5d2      	bpl.n	20003620 <HAL_FLASHEx_OBProgram+0x20>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000367a:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
2000367e:	6966      	ldr	r6, [r4, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20003680:	f7ff fe7e 	bl	20003380 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
20003684:	b938      	cbnz	r0, 20003696 <HAL_FLASHEx_OBProgram+0x96>
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
20003686:	491a      	ldr	r1, [pc, #104]	; (200036f0 <HAL_FLASHEx_OBProgram+0xf0>)
20003688:	4a1b      	ldr	r2, [pc, #108]	; (200036f8 <HAL_FLASHEx_OBProgram+0xf8>)
2000368a:	694f      	ldr	r7, [r1, #20]
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
2000368c:	4b1b      	ldr	r3, [pc, #108]	; (200036fc <HAL_FLASHEx_OBProgram+0xfc>)
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
2000368e:	403a      	ands	r2, r7
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
20003690:	4033      	ands	r3, r6
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
20003692:	4313      	orrs	r3, r2
20003694:	614b      	str	r3, [r1, #20]
20003696:	6823      	ldr	r3, [r4, #0]
20003698:	e7c2      	b.n	20003620 <HAL_FLASHEx_OBProgram+0x20>
  
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADDRESS(Address));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000369a:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
2000369e:	69e4      	ldr	r4, [r4, #28]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200036a0:	f7ff fe6e 	bl	20003380 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
200036a4:	2800      	cmp	r0, #0
200036a6:	d1c9      	bne.n	2000363c <HAL_FLASHEx_OBProgram+0x3c>
    {			
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
    }
    else
    {
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
200036a8:	4a11      	ldr	r2, [pc, #68]	; (200036f0 <HAL_FLASHEx_OBProgram+0xf0>)
200036aa:	6993      	ldr	r3, [r2, #24]
200036ac:	b29b      	uxth	r3, r3
200036ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
200036b2:	6193      	str	r3, [r2, #24]
200036b4:	e7c2      	b.n	2000363c <HAL_FLASHEx_OBProgram+0x3c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200036b6:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
200036ba:	69a6      	ldr	r6, [r4, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200036bc:	f7ff fe60 	bl	20003380 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
200036c0:	b928      	cbnz	r0, 200036ce <HAL_FLASHEx_OBProgram+0xce>
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
200036c2:	4a0b      	ldr	r2, [pc, #44]	; (200036f0 <HAL_FLASHEx_OBProgram+0xf0>)
200036c4:	4b0e      	ldr	r3, [pc, #56]	; (20003700 <HAL_FLASHEx_OBProgram+0x100>)
200036c6:	6991      	ldr	r1, [r2, #24]
200036c8:	400b      	ands	r3, r1
200036ca:	4333      	orrs	r3, r6
200036cc:	6193      	str	r3, [r2, #24]
200036ce:	6823      	ldr	r3, [r4, #0]
200036d0:	e7b2      	b.n	20003638 <HAL_FLASHEx_OBProgram+0x38>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200036d2:	f7ff fe55 	bl	20003380 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
200036d6:	2800      	cmp	r0, #0
200036d8:	d1c0      	bne.n	2000365c <HAL_FLASHEx_OBProgram+0x5c>
    FLASH->OPTCR &= (~WRPSector);  
200036da:	4a05      	ldr	r2, [pc, #20]	; (200036f0 <HAL_FLASHEx_OBProgram+0xf0>)
200036dc:	6953      	ldr	r3, [r2, #20]
200036de:	ea23 0306 	bic.w	r3, r3, r6
200036e2:	6153      	str	r3, [r2, #20]
200036e4:	6823      	ldr	r3, [r4, #0]
200036e6:	e797      	b.n	20003618 <HAL_FLASHEx_OBProgram+0x18>
  __HAL_LOCK(&pFlash);
200036e8:	2002      	movs	r0, #2
}
200036ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200036ec:	20000478 	.word	0x20000478
200036f0:	40023c00 	.word	0x40023c00
200036f4:	40023c15 	.word	0x40023c15
200036f8:	0fffff0f 	.word	0x0fffff0f
200036fc:	f00000f0 	.word	0xf00000f0
20003700:	ffff0000 	.word	0xffff0000

20003704 <HAL_FLASHEx_OBGetConfig>:
{
20003704:	b410      	push	{r4}
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
20003706:	4a12      	ldr	r2, [pc, #72]	; (20003750 <HAL_FLASHEx_OBGetConfig+0x4c>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
20003708:	243f      	movs	r4, #63	; 0x3f
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
2000370a:	4b12      	ldr	r3, [pc, #72]	; (20003754 <HAL_FLASHEx_OBGetConfig+0x50>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
2000370c:	6004      	str	r4, [r0, #0]
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
2000370e:	6952      	ldr	r2, [r2, #20]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
20003710:	4911      	ldr	r1, [pc, #68]	; (20003758 <HAL_FLASHEx_OBGetConfig+0x54>)
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
20003712:	4013      	ands	r3, r2
  pOBInit->WRPSector = FLASH_OB_GetWRP();
20003714:	6083      	str	r3, [r0, #8]
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
20003716:	780b      	ldrb	r3, [r1, #0]
20003718:	2baa      	cmp	r3, #170	; 0xaa
2000371a:	b2da      	uxtb	r2, r3
2000371c:	d004      	beq.n	20003728 <HAL_FLASHEx_OBGetConfig+0x24>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
2000371e:	780b      	ldrb	r3, [r1, #0]
20003720:	2bcc      	cmp	r3, #204	; 0xcc
20003722:	bf0c      	ite	eq
20003724:	22cc      	moveq	r2, #204	; 0xcc
20003726:	2255      	movne	r2, #85	; 0x55
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
20003728:	4b09      	ldr	r3, [pc, #36]	; (20003750 <HAL_FLASHEx_OBGetConfig+0x4c>)
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
2000372a:	60c2      	str	r2, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
2000372c:	4a0b      	ldr	r2, [pc, #44]	; (2000375c <HAL_FLASHEx_OBGetConfig+0x58>)
2000372e:	6959      	ldr	r1, [r3, #20]
}
20003730:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
20003734:	400a      	ands	r2, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
20003736:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
20003738:	695a      	ldr	r2, [r3, #20]
2000373a:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
2000373e:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
20003740:	699a      	ldr	r2, [r3, #24]
20003742:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
20003744:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
20003746:	699b      	ldr	r3, [r3, #24]
20003748:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
2000374a:	61c3      	str	r3, [r0, #28]
}
2000374c:	4770      	bx	lr
2000374e:	bf00      	nop
20003750:	40023c00 	.word	0x40023c00
20003754:	0fff0000 	.word	0x0fff0000
20003758:	40023c15 	.word	0x40023c15
2000375c:	f00000f0 	.word	0xf00000f0

20003760 <FLASH_Erase_Sector>:
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
20003760:	b139      	cbz	r1, 20003772 <FLASH_Erase_Sector+0x12>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
20003762:	2901      	cmp	r1, #1
20003764:	d021      	beq.n	200037aa <FLASH_Erase_Sector+0x4a>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
20003766:	2902      	cmp	r1, #2
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
20003768:	bf0c      	ite	eq
2000376a:	f44f 7100 	moveq.w	r1, #512	; 0x200
2000376e:	f44f 7140 	movne.w	r1, #768	; 0x300
  FLASH->CR &= CR_PSIZE_MASK;
20003772:	4b0f      	ldr	r3, [pc, #60]	; (200037b0 <FLASH_Erase_Sector+0x50>)
  if(Sector > FLASH_SECTOR_11) 
20003774:	280b      	cmp	r0, #11
  FLASH->CR &= CR_PSIZE_MASK;
20003776:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
20003778:	bf88      	it	hi
2000377a:	3004      	addhi	r0, #4
  FLASH->CR &= CR_PSIZE_MASK;
2000377c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
20003780:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
20003782:	691a      	ldr	r2, [r3, #16]
20003784:	4311      	orrs	r1, r2
20003786:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
20003788:	691a      	ldr	r2, [r3, #16]
2000378a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
2000378e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
20003790:	691a      	ldr	r2, [r3, #16]
20003792:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
20003796:	f040 0002 	orr.w	r0, r0, #2
2000379a:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
2000379c:	691a      	ldr	r2, [r3, #16]
2000379e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
200037a2:	611a      	str	r2, [r3, #16]
200037a4:	f3bf 8f4f 	dsb	sy
}
200037a8:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
200037aa:	f44f 7180 	mov.w	r1, #256	; 0x100
200037ae:	e7e0      	b.n	20003772 <FLASH_Erase_Sector+0x12>
200037b0:	40023c00 	.word	0x40023c00

200037b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
200037b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
200037b8:	2300      	movs	r3, #0
{
200037ba:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
200037bc:	f8df b22c 	ldr.w	fp, [pc, #556]	; 200039ec <HAL_GPIO_Init+0x238>
200037c0:	680d      	ldr	r5, [r1, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
200037c2:	f8df e22c 	ldr.w	lr, [pc, #556]	; 200039f0 <HAL_GPIO_Init+0x23c>
200037c6:	e002      	b.n	200037ce <HAL_GPIO_Init+0x1a>
  for(position = 0; position < GPIO_NUMBER; position++)
200037c8:	3301      	adds	r3, #1
200037ca:	2b10      	cmp	r3, #16
200037cc:	d057      	beq.n	2000387e <HAL_GPIO_Init+0xca>
    ioposition = ((uint32_t)0x01) << position;
200037ce:	2201      	movs	r2, #1
200037d0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
200037d2:	ea02 0a05 	and.w	sl, r2, r5
    if(iocurrent == ioposition)
200037d6:	43aa      	bics	r2, r5
200037d8:	d1f6      	bne.n	200037c8 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
200037da:	684a      	ldr	r2, [r1, #4]
200037dc:	005f      	lsls	r7, r3, #1
200037de:	f022 0c10 	bic.w	ip, r2, #16
200037e2:	f10c 34ff 	add.w	r4, ip, #4294967295
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
200037e6:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
200037e8:	f04f 0403 	mov.w	r4, #3
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
200037ec:	f200 80c0 	bhi.w	20003970 <HAL_GPIO_Init+0x1bc>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
200037f0:	f3c2 1600 	ubfx	r6, r2, #4, #1
        temp = GPIOx->OSPEEDR; 
200037f4:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
200037f8:	40bc      	lsls	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
200037fa:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
200037fc:	ea28 0804 	bic.w	r8, r8, r4
20003800:	43e4      	mvns	r4, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
20003802:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
20003804:	68ce      	ldr	r6, [r1, #12]
20003806:	fa06 f907 	lsl.w	r9, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
2000380a:	9e01      	ldr	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
2000380c:	ea49 0808 	orr.w	r8, r9, r8
        GPIOx->OSPEEDR = temp;
20003810:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
20003814:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20003818:	ea28 080a 	bic.w	r8, r8, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
2000381c:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OTYPER = temp;
20003820:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
20003822:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
20003824:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
20003828:	ea06 0804 	and.w	r8, r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
2000382c:	688e      	ldr	r6, [r1, #8]
2000382e:	fa06 f607 	lsl.w	r6, r6, r7
20003832:	ea46 0608 	orr.w	r6, r6, r8
      GPIOx->PUPDR = temp;
20003836:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
20003838:	d124      	bne.n	20003884 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3];
2000383a:	08de      	lsrs	r6, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
2000383c:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
20003840:	f002 0203 	and.w	r2, r2, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
20003844:	f04f 080f 	mov.w	r8, #15
20003848:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  for(position = 0; position < GPIO_NUMBER; position++)
2000384c:	3301      	adds	r3, #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
2000384e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
20003852:	fa02 f707 	lsl.w	r7, r2, r7
        temp = GPIOx->AFR[position >> 3];
20003856:	f8d6 9020 	ldr.w	r9, [r6, #32]
  for(position = 0; position < GPIO_NUMBER; position++)
2000385a:	2b10      	cmp	r3, #16
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
2000385c:	690a      	ldr	r2, [r1, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
2000385e:	fa08 f80c 	lsl.w	r8, r8, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
20003862:	fa02 fc0c 	lsl.w	ip, r2, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
20003866:	ea29 0208 	bic.w	r2, r9, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
2000386a:	ea4c 0202 	orr.w	r2, ip, r2
        GPIOx->AFR[position >> 3] = temp;
2000386e:	6232      	str	r2, [r6, #32]
      temp = GPIOx->MODER;
20003870:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
20003872:	ea04 0402 	and.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
20003876:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
2000387a:	6004      	str	r4, [r0, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
2000387c:	d1a7      	bne.n	200037ce <HAL_GPIO_Init+0x1a>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
2000387e:	b005      	add	sp, #20
20003880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
20003884:	f8d0 c000 	ldr.w	ip, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
20003888:	f002 0603 	and.w	r6, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
2000388c:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
20003890:	fa06 f707 	lsl.w	r7, r6, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
20003894:	00d4      	lsls	r4, r2, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
20003896:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
2000389a:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
2000389c:	d594      	bpl.n	200037c8 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2000389e:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
200038a2:	f023 0c03 	bic.w	ip, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
200038a6:	f003 0403 	and.w	r4, r3, #3
200038aa:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
200038ac:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
200038b0:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
200038b4:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
200038b6:	f8cb 7044 	str.w	r7, [fp, #68]	; 0x44
200038ba:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800
200038be:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
200038c2:	fa06 f804 	lsl.w	r8, r6, r4
        __HAL_RCC_SYSCFG_CLK_ENABLE();
200038c6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
200038ca:	9703      	str	r7, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
200038cc:	4f3e      	ldr	r7, [pc, #248]	; (200039c8 <HAL_GPIO_Init+0x214>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
200038ce:	9e03      	ldr	r6, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
200038d0:	42b8      	cmp	r0, r7
        temp = SYSCFG->EXTICR[position >> 2];
200038d2:	f8dc 6008 	ldr.w	r6, [ip, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
200038d6:	ea26 0608 	bic.w	r6, r6, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
200038da:	d020      	beq.n	2000391e <HAL_GPIO_Init+0x16a>
200038dc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
200038e0:	42b8      	cmp	r0, r7
200038e2:	d048      	beq.n	20003976 <HAL_GPIO_Init+0x1c2>
200038e4:	4f39      	ldr	r7, [pc, #228]	; (200039cc <HAL_GPIO_Init+0x218>)
200038e6:	42b8      	cmp	r0, r7
200038e8:	d04a      	beq.n	20003980 <HAL_GPIO_Init+0x1cc>
200038ea:	4f39      	ldr	r7, [pc, #228]	; (200039d0 <HAL_GPIO_Init+0x21c>)
200038ec:	42b8      	cmp	r0, r7
200038ee:	d04c      	beq.n	2000398a <HAL_GPIO_Init+0x1d6>
200038f0:	4f38      	ldr	r7, [pc, #224]	; (200039d4 <HAL_GPIO_Init+0x220>)
200038f2:	42b8      	cmp	r0, r7
200038f4:	d04e      	beq.n	20003994 <HAL_GPIO_Init+0x1e0>
200038f6:	4f38      	ldr	r7, [pc, #224]	; (200039d8 <HAL_GPIO_Init+0x224>)
200038f8:	42b8      	cmp	r0, r7
200038fa:	d055      	beq.n	200039a8 <HAL_GPIO_Init+0x1f4>
200038fc:	4f37      	ldr	r7, [pc, #220]	; (200039dc <HAL_GPIO_Init+0x228>)
200038fe:	42b8      	cmp	r0, r7
20003900:	d057      	beq.n	200039b2 <HAL_GPIO_Init+0x1fe>
20003902:	4f37      	ldr	r7, [pc, #220]	; (200039e0 <HAL_GPIO_Init+0x22c>)
20003904:	42b8      	cmp	r0, r7
20003906:	d04a      	beq.n	2000399e <HAL_GPIO_Init+0x1ea>
20003908:	4f36      	ldr	r7, [pc, #216]	; (200039e4 <HAL_GPIO_Init+0x230>)
2000390a:	42b8      	cmp	r0, r7
2000390c:	d056      	beq.n	200039bc <HAL_GPIO_Init+0x208>
2000390e:	4f36      	ldr	r7, [pc, #216]	; (200039e8 <HAL_GPIO_Init+0x234>)
20003910:	42b8      	cmp	r0, r7
20003912:	bf0c      	ite	eq
20003914:	2709      	moveq	r7, #9
20003916:	270a      	movne	r7, #10
20003918:	fa07 f404 	lsl.w	r4, r7, r4
2000391c:	4326      	orrs	r6, r4
        SYSCFG->EXTICR[position >> 2] = temp;
2000391e:	f8cc 6008 	str.w	r6, [ip, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
20003922:	03d7      	lsls	r7, r2, #15
        temp = EXTI->IMR;
20003924:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~((uint32_t)iocurrent);
20003928:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
2000392c:	bf4c      	ite	mi
2000392e:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~((uint32_t)iocurrent);
20003932:	4034      	andpl	r4, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
20003934:	0397      	lsls	r7, r2, #14
        EXTI->IMR = temp;
20003936:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->EMR;
2000393a:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
2000393e:	bf54      	ite	pl
20003940:	4034      	andpl	r4, r6
          temp |= iocurrent;
20003942:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
20003946:	02d7      	lsls	r7, r2, #11
        EXTI->EMR = temp;
20003948:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI->RTSR;
2000394c:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
20003950:	bf54      	ite	pl
20003952:	4034      	andpl	r4, r6
          temp |= iocurrent;
20003954:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
20003958:	0292      	lsls	r2, r2, #10
        EXTI->RTSR = temp;
2000395a:	f8ce 4008 	str.w	r4, [lr, #8]
        temp = EXTI->FTSR;
2000395e:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
20003962:	bf54      	ite	pl
20003964:	4034      	andpl	r4, r6
          temp |= iocurrent;
20003966:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->FTSR = temp;
2000396a:	f8ce 400c 	str.w	r4, [lr, #12]
2000396e:	e72b      	b.n	200037c8 <HAL_GPIO_Init+0x14>
20003970:	40bc      	lsls	r4, r7
20003972:	43e4      	mvns	r4, r4
20003974:	e755      	b.n	20003822 <HAL_GPIO_Init+0x6e>
20003976:	2701      	movs	r7, #1
20003978:	fa07 f404 	lsl.w	r4, r7, r4
2000397c:	4326      	orrs	r6, r4
2000397e:	e7ce      	b.n	2000391e <HAL_GPIO_Init+0x16a>
20003980:	2702      	movs	r7, #2
20003982:	fa07 f404 	lsl.w	r4, r7, r4
20003986:	4326      	orrs	r6, r4
20003988:	e7c9      	b.n	2000391e <HAL_GPIO_Init+0x16a>
2000398a:	2703      	movs	r7, #3
2000398c:	fa07 f404 	lsl.w	r4, r7, r4
20003990:	4326      	orrs	r6, r4
20003992:	e7c4      	b.n	2000391e <HAL_GPIO_Init+0x16a>
20003994:	2704      	movs	r7, #4
20003996:	fa07 f404 	lsl.w	r4, r7, r4
2000399a:	4326      	orrs	r6, r4
2000399c:	e7bf      	b.n	2000391e <HAL_GPIO_Init+0x16a>
2000399e:	2707      	movs	r7, #7
200039a0:	fa07 f404 	lsl.w	r4, r7, r4
200039a4:	4326      	orrs	r6, r4
200039a6:	e7ba      	b.n	2000391e <HAL_GPIO_Init+0x16a>
200039a8:	2705      	movs	r7, #5
200039aa:	fa07 f404 	lsl.w	r4, r7, r4
200039ae:	4326      	orrs	r6, r4
200039b0:	e7b5      	b.n	2000391e <HAL_GPIO_Init+0x16a>
200039b2:	2706      	movs	r7, #6
200039b4:	fa07 f404 	lsl.w	r4, r7, r4
200039b8:	4326      	orrs	r6, r4
200039ba:	e7b0      	b.n	2000391e <HAL_GPIO_Init+0x16a>
200039bc:	2708      	movs	r7, #8
200039be:	fa07 f404 	lsl.w	r4, r7, r4
200039c2:	4326      	orrs	r6, r4
200039c4:	e7ab      	b.n	2000391e <HAL_GPIO_Init+0x16a>
200039c6:	bf00      	nop
200039c8:	40020000 	.word	0x40020000
200039cc:	40020800 	.word	0x40020800
200039d0:	40020c00 	.word	0x40020c00
200039d4:	40021000 	.word	0x40021000
200039d8:	40021400 	.word	0x40021400
200039dc:	40021800 	.word	0x40021800
200039e0:	40021c00 	.word	0x40021c00
200039e4:	40022000 	.word	0x40022000
200039e8:	40022400 	.word	0x40022400
200039ec:	40023800 	.word	0x40023800
200039f0:	40013c00 	.word	0x40013c00

200039f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
200039f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
200039f8:	2300      	movs	r3, #0
200039fa:	f8df a16c 	ldr.w	sl, [pc, #364]	; 20003b68 <HAL_GPIO_DeInit+0x174>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
200039fe:	f8df 916c 	ldr.w	r9, [pc, #364]	; 20003b6c <HAL_GPIO_DeInit+0x178>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
20003a02:	f8df 816c 	ldr.w	r8, [pc, #364]	; 20003b70 <HAL_GPIO_DeInit+0x17c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
20003a06:	f8df b16c 	ldr.w	fp, [pc, #364]	; 20003b74 <HAL_GPIO_DeInit+0x180>
20003a0a:	e002      	b.n	20003a12 <HAL_GPIO_DeInit+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
20003a0c:	3301      	adds	r3, #1
20003a0e:	2b10      	cmp	r3, #16
20003a10:	d07b      	beq.n	20003b0a <HAL_GPIO_DeInit+0x116>
    ioposition = ((uint32_t)0x01) << position;
20003a12:	2501      	movs	r5, #1
20003a14:	fa05 f203 	lsl.w	r2, r5, r3
    if(iocurrent == ioposition)
20003a18:	ea32 0401 	bics.w	r4, r2, r1
    iocurrent = (GPIO_Pin) & ioposition;
20003a1c:	ea02 0c01 	and.w	ip, r2, r1
    if(iocurrent == ioposition)
20003a20:	d1f4      	bne.n	20003a0c <HAL_GPIO_DeInit+0x18>
      tmp = SYSCFG->EXTICR[position >> 2];
20003a22:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
20003a26:	f003 0403 	and.w	r4, r3, #3
20003a2a:	270f      	movs	r7, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
20003a2c:	4548      	cmp	r0, r9
20003a2e:	4456      	add	r6, sl
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
20003a30:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
20003a34:	f8d6 e008 	ldr.w	lr, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
20003a38:	fa07 f704 	lsl.w	r7, r7, r4
20003a3c:	ea07 0e0e 	and.w	lr, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
20003a40:	d01e      	beq.n	20003a80 <HAL_GPIO_DeInit+0x8c>
20003a42:	4558      	cmp	r0, fp
20003a44:	d064      	beq.n	20003b10 <HAL_GPIO_DeInit+0x11c>
20003a46:	4d40      	ldr	r5, [pc, #256]	; (20003b48 <HAL_GPIO_DeInit+0x154>)
20003a48:	42a8      	cmp	r0, r5
20003a4a:	d064      	beq.n	20003b16 <HAL_GPIO_DeInit+0x122>
20003a4c:	4d3f      	ldr	r5, [pc, #252]	; (20003b4c <HAL_GPIO_DeInit+0x158>)
20003a4e:	42a8      	cmp	r0, r5
20003a50:	d065      	beq.n	20003b1e <HAL_GPIO_DeInit+0x12a>
20003a52:	4d3f      	ldr	r5, [pc, #252]	; (20003b50 <HAL_GPIO_DeInit+0x15c>)
20003a54:	42a8      	cmp	r0, r5
20003a56:	d066      	beq.n	20003b26 <HAL_GPIO_DeInit+0x132>
20003a58:	4d3e      	ldr	r5, [pc, #248]	; (20003b54 <HAL_GPIO_DeInit+0x160>)
20003a5a:	42a8      	cmp	r0, r5
20003a5c:	d067      	beq.n	20003b2e <HAL_GPIO_DeInit+0x13a>
20003a5e:	4d3e      	ldr	r5, [pc, #248]	; (20003b58 <HAL_GPIO_DeInit+0x164>)
20003a60:	42a8      	cmp	r0, r5
20003a62:	d054      	beq.n	20003b0e <HAL_GPIO_DeInit+0x11a>
20003a64:	4d3d      	ldr	r5, [pc, #244]	; (20003b5c <HAL_GPIO_DeInit+0x168>)
20003a66:	42a8      	cmp	r0, r5
20003a68:	d065      	beq.n	20003b36 <HAL_GPIO_DeInit+0x142>
20003a6a:	4d3d      	ldr	r5, [pc, #244]	; (20003b60 <HAL_GPIO_DeInit+0x16c>)
20003a6c:	42a8      	cmp	r0, r5
20003a6e:	d066      	beq.n	20003b3e <HAL_GPIO_DeInit+0x14a>
20003a70:	4d3c      	ldr	r5, [pc, #240]	; (20003b64 <HAL_GPIO_DeInit+0x170>)
20003a72:	42a8      	cmp	r0, r5
20003a74:	bf14      	ite	ne
20003a76:	250a      	movne	r5, #10
20003a78:	2509      	moveq	r5, #9
20003a7a:	fa05 f404 	lsl.w	r4, r5, r4
20003a7e:	e000      	b.n	20003a82 <HAL_GPIO_DeInit+0x8e>
20003a80:	2400      	movs	r4, #0
20003a82:	45a6      	cmp	lr, r4
20003a84:	d11b      	bne.n	20003abe <HAL_GPIO_DeInit+0xca>
        EXTI->IMR &= ~((uint32_t)iocurrent);
20003a86:	f8d8 4000 	ldr.w	r4, [r8]
20003a8a:	ea24 040c 	bic.w	r4, r4, ip
20003a8e:	f8c8 4000 	str.w	r4, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
20003a92:	f8d8 4004 	ldr.w	r4, [r8, #4]
20003a96:	ea24 040c 	bic.w	r4, r4, ip
20003a9a:	f8c8 4004 	str.w	r4, [r8, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
20003a9e:	f8d8 4008 	ldr.w	r4, [r8, #8]
20003aa2:	ea24 040c 	bic.w	r4, r4, ip
20003aa6:	f8c8 4008 	str.w	r4, [r8, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
20003aaa:	f8d8 400c 	ldr.w	r4, [r8, #12]
20003aae:	ea24 040c 	bic.w	r4, r4, ip
20003ab2:	f8c8 400c 	str.w	r4, [r8, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
20003ab6:	68b4      	ldr	r4, [r6, #8]
20003ab8:	ea24 0707 	bic.w	r7, r4, r7
20003abc:	60b7      	str	r7, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
20003abe:	005c      	lsls	r4, r3, #1
20003ac0:	2603      	movs	r6, #3
20003ac2:	f8d0 c000 	ldr.w	ip, [r0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
20003ac6:	270f      	movs	r7, #15
20003ac8:	fa23 f506 	lsr.w	r5, r3, r6
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
20003acc:	40a6      	lsls	r6, r4
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
20003ace:	f003 0407 	and.w	r4, r3, #7
  for(position = 0; position < GPIO_NUMBER; position++)
20003ad2:	3301      	adds	r3, #1
20003ad4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
20003ad8:	ea2c 0c06 	bic.w	ip, ip, r6
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
20003adc:	00a4      	lsls	r4, r4, #2
  for(position = 0; position < GPIO_NUMBER; position++)
20003ade:	2b10      	cmp	r3, #16
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
20003ae0:	f8c0 c000 	str.w	ip, [r0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
20003ae4:	fa07 f704 	lsl.w	r7, r7, r4
20003ae8:	6a2c      	ldr	r4, [r5, #32]
20003aea:	ea24 0407 	bic.w	r4, r4, r7
20003aee:	622c      	str	r4, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
20003af0:	68c4      	ldr	r4, [r0, #12]
20003af2:	ea24 0406 	bic.w	r4, r4, r6
20003af6:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
20003af8:	6844      	ldr	r4, [r0, #4]
20003afa:	ea24 0202 	bic.w	r2, r4, r2
20003afe:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
20003b00:	6882      	ldr	r2, [r0, #8]
20003b02:	ea22 0606 	bic.w	r6, r2, r6
20003b06:	6086      	str	r6, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
20003b08:	d183      	bne.n	20003a12 <HAL_GPIO_DeInit+0x1e>
    }
  }
}
20003b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20003b0e:	2506      	movs	r5, #6
20003b10:	fa05 f404 	lsl.w	r4, r5, r4
20003b14:	e7b5      	b.n	20003a82 <HAL_GPIO_DeInit+0x8e>
20003b16:	2502      	movs	r5, #2
20003b18:	fa05 f404 	lsl.w	r4, r5, r4
20003b1c:	e7b1      	b.n	20003a82 <HAL_GPIO_DeInit+0x8e>
20003b1e:	2503      	movs	r5, #3
20003b20:	fa05 f404 	lsl.w	r4, r5, r4
20003b24:	e7ad      	b.n	20003a82 <HAL_GPIO_DeInit+0x8e>
20003b26:	2504      	movs	r5, #4
20003b28:	fa05 f404 	lsl.w	r4, r5, r4
20003b2c:	e7a9      	b.n	20003a82 <HAL_GPIO_DeInit+0x8e>
20003b2e:	2505      	movs	r5, #5
20003b30:	fa05 f404 	lsl.w	r4, r5, r4
20003b34:	e7a5      	b.n	20003a82 <HAL_GPIO_DeInit+0x8e>
20003b36:	2507      	movs	r5, #7
20003b38:	fa05 f404 	lsl.w	r4, r5, r4
20003b3c:	e7a1      	b.n	20003a82 <HAL_GPIO_DeInit+0x8e>
20003b3e:	2508      	movs	r5, #8
20003b40:	fa05 f404 	lsl.w	r4, r5, r4
20003b44:	e79d      	b.n	20003a82 <HAL_GPIO_DeInit+0x8e>
20003b46:	bf00      	nop
20003b48:	40020800 	.word	0x40020800
20003b4c:	40020c00 	.word	0x40020c00
20003b50:	40021000 	.word	0x40021000
20003b54:	40021400 	.word	0x40021400
20003b58:	40021800 	.word	0x40021800
20003b5c:	40021c00 	.word	0x40021c00
20003b60:	40022000 	.word	0x40022000
20003b64:	40022400 	.word	0x40022400
20003b68:	40013800 	.word	0x40013800
20003b6c:	40020000 	.word	0x40020000
20003b70:	40013c00 	.word	0x40013c00
20003b74:	40020400 	.word	0x40020400

20003b78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
20003b78:	6903      	ldr	r3, [r0, #16]
20003b7a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
20003b7c:	bf14      	ite	ne
20003b7e:	2001      	movne	r0, #1
20003b80:	2000      	moveq	r0, #0
20003b82:	4770      	bx	lr

20003b84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20003b84:	b902      	cbnz	r2, 20003b88 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
20003b86:	0409      	lsls	r1, r1, #16
20003b88:	6181      	str	r1, [r0, #24]
  }
}
20003b8a:	4770      	bx	lr

20003b8c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
20003b8c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
20003b8e:	ea01 0203 	and.w	r2, r1, r3
20003b92:	ea21 0103 	bic.w	r1, r1, r3
20003b96:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
20003b9a:	6181      	str	r1, [r0, #24]
}
20003b9c:	4770      	bx	lr
20003b9e:	bf00      	nop

20003ba0 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003ba0:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
20003ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20003ba6:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
20003ba8:	9b01      	ldr	r3, [sp, #4]
20003baa:	430b      	orrs	r3, r1
20003bac:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20003bae:	9b01      	ldr	r3, [sp, #4]
20003bb0:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
20003bb2:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20003bb4:	9b01      	ldr	r3, [sp, #4]
20003bb6:	61c3      	str	r3, [r0, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
20003bb8:	69c3      	ldr	r3, [r0, #28]
20003bba:	9301      	str	r3, [sp, #4]

  /* Read again in order to confirm lock is active */
  if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
20003bbc:	69c0      	ldr	r0, [r0, #28]
20003bbe:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
  }
  else
  {
    return HAL_ERROR;
  }
}
20003bc2:	f3c0 4000 	ubfx	r0, r0, #16, #1
20003bc6:	b002      	add	sp, #8
20003bc8:	4770      	bx	lr
20003bca:	bf00      	nop

20003bcc <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
20003bcc:	4770      	bx	lr
20003bce:	bf00      	nop

20003bd0 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
20003bd0:	4a04      	ldr	r2, [pc, #16]	; (20003be4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
20003bd2:	6951      	ldr	r1, [r2, #20]
20003bd4:	4201      	tst	r1, r0
20003bd6:	d100      	bne.n	20003bda <HAL_GPIO_EXTI_IRQHandler+0xa>
20003bd8:	4770      	bx	lr
{
20003bda:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
20003bdc:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
20003bde:	f7ff fff5 	bl	20003bcc <HAL_GPIO_EXTI_Callback>
}
20003be2:	bd08      	pop	{r3, pc}
20003be4:	40013c00 	.word	0x40013c00

20003be8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
20003be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003bea:	4605      	mov	r5, r0
20003bec:	460e      	mov	r6, r1
20003bee:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
20003bf0:	682b      	ldr	r3, [r5, #0]
20003bf2:	699a      	ldr	r2, [r3, #24]
20003bf4:	0752      	lsls	r2, r2, #29
20003bf6:	d45a      	bmi.n	20003cae <I2C_WaitOnRXNEFlagUntilTimeout+0xc6>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
20003bf8:	699c      	ldr	r4, [r3, #24]
20003bfa:	f014 0410 	ands.w	r4, r4, #16
20003bfe:	d027      	beq.n	20003c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
20003c00:	1c70      	adds	r0, r6, #1
20003c02:	d13b      	bne.n	20003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
20003c04:	699a      	ldr	r2, [r3, #24]
20003c06:	0691      	lsls	r1, r2, #26
20003c08:	d5fc      	bpl.n	20003c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20003c0a:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20003c0c:	2110      	movs	r1, #16
20003c0e:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20003c10:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
20003c12:	699a      	ldr	r2, [r3, #24]
20003c14:	0796      	lsls	r6, r2, #30
20003c16:	d501      	bpl.n	20003c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
    hi2c->Instance->TXDR = 0x00U;
20003c18:	2200      	movs	r2, #0
20003c1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
20003c1c:	699a      	ldr	r2, [r3, #24]
20003c1e:	07d4      	lsls	r4, r2, #31
20003c20:	d403      	bmi.n	20003c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
20003c22:	699a      	ldr	r2, [r3, #24]
20003c24:	f042 0201 	orr.w	r2, r2, #1
20003c28:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
20003c2a:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
20003c2c:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
20003c2e:	4e2d      	ldr	r6, [pc, #180]	; (20003ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xfc>)
    hi2c->State = HAL_I2C_STATE_READY;
20003c30:	2020      	movs	r0, #32
      return HAL_ERROR;
20003c32:	2401      	movs	r4, #1
    I2C_RESET_CR2(hi2c);
20003c34:	4032      	ands	r2, r6
20003c36:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20003c38:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20003c3a:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20003c3e:	f043 0304 	orr.w	r3, r3, #4
20003c42:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
20003c44:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
20003c48:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
20003c4c:	4620      	mov	r0, r4
20003c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
20003c50:	699a      	ldr	r2, [r3, #24]
20003c52:	0690      	lsls	r0, r2, #26
20003c54:	d42e      	bmi.n	20003cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xcc>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20003c56:	f7fd fd27 	bl	200016a8 <HAL_GetTick>
20003c5a:	1bc0      	subs	r0, r0, r7
20003c5c:	42b0      	cmp	r0, r6
20003c5e:	d801      	bhi.n	20003c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
20003c60:	2e00      	cmp	r6, #0
20003c62:	d1c5      	bne.n	20003bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20003c64:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
20003c66:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
20003c68:	2100      	movs	r1, #0
      return HAL_ERROR;
20003c6a:	2401      	movs	r4, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20003c6c:	4313      	orrs	r3, r2
}
20003c6e:	4620      	mov	r0, r4
      __HAL_UNLOCK(hi2c);
20003c70:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20003c74:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
20003c76:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
}
20003c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
20003c7c:	699a      	ldr	r2, [r3, #24]
20003c7e:	0692      	lsls	r2, r2, #26
20003c80:	d4c3      	bmi.n	20003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20003c82:	f7fd fd11 	bl	200016a8 <HAL_GetTick>
20003c86:	1bc0      	subs	r0, r0, r7
20003c88:	4286      	cmp	r6, r0
20003c8a:	d302      	bcc.n	20003c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
20003c8c:	b10e      	cbz	r6, 20003c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
20003c8e:	682b      	ldr	r3, [r5, #0]
20003c90:	e7b6      	b.n	20003c00 <I2C_WaitOnRXNEFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20003c92:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
20003c94:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
20003c96:	2200      	movs	r2, #0
      return HAL_ERROR;
20003c98:	2401      	movs	r4, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20003c9a:	430b      	orrs	r3, r1
}
20003c9c:	4620      	mov	r0, r4
          __HAL_UNLOCK(hi2c);
20003c9e:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20003ca2:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
20003ca4:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
20003ca8:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
20003cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_OK;
20003cae:	2400      	movs	r4, #0
}
20003cb0:	4620      	mov	r0, r4
20003cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
20003cb4:	699a      	ldr	r2, [r3, #24]
20003cb6:	0751      	lsls	r1, r2, #29
20003cb8:	d502      	bpl.n	20003cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
20003cba:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
20003cbc:	2a00      	cmp	r2, #0
20003cbe:	d1c5      	bne.n	20003c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20003cc0:	2020      	movs	r0, #32
        I2C_RESET_CR2(hi2c);
20003cc2:	4e08      	ldr	r6, [pc, #32]	; (20003ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xfc>)
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20003cc4:	2200      	movs	r2, #0
        return HAL_ERROR;
20003cc6:	2401      	movs	r4, #1
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20003cc8:	61d8      	str	r0, [r3, #28]
        I2C_RESET_CR2(hi2c);
20003cca:	6859      	ldr	r1, [r3, #4]
20003ccc:	4031      	ands	r1, r6
20003cce:	6059      	str	r1, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20003cd0:	646a      	str	r2, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
20003cd2:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
20003cd6:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
}
20003cda:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
20003cdc:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
20003ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20003ce2:	bf00      	nop
20003ce4:	fe00e800 	.word	0xfe00e800

20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
20003ce8:	b570      	push	{r4, r5, r6, lr}
20003cea:	4604      	mov	r4, r0
20003cec:	460d      	mov	r5, r1
20003cee:	4616      	mov	r6, r2
20003cf0:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
20003cf2:	6823      	ldr	r3, [r4, #0]
20003cf4:	d12c      	bne.n	20003d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
20003cf6:	699a      	ldr	r2, [r3, #24]
20003cf8:	0790      	lsls	r0, r2, #30
20003cfa:	d427      	bmi.n	20003d4c <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
20003cfc:	699a      	ldr	r2, [r3, #24]
20003cfe:	06d1      	lsls	r1, r2, #27
20003d00:	d5f9      	bpl.n	20003cf6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
20003d02:	699a      	ldr	r2, [r3, #24]
20003d04:	0691      	lsls	r1, r2, #26
20003d06:	d5fc      	bpl.n	20003d02 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20003d08:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20003d0a:	2110      	movs	r1, #16
20003d0c:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20003d0e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
20003d10:	699a      	ldr	r2, [r3, #24]
20003d12:	0790      	lsls	r0, r2, #30
20003d14:	d501      	bpl.n	20003d1a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
20003d16:	2200      	movs	r2, #0
20003d18:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
20003d1a:	699a      	ldr	r2, [r3, #24]
20003d1c:	07d1      	lsls	r1, r2, #31
20003d1e:	d403      	bmi.n	20003d28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
20003d20:	699a      	ldr	r2, [r3, #24]
20003d22:	f042 0201 	orr.w	r2, r2, #1
20003d26:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
20003d28:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
20003d2a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
20003d2c:	4e1b      	ldr	r6, [pc, #108]	; (20003d9c <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
20003d2e:	2520      	movs	r5, #32
      return HAL_ERROR;
20003d30:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
20003d32:	4032      	ands	r2, r6
20003d34:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20003d36:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
20003d38:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20003d3c:	f043 0304 	orr.w	r3, r3, #4
20003d40:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
20003d42:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
20003d46:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
20003d4a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
20003d4c:	2000      	movs	r0, #0
}
20003d4e:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
20003d50:	699a      	ldr	r2, [r3, #24]
20003d52:	0792      	lsls	r2, r2, #30
20003d54:	d4fa      	bmi.n	20003d4c <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
20003d56:	699a      	ldr	r2, [r3, #24]
20003d58:	06d0      	lsls	r0, r2, #27
20003d5a:	d41b      	bmi.n	20003d94 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20003d5c:	f7fd fca4 	bl	200016a8 <HAL_GetTick>
20003d60:	1b80      	subs	r0, r0, r6
20003d62:	42a8      	cmp	r0, r5
20003d64:	d801      	bhi.n	20003d6a <I2C_WaitOnTXISFlagUntilTimeout+0x82>
20003d66:	2d00      	cmp	r5, #0
20003d68:	d1c2      	bne.n	20003cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20003d6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20003d6c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
20003d6e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
20003d70:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20003d72:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
20003d74:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20003d78:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20003d7a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
20003d7e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
20003d82:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20003d84:	f7fd fc90 	bl	200016a8 <HAL_GetTick>
20003d88:	1b80      	subs	r0, r0, r6
20003d8a:	4285      	cmp	r5, r0
20003d8c:	d3ed      	bcc.n	20003d6a <I2C_WaitOnTXISFlagUntilTimeout+0x82>
20003d8e:	2d00      	cmp	r5, #0
20003d90:	d0eb      	beq.n	20003d6a <I2C_WaitOnTXISFlagUntilTimeout+0x82>
20003d92:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
20003d94:	6999      	ldr	r1, [r3, #24]
20003d96:	068a      	lsls	r2, r1, #26
20003d98:	d5f4      	bpl.n	20003d84 <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
20003d9a:	e7b5      	b.n	20003d08 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
20003d9c:	fe00e800 	.word	0xfe00e800

20003da0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
20003da0:	b570      	push	{r4, r5, r6, lr}
20003da2:	4604      	mov	r4, r0
20003da4:	460d      	mov	r5, r1
20003da6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
20003da8:	6823      	ldr	r3, [r4, #0]
20003daa:	6999      	ldr	r1, [r3, #24]
20003dac:	068a      	lsls	r2, r1, #26
20003dae:	d449      	bmi.n	20003e44 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
20003db0:	6999      	ldr	r1, [r3, #24]
20003db2:	06ca      	lsls	r2, r1, #27
20003db4:	d526      	bpl.n	20003e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
20003db6:	1c68      	adds	r0, r5, #1
20003db8:	d138      	bne.n	20003e2c <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
20003dba:	699a      	ldr	r2, [r3, #24]
20003dbc:	0691      	lsls	r1, r2, #26
20003dbe:	d5fc      	bpl.n	20003dba <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20003dc0:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20003dc2:	2110      	movs	r1, #16
20003dc4:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20003dc6:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
20003dc8:	699a      	ldr	r2, [r3, #24]
20003dca:	0790      	lsls	r0, r2, #30
20003dcc:	d501      	bpl.n	20003dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
20003dce:	2200      	movs	r2, #0
20003dd0:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
20003dd2:	699a      	ldr	r2, [r3, #24]
20003dd4:	07d1      	lsls	r1, r2, #31
20003dd6:	d403      	bmi.n	20003de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
20003dd8:	699a      	ldr	r2, [r3, #24]
20003dda:	f042 0201 	orr.w	r2, r2, #1
20003dde:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
20003de0:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
20003de2:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
20003de4:	4e18      	ldr	r6, [pc, #96]	; (20003e48 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
20003de6:	2520      	movs	r5, #32
      return HAL_ERROR;
20003de8:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
20003dea:	4032      	ands	r2, r6
20003dec:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20003dee:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
20003df0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20003df4:	f043 0304 	orr.w	r3, r3, #4
20003df8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
20003dfa:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
20003dfe:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
20003e02:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20003e04:	f7fd fc50 	bl	200016a8 <HAL_GetTick>
20003e08:	1b80      	subs	r0, r0, r6
20003e0a:	42a8      	cmp	r0, r5
20003e0c:	d801      	bhi.n	20003e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
20003e0e:	2d00      	cmp	r5, #0
20003e10:	d1ca      	bne.n	20003da8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20003e12:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20003e14:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
20003e16:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
20003e18:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20003e1a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
20003e1c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20003e20:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20003e22:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
20003e26:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
20003e2a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
20003e2c:	699a      	ldr	r2, [r3, #24]
20003e2e:	0692      	lsls	r2, r2, #26
20003e30:	d4c6      	bmi.n	20003dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20003e32:	f7fd fc39 	bl	200016a8 <HAL_GetTick>
20003e36:	1b80      	subs	r0, r0, r6
20003e38:	4285      	cmp	r5, r0
20003e3a:	d3ea      	bcc.n	20003e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
20003e3c:	2d00      	cmp	r5, #0
20003e3e:	d0e8      	beq.n	20003e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
20003e40:	6823      	ldr	r3, [r4, #0]
20003e42:	e7b8      	b.n	20003db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
20003e44:	2000      	movs	r0, #0
}
20003e46:	bd70      	pop	{r4, r5, r6, pc}
20003e48:	fe00e800 	.word	0xfe00e800

20003e4c <HAL_I2C_MspInit>:
}
20003e4c:	4770      	bx	lr
20003e4e:	bf00      	nop

20003e50 <HAL_I2C_Init>:
  if (hi2c == NULL)
20003e50:	2800      	cmp	r0, #0
20003e52:	d04d      	beq.n	20003ef0 <HAL_I2C_Init+0xa0>
{
20003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
20003e56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
20003e5a:	4604      	mov	r4, r0
20003e5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20003e60:	2b00      	cmp	r3, #0
20003e62:	d040      	beq.n	20003ee6 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
20003e64:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
20003e66:	68e0      	ldr	r0, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
20003e68:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
20003e6c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
20003e70:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
20003e72:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
20003e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
20003e78:	f021 0101 	bic.w	r1, r1, #1
20003e7c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
20003e7e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
20003e80:	689a      	ldr	r2, [r3, #8]
20003e82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20003e86:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
20003e88:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
20003e8a:	d028      	beq.n	20003ede <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
20003e8c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
20003e90:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
20003e92:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
20003e94:	d102      	bne.n	20003e9c <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
20003e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
20003e9a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
20003e9c:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20003e9e:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
20003ea0:	4814      	ldr	r0, [pc, #80]	; (20003ef4 <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
20003ea2:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
20003ea4:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
20003ea6:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
20003ea8:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
20003eac:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
20003eae:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
20003eb0:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
20003eb2:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
20003eb4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
20003eb8:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
20003eba:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
20003ebe:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
20003ec0:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
20003ec2:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
20003ec4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
20003ec6:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
20003ec8:	681a      	ldr	r2, [r3, #0]
20003eca:	f042 0201 	orr.w	r2, r2, #1
20003ece:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20003ed0:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
20003ed2:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
20003ed6:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
20003ed8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
20003edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
20003ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20003ee2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
20003ee4:	e7da      	b.n	20003e9c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
20003ee6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
20003eea:	f7ff ffaf 	bl	20003e4c <HAL_I2C_MspInit>
20003eee:	e7b9      	b.n	20003e64 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
20003ef0:	2001      	movs	r0, #1
}
20003ef2:	4770      	bx	lr
20003ef4:	02008000 	.word	0x02008000

20003ef8 <HAL_I2C_MspDeInit>:
20003ef8:	4770      	bx	lr
20003efa:	bf00      	nop

20003efc <HAL_I2C_DeInit>:
  if (hi2c == NULL)
20003efc:	b1b0      	cbz	r0, 20003f2c <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
20003efe:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
20003f00:	2324      	movs	r3, #36	; 0x24
{
20003f02:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
20003f04:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
20003f08:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
20003f0a:	6813      	ldr	r3, [r2, #0]
20003f0c:	f023 0301 	bic.w	r3, r3, #1
20003f10:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
20003f12:	f7ff fff1 	bl	20003ef8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20003f16:	2300      	movs	r3, #0
20003f18:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
20003f1a:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
20003f1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
20003f20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
20003f24:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
20003f26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
20003f2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
20003f2c:	2001      	movs	r0, #1
}
20003f2e:	4770      	bx	lr

20003f30 <HAL_I2C_Master_Transmit>:
{
20003f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20003f34:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
20003f36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
20003f3a:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
20003f3c:	2b20      	cmp	r3, #32
20003f3e:	f040 808a 	bne.w	20004056 <HAL_I2C_Master_Transmit+0x126>
    __HAL_LOCK(hi2c);
20003f42:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
20003f46:	4604      	mov	r4, r0
20003f48:	2b01      	cmp	r3, #1
20003f4a:	f000 8084 	beq.w	20004056 <HAL_I2C_Master_Transmit+0x126>
20003f4e:	2301      	movs	r3, #1
20003f50:	4689      	mov	r9, r1
20003f52:	4617      	mov	r7, r2
20003f54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
20003f58:	f7fd fba6 	bl	200016a8 <HAL_GetTick>
20003f5c:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
20003f5e:	e004      	b.n	20003f6a <HAL_I2C_Master_Transmit+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20003f60:	f7fd fba2 	bl	200016a8 <HAL_GetTick>
20003f64:	1b40      	subs	r0, r0, r5
20003f66:	2819      	cmp	r0, #25
20003f68:	d878      	bhi.n	2000405c <HAL_I2C_Master_Transmit+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20003f6a:	6823      	ldr	r3, [r4, #0]
20003f6c:	6998      	ldr	r0, [r3, #24]
20003f6e:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
20003f72:	d1f5      	bne.n	20003f60 <HAL_I2C_Master_Transmit+0x30>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20003f74:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
20003f76:	2121      	movs	r1, #33	; 0x21
    hi2c->pBuffPtr  = pData;
20003f78:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
20003f7a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20003f7e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20003f82:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
20003f84:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20003f88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
20003f8a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20003f8c:	b292      	uxth	r2, r2
20003f8e:	2aff      	cmp	r2, #255	; 0xff
20003f90:	d872      	bhi.n	20004078 <HAL_I2C_Master_Transmit+0x148>
      hi2c->XferSize = hi2c->XferCount;
20003f92:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
20003f94:	f3c9 0709 	ubfx	r7, r9, #0, #10
20003f98:	685a      	ldr	r2, [r3, #4]
20003f9a:	f8df c138 	ldr.w	ip, [pc, #312]	; 200040d4 <HAL_I2C_Master_Transmit+0x1a4>
      hi2c->XferSize = hi2c->XferCount;
20003f9e:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
20003fa0:	484a      	ldr	r0, [pc, #296]	; (200040cc <HAL_I2C_Master_Transmit+0x19c>)
20003fa2:	ea02 020c 	and.w	r2, r2, ip
20003fa6:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
20003faa:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20003fac:	433a      	orrs	r2, r7
20003fae:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
20003fb2:	4310      	orrs	r0, r2
20003fb4:	6058      	str	r0, [r3, #4]
20003fb6:	f8df 8124 	ldr.w	r8, [pc, #292]	; 200040dc <HAL_I2C_Master_Transmit+0x1ac>
          hi2c->XferSize = MAX_NBYTE_SIZE;
20003fba:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
20003fbe:	f8df 9120 	ldr.w	r9, [pc, #288]	; 200040e0 <HAL_I2C_Master_Transmit+0x1b0>
    while (hi2c->XferCount > 0U)
20003fc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20003fc4:	462a      	mov	r2, r5
20003fc6:	4631      	mov	r1, r6
20003fc8:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
20003fca:	b29b      	uxth	r3, r3
20003fcc:	2b00      	cmp	r3, #0
20003fce:	d030      	beq.n	20004032 <HAL_I2C_Master_Transmit+0x102>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20003fd0:	f7ff fe8a 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
20003fd4:	2800      	cmp	r0, #0
20003fd6:	d175      	bne.n	200040c4 <HAL_I2C_Master_Transmit+0x194>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
20003fd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
20003fda:	6821      	ldr	r1, [r4, #0]
20003fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
20003fe0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
20003fe2:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
20003fe4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
20003fe6:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
20003fe8:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
20003fea:	3a01      	subs	r2, #1
      hi2c->XferSize--;
20003fec:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
20003fee:	b292      	uxth	r2, r2
      hi2c->XferSize--;
20003ff0:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
20003ff2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
20003ff4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
20003ff6:	b292      	uxth	r2, r2
20003ff8:	2b00      	cmp	r3, #0
20003ffa:	d1e2      	bne.n	20003fc2 <HAL_I2C_Master_Transmit+0x92>
20003ffc:	2a00      	cmp	r2, #0
20003ffe:	d0e0      	beq.n	20003fc2 <HAL_I2C_Master_Transmit+0x92>
20004000:	1c70      	adds	r0, r6, #1
20004002:	d145      	bne.n	20004090 <HAL_I2C_Master_Transmit+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004004:	698b      	ldr	r3, [r1, #24]
20004006:	061a      	lsls	r2, r3, #24
20004008:	d5fc      	bpl.n	20004004 <HAL_I2C_Master_Transmit+0xd4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000400a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2000400c:	b29b      	uxth	r3, r3
2000400e:	2bff      	cmp	r3, #255	; 0xff
20004010:	d94a      	bls.n	200040a8 <HAL_I2C_Master_Transmit+0x178>
  MODIFY_REG(hi2c->Instance->CR2,
20004012:	684b      	ldr	r3, [r1, #4]
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20004014:	462a      	mov	r2, r5
          hi2c->XferSize = MAX_NBYTE_SIZE;
20004016:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000401a:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
2000401c:	ea03 0308 	and.w	r3, r3, r8
20004020:	433b      	orrs	r3, r7
20004022:	ea43 0309 	orr.w	r3, r3, r9
20004026:	604b      	str	r3, [r1, #4]
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20004028:	4631      	mov	r1, r6
    while (hi2c->XferCount > 0U)
2000402a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2000402c:	b29b      	uxth	r3, r3
2000402e:	2b00      	cmp	r3, #0
20004030:	d1ce      	bne.n	20003fd0 <HAL_I2C_Master_Transmit+0xa0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20004032:	f7ff feb5 	bl	20003da0 <I2C_WaitOnSTOPFlagUntilTimeout>
20004036:	2800      	cmp	r0, #0
20004038:	d144      	bne.n	200040c4 <HAL_I2C_Master_Transmit+0x194>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000403a:	6823      	ldr	r3, [r4, #0]
2000403c:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
2000403e:	4d24      	ldr	r5, [pc, #144]	; (200040d0 <HAL_I2C_Master_Transmit+0x1a0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20004040:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
20004042:	685a      	ldr	r2, [r3, #4]
20004044:	402a      	ands	r2, r5
20004046:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
20004048:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
2000404c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
20004050:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
20004054:	e000      	b.n	20004058 <HAL_I2C_Master_Transmit+0x128>
    return HAL_BUSY;
20004056:	2002      	movs	r0, #2
}
20004058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000405c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2000405e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
20004060:	2200      	movs	r2, #0
          return HAL_ERROR;
20004062:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20004064:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
20004066:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000406a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2000406c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
20004070:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
20004074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(hi2c->Instance->CR2,
20004078:	685a      	ldr	r2, [r3, #4]
2000407a:	f3c9 0709 	ubfx	r7, r9, #0, #10
2000407e:	4915      	ldr	r1, [pc, #84]	; (200040d4 <HAL_I2C_Master_Transmit+0x1a4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
20004080:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
20004082:	400a      	ands	r2, r1
20004084:	4914      	ldr	r1, [pc, #80]	; (200040d8 <HAL_I2C_Master_Transmit+0x1a8>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
20004086:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20004088:	433a      	orrs	r2, r7
2000408a:	4311      	orrs	r1, r2
2000408c:	6059      	str	r1, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
2000408e:	e792      	b.n	20003fb6 <HAL_I2C_Master_Transmit+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004090:	698b      	ldr	r3, [r1, #24]
20004092:	061b      	lsls	r3, r3, #24
20004094:	d4b9      	bmi.n	2000400a <HAL_I2C_Master_Transmit+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20004096:	f7fd fb07 	bl	200016a8 <HAL_GetTick>
2000409a:	1b40      	subs	r0, r0, r5
2000409c:	4286      	cmp	r6, r0
2000409e:	d3dd      	bcc.n	2000405c <HAL_I2C_Master_Transmit+0x12c>
200040a0:	2e00      	cmp	r6, #0
200040a2:	d0db      	beq.n	2000405c <HAL_I2C_Master_Transmit+0x12c>
200040a4:	6821      	ldr	r1, [r4, #0]
200040a6:	e7ab      	b.n	20004000 <HAL_I2C_Master_Transmit+0xd0>
          hi2c->XferSize = hi2c->XferCount;
200040a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
200040aa:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
200040ac:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
200040ae:	ea03 0308 	and.w	r3, r3, r8
200040b2:	b2d0      	uxtb	r0, r2
          hi2c->XferSize = hi2c->XferCount;
200040b4:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
200040b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
200040ba:	433b      	orrs	r3, r7
200040bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
200040c0:	604b      	str	r3, [r1, #4]
}
200040c2:	e77e      	b.n	20003fc2 <HAL_I2C_Master_Transmit+0x92>
        return HAL_ERROR;
200040c4:	2001      	movs	r0, #1
}
200040c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200040ca:	bf00      	nop
200040cc:	82002000 	.word	0x82002000
200040d0:	fe00e800 	.word	0xfe00e800
200040d4:	fc009800 	.word	0xfc009800
200040d8:	81ff2000 	.word	0x81ff2000
200040dc:	fc009c00 	.word	0xfc009c00
200040e0:	01ff0000 	.word	0x01ff0000

200040e4 <HAL_I2C_Master_Receive>:
{
200040e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
200040e8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
200040ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
200040ee:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
200040f0:	2b20      	cmp	r3, #32
200040f2:	f040 808d 	bne.w	20004210 <HAL_I2C_Master_Receive+0x12c>
    __HAL_LOCK(hi2c);
200040f6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
200040fa:	4604      	mov	r4, r0
200040fc:	2b01      	cmp	r3, #1
200040fe:	f000 8087 	beq.w	20004210 <HAL_I2C_Master_Receive+0x12c>
20004102:	2301      	movs	r3, #1
20004104:	4689      	mov	r9, r1
20004106:	4617      	mov	r7, r2
20004108:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
2000410c:	f7fd facc 	bl	200016a8 <HAL_GetTick>
20004110:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
20004112:	e005      	b.n	20004120 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20004114:	f7fd fac8 	bl	200016a8 <HAL_GetTick>
20004118:	1b40      	subs	r0, r0, r5
2000411a:	2819      	cmp	r0, #25
2000411c:	f200 8085 	bhi.w	2000422a <HAL_I2C_Master_Receive+0x146>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004120:	6823      	ldr	r3, [r4, #0]
20004122:	6998      	ldr	r0, [r3, #24]
20004124:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
20004128:	d1f4      	bne.n	20004114 <HAL_I2C_Master_Receive+0x30>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2000412a:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2000412c:	2122      	movs	r1, #34	; 0x22
    hi2c->pBuffPtr  = pData;
2000412e:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
20004130:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20004134:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20004138:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
2000413a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000413e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
20004140:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20004142:	b292      	uxth	r2, r2
20004144:	2aff      	cmp	r2, #255	; 0xff
20004146:	d87e      	bhi.n	20004246 <HAL_I2C_Master_Receive+0x162>
      hi2c->XferSize = hi2c->XferCount;
20004148:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
2000414a:	f3c9 0709 	ubfx	r7, r9, #0, #10
2000414e:	685a      	ldr	r2, [r3, #4]
20004150:	f8df c134 	ldr.w	ip, [pc, #308]	; 20004288 <HAL_I2C_Master_Receive+0x1a4>
      hi2c->XferSize = hi2c->XferCount;
20004154:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
20004156:	484a      	ldr	r0, [pc, #296]	; (20004280 <HAL_I2C_Master_Receive+0x19c>)
20004158:	ea02 020c 	and.w	r2, r2, ip
2000415c:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
20004160:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20004162:	433a      	orrs	r2, r7
20004164:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
20004168:	4310      	orrs	r0, r2
2000416a:	6058      	str	r0, [r3, #4]
2000416c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 20004290 <HAL_I2C_Master_Receive+0x1ac>
          hi2c->XferSize = MAX_NBYTE_SIZE;
20004170:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
20004174:	f8df 911c 	ldr.w	r9, [pc, #284]	; 20004294 <HAL_I2C_Master_Receive+0x1b0>
    while (hi2c->XferCount > 0U)
20004178:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000417a:	462a      	mov	r2, r5
2000417c:	4631      	mov	r1, r6
2000417e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
20004180:	b29b      	uxth	r3, r3
20004182:	2b00      	cmp	r3, #0
20004184:	d032      	beq.n	200041ec <HAL_I2C_Master_Receive+0x108>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20004186:	f7ff fd2f 	bl	20003be8 <I2C_WaitOnRXNEFlagUntilTimeout>
2000418a:	2800      	cmp	r0, #0
2000418c:	d175      	bne.n	2000427a <HAL_I2C_Master_Receive+0x196>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000418e:	6822      	ldr	r2, [r4, #0]
20004190:	6a63      	ldr	r3, [r4, #36]	; 0x24
20004192:	6a52      	ldr	r2, [r2, #36]	; 0x24
20004194:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
20004196:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
20004198:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
2000419a:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
2000419c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
2000419e:	3b01      	subs	r3, #1
      hi2c->XferCount--;
200041a0:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
200041a2:	3201      	adds	r2, #1
      hi2c->XferSize--;
200041a4:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
200041a6:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
200041a8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
200041aa:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
200041ac:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
200041ae:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
200041b0:	2b00      	cmp	r3, #0
200041b2:	d1e1      	bne.n	20004178 <HAL_I2C_Master_Receive+0x94>
200041b4:	2900      	cmp	r1, #0
200041b6:	d0df      	beq.n	20004178 <HAL_I2C_Master_Receive+0x94>
200041b8:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200041ba:	6822      	ldr	r2, [r4, #0]
200041bc:	d12b      	bne.n	20004216 <HAL_I2C_Master_Receive+0x132>
200041be:	6993      	ldr	r3, [r2, #24]
200041c0:	0619      	lsls	r1, r3, #24
200041c2:	d5fc      	bpl.n	200041be <HAL_I2C_Master_Receive+0xda>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
200041c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
200041c6:	b29b      	uxth	r3, r3
200041c8:	2bff      	cmp	r3, #255	; 0xff
200041ca:	d948      	bls.n	2000425e <HAL_I2C_Master_Receive+0x17a>
  MODIFY_REG(hi2c->Instance->CR2,
200041cc:	6853      	ldr	r3, [r2, #4]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
200041ce:	4631      	mov	r1, r6
          hi2c->XferSize = MAX_NBYTE_SIZE;
200041d0:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
200041d4:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
200041d6:	ea03 0308 	and.w	r3, r3, r8
200041da:	433b      	orrs	r3, r7
200041dc:	ea43 0309 	orr.w	r3, r3, r9
200041e0:	6053      	str	r3, [r2, #4]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
200041e2:	462a      	mov	r2, r5
    while (hi2c->XferCount > 0U)
200041e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
200041e6:	b29b      	uxth	r3, r3
200041e8:	2b00      	cmp	r3, #0
200041ea:	d1cc      	bne.n	20004186 <HAL_I2C_Master_Receive+0xa2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
200041ec:	f7ff fdd8 	bl	20003da0 <I2C_WaitOnSTOPFlagUntilTimeout>
200041f0:	2800      	cmp	r0, #0
200041f2:	d142      	bne.n	2000427a <HAL_I2C_Master_Receive+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
200041f4:	6823      	ldr	r3, [r4, #0]
200041f6:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
200041f8:	4d22      	ldr	r5, [pc, #136]	; (20004284 <HAL_I2C_Master_Receive+0x1a0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
200041fa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
200041fc:	685a      	ldr	r2, [r3, #4]
200041fe:	402a      	ands	r2, r5
20004200:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
20004202:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
20004206:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2000420a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
2000420e:	e000      	b.n	20004212 <HAL_I2C_Master_Receive+0x12e>
    return HAL_BUSY;
20004210:	2002      	movs	r0, #2
}
20004212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004216:	6993      	ldr	r3, [r2, #24]
20004218:	061b      	lsls	r3, r3, #24
2000421a:	d4d3      	bmi.n	200041c4 <HAL_I2C_Master_Receive+0xe0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000421c:	f7fd fa44 	bl	200016a8 <HAL_GetTick>
20004220:	1b40      	subs	r0, r0, r5
20004222:	4286      	cmp	r6, r0
20004224:	d301      	bcc.n	2000422a <HAL_I2C_Master_Receive+0x146>
20004226:	2e00      	cmp	r6, #0
20004228:	d1c6      	bne.n	200041b8 <HAL_I2C_Master_Receive+0xd4>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000422a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2000422c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
2000422e:	2200      	movs	r2, #0
          return HAL_ERROR;
20004230:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20004232:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
20004234:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20004238:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2000423a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2000423e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
20004242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(hi2c->Instance->CR2,
20004246:	685a      	ldr	r2, [r3, #4]
20004248:	f3c9 0709 	ubfx	r7, r9, #0, #10
2000424c:	490e      	ldr	r1, [pc, #56]	; (20004288 <HAL_I2C_Master_Receive+0x1a4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000424e:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
20004250:	400a      	ands	r2, r1
20004252:	490e      	ldr	r1, [pc, #56]	; (2000428c <HAL_I2C_Master_Receive+0x1a8>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
20004254:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20004256:	433a      	orrs	r2, r7
20004258:	4311      	orrs	r1, r2
2000425a:	6059      	str	r1, [r3, #4]
}
2000425c:	e786      	b.n	2000416c <HAL_I2C_Master_Receive+0x88>
          hi2c->XferSize = hi2c->XferCount;
2000425e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
20004260:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
20004262:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
20004264:	ea03 0308 	and.w	r3, r3, r8
20004268:	b2c8      	uxtb	r0, r1
          hi2c->XferSize = hi2c->XferCount;
2000426a:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
2000426c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
20004270:	433b      	orrs	r3, r7
20004272:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
20004276:	6053      	str	r3, [r2, #4]
}
20004278:	e77e      	b.n	20004178 <HAL_I2C_Master_Receive+0x94>
        return HAL_ERROR;
2000427a:	2001      	movs	r0, #1
}
2000427c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20004280:	82002400 	.word	0x82002400
20004284:	fe00e800 	.word	0xfe00e800
20004288:	fc009800 	.word	0xfc009800
2000428c:	81ff2400 	.word	0x81ff2400
20004290:	fc009c00 	.word	0xfc009c00
20004294:	01ff0000 	.word	0x01ff0000

20004298 <HAL_I2C_Slave_Transmit>:
{
20004298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000429c:	461e      	mov	r6, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
2000429e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
200042a2:	2b20      	cmp	r3, #32
200042a4:	f040 808e 	bne.w	200043c4 <HAL_I2C_Slave_Transmit+0x12c>
    if ((pData == NULL) || (Size == 0U))
200042a8:	4604      	mov	r4, r0
200042aa:	4689      	mov	r9, r1
200042ac:	2900      	cmp	r1, #0
200042ae:	f000 8083 	beq.w	200043b8 <HAL_I2C_Slave_Transmit+0x120>
200042b2:	fab2 f882 	clz	r8, r2
200042b6:	4615      	mov	r5, r2
200042b8:	ea4f 1858 	mov.w	r8, r8, lsr #5
200042bc:	2a00      	cmp	r2, #0
200042be:	d07b      	beq.n	200043b8 <HAL_I2C_Slave_Transmit+0x120>
200042c0:	fa5f fa83 	uxtb.w	sl, r3
    __HAL_LOCK(hi2c);
200042c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
200042c8:	2b01      	cmp	r3, #1
200042ca:	d07b      	beq.n	200043c4 <HAL_I2C_Slave_Transmit+0x12c>
200042cc:	2301      	movs	r3, #1
200042ce:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
200042d2:	f7fd f9e9 	bl	200016a8 <HAL_GetTick>
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200042d6:	6823      	ldr	r3, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
200042d8:	2121      	movs	r1, #33	; 0x21
    tickstart = HAL_GetTick();
200042da:	4607      	mov	r7, r0
    hi2c->pBuffPtr  = pData;
200042dc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
200042e0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200042e4:	f884 a042 	strb.w	sl, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200042e8:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
200042ec:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200042ee:	685a      	ldr	r2, [r3, #4]
    hi2c->XferISR   = NULL;
200042f0:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200042f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
200042f8:	605a      	str	r2, [r3, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200042fa:	1c70      	adds	r0, r6, #1
200042fc:	d165      	bne.n	200043ca <HAL_I2C_Slave_Transmit+0x132>
200042fe:	699a      	ldr	r2, [r3, #24]
20004300:	0711      	lsls	r1, r2, #28
20004302:	d5fc      	bpl.n	200042fe <HAL_I2C_Slave_Transmit+0x66>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
20004304:	68e2      	ldr	r2, [r4, #12]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20004306:	2108      	movs	r1, #8
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
20004308:	2a02      	cmp	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000430a:	61d9      	str	r1, [r3, #28]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2000430c:	d006      	beq.n	2000431c <HAL_I2C_Slave_Transmit+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2000430e:	699a      	ldr	r2, [r3, #24]
20004310:	03d2      	lsls	r2, r2, #15
20004312:	d427      	bmi.n	20004364 <HAL_I2C_Slave_Transmit+0xcc>
20004314:	699a      	ldr	r2, [r3, #24]
20004316:	03d2      	lsls	r2, r2, #15
20004318:	d5f9      	bpl.n	2000430e <HAL_I2C_Slave_Transmit+0x76>
2000431a:	e023      	b.n	20004364 <HAL_I2C_Slave_Transmit+0xcc>
2000431c:	699a      	ldr	r2, [r3, #24]
2000431e:	0715      	lsls	r5, r2, #28
20004320:	d5fc      	bpl.n	2000431c <HAL_I2C_Slave_Transmit+0x84>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20004322:	2208      	movs	r2, #8
20004324:	61da      	str	r2, [r3, #28]
20004326:	1c71      	adds	r1, r6, #1
20004328:	d0f1      	beq.n	2000430e <HAL_I2C_Slave_Transmit+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2000432a:	699b      	ldr	r3, [r3, #24]
2000432c:	03dd      	lsls	r5, r3, #15
2000432e:	d419      	bmi.n	20004364 <HAL_I2C_Slave_Transmit+0xcc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20004330:	f7fd f9ba 	bl	200016a8 <HAL_GetTick>
20004334:	1bc0      	subs	r0, r0, r7
20004336:	4286      	cmp	r6, r0
20004338:	d352      	bcc.n	200043e0 <HAL_I2C_Slave_Transmit+0x148>
2000433a:	2e00      	cmp	r6, #0
2000433c:	d050      	beq.n	200043e0 <HAL_I2C_Slave_Transmit+0x148>
2000433e:	6823      	ldr	r3, [r4, #0]
20004340:	e7f1      	b.n	20004326 <HAL_I2C_Slave_Transmit+0x8e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20004342:	463a      	mov	r2, r7
20004344:	4631      	mov	r1, r6
20004346:	4620      	mov	r0, r4
20004348:	f7ff fcce 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
2000434c:	2800      	cmp	r0, #0
2000434e:	d15a      	bne.n	20004406 <HAL_I2C_Slave_Transmit+0x16e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
20004350:	6a63      	ldr	r3, [r4, #36]	; 0x24
20004352:	6822      	ldr	r2, [r4, #0]
20004354:	f813 1b01 	ldrb.w	r1, [r3], #1
20004358:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->XferCount--;
2000435a:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
2000435c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
2000435e:	3d01      	subs	r5, #1
20004360:	b2ad      	uxth	r5, r5
20004362:	8565      	strh	r5, [r4, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
20004364:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
20004366:	b29b      	uxth	r3, r3
20004368:	2b00      	cmp	r3, #0
2000436a:	d1ea      	bne.n	20004342 <HAL_I2C_Slave_Transmit+0xaa>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000436c:	463a      	mov	r2, r7
2000436e:	4631      	mov	r1, r6
20004370:	4620      	mov	r0, r4
20004372:	f7ff fd15 	bl	20003da0 <I2C_WaitOnSTOPFlagUntilTimeout>
20004376:	2800      	cmp	r0, #0
20004378:	d04c      	beq.n	20004414 <HAL_I2C_Slave_Transmit+0x17c>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000437a:	6822      	ldr	r2, [r4, #0]
2000437c:	6853      	ldr	r3, [r2, #4]
2000437e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
20004382:	6053      	str	r3, [r2, #4]
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
20004384:	6c63      	ldr	r3, [r4, #68]	; 0x44
20004386:	2b04      	cmp	r3, #4
20004388:	d152      	bne.n	20004430 <HAL_I2C_Slave_Transmit+0x198>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000438a:	2300      	movs	r3, #0
2000438c:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000438e:	2320      	movs	r3, #32
20004390:	61d3      	str	r3, [r2, #28]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004392:	1c70      	adds	r0, r6, #1
20004394:	d140      	bne.n	20004418 <HAL_I2C_Slave_Transmit+0x180>
20004396:	6993      	ldr	r3, [r2, #24]
20004398:	0419      	lsls	r1, r3, #16
2000439a:	d4fc      	bmi.n	20004396 <HAL_I2C_Slave_Transmit+0xfe>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000439c:	6851      	ldr	r1, [r2, #4]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2000439e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
200043a0:	2520      	movs	r5, #32
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
200043a2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    return HAL_OK;
200043a6:	4618      	mov	r0, r3
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
200043a8:	6051      	str	r1, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
200043aa:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
200043ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
200043b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_OK;
200043b6:	e003      	b.n	200043c0 <HAL_I2C_Slave_Transmit+0x128>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200043b8:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
200043bc:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200043be:	6463      	str	r3, [r4, #68]	; 0x44
}
200043c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
200043c4:	2002      	movs	r0, #2
}
200043c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200043ca:	699a      	ldr	r2, [r3, #24]
200043cc:	0712      	lsls	r2, r2, #28
200043ce:	d431      	bmi.n	20004434 <HAL_I2C_Slave_Transmit+0x19c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200043d0:	f7fd f96a 	bl	200016a8 <HAL_GetTick>
200043d4:	1bc0      	subs	r0, r0, r7
200043d6:	4286      	cmp	r6, r0
200043d8:	d302      	bcc.n	200043e0 <HAL_I2C_Slave_Transmit+0x148>
200043da:	b10e      	cbz	r6, 200043e0 <HAL_I2C_Slave_Transmit+0x148>
200043dc:	6823      	ldr	r3, [r4, #0]
200043de:	e78c      	b.n	200042fa <HAL_I2C_Slave_Transmit+0x62>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
200043e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
200043e2:	2520      	movs	r5, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
200043e4:	2100      	movs	r1, #0
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
200043e6:	6822      	ldr	r2, [r4, #0]
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
200043e8:	432b      	orrs	r3, r5
      return HAL_ERROR;
200043ea:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
200043ec:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
200043f0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
200043f2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
200043f6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
200043fa:	6853      	ldr	r3, [r2, #4]
200043fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
20004400:	6053      	str	r3, [r2, #4]
}
20004402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
20004406:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
20004408:	2001      	movs	r0, #1
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000440a:	6853      	ldr	r3, [r2, #4]
2000440c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
20004410:	6053      	str	r3, [r2, #4]
        return HAL_ERROR;
20004412:	e7d5      	b.n	200043c0 <HAL_I2C_Slave_Transmit+0x128>
20004414:	6822      	ldr	r2, [r4, #0]
20004416:	e7ba      	b.n	2000438e <HAL_I2C_Slave_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004418:	6993      	ldr	r3, [r2, #24]
2000441a:	041b      	lsls	r3, r3, #16
2000441c:	d5be      	bpl.n	2000439c <HAL_I2C_Slave_Transmit+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000441e:	f7fd f943 	bl	200016a8 <HAL_GetTick>
20004422:	1bc0      	subs	r0, r0, r7
20004424:	4286      	cmp	r6, r0
20004426:	d3db      	bcc.n	200043e0 <HAL_I2C_Slave_Transmit+0x148>
20004428:	2e00      	cmp	r6, #0
2000442a:	d0d9      	beq.n	200043e0 <HAL_I2C_Slave_Transmit+0x148>
2000442c:	6822      	ldr	r2, [r4, #0]
2000442e:	e7b0      	b.n	20004392 <HAL_I2C_Slave_Transmit+0xfa>
        return HAL_ERROR;
20004430:	2001      	movs	r0, #1
20004432:	e7c5      	b.n	200043c0 <HAL_I2C_Slave_Transmit+0x128>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
20004434:	68e2      	ldr	r2, [r4, #12]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20004436:	2108      	movs	r1, #8
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
20004438:	2a02      	cmp	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000443a:	61d9      	str	r1, [r3, #28]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2000443c:	f47f af73 	bne.w	20004326 <HAL_I2C_Slave_Transmit+0x8e>
20004440:	e007      	b.n	20004452 <HAL_I2C_Slave_Transmit+0x1ba>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20004442:	f7fd f931 	bl	200016a8 <HAL_GetTick>
20004446:	1bc0      	subs	r0, r0, r7
20004448:	4286      	cmp	r6, r0
2000444a:	d3c9      	bcc.n	200043e0 <HAL_I2C_Slave_Transmit+0x148>
2000444c:	2e00      	cmp	r6, #0
2000444e:	d0c7      	beq.n	200043e0 <HAL_I2C_Slave_Transmit+0x148>
20004450:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004452:	699a      	ldr	r2, [r3, #24]
20004454:	0710      	lsls	r0, r2, #28
20004456:	d5f4      	bpl.n	20004442 <HAL_I2C_Slave_Transmit+0x1aa>
20004458:	e763      	b.n	20004322 <HAL_I2C_Slave_Transmit+0x8a>
2000445a:	bf00      	nop

2000445c <HAL_I2C_Slave_Receive>:
{
2000445c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20004460:	461d      	mov	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
20004462:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
20004466:	2b20      	cmp	r3, #32
20004468:	d162      	bne.n	20004530 <HAL_I2C_Slave_Receive+0xd4>
    if ((pData == NULL) || (Size == 0U))
2000446a:	4604      	mov	r4, r0
2000446c:	4689      	mov	r9, r1
2000446e:	2900      	cmp	r1, #0
20004470:	d057      	beq.n	20004522 <HAL_I2C_Slave_Receive+0xc6>
20004472:	fab2 f882 	clz	r8, r2
20004476:	4616      	mov	r6, r2
20004478:	ea4f 1858 	mov.w	r8, r8, lsr #5
2000447c:	2a00      	cmp	r2, #0
2000447e:	d050      	beq.n	20004522 <HAL_I2C_Slave_Receive+0xc6>
20004480:	fa5f fa83 	uxtb.w	sl, r3
    __HAL_LOCK(hi2c);
20004484:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
20004488:	2b01      	cmp	r3, #1
2000448a:	d051      	beq.n	20004530 <HAL_I2C_Slave_Receive+0xd4>
2000448c:	2301      	movs	r3, #1
2000448e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
20004492:	f7fd f909 	bl	200016a8 <HAL_GetTick>
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
20004496:	6823      	ldr	r3, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
20004498:	2122      	movs	r1, #34	; 0x22
    tickstart = HAL_GetTick();
2000449a:	4607      	mov	r7, r0
    hi2c->pBuffPtr  = pData;
2000449c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
200044a0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200044a4:	f884 a042 	strb.w	sl, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200044a8:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
200044ac:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200044ae:	685a      	ldr	r2, [r3, #4]
    hi2c->XferISR   = NULL;
200044b0:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200044b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
200044b8:	605a      	str	r2, [r3, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200044ba:	1c6a      	adds	r2, r5, #1
200044bc:	d13c      	bne.n	20004538 <HAL_I2C_Slave_Receive+0xdc>
200044be:	699a      	ldr	r2, [r3, #24]
200044c0:	0716      	lsls	r6, r2, #28
200044c2:	d5fc      	bpl.n	200044be <HAL_I2C_Slave_Receive+0x62>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
200044c4:	2208      	movs	r2, #8
200044c6:	61da      	str	r2, [r3, #28]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200044c8:	1c69      	adds	r1, r5, #1
200044ca:	d154      	bne.n	20004576 <HAL_I2C_Slave_Receive+0x11a>
200044cc:	699a      	ldr	r2, [r3, #24]
200044ce:	03d2      	lsls	r2, r2, #15
200044d0:	d4fc      	bmi.n	200044cc <HAL_I2C_Slave_Receive+0x70>
    while (hi2c->XferCount > 0U)
200044d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
200044d4:	b29b      	uxth	r3, r3
200044d6:	b1ab      	cbz	r3, 20004504 <HAL_I2C_Slave_Receive+0xa8>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
200044d8:	463a      	mov	r2, r7
200044da:	4629      	mov	r1, r5
200044dc:	4620      	mov	r0, r4
200044de:	f7ff fb83 	bl	20003be8 <I2C_WaitOnRXNEFlagUntilTimeout>
200044e2:	2800      	cmp	r0, #0
200044e4:	d153      	bne.n	2000458e <HAL_I2C_Slave_Receive+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
200044e6:	6822      	ldr	r2, [r4, #0]
200044e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
200044ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
200044ec:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
200044ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
200044f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
200044f2:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
200044f4:	3201      	adds	r2, #1
      hi2c->XferCount--;
200044f6:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
200044f8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
200044fa:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
200044fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
200044fe:	b29b      	uxth	r3, r3
20004500:	2b00      	cmp	r3, #0
20004502:	d1e9      	bne.n	200044d8 <HAL_I2C_Slave_Receive+0x7c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20004504:	463a      	mov	r2, r7
20004506:	4629      	mov	r1, r5
20004508:	4620      	mov	r0, r4
2000450a:	f7ff fc49 	bl	20003da0 <I2C_WaitOnSTOPFlagUntilTimeout>
2000450e:	4606      	mov	r6, r0
20004510:	2800      	cmp	r0, #0
20004512:	d050      	beq.n	200045b6 <HAL_I2C_Slave_Receive+0x15a>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
20004514:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
20004516:	2601      	movs	r6, #1
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
20004518:	6853      	ldr	r3, [r2, #4]
2000451a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2000451e:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
20004520:	e003      	b.n	2000452a <HAL_I2C_Slave_Receive+0xce>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20004522:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
20004526:	2601      	movs	r6, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20004528:	6463      	str	r3, [r4, #68]	; 0x44
}
2000452a:	4630      	mov	r0, r6
2000452c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
20004530:	2602      	movs	r6, #2
}
20004532:	4630      	mov	r0, r6
20004534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004538:	699a      	ldr	r2, [r3, #24]
2000453a:	0710      	lsls	r0, r2, #28
2000453c:	d4c2      	bmi.n	200044c4 <HAL_I2C_Slave_Receive+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000453e:	f7fd f8b3 	bl	200016a8 <HAL_GetTick>
20004542:	1bc0      	subs	r0, r0, r7
20004544:	4285      	cmp	r5, r0
20004546:	d302      	bcc.n	2000454e <HAL_I2C_Slave_Receive+0xf2>
20004548:	b10d      	cbz	r5, 2000454e <HAL_I2C_Slave_Receive+0xf2>
2000454a:	6823      	ldr	r3, [r4, #0]
2000454c:	e7b5      	b.n	200044ba <HAL_I2C_Slave_Receive+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000454e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20004550:	2020      	movs	r0, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
20004552:	2100      	movs	r1, #0
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
20004554:	6822      	ldr	r2, [r4, #0]
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20004556:	4303      	orrs	r3, r0
      return HAL_ERROR;
20004558:	2601      	movs	r6, #1
        __HAL_UNLOCK(hi2c);
2000455a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000455e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20004560:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
}
20004564:	4630      	mov	r0, r6
        hi2c->Mode = HAL_I2C_MODE_NONE;
20004566:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000456a:	6853      	ldr	r3, [r2, #4]
2000456c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
20004570:	6053      	str	r3, [r2, #4]
}
20004572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004576:	699b      	ldr	r3, [r3, #24]
20004578:	03de      	lsls	r6, r3, #15
2000457a:	d5bf      	bpl.n	200044fc <HAL_I2C_Slave_Receive+0xa0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000457c:	f7fd f894 	bl	200016a8 <HAL_GetTick>
20004580:	1bc0      	subs	r0, r0, r7
20004582:	4285      	cmp	r5, r0
20004584:	d3e3      	bcc.n	2000454e <HAL_I2C_Slave_Receive+0xf2>
20004586:	2d00      	cmp	r5, #0
20004588:	d0e1      	beq.n	2000454e <HAL_I2C_Slave_Receive+0xf2>
2000458a:	6823      	ldr	r3, [r4, #0]
2000458c:	e79c      	b.n	200044c8 <HAL_I2C_Slave_Receive+0x6c>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000458e:	6823      	ldr	r3, [r4, #0]
20004590:	685a      	ldr	r2, [r3, #4]
20004592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20004596:	605a      	str	r2, [r3, #4]
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
20004598:	699a      	ldr	r2, [r3, #24]
2000459a:	0755      	lsls	r5, r2, #29
2000459c:	d520      	bpl.n	200045e0 <HAL_I2C_Slave_Receive+0x184>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000459e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        return HAL_ERROR;
200045a0:	2601      	movs	r6, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
200045a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
200045a4:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
200045a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
200045a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
200045aa:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
200045ac:	4432      	add	r2, r6
          hi2c->XferCount--;
200045ae:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
200045b0:	6262      	str	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
200045b2:	8563      	strh	r3, [r4, #42]	; 0x2a
200045b4:	e7b9      	b.n	2000452a <HAL_I2C_Slave_Receive+0xce>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
200045b6:	6822      	ldr	r2, [r4, #0]
200045b8:	2320      	movs	r3, #32
200045ba:	61d3      	str	r3, [r2, #28]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200045bc:	1c68      	adds	r0, r5, #1
200045be:	d111      	bne.n	200045e4 <HAL_I2C_Slave_Receive+0x188>
200045c0:	6993      	ldr	r3, [r2, #24]
200045c2:	0419      	lsls	r1, r3, #16
200045c4:	d4fc      	bmi.n	200045c0 <HAL_I2C_Slave_Receive+0x164>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
200045c6:	6853      	ldr	r3, [r2, #4]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
200045c8:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
200045ca:	2020      	movs	r0, #32
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
200045cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
200045d0:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
200045d2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
200045d6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
200045da:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    return HAL_OK;
200045de:	e7a4      	b.n	2000452a <HAL_I2C_Slave_Receive+0xce>
        return HAL_ERROR;
200045e0:	2601      	movs	r6, #1
200045e2:	e7a2      	b.n	2000452a <HAL_I2C_Slave_Receive+0xce>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200045e4:	6993      	ldr	r3, [r2, #24]
200045e6:	041b      	lsls	r3, r3, #16
200045e8:	d5ed      	bpl.n	200045c6 <HAL_I2C_Slave_Receive+0x16a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200045ea:	f7fd f85d 	bl	200016a8 <HAL_GetTick>
200045ee:	1bc0      	subs	r0, r0, r7
200045f0:	4285      	cmp	r5, r0
200045f2:	d3ac      	bcc.n	2000454e <HAL_I2C_Slave_Receive+0xf2>
200045f4:	2d00      	cmp	r5, #0
200045f6:	d0aa      	beq.n	2000454e <HAL_I2C_Slave_Receive+0xf2>
200045f8:	6822      	ldr	r2, [r4, #0]
200045fa:	e7df      	b.n	200045bc <HAL_I2C_Slave_Receive+0x160>

200045fc <HAL_I2C_Master_Transmit_IT>:
{
200045fc:	b4f0      	push	{r4, r5, r6, r7}
200045fe:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
20004600:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
20004604:	2820      	cmp	r0, #32
20004606:	d136      	bne.n	20004676 <HAL_I2C_Master_Transmit_IT+0x7a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
20004608:	6825      	ldr	r5, [r4, #0]
2000460a:	69a8      	ldr	r0, [r5, #24]
2000460c:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
20004610:	d131      	bne.n	20004676 <HAL_I2C_Master_Transmit_IT+0x7a>
    __HAL_LOCK(hi2c);
20004612:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
20004616:	2e01      	cmp	r6, #1
20004618:	d02d      	beq.n	20004676 <HAL_I2C_Master_Transmit_IT+0x7a>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2000461a:	2721      	movs	r7, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2000461c:	2610      	movs	r6, #16
    hi2c->pBuffPtr    = pData;
2000461e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20004620:	4a19      	ldr	r2, [pc, #100]	; (20004688 <HAL_I2C_Master_Transmit_IT+0x8c>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
20004622:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
20004626:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000462a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
2000462c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000462e:	62e2      	str	r2, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20004630:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
20004632:	4a16      	ldr	r2, [pc, #88]	; (2000468c <HAL_I2C_Master_Transmit_IT+0x90>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20004634:	b29b      	uxth	r3, r3
    hi2c->XferISR     = I2C_Master_ISR_IT;
20004636:	6362      	str	r2, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20004638:	2bff      	cmp	r3, #255	; 0xff
2000463a:	d81f      	bhi.n	2000467c <HAL_I2C_Master_Transmit_IT+0x80>
      hi2c->XferSize = hi2c->XferCount;
2000463c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
2000463e:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
20004642:	b2c3      	uxtb	r3, r0
      hi2c->XferSize = hi2c->XferCount;
20004644:	b280      	uxth	r0, r0
      xfermode = I2C_AUTOEND_MODE;
20004646:	40b3      	lsls	r3, r6
  MODIFY_REG(hi2c->Instance->CR2,
20004648:	686a      	ldr	r2, [r5, #4]
2000464a:	f3c1 0109 	ubfx	r1, r1, #0, #10
2000464e:	4e10      	ldr	r6, [pc, #64]	; (20004690 <HAL_I2C_Master_Transmit_IT+0x94>)
20004650:	430b      	orrs	r3, r1
20004652:	8520      	strh	r0, [r4, #40]	; 0x28
20004654:	ea02 0106 	and.w	r1, r2, r6
20004658:	4a0e      	ldr	r2, [pc, #56]	; (20004694 <HAL_I2C_Master_Transmit_IT+0x98>)
    __HAL_UNLOCK(hi2c);
2000465a:	2600      	movs	r6, #0
  MODIFY_REG(hi2c->Instance->CR2,
2000465c:	430b      	orrs	r3, r1
    return HAL_OK;
2000465e:	4630      	mov	r0, r6
  MODIFY_REG(hi2c->Instance->CR2,
20004660:	433b      	orrs	r3, r7
20004662:	431a      	orrs	r2, r3
20004664:	606a      	str	r2, [r5, #4]
    __HAL_UNLOCK(hi2c);
20004666:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2000466a:	682b      	ldr	r3, [r5, #0]
2000466c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
20004670:	602b      	str	r3, [r5, #0]
}
20004672:	bcf0      	pop	{r4, r5, r6, r7}
20004674:	4770      	bx	lr
    return HAL_BUSY;
20004676:	2002      	movs	r0, #2
}
20004678:	bcf0      	pop	{r4, r5, r6, r7}
2000467a:	4770      	bx	lr
2000467c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
      hi2c->XferSize = MAX_NBYTE_SIZE;
20004680:	20ff      	movs	r0, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
20004682:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
20004686:	e7df      	b.n	20004648 <HAL_I2C_Master_Transmit_IT+0x4c>
20004688:	ffff0000 	.word	0xffff0000
2000468c:	20006f45 	.word	0x20006f45
20004690:	fc009800 	.word	0xfc009800
20004694:	80002000 	.word	0x80002000

20004698 <HAL_I2C_Master_Receive_IT>:
{
20004698:	b4f0      	push	{r4, r5, r6, r7}
2000469a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
2000469c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
200046a0:	2820      	cmp	r0, #32
200046a2:	d136      	bne.n	20004712 <HAL_I2C_Master_Receive_IT+0x7a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
200046a4:	6825      	ldr	r5, [r4, #0]
200046a6:	69a8      	ldr	r0, [r5, #24]
200046a8:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
200046ac:	d131      	bne.n	20004712 <HAL_I2C_Master_Receive_IT+0x7a>
    __HAL_LOCK(hi2c);
200046ae:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
200046b2:	2e01      	cmp	r6, #1
200046b4:	d02d      	beq.n	20004712 <HAL_I2C_Master_Receive_IT+0x7a>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
200046b6:	2722      	movs	r7, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
200046b8:	2610      	movs	r6, #16
    hi2c->pBuffPtr    = pData;
200046ba:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200046bc:	4a19      	ldr	r2, [pc, #100]	; (20004724 <HAL_I2C_Master_Receive_IT+0x8c>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
200046be:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
200046c2:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
200046c6:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
200046c8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200046ca:	62e2      	str	r2, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200046cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
200046ce:	4a16      	ldr	r2, [pc, #88]	; (20004728 <HAL_I2C_Master_Receive_IT+0x90>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200046d0:	b29b      	uxth	r3, r3
    hi2c->XferISR     = I2C_Master_ISR_IT;
200046d2:	6362      	str	r2, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200046d4:	2bff      	cmp	r3, #255	; 0xff
200046d6:	d81f      	bhi.n	20004718 <HAL_I2C_Master_Receive_IT+0x80>
      hi2c->XferSize = hi2c->XferCount;
200046d8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
200046da:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
200046de:	b2c3      	uxtb	r3, r0
      hi2c->XferSize = hi2c->XferCount;
200046e0:	b280      	uxth	r0, r0
      xfermode = I2C_AUTOEND_MODE;
200046e2:	40b3      	lsls	r3, r6
  MODIFY_REG(hi2c->Instance->CR2,
200046e4:	686a      	ldr	r2, [r5, #4]
200046e6:	f3c1 0109 	ubfx	r1, r1, #0, #10
200046ea:	4e10      	ldr	r6, [pc, #64]	; (2000472c <HAL_I2C_Master_Receive_IT+0x94>)
200046ec:	430b      	orrs	r3, r1
200046ee:	8520      	strh	r0, [r4, #40]	; 0x28
200046f0:	ea02 0106 	and.w	r1, r2, r6
200046f4:	4a0e      	ldr	r2, [pc, #56]	; (20004730 <HAL_I2C_Master_Receive_IT+0x98>)
    __HAL_UNLOCK(hi2c);
200046f6:	2600      	movs	r6, #0
  MODIFY_REG(hi2c->Instance->CR2,
200046f8:	430b      	orrs	r3, r1
    return HAL_OK;
200046fa:	4630      	mov	r0, r6
  MODIFY_REG(hi2c->Instance->CR2,
200046fc:	433b      	orrs	r3, r7
200046fe:	431a      	orrs	r2, r3
20004700:	606a      	str	r2, [r5, #4]
    __HAL_UNLOCK(hi2c);
20004702:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20004706:	682b      	ldr	r3, [r5, #0]
20004708:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
2000470c:	602b      	str	r3, [r5, #0]
}
2000470e:	bcf0      	pop	{r4, r5, r6, r7}
20004710:	4770      	bx	lr
    return HAL_BUSY;
20004712:	2002      	movs	r0, #2
}
20004714:	bcf0      	pop	{r4, r5, r6, r7}
20004716:	4770      	bx	lr
20004718:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000471c:	20ff      	movs	r0, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
2000471e:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
20004722:	e7df      	b.n	200046e4 <HAL_I2C_Master_Receive_IT+0x4c>
20004724:	ffff0000 	.word	0xffff0000
20004728:	20006f45 	.word	0x20006f45
2000472c:	fc009800 	.word	0xfc009800
20004730:	80002400 	.word	0x80002400

20004734 <HAL_I2C_Slave_Transmit_IT>:
{
20004734:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
20004736:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
2000473a:	2820      	cmp	r0, #32
2000473c:	d122      	bne.n	20004784 <HAL_I2C_Slave_Transmit_IT+0x50>
{
2000473e:	b4f0      	push	{r4, r5, r6, r7}
20004740:	b2c6      	uxtb	r6, r0
    __HAL_LOCK(hi2c);
20004742:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
20004746:	2801      	cmp	r0, #1
20004748:	d01e      	beq.n	20004788 <HAL_I2C_Slave_Transmit_IT+0x54>
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000474a:	681c      	ldr	r4, [r3, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000474c:	2500      	movs	r5, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2000474e:	2021      	movs	r0, #33	; 0x21
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20004750:	4f0f      	ldr	r7, [pc, #60]	; (20004790 <HAL_I2C_Slave_Transmit_IT+0x5c>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
20004752:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    return HAL_OK;
20004756:	4628      	mov	r0, r5
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
20004758:	f883 6042 	strb.w	r6, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000475c:	645d      	str	r5, [r3, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000475e:	6866      	ldr	r6, [r4, #4]
20004760:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
20004764:	6066      	str	r6, [r4, #4]
    hi2c->XferCount   = Size;
20004766:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_UNLOCK(hi2c);
20004768:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    hi2c->XferSize    = hi2c->XferCount;
2000476c:	8d5e      	ldrh	r6, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000476e:	62df      	str	r7, [r3, #44]	; 0x2c
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20004770:	6822      	ldr	r2, [r4, #0]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
20004772:	4d08      	ldr	r5, [pc, #32]	; (20004794 <HAL_I2C_Slave_Transmit_IT+0x60>)
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20004774:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
    hi2c->XferSize    = hi2c->XferCount;
20004778:	851e      	strh	r6, [r3, #40]	; 0x28
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2000477a:	635d      	str	r5, [r3, #52]	; 0x34
    hi2c->pBuffPtr    = pData;
2000477c:	6259      	str	r1, [r3, #36]	; 0x24
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2000477e:	6022      	str	r2, [r4, #0]
}
20004780:	bcf0      	pop	{r4, r5, r6, r7}
20004782:	4770      	bx	lr
    return HAL_BUSY;
20004784:	2002      	movs	r0, #2
}
20004786:	4770      	bx	lr
    return HAL_BUSY;
20004788:	2002      	movs	r0, #2
}
2000478a:	bcf0      	pop	{r4, r5, r6, r7}
2000478c:	4770      	bx	lr
2000478e:	bf00      	nop
20004790:	ffff0000 	.word	0xffff0000
20004794:	20006c7d 	.word	0x20006c7d

20004798 <HAL_I2C_Slave_Receive_IT>:
{
20004798:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
2000479a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
2000479e:	2820      	cmp	r0, #32
200047a0:	d122      	bne.n	200047e8 <HAL_I2C_Slave_Receive_IT+0x50>
{
200047a2:	b4f0      	push	{r4, r5, r6, r7}
200047a4:	b2c6      	uxtb	r6, r0
    __HAL_LOCK(hi2c);
200047a6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
200047aa:	2801      	cmp	r0, #1
200047ac:	d01e      	beq.n	200047ec <HAL_I2C_Slave_Receive_IT+0x54>
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200047ae:	681c      	ldr	r4, [r3, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
200047b0:	2500      	movs	r5, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
200047b2:	2022      	movs	r0, #34	; 0x22
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200047b4:	4f0f      	ldr	r7, [pc, #60]	; (200047f4 <HAL_I2C_Slave_Receive_IT+0x5c>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
200047b6:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    return HAL_OK;
200047ba:	4628      	mov	r0, r5
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
200047bc:	f883 6042 	strb.w	r6, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
200047c0:	645d      	str	r5, [r3, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200047c2:	6866      	ldr	r6, [r4, #4]
200047c4:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
200047c8:	6066      	str	r6, [r4, #4]
    hi2c->XferCount   = Size;
200047ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_UNLOCK(hi2c);
200047cc:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    hi2c->XferSize    = hi2c->XferCount;
200047d0:	8d5e      	ldrh	r6, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200047d2:	62df      	str	r7, [r3, #44]	; 0x2c
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200047d4:	6822      	ldr	r2, [r4, #0]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
200047d6:	4d08      	ldr	r5, [pc, #32]	; (200047f8 <HAL_I2C_Slave_Receive_IT+0x60>)
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200047d8:	f042 02fc 	orr.w	r2, r2, #252	; 0xfc
    hi2c->XferSize    = hi2c->XferCount;
200047dc:	851e      	strh	r6, [r3, #40]	; 0x28
    hi2c->XferISR     = I2C_Slave_ISR_IT;
200047de:	635d      	str	r5, [r3, #52]	; 0x34
    hi2c->pBuffPtr    = pData;
200047e0:	6259      	str	r1, [r3, #36]	; 0x24
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200047e2:	6022      	str	r2, [r4, #0]
}
200047e4:	bcf0      	pop	{r4, r5, r6, r7}
200047e6:	4770      	bx	lr
    return HAL_BUSY;
200047e8:	2002      	movs	r0, #2
}
200047ea:	4770      	bx	lr
    return HAL_BUSY;
200047ec:	2002      	movs	r0, #2
}
200047ee:	bcf0      	pop	{r4, r5, r6, r7}
200047f0:	4770      	bx	lr
200047f2:	bf00      	nop
200047f4:	ffff0000 	.word	0xffff0000
200047f8:	20006c7d 	.word	0x20006c7d

200047fc <HAL_I2C_Master_Transmit_DMA>:
{
200047fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
20004800:	460d      	mov	r5, r1
20004802:	4611      	mov	r1, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
20004804:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
20004808:	2a20      	cmp	r2, #32
2000480a:	d137      	bne.n	2000487c <HAL_I2C_Master_Transmit_DMA+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000480c:	6802      	ldr	r2, [r0, #0]
2000480e:	4604      	mov	r4, r0
20004810:	6996      	ldr	r6, [r2, #24]
20004812:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
20004816:	d131      	bne.n	2000487c <HAL_I2C_Master_Transmit_DMA+0x80>
    __HAL_LOCK(hi2c);
20004818:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
2000481c:	2801      	cmp	r0, #1
2000481e:	d02d      	beq.n	2000487c <HAL_I2C_Master_Transmit_DMA+0x80>
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
20004820:	2010      	movs	r0, #16
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20004822:	4f4b      	ldr	r7, [pc, #300]	; (20004950 <HAL_I2C_Master_Transmit_DMA+0x154>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
20004824:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->pBuffPtr    = pData;
20004828:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2000482a:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2000482e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    __HAL_LOCK(hi2c);
20004832:	2001      	movs	r0, #1
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
20004834:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
20004836:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20004838:	62e7      	str	r7, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000483a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2000483c:	4f45      	ldr	r7, [pc, #276]	; (20004954 <HAL_I2C_Master_Transmit_DMA+0x158>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000483e:	b29b      	uxth	r3, r3
    __HAL_LOCK(hi2c);
20004840:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->XferISR     = I2C_Master_ISR_DMA;
20004844:	6367      	str	r7, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20004846:	2bff      	cmp	r3, #255	; 0xff
20004848:	d81b      	bhi.n	20004882 <HAL_I2C_Master_Transmit_DMA+0x86>
      hi2c->XferSize = hi2c->XferCount;
2000484a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2000484c:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
2000484e:	8523      	strh	r3, [r4, #40]	; 0x28
    if (hi2c->XferSize > 0U)
20004850:	2b00      	cmp	r3, #0
20004852:	d16b      	bne.n	2000492c <HAL_I2C_Master_Transmit_DMA+0x130>
  MODIFY_REG(hi2c->Instance->CR2,
20004854:	6856      	ldr	r6, [r2, #4]
20004856:	f3c5 0109 	ubfx	r1, r5, #0, #10
2000485a:	4d3f      	ldr	r5, [pc, #252]	; (20004958 <HAL_I2C_Master_Transmit_DMA+0x15c>)
    return HAL_OK;
2000485c:	4618      	mov	r0, r3
  MODIFY_REG(hi2c->Instance->CR2,
2000485e:	4035      	ands	r5, r6
20004860:	4e3e      	ldr	r6, [pc, #248]	; (2000495c <HAL_I2C_Master_Transmit_DMA+0x160>)
20004862:	430d      	orrs	r5, r1
      hi2c->XferISR = I2C_Master_ISR_IT;
20004864:	493e      	ldr	r1, [pc, #248]	; (20004960 <HAL_I2C_Master_Transmit_DMA+0x164>)
  MODIFY_REG(hi2c->Instance->CR2,
20004866:	432e      	orrs	r6, r5
      hi2c->XferISR = I2C_Master_ISR_IT;
20004868:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
2000486a:	6056      	str	r6, [r2, #4]
      __HAL_UNLOCK(hi2c);
2000486c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20004870:	6813      	ldr	r3, [r2, #0]
20004872:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
20004876:	6013      	str	r3, [r2, #0]
}
20004878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
2000487c:	2002      	movs	r0, #2
}
2000487e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
20004882:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
20004884:	f04f 7980 	mov.w	r9, #16777216	; 0x1000000
20004888:	8523      	strh	r3, [r4, #40]	; 0x28
      if (hi2c->hdmatx != NULL)
2000488a:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
2000488e:	f1bc 0f00 	cmp.w	ip, #0
20004892:	d050      	beq.n	20004936 <HAL_I2C_Master_Transmit_DMA+0x13a>
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
20004894:	f04f 0800 	mov.w	r8, #0
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20004898:	4832      	ldr	r0, [pc, #200]	; (20004964 <HAL_I2C_Master_Transmit_DMA+0x168>)
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2000489a:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 2000496c <HAL_I2C_Master_Transmit_DMA+0x170>
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
2000489e:	3228      	adds	r2, #40	; 0x28
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
200048a0:	f8cc 004c 	str.w	r0, [ip, #76]	; 0x4c
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
200048a4:	4660      	mov	r0, ip
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
200048a6:	f8cc e03c 	str.w	lr, [ip, #60]	; 0x3c
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
200048aa:	f8cc 8040 	str.w	r8, [ip, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
200048ae:	f8cc 8050 	str.w	r8, [ip, #80]	; 0x50
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
200048b2:	f7fd fa47 	bl	20001d44 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
200048b6:	bb58      	cbnz	r0, 20004910 <HAL_I2C_Master_Transmit_DMA+0x114>
  MODIFY_REG(hi2c->Instance->CR2,
200048b8:	6823      	ldr	r3, [r4, #0]
200048ba:	f3c5 0509 	ubfx	r5, r5, #0, #10
200048be:	4a26      	ldr	r2, [pc, #152]	; (20004958 <HAL_I2C_Master_Transmit_DMA+0x15c>)
200048c0:	6859      	ldr	r1, [r3, #4]
200048c2:	ea45 0909 	orr.w	r9, r5, r9
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
200048c6:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
200048ca:	ea01 0502 	and.w	r5, r1, r2
200048ce:	4926      	ldr	r1, [pc, #152]	; (20004968 <HAL_I2C_Master_Transmit_DMA+0x16c>)
200048d0:	fa5f f28c 	uxtb.w	r2, ip
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200048d4:	f8df e098 	ldr.w	lr, [pc, #152]	; 20004970 <HAL_I2C_Master_Transmit_DMA+0x174>
  MODIFY_REG(hi2c->Instance->CR2,
200048d8:	ea49 0905 	orr.w	r9, r9, r5
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200048dc:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
200048de:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200048e2:	4575      	cmp	r5, lr
  MODIFY_REG(hi2c->Instance->CR2,
200048e4:	ea49 0101 	orr.w	r1, r9, r1
200048e8:	6059      	str	r1, [r3, #4]
        hi2c->XferCount -= hi2c->XferSize;
200048ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
200048ec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
        hi2c->XferCount -= hi2c->XferSize;
200048f0:	eba2 020c 	sub.w	r2, r2, ip
200048f4:	b292      	uxth	r2, r2
200048f6:	8562      	strh	r2, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200048f8:	d01b      	beq.n	20004932 <HAL_I2C_Master_Transmit_DMA+0x136>
200048fa:	42bd      	cmp	r5, r7
200048fc:	d019      	beq.n	20004932 <HAL_I2C_Master_Transmit_DMA+0x136>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200048fe:	681a      	ldr	r2, [r3, #0]
20004900:	4316      	orrs	r6, r2
20004902:	601e      	str	r6, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
20004904:	681a      	ldr	r2, [r3, #0]
20004906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2000490a:	601a      	str	r2, [r3, #0]
}
2000490c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hi2c->State     = HAL_I2C_STATE_READY;
20004910:	2320      	movs	r3, #32
        return HAL_ERROR;
20004912:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
20004914:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
        hi2c->State     = HAL_I2C_STATE_READY;
20004918:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2000491c:	f884 8042 	strb.w	r8, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
20004920:	6c63      	ldr	r3, [r4, #68]	; 0x44
20004922:	f043 0310 	orr.w	r3, r3, #16
20004926:	6463      	str	r3, [r4, #68]	; 0x44
}
20004928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xfermode = I2C_AUTOEND_MODE;
2000492c:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
20004930:	e7ab      	b.n	2000488a <HAL_I2C_Master_Transmit_DMA+0x8e>
20004932:	2690      	movs	r6, #144	; 0x90
20004934:	e7e3      	b.n	200048fe <HAL_I2C_Master_Transmit_DMA+0x102>
        hi2c->State     = HAL_I2C_STATE_READY;
20004936:	2320      	movs	r3, #32
        return HAL_ERROR;
20004938:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
2000493a:	f884 c040 	strb.w	ip, [r4, #64]	; 0x40
        hi2c->State     = HAL_I2C_STATE_READY;
2000493e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20004942:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20004946:	6c63      	ldr	r3, [r4, #68]	; 0x44
20004948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000494c:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
2000494e:	e796      	b.n	2000487e <HAL_I2C_Master_Transmit_DMA+0x82>
20004950:	ffff0000 	.word	0xffff0000
20004954:	200072f9 	.word	0x200072f9
20004958:	fc009800 	.word	0xfc009800
2000495c:	82002000 	.word	0x82002000
20004960:	20006f45 	.word	0x20006f45
20004964:	20007519 	.word	0x20007519
20004968:	80002000 	.word	0x80002000
2000496c:	2000757d 	.word	0x2000757d
20004970:	20007181 	.word	0x20007181

20004974 <HAL_I2C_Master_Receive_DMA>:
{
20004974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
20004978:	460d      	mov	r5, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
2000497a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
2000497e:	2920      	cmp	r1, #32
20004980:	d137      	bne.n	200049f2 <HAL_I2C_Master_Receive_DMA+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
20004982:	6801      	ldr	r1, [r0, #0]
20004984:	4604      	mov	r4, r0
20004986:	698e      	ldr	r6, [r1, #24]
20004988:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
2000498c:	d131      	bne.n	200049f2 <HAL_I2C_Master_Receive_DMA+0x7e>
    __HAL_LOCK(hi2c);
2000498e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
20004992:	2801      	cmp	r0, #1
20004994:	d02d      	beq.n	200049f2 <HAL_I2C_Master_Receive_DMA+0x7e>
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
20004996:	2010      	movs	r0, #16
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20004998:	4f4b      	ldr	r7, [pc, #300]	; (20004ac8 <HAL_I2C_Master_Receive_DMA+0x154>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2000499a:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->pBuffPtr    = pData;
2000499e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
200049a0:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
200049a4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    __HAL_LOCK(hi2c);
200049a8:	2001      	movs	r0, #1
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
200049aa:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
200049ac:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200049ae:	62e7      	str	r7, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200049b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_DMA;
200049b2:	4f46      	ldr	r7, [pc, #280]	; (20004acc <HAL_I2C_Master_Receive_DMA+0x158>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200049b4:	b29b      	uxth	r3, r3
    __HAL_LOCK(hi2c);
200049b6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->XferISR     = I2C_Master_ISR_DMA;
200049ba:	6367      	str	r7, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200049bc:	2bff      	cmp	r3, #255	; 0xff
200049be:	d81b      	bhi.n	200049f8 <HAL_I2C_Master_Receive_DMA+0x84>
      hi2c->XferSize = hi2c->XferCount;
200049c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
200049c2:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
200049c4:	8523      	strh	r3, [r4, #40]	; 0x28
    if (hi2c->XferSize > 0U)
200049c6:	2b00      	cmp	r3, #0
200049c8:	d16b      	bne.n	20004aa2 <HAL_I2C_Master_Receive_DMA+0x12e>
  MODIFY_REG(hi2c->Instance->CR2,
200049ca:	684a      	ldr	r2, [r1, #4]
200049cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
200049d0:	4e3f      	ldr	r6, [pc, #252]	; (20004ad0 <HAL_I2C_Master_Receive_DMA+0x15c>)
    return HAL_OK;
200049d2:	4618      	mov	r0, r3
  MODIFY_REG(hi2c->Instance->CR2,
200049d4:	4032      	ands	r2, r6
200049d6:	4e3f      	ldr	r6, [pc, #252]	; (20004ad4 <HAL_I2C_Master_Receive_DMA+0x160>)
200049d8:	4315      	orrs	r5, r2
      hi2c->XferISR = I2C_Master_ISR_IT;
200049da:	4a3f      	ldr	r2, [pc, #252]	; (20004ad8 <HAL_I2C_Master_Receive_DMA+0x164>)
  MODIFY_REG(hi2c->Instance->CR2,
200049dc:	432e      	orrs	r6, r5
      hi2c->XferISR = I2C_Master_ISR_IT;
200049de:	6362      	str	r2, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
200049e0:	604e      	str	r6, [r1, #4]
      __HAL_UNLOCK(hi2c);
200049e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200049e6:	680b      	ldr	r3, [r1, #0]
200049e8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
200049ec:	600b      	str	r3, [r1, #0]
}
200049ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
200049f2:	2002      	movs	r0, #2
}
200049f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
200049f8:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
200049fa:	f04f 7980 	mov.w	r9, #16777216	; 0x1000000
200049fe:	8523      	strh	r3, [r4, #40]	; 0x28
      if (hi2c->hdmarx != NULL)
20004a00:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
20004a04:	f1bc 0f00 	cmp.w	ip, #0
20004a08:	d050      	beq.n	20004aac <HAL_I2C_Master_Receive_DMA+0x138>
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
20004a0a:	f04f 0800 	mov.w	r8, #0
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
20004a0e:	4833      	ldr	r0, [pc, #204]	; (20004adc <HAL_I2C_Master_Receive_DMA+0x168>)
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
20004a10:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 20004ae4 <HAL_I2C_Master_Receive_DMA+0x170>
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20004a14:	3124      	adds	r1, #36	; 0x24
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
20004a16:	f8cc 004c 	str.w	r0, [ip, #76]	; 0x4c
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20004a1a:	4660      	mov	r0, ip
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
20004a1c:	f8cc e03c 	str.w	lr, [ip, #60]	; 0x3c
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
20004a20:	f8cc 8040 	str.w	r8, [ip, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
20004a24:	f8cc 8050 	str.w	r8, [ip, #80]	; 0x50
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20004a28:	f7fd f98c 	bl	20001d44 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
20004a2c:	bb58      	cbnz	r0, 20004a86 <HAL_I2C_Master_Receive_DMA+0x112>
  MODIFY_REG(hi2c->Instance->CR2,
20004a2e:	6823      	ldr	r3, [r4, #0]
20004a30:	f3c5 0509 	ubfx	r5, r5, #0, #10
20004a34:	4a26      	ldr	r2, [pc, #152]	; (20004ad0 <HAL_I2C_Master_Receive_DMA+0x15c>)
20004a36:	6859      	ldr	r1, [r3, #4]
20004a38:	ea45 0909 	orr.w	r9, r5, r9
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
20004a3c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20004a40:	ea01 0502 	and.w	r5, r1, r2
20004a44:	4926      	ldr	r1, [pc, #152]	; (20004ae0 <HAL_I2C_Master_Receive_DMA+0x16c>)
20004a46:	fa5f f28c 	uxtb.w	r2, ip
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20004a4a:	f8df e09c 	ldr.w	lr, [pc, #156]	; 20004ae8 <HAL_I2C_Master_Receive_DMA+0x174>
  MODIFY_REG(hi2c->Instance->CR2,
20004a4e:	ea49 0905 	orr.w	r9, r9, r5
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20004a52:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
20004a54:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20004a58:	4575      	cmp	r5, lr
  MODIFY_REG(hi2c->Instance->CR2,
20004a5a:	ea49 0101 	orr.w	r1, r9, r1
20004a5e:	6059      	str	r1, [r3, #4]
        hi2c->XferCount -= hi2c->XferSize;
20004a60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
20004a62:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
        hi2c->XferCount -= hi2c->XferSize;
20004a66:	eba2 020c 	sub.w	r2, r2, ip
20004a6a:	b292      	uxth	r2, r2
20004a6c:	8562      	strh	r2, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20004a6e:	d01b      	beq.n	20004aa8 <HAL_I2C_Master_Receive_DMA+0x134>
20004a70:	42bd      	cmp	r5, r7
20004a72:	d019      	beq.n	20004aa8 <HAL_I2C_Master_Receive_DMA+0x134>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20004a74:	681a      	ldr	r2, [r3, #0]
20004a76:	4316      	orrs	r6, r2
20004a78:	601e      	str	r6, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
20004a7a:	681a      	ldr	r2, [r3, #0]
20004a7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20004a80:	601a      	str	r2, [r3, #0]
}
20004a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hi2c->State     = HAL_I2C_STATE_READY;
20004a86:	2320      	movs	r3, #32
        return HAL_ERROR;
20004a88:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
20004a8a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
        hi2c->State     = HAL_I2C_STATE_READY;
20004a8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20004a92:	f884 8042 	strb.w	r8, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
20004a96:	6c63      	ldr	r3, [r4, #68]	; 0x44
20004a98:	f043 0310 	orr.w	r3, r3, #16
20004a9c:	6463      	str	r3, [r4, #68]	; 0x44
}
20004a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xfermode = I2C_AUTOEND_MODE;
20004aa2:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
20004aa6:	e7ab      	b.n	20004a00 <HAL_I2C_Master_Receive_DMA+0x8c>
20004aa8:	2690      	movs	r6, #144	; 0x90
20004aaa:	e7e3      	b.n	20004a74 <HAL_I2C_Master_Receive_DMA+0x100>
        hi2c->State     = HAL_I2C_STATE_READY;
20004aac:	2320      	movs	r3, #32
        return HAL_ERROR;
20004aae:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
20004ab0:	f884 c040 	strb.w	ip, [r4, #64]	; 0x40
        hi2c->State     = HAL_I2C_STATE_READY;
20004ab4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20004ab8:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20004abc:	6c63      	ldr	r3, [r4, #68]	; 0x44
20004abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20004ac2:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
20004ac4:	e796      	b.n	200049f4 <HAL_I2C_Master_Receive_DMA+0x80>
20004ac6:	bf00      	nop
20004ac8:	ffff0000 	.word	0xffff0000
20004acc:	200072f9 	.word	0x200072f9
20004ad0:	fc009800 	.word	0xfc009800
20004ad4:	82002400 	.word	0x82002400
20004ad8:	20006f45 	.word	0x20006f45
20004adc:	20007519 	.word	0x20007519
20004ae0:	80002400 	.word	0x80002400
20004ae4:	20007615 	.word	0x20007615
20004ae8:	20007181 	.word	0x20007181

20004aec <HAL_I2C_Slave_Transmit_DMA>:
{
20004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20004aee:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
20004af0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
20004af4:	2820      	cmp	r0, #32
20004af6:	d141      	bne.n	20004b7c <HAL_I2C_Slave_Transmit_DMA+0x90>
    if ((pData == NULL) || (Size == 0U))
20004af8:	2900      	cmp	r1, #0
20004afa:	d03a      	beq.n	20004b72 <HAL_I2C_Slave_Transmit_DMA+0x86>
20004afc:	fab2 f582 	clz	r5, r2
20004b00:	096d      	lsrs	r5, r5, #5
20004b02:	2a00      	cmp	r2, #0
20004b04:	d035      	beq.n	20004b72 <HAL_I2C_Slave_Transmit_DMA+0x86>
20004b06:	b2c7      	uxtb	r7, r0
    __HAL_LOCK(hi2c);
20004b08:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
20004b0c:	2801      	cmp	r0, #1
20004b0e:	d035      	beq.n	20004b7c <HAL_I2C_Slave_Transmit_DMA+0x90>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
20004b10:	2021      	movs	r0, #33	; 0x21
    __HAL_LOCK(hi2c);
20004b12:	2601      	movs	r6, #1
    hi2c->pBuffPtr    = pData;
20004b14:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
20004b16:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
20004b1a:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
20004b1e:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
20004b20:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20004b22:	4a24      	ldr	r2, [pc, #144]	; (20004bb4 <HAL_I2C_Slave_Transmit_DMA+0xc8>)
    hi2c->XferSize    = hi2c->XferCount;
20004b24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
20004b26:	4824      	ldr	r0, [pc, #144]	; (20004bb8 <HAL_I2C_Slave_Transmit_DMA+0xcc>)
    hi2c->XferSize    = hi2c->XferCount;
20004b28:	b29b      	uxth	r3, r3
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20004b2a:	62e2      	str	r2, [r4, #44]	; 0x2c
    if (hi2c->hdmatx != NULL)
20004b2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    __HAL_LOCK(hi2c);
20004b2e:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->XferSize    = hi2c->XferCount;
20004b32:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
20004b34:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->hdmatx != NULL)
20004b36:	2a00      	cmp	r2, #0
20004b38:	d02f      	beq.n	20004b9a <HAL_I2C_Slave_Transmit_DMA+0xae>
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
20004b3a:	4820      	ldr	r0, [pc, #128]	; (20004bbc <HAL_I2C_Slave_Transmit_DMA+0xd0>)
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20004b3c:	4f20      	ldr	r7, [pc, #128]	; (20004bc0 <HAL_I2C_Slave_Transmit_DMA+0xd4>)
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
20004b3e:	63d0      	str	r0, [r2, #60]	; 0x3c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
20004b40:	4610      	mov	r0, r2
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
20004b42:	6415      	str	r5, [r2, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
20004b44:	6515      	str	r5, [r2, #80]	; 0x50
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20004b46:	64d7      	str	r7, [r2, #76]	; 0x4c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
20004b48:	6822      	ldr	r2, [r4, #0]
20004b4a:	3228      	adds	r2, #40	; 0x28
20004b4c:	f7fd f8fa 	bl	20001d44 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
20004b50:	b9b0      	cbnz	r0, 20004b80 <HAL_I2C_Slave_Transmit_DMA+0x94>
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
20004b52:	6823      	ldr	r3, [r4, #0]
20004b54:	685a      	ldr	r2, [r3, #4]
20004b56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20004b5a:	605a      	str	r2, [r3, #4]
      __HAL_UNLOCK(hi2c);
20004b5c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20004b60:	681a      	ldr	r2, [r3, #0]
20004b62:	f042 02b8 	orr.w	r2, r2, #184	; 0xb8
20004b66:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
20004b68:	681a      	ldr	r2, [r3, #0]
20004b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20004b6e:	601a      	str	r2, [r3, #0]
}
20004b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20004b72:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
20004b76:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20004b78:	6463      	str	r3, [r4, #68]	; 0x44
}
20004b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
20004b7c:	2002      	movs	r0, #2
}
20004b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20004b80:	2328      	movs	r3, #40	; 0x28
      return HAL_ERROR;
20004b82:	4630      	mov	r0, r6
      __HAL_UNLOCK(hi2c);
20004b84:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20004b88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20004b8c:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
20004b90:	6c63      	ldr	r3, [r4, #68]	; 0x44
20004b92:	f043 0310 	orr.w	r3, r3, #16
20004b96:	6463      	str	r3, [r4, #68]	; 0x44
}
20004b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20004b9a:	2328      	movs	r3, #40	; 0x28
      return HAL_ERROR;
20004b9c:	4630      	mov	r0, r6
      __HAL_UNLOCK(hi2c);
20004b9e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20004ba2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20004ba6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20004baa:	6c63      	ldr	r3, [r4, #68]	; 0x44
20004bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20004bb0:	6463      	str	r3, [r4, #68]	; 0x44
}
20004bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20004bb4:	ffff0000 	.word	0xffff0000
20004bb8:	20007181 	.word	0x20007181
20004bbc:	2000677d 	.word	0x2000677d
20004bc0:	20007519 	.word	0x20007519

20004bc4 <HAL_I2C_Slave_Receive_DMA>:
{
20004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
20004bc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
20004bca:	2b20      	cmp	r3, #32
20004bcc:	d145      	bne.n	20004c5a <HAL_I2C_Slave_Receive_DMA+0x96>
    if ((pData == NULL) || (Size == 0U))
20004bce:	4604      	mov	r4, r0
20004bd0:	2900      	cmp	r1, #0
20004bd2:	d03d      	beq.n	20004c50 <HAL_I2C_Slave_Receive_DMA+0x8c>
20004bd4:	fab2 f682 	clz	r6, r2
20004bd8:	0976      	lsrs	r6, r6, #5
20004bda:	2a00      	cmp	r2, #0
20004bdc:	d038      	beq.n	20004c50 <HAL_I2C_Slave_Receive_DMA+0x8c>
20004bde:	b2d8      	uxtb	r0, r3
    __HAL_LOCK(hi2c);
20004be0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
20004be4:	2b01      	cmp	r3, #1
20004be6:	d038      	beq.n	20004c5a <HAL_I2C_Slave_Receive_DMA+0x96>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
20004be8:	2322      	movs	r3, #34	; 0x22
    __HAL_LOCK(hi2c);
20004bea:	2701      	movs	r7, #1
    if (hi2c->hdmarx != NULL)
20004bec:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
20004bee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
20004bf2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
20004bf6:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
20004bf8:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
20004bfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20004bfc:	4825      	ldr	r0, [pc, #148]	; (20004c94 <HAL_I2C_Slave_Receive_DMA+0xd0>)
    hi2c->XferSize    = hi2c->XferCount;
20004bfe:	b29b      	uxth	r3, r3
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
20004c00:	4a25      	ldr	r2, [pc, #148]	; (20004c98 <HAL_I2C_Slave_Receive_DMA+0xd4>)
    hi2c->pBuffPtr    = pData;
20004c02:	6261      	str	r1, [r4, #36]	; 0x24
    __HAL_LOCK(hi2c);
20004c04:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
    hi2c->XferSize    = hi2c->XferCount;
20004c08:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20004c0a:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
20004c0c:	6362      	str	r2, [r4, #52]	; 0x34
    if (hi2c->hdmarx != NULL)
20004c0e:	2d00      	cmp	r5, #0
20004c10:	d032      	beq.n	20004c78 <HAL_I2C_Slave_Receive_DMA+0xb4>
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
20004c12:	4822      	ldr	r0, [pc, #136]	; (20004c9c <HAL_I2C_Slave_Receive_DMA+0xd8>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20004c14:	460a      	mov	r2, r1
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
20004c16:	f8df c088 	ldr.w	ip, [pc, #136]	; 20004ca0 <HAL_I2C_Slave_Receive_DMA+0xdc>
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20004c1a:	6821      	ldr	r1, [r4, #0]
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
20004c1c:	63e8      	str	r0, [r5, #60]	; 0x3c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20004c1e:	4628      	mov	r0, r5
20004c20:	3124      	adds	r1, #36	; 0x24
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
20004c22:	642e      	str	r6, [r5, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
20004c24:	652e      	str	r6, [r5, #80]	; 0x50
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
20004c26:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20004c2a:	f7fd f88b 	bl	20001d44 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
20004c2e:	b9b0      	cbnz	r0, 20004c5e <HAL_I2C_Slave_Receive_DMA+0x9a>
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
20004c30:	6823      	ldr	r3, [r4, #0]
20004c32:	685a      	ldr	r2, [r3, #4]
20004c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20004c38:	605a      	str	r2, [r3, #4]
      __HAL_UNLOCK(hi2c);
20004c3a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20004c3e:	681a      	ldr	r2, [r3, #0]
20004c40:	f042 02b8 	orr.w	r2, r2, #184	; 0xb8
20004c44:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
20004c46:	681a      	ldr	r2, [r3, #0]
20004c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20004c4c:	601a      	str	r2, [r3, #0]
}
20004c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20004c50:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
20004c54:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20004c56:	6463      	str	r3, [r4, #68]	; 0x44
}
20004c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
20004c5a:	2002      	movs	r0, #2
}
20004c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20004c5e:	2328      	movs	r3, #40	; 0x28
      return HAL_ERROR;
20004c60:	4638      	mov	r0, r7
      __HAL_UNLOCK(hi2c);
20004c62:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20004c66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20004c6a:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
20004c6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
20004c70:	f043 0310 	orr.w	r3, r3, #16
20004c74:	6463      	str	r3, [r4, #68]	; 0x44
}
20004c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20004c78:	2328      	movs	r3, #40	; 0x28
      return HAL_ERROR;
20004c7a:	4638      	mov	r0, r7
      __HAL_UNLOCK(hi2c);
20004c7c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20004c80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20004c84:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20004c88:	6c63      	ldr	r3, [r4, #68]	; 0x44
20004c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20004c8e:	6463      	str	r3, [r4, #68]	; 0x44
}
20004c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20004c92:	bf00      	nop
20004c94:	ffff0000 	.word	0xffff0000
20004c98:	20007181 	.word	0x20007181
20004c9c:	2000682d 	.word	0x2000682d
20004ca0:	20007519 	.word	0x20007519

20004ca4 <HAL_I2C_Mem_Write>:
{
20004ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20004ca8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
20004caa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
20004cae:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
20004cb2:	2b20      	cmp	r3, #32
{
20004cb4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
20004cb6:	f040 80b0 	bne.w	20004e1a <HAL_I2C_Mem_Write+0x176>
    if ((pData == NULL) || (Size == 0U))
20004cba:	9b08      	ldr	r3, [sp, #32]
20004cbc:	4604      	mov	r4, r0
20004cbe:	2b00      	cmp	r3, #0
20004cc0:	f000 80a5 	beq.w	20004e0e <HAL_I2C_Mem_Write+0x16a>
20004cc4:	f1ba 0f00 	cmp.w	sl, #0
20004cc8:	f000 80a1 	beq.w	20004e0e <HAL_I2C_Mem_Write+0x16a>
    __HAL_LOCK(hi2c);
20004ccc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
20004cd0:	2b01      	cmp	r3, #1
20004cd2:	f000 80a2 	beq.w	20004e1a <HAL_I2C_Mem_Write+0x176>
20004cd6:	2301      	movs	r3, #1
20004cd8:	460e      	mov	r6, r1
20004cda:	4690      	mov	r8, r2
20004cdc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
20004ce0:	f7fc fce2 	bl	200016a8 <HAL_GetTick>
20004ce4:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
20004ce6:	e005      	b.n	20004cf4 <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20004ce8:	f7fc fcde 	bl	200016a8 <HAL_GetTick>
20004cec:	1b40      	subs	r0, r0, r5
20004cee:	2819      	cmp	r0, #25
20004cf0:	f200 80af 	bhi.w	20004e52 <HAL_I2C_Mem_Write+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004cf4:	f8d4 c000 	ldr.w	ip, [r4]
20004cf8:	f8dc 3018 	ldr.w	r3, [ip, #24]
20004cfc:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
20004d00:	d1f2      	bne.n	20004ce8 <HAL_I2C_Mem_Write+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
20004d02:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
20004d04:	2240      	movs	r2, #64	; 0x40
    hi2c->pBuffPtr  = pData;
20004d06:	9808      	ldr	r0, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2,
20004d08:	f3c6 0609 	ubfx	r6, r6, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
20004d0c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2,
20004d10:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 20004efc <HAL_I2C_Mem_Write+0x258>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
20004d14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20004d18:	462a      	mov	r2, r5
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20004d1a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
20004d1c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
20004d20:	f8dc 1004 	ldr.w	r1, [ip, #4]
    hi2c->pBuffPtr  = pData;
20004d24:	6260      	str	r0, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2,
20004d26:	fa5f f089 	uxtb.w	r0, r9
20004d2a:	ea01 010e 	and.w	r1, r1, lr
    hi2c->XferISR   = NULL;
20004d2e:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
20004d30:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 20004f00 <HAL_I2C_Mem_Write+0x25c>
20004d34:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20004d38:	4639      	mov	r1, r7
20004d3a:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
20004d3c:	4333      	orrs	r3, r6
20004d3e:	ea43 0e0e 	orr.w	lr, r3, lr
20004d42:	f8cc e004 	str.w	lr, [ip, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20004d46:	f7fe ffcf 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
20004d4a:	2800      	cmp	r0, #0
20004d4c:	d171      	bne.n	20004e32 <HAL_I2C_Mem_Write+0x18e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
20004d4e:	f1b9 0f01 	cmp.w	r9, #1
20004d52:	d00a      	beq.n	20004d6a <HAL_I2C_Mem_Write+0xc6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
20004d54:	ea4f 2018 	mov.w	r0, r8, lsr #8
20004d58:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20004d5a:	462a      	mov	r2, r5
20004d5c:	4639      	mov	r1, r7
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
20004d5e:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20004d60:	4620      	mov	r0, r4
20004d62:	f7fe ffc1 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
20004d66:	2800      	cmp	r0, #0
20004d68:	d163      	bne.n	20004e32 <HAL_I2C_Mem_Write+0x18e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
20004d6a:	fa5f f288 	uxtb.w	r2, r8
20004d6e:	6821      	ldr	r1, [r4, #0]
20004d70:	628a      	str	r2, [r1, #40]	; 0x28
20004d72:	1c78      	adds	r0, r7, #1
20004d74:	f040 8089 	bne.w	20004e8a <HAL_I2C_Mem_Write+0x1e6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004d78:	698b      	ldr	r3, [r1, #24]
20004d7a:	061a      	lsls	r2, r3, #24
20004d7c:	d5fc      	bpl.n	20004d78 <HAL_I2C_Mem_Write+0xd4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20004d7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
20004d80:	b29b      	uxth	r3, r3
20004d82:	2bff      	cmp	r3, #255	; 0xff
20004d84:	f240 8090 	bls.w	20004ea8 <HAL_I2C_Mem_Write+0x204>
  MODIFY_REG(hi2c->Instance->CR2,
20004d88:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
20004d8a:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
20004d8c:	4a58      	ldr	r2, [pc, #352]	; (20004ef0 <HAL_I2C_Mem_Write+0x24c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
20004d8e:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20004d90:	4013      	ands	r3, r2
20004d92:	4a58      	ldr	r2, [pc, #352]	; (20004ef4 <HAL_I2C_Mem_Write+0x250>)
20004d94:	4333      	orrs	r3, r6
20004d96:	431a      	orrs	r2, r3
20004d98:	604a      	str	r2, [r1, #4]
20004d9a:	f8df 8154 	ldr.w	r8, [pc, #340]	; 20004ef0 <HAL_I2C_Mem_Write+0x24c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
20004d9e:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
20004da2:	f8df 9150 	ldr.w	r9, [pc, #336]	; 20004ef4 <HAL_I2C_Mem_Write+0x250>
20004da6:	e004      	b.n	20004db2 <HAL_I2C_Mem_Write+0x10e>
    } while (hi2c->XferCount > 0U);
20004da8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
20004daa:	b29b      	uxth	r3, r3
20004dac:	2b00      	cmp	r3, #0
20004dae:	f000 8089 	beq.w	20004ec4 <HAL_I2C_Mem_Write+0x220>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20004db2:	462a      	mov	r2, r5
20004db4:	4639      	mov	r1, r7
20004db6:	4620      	mov	r0, r4
20004db8:	f7fe ff96 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
20004dbc:	2800      	cmp	r0, #0
20004dbe:	d171      	bne.n	20004ea4 <HAL_I2C_Mem_Write+0x200>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
20004dc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
20004dc2:	6821      	ldr	r1, [r4, #0]
20004dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
20004dc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
20004dca:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
20004dcc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
20004dce:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
20004dd0:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
20004dd2:	3a01      	subs	r2, #1
      hi2c->XferSize--;
20004dd4:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
20004dd6:	b292      	uxth	r2, r2
      hi2c->XferSize--;
20004dd8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
20004dda:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
20004ddc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
20004dde:	b292      	uxth	r2, r2
20004de0:	2b00      	cmp	r3, #0
20004de2:	d1e1      	bne.n	20004da8 <HAL_I2C_Mem_Write+0x104>
20004de4:	2a00      	cmp	r2, #0
20004de6:	d0df      	beq.n	20004da8 <HAL_I2C_Mem_Write+0x104>
20004de8:	1c78      	adds	r0, r7, #1
20004dea:	d127      	bne.n	20004e3c <HAL_I2C_Mem_Write+0x198>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004dec:	698b      	ldr	r3, [r1, #24]
20004dee:	061a      	lsls	r2, r3, #24
20004df0:	d5fc      	bpl.n	20004dec <HAL_I2C_Mem_Write+0x148>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
20004df2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
20004df4:	b29b      	uxth	r3, r3
20004df6:	2bff      	cmp	r3, #255	; 0xff
20004df8:	d939      	bls.n	20004e6e <HAL_I2C_Mem_Write+0x1ca>
  MODIFY_REG(hi2c->Instance->CR2,
20004dfa:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
20004dfc:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20004e00:	ea03 0308 	and.w	r3, r3, r8
20004e04:	4333      	orrs	r3, r6
20004e06:	ea43 0309 	orr.w	r3, r3, r9
20004e0a:	604b      	str	r3, [r1, #4]
}
20004e0c:	e7cc      	b.n	20004da8 <HAL_I2C_Mem_Write+0x104>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20004e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
20004e12:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20004e14:	6463      	str	r3, [r4, #68]	; 0x44
}
20004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
20004e1a:	2002      	movs	r0, #2
}
20004e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20004e20:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20004e22:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
20004e24:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20004e26:	430b      	orrs	r3, r1
20004e28:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20004e2a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
20004e2e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
20004e32:	2300      	movs	r3, #0
      return HAL_ERROR;
20004e34:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
20004e36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
20004e3a:	e7ec      	b.n	20004e16 <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004e3c:	698b      	ldr	r3, [r1, #24]
20004e3e:	061b      	lsls	r3, r3, #24
20004e40:	d4d7      	bmi.n	20004df2 <HAL_I2C_Mem_Write+0x14e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20004e42:	f7fc fc31 	bl	200016a8 <HAL_GetTick>
20004e46:	1b40      	subs	r0, r0, r5
20004e48:	4287      	cmp	r7, r0
20004e4a:	d302      	bcc.n	20004e52 <HAL_I2C_Mem_Write+0x1ae>
20004e4c:	b10f      	cbz	r7, 20004e52 <HAL_I2C_Mem_Write+0x1ae>
20004e4e:	6821      	ldr	r1, [r4, #0]
20004e50:	e7ca      	b.n	20004de8 <HAL_I2C_Mem_Write+0x144>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20004e52:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20004e54:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
20004e56:	2200      	movs	r2, #0
          return HAL_ERROR;
20004e58:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20004e5a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
20004e5c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20004e60:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20004e62:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
20004e66:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
20004e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          hi2c->XferSize = hi2c->XferCount;
20004e6e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
20004e70:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
20004e72:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
20004e74:	ea03 0308 	and.w	r3, r3, r8
20004e78:	b2d0      	uxtb	r0, r2
          hi2c->XferSize = hi2c->XferCount;
20004e7a:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20004e7c:	4333      	orrs	r3, r6
20004e7e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
20004e82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
20004e86:	604b      	str	r3, [r1, #4]
}
20004e88:	e78e      	b.n	20004da8 <HAL_I2C_Mem_Write+0x104>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004e8a:	698b      	ldr	r3, [r1, #24]
20004e8c:	061b      	lsls	r3, r3, #24
20004e8e:	f53f af76 	bmi.w	20004d7e <HAL_I2C_Mem_Write+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20004e92:	f7fc fc09 	bl	200016a8 <HAL_GetTick>
20004e96:	1b40      	subs	r0, r0, r5
20004e98:	4287      	cmp	r7, r0
20004e9a:	d3c1      	bcc.n	20004e20 <HAL_I2C_Mem_Write+0x17c>
20004e9c:	2f00      	cmp	r7, #0
20004e9e:	d0bf      	beq.n	20004e20 <HAL_I2C_Mem_Write+0x17c>
20004ea0:	6821      	ldr	r1, [r4, #0]
20004ea2:	e766      	b.n	20004d72 <HAL_I2C_Mem_Write+0xce>
        return HAL_ERROR;
20004ea4:	2001      	movs	r0, #1
20004ea6:	e7b6      	b.n	20004e16 <HAL_I2C_Mem_Write+0x172>
      hi2c->XferSize = hi2c->XferCount;
20004ea8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
20004eaa:	4811      	ldr	r0, [pc, #68]	; (20004ef0 <HAL_I2C_Mem_Write+0x24c>)
20004eac:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
20004eae:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
20004eb0:	4003      	ands	r3, r0
20004eb2:	b2d0      	uxtb	r0, r2
      hi2c->XferSize = hi2c->XferCount;
20004eb4:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20004eb6:	4333      	orrs	r3, r6
20004eb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
20004ebc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
20004ec0:	604b      	str	r3, [r1, #4]
}
20004ec2:	e76a      	b.n	20004d9a <HAL_I2C_Mem_Write+0xf6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20004ec4:	462a      	mov	r2, r5
20004ec6:	4639      	mov	r1, r7
20004ec8:	4620      	mov	r0, r4
20004eca:	f7fe ff69 	bl	20003da0 <I2C_WaitOnSTOPFlagUntilTimeout>
20004ece:	2800      	cmp	r0, #0
20004ed0:	d1e8      	bne.n	20004ea4 <HAL_I2C_Mem_Write+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20004ed2:	6823      	ldr	r3, [r4, #0]
20004ed4:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
20004ed6:	4d08      	ldr	r5, [pc, #32]	; (20004ef8 <HAL_I2C_Mem_Write+0x254>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20004ed8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
20004eda:	685a      	ldr	r2, [r3, #4]
20004edc:	402a      	ands	r2, r5
20004ede:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
20004ee0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
20004ee4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
20004ee8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
20004eec:	e793      	b.n	20004e16 <HAL_I2C_Mem_Write+0x172>
20004eee:	bf00      	nop
20004ef0:	fc009c00 	.word	0xfc009c00
20004ef4:	01ff0000 	.word	0x01ff0000
20004ef8:	fe00e800 	.word	0xfe00e800
20004efc:	fc009800 	.word	0xfc009800
20004f00:	81002000 	.word	0x81002000

20004f04 <HAL_I2C_Mem_Read>:
{
20004f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20004f08:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
20004f0a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
20004f0e:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
20004f12:	2b20      	cmp	r3, #32
{
20004f14:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
20004f16:	f040 80b3 	bne.w	20005080 <HAL_I2C_Mem_Read+0x17c>
    if ((pData == NULL) || (Size == 0U))
20004f1a:	9b08      	ldr	r3, [sp, #32]
20004f1c:	4604      	mov	r4, r0
20004f1e:	2b00      	cmp	r3, #0
20004f20:	f000 80a8 	beq.w	20005074 <HAL_I2C_Mem_Read+0x170>
20004f24:	f1ba 0f00 	cmp.w	sl, #0
20004f28:	f000 80a4 	beq.w	20005074 <HAL_I2C_Mem_Read+0x170>
    __HAL_LOCK(hi2c);
20004f2c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
20004f30:	2b01      	cmp	r3, #1
20004f32:	f000 80a5 	beq.w	20005080 <HAL_I2C_Mem_Read+0x17c>
20004f36:	2301      	movs	r3, #1
20004f38:	460f      	mov	r7, r1
20004f3a:	4690      	mov	r8, r2
20004f3c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
20004f40:	f7fc fbb2 	bl	200016a8 <HAL_GetTick>
20004f44:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
20004f46:	e005      	b.n	20004f54 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20004f48:	f7fc fbae 	bl	200016a8 <HAL_GetTick>
20004f4c:	1b80      	subs	r0, r0, r6
20004f4e:	2819      	cmp	r0, #25
20004f50:	f200 8082 	bhi.w	20005058 <HAL_I2C_Mem_Read+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004f54:	f8d4 c000 	ldr.w	ip, [r4]
20004f58:	f8dc 3018 	ldr.w	r3, [ip, #24]
20004f5c:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
20004f60:	d1f2      	bne.n	20004f48 <HAL_I2C_Mem_Read+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
20004f62:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
20004f64:	2240      	movs	r2, #64	; 0x40
    hi2c->pBuffPtr  = pData;
20004f66:	9808      	ldr	r0, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2,
20004f68:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
20004f6c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2,
20004f70:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 20005164 <HAL_I2C_Mem_Read+0x260>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
20004f74:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20004f78:	4632      	mov	r2, r6
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20004f7a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
20004f7c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
20004f80:	f8dc 1004 	ldr.w	r1, [ip, #4]
    hi2c->pBuffPtr  = pData;
20004f84:	6260      	str	r0, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2,
20004f86:	fa5f f089 	uxtb.w	r0, r9
20004f8a:	ea01 010e 	and.w	r1, r1, lr
    hi2c->XferISR   = NULL;
20004f8e:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
20004f90:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 20005174 <HAL_I2C_Mem_Read+0x270>
20004f94:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20004f98:	4629      	mov	r1, r5
20004f9a:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
20004f9c:	433b      	orrs	r3, r7
20004f9e:	ea43 0e0e 	orr.w	lr, r3, lr
20004fa2:	f8cc e004 	str.w	lr, [ip, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20004fa6:	f7fe fe9f 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
20004faa:	2800      	cmp	r0, #0
20004fac:	d174      	bne.n	20005098 <HAL_I2C_Mem_Read+0x194>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
20004fae:	f1b9 0f01 	cmp.w	r9, #1
20004fb2:	d00a      	beq.n	20004fca <HAL_I2C_Mem_Read+0xc6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
20004fb4:	ea4f 2018 	mov.w	r0, r8, lsr #8
20004fb8:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20004fba:	4632      	mov	r2, r6
20004fbc:	4629      	mov	r1, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
20004fbe:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20004fc0:	4620      	mov	r0, r4
20004fc2:	f7fe fe91 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
20004fc6:	2800      	cmp	r0, #0
20004fc8:	d166      	bne.n	20005098 <HAL_I2C_Mem_Read+0x194>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
20004fca:	fa5f f288 	uxtb.w	r2, r8
20004fce:	6823      	ldr	r3, [r4, #0]
20004fd0:	629a      	str	r2, [r3, #40]	; 0x28
20004fd2:	1c68      	adds	r0, r5, #1
20004fd4:	f040 8091 	bne.w	200050fa <HAL_I2C_Mem_Read+0x1f6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20004fd8:	699a      	ldr	r2, [r3, #24]
20004fda:	0651      	lsls	r1, r2, #25
20004fdc:	d5fc      	bpl.n	20004fd8 <HAL_I2C_Mem_Read+0xd4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20004fde:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
20004fe0:	b292      	uxth	r2, r2
20004fe2:	2aff      	cmp	r2, #255	; 0xff
20004fe4:	f240 8096 	bls.w	20005114 <HAL_I2C_Mem_Read+0x210>
  MODIFY_REG(hi2c->Instance->CR2,
20004fe8:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
20004fea:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
20004fec:	495d      	ldr	r1, [pc, #372]	; (20005164 <HAL_I2C_Mem_Read+0x260>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
20004fee:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20004ff0:	400a      	ands	r2, r1
20004ff2:	495d      	ldr	r1, [pc, #372]	; (20005168 <HAL_I2C_Mem_Read+0x264>)
20004ff4:	433a      	orrs	r2, r7
20004ff6:	4311      	orrs	r1, r2
20004ff8:	6059      	str	r1, [r3, #4]
20004ffa:	1c68      	adds	r0, r5, #1
20004ffc:	f8df 8178 	ldr.w	r8, [pc, #376]	; 20005178 <HAL_I2C_Mem_Read+0x274>
          hi2c->XferSize = MAX_NBYTE_SIZE;
20005000:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
20005004:	f8df 9174 	ldr.w	r9, [pc, #372]	; 2000517c <HAL_I2C_Mem_Read+0x278>
20005008:	d11c      	bne.n	20005044 <HAL_I2C_Mem_Read+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2000500a:	699a      	ldr	r2, [r3, #24]
2000500c:	0751      	lsls	r1, r2, #29
2000500e:	d5fc      	bpl.n	2000500a <HAL_I2C_Mem_Read+0x106>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
20005010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20005012:	6a63      	ldr	r3, [r4, #36]	; 0x24
20005014:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
20005016:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
20005018:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
2000501a:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
2000501c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
2000501e:	3b01      	subs	r3, #1
      hi2c->XferCount--;
20005020:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
20005022:	3201      	adds	r2, #1
      hi2c->XferSize--;
20005024:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
20005026:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
20005028:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
2000502a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2000502c:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
2000502e:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
20005030:	b90b      	cbnz	r3, 20005036 <HAL_I2C_Mem_Read+0x132>
20005032:	2900      	cmp	r1, #0
20005034:	d13f      	bne.n	200050b6 <HAL_I2C_Mem_Read+0x1b2>
    } while (hi2c->XferCount > 0U);
20005036:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
20005038:	b29b      	uxth	r3, r3
2000503a:	2b00      	cmp	r3, #0
2000503c:	d07b      	beq.n	20005136 <HAL_I2C_Mem_Read+0x232>
2000503e:	1c68      	adds	r0, r5, #1
20005040:	6823      	ldr	r3, [r4, #0]
20005042:	d0e2      	beq.n	2000500a <HAL_I2C_Mem_Read+0x106>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20005044:	699a      	ldr	r2, [r3, #24]
20005046:	0752      	lsls	r2, r2, #29
20005048:	d4e2      	bmi.n	20005010 <HAL_I2C_Mem_Read+0x10c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000504a:	f7fc fb2d 	bl	200016a8 <HAL_GetTick>
2000504e:	1b80      	subs	r0, r0, r6
20005050:	4285      	cmp	r5, r0
20005052:	d301      	bcc.n	20005058 <HAL_I2C_Mem_Read+0x154>
20005054:	2d00      	cmp	r5, #0
20005056:	d1f2      	bne.n	2000503e <HAL_I2C_Mem_Read+0x13a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20005058:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2000505a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
2000505c:	2200      	movs	r2, #0
          return HAL_ERROR;
2000505e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20005060:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
20005062:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20005066:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20005068:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2000506c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
20005070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20005074:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
20005078:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000507a:	6463      	str	r3, [r4, #68]	; 0x44
}
2000507c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
20005080:	2002      	movs	r0, #2
}
20005082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20005086:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20005088:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
2000508a:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000508c:	430b      	orrs	r3, r1
2000508e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20005090:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
20005094:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
20005098:	2300      	movs	r3, #0
      return HAL_ERROR;
2000509a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
2000509c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
200050a0:	e7ec      	b.n	2000507c <HAL_I2C_Mem_Read+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200050a2:	6993      	ldr	r3, [r2, #24]
200050a4:	061b      	lsls	r3, r3, #24
200050a6:	d40c      	bmi.n	200050c2 <HAL_I2C_Mem_Read+0x1be>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200050a8:	f7fc fafe 	bl	200016a8 <HAL_GetTick>
200050ac:	1b80      	subs	r0, r0, r6
200050ae:	4285      	cmp	r5, r0
200050b0:	d3d2      	bcc.n	20005058 <HAL_I2C_Mem_Read+0x154>
200050b2:	2d00      	cmp	r5, #0
200050b4:	d0d0      	beq.n	20005058 <HAL_I2C_Mem_Read+0x154>
200050b6:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200050b8:	6822      	ldr	r2, [r4, #0]
200050ba:	d1f2      	bne.n	200050a2 <HAL_I2C_Mem_Read+0x19e>
200050bc:	6993      	ldr	r3, [r2, #24]
200050be:	0619      	lsls	r1, r3, #24
200050c0:	d5fc      	bpl.n	200050bc <HAL_I2C_Mem_Read+0x1b8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
200050c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
200050c4:	b29b      	uxth	r3, r3
200050c6:	2bff      	cmp	r3, #255	; 0xff
200050c8:	d909      	bls.n	200050de <HAL_I2C_Mem_Read+0x1da>
  MODIFY_REG(hi2c->Instance->CR2,
200050ca:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
200050cc:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
200050d0:	ea03 0308 	and.w	r3, r3, r8
200050d4:	433b      	orrs	r3, r7
200050d6:	ea43 0309 	orr.w	r3, r3, r9
200050da:	6053      	str	r3, [r2, #4]
}
200050dc:	e7ab      	b.n	20005036 <HAL_I2C_Mem_Read+0x132>
          hi2c->XferSize = hi2c->XferCount;
200050de:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
200050e0:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
200050e2:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
200050e4:	ea03 0308 	and.w	r3, r3, r8
200050e8:	b2c8      	uxtb	r0, r1
          hi2c->XferSize = hi2c->XferCount;
200050ea:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
200050ec:	433b      	orrs	r3, r7
200050ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
200050f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
200050f6:	6053      	str	r3, [r2, #4]
}
200050f8:	e79d      	b.n	20005036 <HAL_I2C_Mem_Read+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200050fa:	699a      	ldr	r2, [r3, #24]
200050fc:	0652      	lsls	r2, r2, #25
200050fe:	f53f af6e 	bmi.w	20004fde <HAL_I2C_Mem_Read+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20005102:	f7fc fad1 	bl	200016a8 <HAL_GetTick>
20005106:	1b80      	subs	r0, r0, r6
20005108:	4285      	cmp	r5, r0
2000510a:	d3bc      	bcc.n	20005086 <HAL_I2C_Mem_Read+0x182>
2000510c:	2d00      	cmp	r5, #0
2000510e:	d0ba      	beq.n	20005086 <HAL_I2C_Mem_Read+0x182>
20005110:	6823      	ldr	r3, [r4, #0]
20005112:	e75e      	b.n	20004fd2 <HAL_I2C_Mem_Read+0xce>
      hi2c->XferSize = hi2c->XferCount;
20005114:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
20005116:	f8df c04c 	ldr.w	ip, [pc, #76]	; 20005164 <HAL_I2C_Mem_Read+0x260>
2000511a:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
2000511c:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
2000511e:	4813      	ldr	r0, [pc, #76]	; (2000516c <HAL_I2C_Mem_Read+0x268>)
20005120:	ea02 020c 	and.w	r2, r2, ip
20005124:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
20005128:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
2000512a:	433a      	orrs	r2, r7
2000512c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
20005130:	4310      	orrs	r0, r2
20005132:	6058      	str	r0, [r3, #4]
}
20005134:	e761      	b.n	20004ffa <HAL_I2C_Mem_Read+0xf6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20005136:	4632      	mov	r2, r6
20005138:	4629      	mov	r1, r5
2000513a:	4620      	mov	r0, r4
2000513c:	f7fe fe30 	bl	20003da0 <I2C_WaitOnSTOPFlagUntilTimeout>
20005140:	b968      	cbnz	r0, 2000515e <HAL_I2C_Mem_Read+0x25a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20005142:	6823      	ldr	r3, [r4, #0]
20005144:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
20005146:	4d0a      	ldr	r5, [pc, #40]	; (20005170 <HAL_I2C_Mem_Read+0x26c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20005148:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
2000514a:	685a      	ldr	r2, [r3, #4]
2000514c:	402a      	ands	r2, r5
2000514e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
20005150:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
20005154:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
20005158:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
2000515c:	e78e      	b.n	2000507c <HAL_I2C_Mem_Read+0x178>
      return HAL_ERROR;
2000515e:	2001      	movs	r0, #1
20005160:	e78c      	b.n	2000507c <HAL_I2C_Mem_Read+0x178>
20005162:	bf00      	nop
20005164:	fc009800 	.word	0xfc009800
20005168:	81ff2400 	.word	0x81ff2400
2000516c:	82002400 	.word	0x82002400
20005170:	fe00e800 	.word	0xfe00e800
20005174:	80002000 	.word	0x80002000
20005178:	fc009c00 	.word	0xfc009c00
2000517c:	01ff0000 	.word	0x01ff0000

20005180 <HAL_I2C_Mem_Write_IT>:
{
20005180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
20005184:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
20005186:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
2000518a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
2000518e:	2b20      	cmp	r3, #32
20005190:	f040 8087 	bne.w	200052a2 <HAL_I2C_Mem_Write_IT+0x122>
    if ((pData == NULL) || (Size == 0U))
20005194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
20005196:	4604      	mov	r4, r0
20005198:	2b00      	cmp	r3, #0
2000519a:	f000 8087 	beq.w	200052ac <HAL_I2C_Mem_Write_IT+0x12c>
2000519e:	f1b9 0f00 	cmp.w	r9, #0
200051a2:	f000 8083 	beq.w	200052ac <HAL_I2C_Mem_Write_IT+0x12c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
200051a6:	6803      	ldr	r3, [r0, #0]
200051a8:	699f      	ldr	r7, [r3, #24]
200051aa:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
200051ae:	d178      	bne.n	200052a2 <HAL_I2C_Mem_Write_IT+0x122>
    __HAL_LOCK(hi2c);
200051b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
200051b4:	2b01      	cmp	r3, #1
200051b6:	d074      	beq.n	200052a2 <HAL_I2C_Mem_Write_IT+0x122>
200051b8:	2301      	movs	r3, #1
200051ba:	460d      	mov	r5, r1
200051bc:	4616      	mov	r6, r2
200051be:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
200051c2:	f7fc fa71 	bl	200016a8 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
200051c6:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MEM;
200051c8:	2240      	movs	r2, #64	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200051ca:	4b46      	ldr	r3, [pc, #280]	; (200052e4 <HAL_I2C_Mem_Write_IT+0x164>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
200051cc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    tickstart = HAL_GetTick();
200051d0:	4680      	mov	r8, r0
    hi2c->Mode        = HAL_I2C_MODE_MEM;
200051d2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
200051d6:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
200051d8:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200051dc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200051de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
200051e0:	4a41      	ldr	r2, [pc, #260]	; (200052e8 <HAL_I2C_Mem_Write_IT+0x168>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200051e2:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr    = pData;
200051e4:	990a      	ldr	r1, [sp, #40]	; 0x28
    hi2c->XferISR     = I2C_Master_ISR_IT;
200051e6:	6362      	str	r2, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200051e8:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr    = pData;
200051ea:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200051ec:	d866      	bhi.n	200052bc <HAL_I2C_Mem_Write_IT+0x13c>
      hi2c->XferSize = hi2c->XferCount;
200051ee:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
200051f0:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
200051f4:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
200051f6:	f8d4 e000 	ldr.w	lr, [r4]
200051fa:	fa5f f38b 	uxtb.w	r3, fp
200051fe:	483b      	ldr	r0, [pc, #236]	; (200052ec <HAL_I2C_Mem_Write_IT+0x16c>)
20005200:	f3c5 0509 	ubfx	r5, r5, #0, #10
20005204:	f8de 2004 	ldr.w	r2, [lr, #4]
20005208:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 200052fc <HAL_I2C_Mem_Write_IT+0x17c>
2000520c:	4002      	ands	r2, r0
2000520e:	8521      	strh	r1, [r4, #40]	; 0x28
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005210:	4620      	mov	r0, r4
20005212:	2119      	movs	r1, #25
  MODIFY_REG(hi2c->Instance->CR2,
20005214:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005218:	4642      	mov	r2, r8
  MODIFY_REG(hi2c->Instance->CR2,
2000521a:	432b      	orrs	r3, r5
2000521c:	ea43 0c0c 	orr.w	ip, r3, ip
20005220:	f8ce c004 	str.w	ip, [lr, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005224:	f7fe fd60 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
20005228:	4682      	mov	sl, r0
2000522a:	2800      	cmp	r0, #0
2000522c:	d152      	bne.n	200052d4 <HAL_I2C_Mem_Write_IT+0x154>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2000522e:	f1bb 0f01 	cmp.w	fp, #1
20005232:	d009      	beq.n	20005248 <HAL_I2C_Mem_Write_IT+0xc8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
20005234:	0a30      	lsrs	r0, r6, #8
20005236:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005238:	4642      	mov	r2, r8
2000523a:	2119      	movs	r1, #25
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2000523c:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2000523e:	4620      	mov	r0, r4
20005240:	f7fe fd52 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
20005244:	2800      	cmp	r0, #0
20005246:	d145      	bne.n	200052d4 <HAL_I2C_Mem_Write_IT+0x154>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
20005248:	b2f6      	uxtb	r6, r6
2000524a:	6823      	ldr	r3, [r4, #0]
2000524c:	629e      	str	r6, [r3, #40]	; 0x28
2000524e:	e006      	b.n	2000525e <HAL_I2C_Mem_Write_IT+0xde>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20005250:	f7fc fa2a 	bl	200016a8 <HAL_GetTick>
20005254:	eba0 0308 	sub.w	r3, r0, r8
20005258:	2b19      	cmp	r3, #25
2000525a:	d833      	bhi.n	200052c4 <HAL_I2C_Mem_Write_IT+0x144>
2000525c:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2000525e:	699e      	ldr	r6, [r3, #24]
20005260:	f016 0680 	ands.w	r6, r6, #128	; 0x80
20005264:	d0f4      	beq.n	20005250 <HAL_I2C_Mem_Write_IT+0xd0>
  MODIFY_REG(hi2c->Instance->CR2,
20005266:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    __HAL_UNLOCK(hi2c);
2000526a:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2,
2000526c:	4920      	ldr	r1, [pc, #128]	; (200052f0 <HAL_I2C_Mem_Write_IT+0x170>)
2000526e:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
20005272:	685a      	ldr	r2, [r3, #4]
20005274:	ea45 0909 	orr.w	r9, r5, r9
20005278:	ea02 0501 	and.w	r5, r2, r1
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2000527c:	6b62      	ldr	r2, [r4, #52]	; 0x34
2000527e:	491d      	ldr	r1, [pc, #116]	; (200052f4 <HAL_I2C_Mem_Write_IT+0x174>)
  MODIFY_REG(hi2c->Instance->CR2,
20005280:	ea49 0505 	orr.w	r5, r9, r5
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20005284:	428a      	cmp	r2, r1
  MODIFY_REG(hi2c->Instance->CR2,
20005286:	605d      	str	r5, [r3, #4]
    __HAL_UNLOCK(hi2c);
20005288:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2000528c:	d003      	beq.n	20005296 <HAL_I2C_Mem_Write_IT+0x116>
2000528e:	491a      	ldr	r1, [pc, #104]	; (200052f8 <HAL_I2C_Mem_Write_IT+0x178>)
20005290:	428a      	cmp	r2, r1
20005292:	bf18      	it	ne
20005294:	27f2      	movne	r7, #242	; 0xf2
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20005296:	681a      	ldr	r2, [r3, #0]
}
20005298:	4650      	mov	r0, sl
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2000529a:	4317      	orrs	r7, r2
2000529c:	601f      	str	r7, [r3, #0]
}
2000529e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
200052a2:	f04f 0a02 	mov.w	sl, #2
}
200052a6:	4650      	mov	r0, sl
200052a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200052ac:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
200052b0:	f04f 0a01 	mov.w	sl, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200052b4:	6463      	str	r3, [r4, #68]	; 0x44
}
200052b6:	4650      	mov	r0, sl
200052b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
200052bc:	21ff      	movs	r1, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
200052be:	f04f 7980 	mov.w	r9, #16777216	; 0x1000000
200052c2:	e798      	b.n	200051f6 <HAL_I2C_Mem_Write_IT+0x76>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
200052c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
200052c6:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
200052c8:	4313      	orrs	r3, r2
200052ca:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
200052cc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
200052d0:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
200052d4:	2300      	movs	r3, #0
      return HAL_ERROR;
200052d6:	f04f 0a01 	mov.w	sl, #1
      __HAL_UNLOCK(hi2c);
200052da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
200052de:	4650      	mov	r0, sl
200052e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
200052e4:	ffff0000 	.word	0xffff0000
200052e8:	20006f45 	.word	0x20006f45
200052ec:	fc009800 	.word	0xfc009800
200052f0:	fc009c00 	.word	0xfc009c00
200052f4:	20007181 	.word	0x20007181
200052f8:	200072f9 	.word	0x200072f9
200052fc:	81002000 	.word	0x81002000

20005300 <HAL_I2C_Mem_Read_IT>:
{
20005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20005304:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
20005306:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
2000530a:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
2000530c:	2b20      	cmp	r3, #32
{
2000530e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_READY)
20005312:	f040 808a 	bne.w	2000542a <HAL_I2C_Mem_Read_IT+0x12a>
    if ((pData == NULL) || (Size == 0U))
20005316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
20005318:	4604      	mov	r4, r0
2000531a:	2b00      	cmp	r3, #0
2000531c:	f000 808b 	beq.w	20005436 <HAL_I2C_Mem_Read_IT+0x136>
20005320:	f1b9 0f00 	cmp.w	r9, #0
20005324:	f000 8087 	beq.w	20005436 <HAL_I2C_Mem_Read_IT+0x136>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
20005328:	6803      	ldr	r3, [r0, #0]
2000532a:	699f      	ldr	r7, [r3, #24]
2000532c:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
20005330:	d17b      	bne.n	2000542a <HAL_I2C_Mem_Read_IT+0x12a>
    __HAL_LOCK(hi2c);
20005332:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
20005336:	2b01      	cmp	r3, #1
20005338:	d077      	beq.n	2000542a <HAL_I2C_Mem_Read_IT+0x12a>
2000533a:	2301      	movs	r3, #1
2000533c:	460e      	mov	r6, r1
2000533e:	4615      	mov	r5, r2
20005340:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
20005344:	f7fc f9b0 	bl	200016a8 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
20005348:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2000534a:	2240      	movs	r2, #64	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000534c:	4b49      	ldr	r3, [pc, #292]	; (20005474 <HAL_I2C_Mem_Read_IT+0x174>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2000534e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    tickstart = HAL_GetTick();
20005352:	4680      	mov	r8, r0
    hi2c->Mode        = HAL_I2C_MODE_MEM;
20005354:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
20005358:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
2000535a:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000535e:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005360:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
20005362:	4a45      	ldr	r2, [pc, #276]	; (20005478 <HAL_I2C_Mem_Read_IT+0x178>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005364:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr    = pData;
20005366:	990c      	ldr	r1, [sp, #48]	; 0x30
    hi2c->XferISR     = I2C_Master_ISR_IT;
20005368:	6362      	str	r2, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000536a:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr    = pData;
2000536c:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000536e:	d86b      	bhi.n	20005448 <HAL_I2C_Mem_Read_IT+0x148>
      hi2c->XferSize = hi2c->XferCount;
20005370:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
20005372:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
20005376:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
20005378:	f8d4 e000 	ldr.w	lr, [r4]
2000537c:	fa5f f38b 	uxtb.w	r3, fp
20005380:	483e      	ldr	r0, [pc, #248]	; (2000547c <HAL_I2C_Mem_Read_IT+0x17c>)
20005382:	f3c6 0609 	ubfx	r6, r6, #0, #10
20005386:	f8de 2004 	ldr.w	r2, [lr, #4]
2000538a:	f8df c100 	ldr.w	ip, [pc, #256]	; 2000548c <HAL_I2C_Mem_Read_IT+0x18c>
2000538e:	4002      	ands	r2, r0
20005390:	8521      	strh	r1, [r4, #40]	; 0x28
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005392:	4620      	mov	r0, r4
20005394:	2119      	movs	r1, #25
  MODIFY_REG(hi2c->Instance->CR2,
20005396:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2000539a:	4642      	mov	r2, r8
  MODIFY_REG(hi2c->Instance->CR2,
2000539c:	4333      	orrs	r3, r6
2000539e:	ea43 0c0c 	orr.w	ip, r3, ip
200053a2:	f8ce c004 	str.w	ip, [lr, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
200053a6:	f7fe fc9f 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
200053aa:	4682      	mov	sl, r0
200053ac:	9001      	str	r0, [sp, #4]
200053ae:	2800      	cmp	r0, #0
200053b0:	d156      	bne.n	20005460 <HAL_I2C_Mem_Read_IT+0x160>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
200053b2:	f1bb 0f01 	cmp.w	fp, #1
200053b6:	d009      	beq.n	200053cc <HAL_I2C_Mem_Read_IT+0xcc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
200053b8:	0a28      	lsrs	r0, r5, #8
200053ba:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
200053bc:	4642      	mov	r2, r8
200053be:	2119      	movs	r1, #25
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
200053c0:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
200053c2:	4620      	mov	r0, r4
200053c4:	f7fe fc90 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
200053c8:	2800      	cmp	r0, #0
200053ca:	d149      	bne.n	20005460 <HAL_I2C_Mem_Read_IT+0x160>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
200053cc:	b2ed      	uxtb	r5, r5
200053ce:	6823      	ldr	r3, [r4, #0]
200053d0:	629d      	str	r5, [r3, #40]	; 0x28
200053d2:	e006      	b.n	200053e2 <HAL_I2C_Mem_Read_IT+0xe2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200053d4:	f7fc f968 	bl	200016a8 <HAL_GetTick>
200053d8:	eba0 0308 	sub.w	r3, r0, r8
200053dc:	2b19      	cmp	r3, #25
200053de:	d837      	bhi.n	20005450 <HAL_I2C_Mem_Read_IT+0x150>
200053e0:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200053e2:	699d      	ldr	r5, [r3, #24]
200053e4:	f015 0540 	ands.w	r5, r5, #64	; 0x40
200053e8:	d0f4      	beq.n	200053d4 <HAL_I2C_Mem_Read_IT+0xd4>
  MODIFY_REG(hi2c->Instance->CR2,
200053ea:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(hi2c);
200053ec:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2,
200053ee:	4923      	ldr	r1, [pc, #140]	; (2000547c <HAL_I2C_Mem_Read_IT+0x17c>)
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200053f0:	4d23      	ldr	r5, [pc, #140]	; (20005480 <HAL_I2C_Mem_Read_IT+0x180>)
  MODIFY_REG(hi2c->Instance->CR2,
200053f2:	400a      	ands	r2, r1
200053f4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
200053f8:	4316      	orrs	r6, r2
200053fa:	4a22      	ldr	r2, [pc, #136]	; (20005484 <HAL_I2C_Mem_Read_IT+0x184>)
200053fc:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20005400:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
20005402:	ea46 0909 	orr.w	r9, r6, r9
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20005406:	42a9      	cmp	r1, r5
  MODIFY_REG(hi2c->Instance->CR2,
20005408:	ea49 0202 	orr.w	r2, r9, r2
2000540c:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hi2c);
2000540e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20005412:	d003      	beq.n	2000541c <HAL_I2C_Mem_Read_IT+0x11c>
20005414:	4a1c      	ldr	r2, [pc, #112]	; (20005488 <HAL_I2C_Mem_Read_IT+0x188>)
20005416:	4291      	cmp	r1, r2
20005418:	bf18      	it	ne
2000541a:	27f4      	movne	r7, #244	; 0xf4
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2000541c:	681a      	ldr	r2, [r3, #0]
}
2000541e:	4650      	mov	r0, sl
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20005420:	4317      	orrs	r7, r2
20005422:	601f      	str	r7, [r3, #0]
}
20005424:	b003      	add	sp, #12
20005426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
2000542a:	f04f 0a02 	mov.w	sl, #2
}
2000542e:	4650      	mov	r0, sl
20005430:	b003      	add	sp, #12
20005432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
20005436:	f04f 0a01 	mov.w	sl, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000543a:	f44f 7300 	mov.w	r3, #512	; 0x200
}
2000543e:	4650      	mov	r0, sl
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20005440:	6463      	str	r3, [r4, #68]	; 0x44
}
20005442:	b003      	add	sp, #12
20005444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
20005448:	21ff      	movs	r1, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
2000544a:	f04f 7980 	mov.w	r9, #16777216	; 0x1000000
2000544e:	e793      	b.n	20005378 <HAL_I2C_Mem_Read_IT+0x78>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20005450:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20005452:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20005454:	4313      	orrs	r3, r2
20005456:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20005458:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2000545c:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      return HAL_ERROR;
20005460:	f04f 0a01 	mov.w	sl, #1
      __HAL_UNLOCK(hi2c);
20005464:	2300      	movs	r3, #0
}
20005466:	4650      	mov	r0, sl
      __HAL_UNLOCK(hi2c);
20005468:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
2000546c:	b003      	add	sp, #12
2000546e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20005472:	bf00      	nop
20005474:	ffff0000 	.word	0xffff0000
20005478:	20006f45 	.word	0x20006f45
2000547c:	fc009800 	.word	0xfc009800
20005480:	20007181 	.word	0x20007181
20005484:	80002400 	.word	0x80002400
20005488:	200072f9 	.word	0x200072f9
2000548c:	80002000 	.word	0x80002000

20005490 <HAL_I2C_Mem_Write_DMA>:
{
20005490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
20005494:	4615      	mov	r5, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
20005496:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
2000549a:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
2000549e:	2a20      	cmp	r2, #32
200054a0:	f040 80a1 	bne.w	200055e6 <HAL_I2C_Mem_Write_DMA+0x156>
    if ((pData == NULL) || (Size == 0U))
200054a4:	461f      	mov	r7, r3
200054a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
200054a8:	4604      	mov	r4, r0
200054aa:	2b00      	cmp	r3, #0
200054ac:	f000 809e 	beq.w	200055ec <HAL_I2C_Mem_Write_DMA+0x15c>
200054b0:	f1bb 0f00 	cmp.w	fp, #0
200054b4:	f000 809a 	beq.w	200055ec <HAL_I2C_Mem_Write_DMA+0x15c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
200054b8:	6802      	ldr	r2, [r0, #0]
200054ba:	6992      	ldr	r2, [r2, #24]
200054bc:	f412 4900 	ands.w	r9, r2, #32768	; 0x8000
200054c0:	f040 8091 	bne.w	200055e6 <HAL_I2C_Mem_Write_DMA+0x156>
    __HAL_LOCK(hi2c);
200054c4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
200054c8:	2a01      	cmp	r2, #1
200054ca:	f000 808c 	beq.w	200055e6 <HAL_I2C_Mem_Write_DMA+0x156>
200054ce:	2201      	movs	r2, #1
200054d0:	460e      	mov	r6, r1
    hi2c->XferISR     = I2C_Master_ISR_DMA;
200054d2:	f8df a190 	ldr.w	sl, [pc, #400]	; 20005664 <HAL_I2C_Mem_Write_DMA+0x1d4>
    __HAL_LOCK(hi2c);
200054d6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
200054da:	f7fc f8e5 	bl	200016a8 <HAL_GetTick>
    hi2c->Mode        = HAL_I2C_MODE_MEM;
200054de:	2240      	movs	r2, #64	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
200054e0:	2121      	movs	r1, #33	; 0x21
    hi2c->pBuffPtr    = pData;
200054e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    tickstart = HAL_GetTick();
200054e4:	4680      	mov	r8, r0
    hi2c->XferISR     = I2C_Master_ISR_DMA;
200054e6:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
200054ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
200054ee:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200054f2:	4a58      	ldr	r2, [pc, #352]	; (20005654 <HAL_I2C_Mem_Write_DMA+0x1c4>)
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
200054f4:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
200054f8:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200054fc:	62e2      	str	r2, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200054fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
20005500:	6263      	str	r3, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005502:	b292      	uxth	r2, r2
20005504:	2aff      	cmp	r2, #255	; 0xff
20005506:	d877      	bhi.n	200055f8 <HAL_I2C_Mem_Write_DMA+0x168>
      hi2c->XferSize = hi2c->XferCount;
20005508:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
2000550a:	f04f 7b00 	mov.w	fp, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
2000550e:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
20005510:	6823      	ldr	r3, [r4, #0]
20005512:	b2f8      	uxtb	r0, r7
20005514:	f8df e150 	ldr.w	lr, [pc, #336]	; 20005668 <HAL_I2C_Mem_Write_DMA+0x1d8>
20005518:	f3c6 0609 	ubfx	r6, r6, #0, #10
2000551c:	685a      	ldr	r2, [r3, #4]
2000551e:	8521      	strh	r1, [r4, #40]	; 0x28
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005520:	2119      	movs	r1, #25
  MODIFY_REG(hi2c->Instance->CR2,
20005522:	ea02 020e 	and.w	r2, r2, lr
20005526:	f8df e144 	ldr.w	lr, [pc, #324]	; 2000566c <HAL_I2C_Mem_Write_DMA+0x1dc>
2000552a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2000552e:	4642      	mov	r2, r8
  MODIFY_REG(hi2c->Instance->CR2,
20005530:	4330      	orrs	r0, r6
20005532:	ea40 0e0e 	orr.w	lr, r0, lr
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005536:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
20005538:	f8c3 e004 	str.w	lr, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2000553c:	f7fe fbd4 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
20005540:	2800      	cmp	r0, #0
20005542:	d165      	bne.n	20005610 <HAL_I2C_Mem_Write_DMA+0x180>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
20005544:	2f01      	cmp	r7, #1
20005546:	d009      	beq.n	2000555c <HAL_I2C_Mem_Write_DMA+0xcc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
20005548:	0a28      	lsrs	r0, r5, #8
2000554a:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2000554c:	4642      	mov	r2, r8
2000554e:	2119      	movs	r1, #25
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
20005550:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005552:	4620      	mov	r0, r4
20005554:	f7fe fbc8 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
20005558:	2800      	cmp	r0, #0
2000555a:	d159      	bne.n	20005610 <HAL_I2C_Mem_Write_DMA+0x180>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2000555c:	b2ed      	uxtb	r5, r5
2000555e:	6822      	ldr	r2, [r4, #0]
20005560:	6295      	str	r5, [r2, #40]	; 0x28
20005562:	e006      	b.n	20005572 <HAL_I2C_Mem_Write_DMA+0xe2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20005564:	f7fc f8a0 	bl	200016a8 <HAL_GetTick>
20005568:	eba0 0008 	sub.w	r0, r0, r8
2000556c:	2819      	cmp	r0, #25
2000556e:	d847      	bhi.n	20005600 <HAL_I2C_Mem_Write_DMA+0x170>
20005570:	6822      	ldr	r2, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20005572:	6995      	ldr	r5, [r2, #24]
20005574:	f015 0580 	ands.w	r5, r5, #128	; 0x80
20005578:	d0f4      	beq.n	20005564 <HAL_I2C_Mem_Write_DMA+0xd4>
    if (hi2c->hdmatx != NULL)
2000557a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2000557c:	2b00      	cmp	r3, #0
2000557e:	d059      	beq.n	20005634 <HAL_I2C_Mem_Write_DMA+0x1a4>
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
20005580:	2500      	movs	r5, #0
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20005582:	4835      	ldr	r0, [pc, #212]	; (20005658 <HAL_I2C_Mem_Write_DMA+0x1c8>)
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
20005584:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 20005670 <HAL_I2C_Mem_Write_DMA+0x1e0>
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
20005588:	3228      	adds	r2, #40	; 0x28
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2000558a:	64d8      	str	r0, [r3, #76]	; 0x4c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
2000558c:	4618      	mov	r0, r3
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2000558e:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
20005592:	641d      	str	r5, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
20005594:	651d      	str	r5, [r3, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
20005596:	990a      	ldr	r1, [sp, #40]	; 0x28
20005598:	8d23      	ldrh	r3, [r4, #40]	; 0x28
2000559a:	f7fc fbd3 	bl	20001d44 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
2000559e:	2800      	cmp	r0, #0
200055a0:	d13b      	bne.n	2000561a <HAL_I2C_Mem_Write_DMA+0x18a>
  MODIFY_REG(hi2c->Instance->CR2,
200055a2:	6822      	ldr	r2, [r4, #0]
200055a4:	492d      	ldr	r1, [pc, #180]	; (2000565c <HAL_I2C_Mem_Write_DMA+0x1cc>)
200055a6:	6853      	ldr	r3, [r2, #4]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
200055a8:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
200055aa:	400b      	ands	r3, r1
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200055ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
200055ae:	4333      	orrs	r3, r6
200055b0:	b2ee      	uxtb	r6, r5
200055b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200055b6:	4e2a      	ldr	r6, [pc, #168]	; (20005660 <HAL_I2C_Mem_Write_DMA+0x1d0>)
  MODIFY_REG(hi2c->Instance->CR2,
200055b8:	ea43 030b 	orr.w	r3, r3, fp
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200055bc:	42b1      	cmp	r1, r6
  MODIFY_REG(hi2c->Instance->CR2,
200055be:	6053      	str	r3, [r2, #4]
      hi2c->XferCount -= hi2c->XferSize;
200055c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
200055c2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->XferCount -= hi2c->XferSize;
200055c6:	eba3 0305 	sub.w	r3, r3, r5
200055ca:	b29b      	uxth	r3, r3
200055cc:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200055ce:	d03e      	beq.n	2000564e <HAL_I2C_Mem_Write_DMA+0x1be>
200055d0:	4551      	cmp	r1, sl
200055d2:	d03c      	beq.n	2000564e <HAL_I2C_Mem_Write_DMA+0x1be>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200055d4:	6813      	ldr	r3, [r2, #0]
200055d6:	ea43 0309 	orr.w	r3, r3, r9
200055da:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
200055dc:	6813      	ldr	r3, [r2, #0]
200055de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
200055e2:	6013      	str	r3, [r2, #0]
    return HAL_OK;
200055e4:	e000      	b.n	200055e8 <HAL_I2C_Mem_Write_DMA+0x158>
    return HAL_BUSY;
200055e6:	2002      	movs	r0, #2
}
200055e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200055ec:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
200055f0:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200055f2:	6463      	str	r3, [r4, #68]	; 0x44
}
200055f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
200055f8:	21ff      	movs	r1, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
200055fa:	f04f 7b80 	mov.w	fp, #16777216	; 0x1000000
200055fe:	e787      	b.n	20005510 <HAL_I2C_Mem_Write_DMA+0x80>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20005600:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20005602:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20005604:	4313      	orrs	r3, r2
20005606:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
20005608:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2000560c:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
20005610:	2300      	movs	r3, #0
      return HAL_ERROR;
20005612:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
20005614:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
20005618:	e7e6      	b.n	200055e8 <HAL_I2C_Mem_Write_DMA+0x158>
      hi2c->State     = HAL_I2C_STATE_READY;
2000561a:	2320      	movs	r3, #32
      return HAL_ERROR;
2000561c:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
2000561e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      hi2c->State     = HAL_I2C_STATE_READY;
20005622:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20005626:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2000562a:	6c63      	ldr	r3, [r4, #68]	; 0x44
2000562c:	f043 0310 	orr.w	r3, r3, #16
20005630:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
20005632:	e7d9      	b.n	200055e8 <HAL_I2C_Mem_Write_DMA+0x158>
      hi2c->State     = HAL_I2C_STATE_READY;
20005634:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
20005636:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
2000563a:	2001      	movs	r0, #1
      hi2c->State     = HAL_I2C_STATE_READY;
2000563c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20005640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20005644:	6c63      	ldr	r3, [r4, #68]	; 0x44
20005646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000564a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
2000564c:	e7cc      	b.n	200055e8 <HAL_I2C_Mem_Write_DMA+0x158>
2000564e:	f04f 0990 	mov.w	r9, #144	; 0x90
20005652:	e7bf      	b.n	200055d4 <HAL_I2C_Mem_Write_DMA+0x144>
20005654:	ffff0000 	.word	0xffff0000
20005658:	20007519 	.word	0x20007519
2000565c:	fc009c00 	.word	0xfc009c00
20005660:	20007181 	.word	0x20007181
20005664:	200072f9 	.word	0x200072f9
20005668:	fc009800 	.word	0xfc009800
2000566c:	81002000 	.word	0x81002000
20005670:	2000757d 	.word	0x2000757d

20005674 <HAL_I2C_Mem_Read_DMA>:
{
20005674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
20005678:	4615      	mov	r5, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
2000567a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
2000567e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
20005682:	2a20      	cmp	r2, #32
20005684:	f040 80a4 	bne.w	200057d0 <HAL_I2C_Mem_Read_DMA+0x15c>
    if ((pData == NULL) || (Size == 0U))
20005688:	461e      	mov	r6, r3
2000568a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000568c:	4604      	mov	r4, r0
2000568e:	2b00      	cmp	r3, #0
20005690:	f000 80a1 	beq.w	200057d6 <HAL_I2C_Mem_Read_DMA+0x162>
20005694:	f1ba 0f00 	cmp.w	sl, #0
20005698:	f000 809d 	beq.w	200057d6 <HAL_I2C_Mem_Read_DMA+0x162>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000569c:	6802      	ldr	r2, [r0, #0]
2000569e:	6992      	ldr	r2, [r2, #24]
200056a0:	f412 4800 	ands.w	r8, r2, #32768	; 0x8000
200056a4:	f040 8094 	bne.w	200057d0 <HAL_I2C_Mem_Read_DMA+0x15c>
    __HAL_LOCK(hi2c);
200056a8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
200056ac:	2a01      	cmp	r2, #1
200056ae:	f000 808f 	beq.w	200057d0 <HAL_I2C_Mem_Read_DMA+0x15c>
200056b2:	2201      	movs	r2, #1
200056b4:	460f      	mov	r7, r1
    hi2c->XferISR     = I2C_Master_ISR_DMA;
200056b6:	f8df 919c 	ldr.w	r9, [pc, #412]	; 20005854 <HAL_I2C_Mem_Read_DMA+0x1e0>
    __HAL_LOCK(hi2c);
200056ba:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
200056be:	f7fb fff3 	bl	200016a8 <HAL_GetTick>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200056c2:	4a5f      	ldr	r2, [pc, #380]	; (20005840 <HAL_I2C_Mem_Read_DMA+0x1cc>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
200056c4:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MEM;
200056c8:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr    = pData;
200056ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    tickstart = HAL_GetTick();
200056cc:	4683      	mov	fp, r0
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
200056ce:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
200056d2:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
200056d6:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
200056da:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200056de:	62e2      	str	r2, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200056e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
200056e2:	6263      	str	r3, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200056e4:	b292      	uxth	r2, r2
    hi2c->XferISR     = I2C_Master_ISR_DMA;
200056e6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200056ea:	2aff      	cmp	r2, #255	; 0xff
200056ec:	d879      	bhi.n	200057e2 <HAL_I2C_Mem_Read_DMA+0x16e>
      hi2c->XferSize = hi2c->XferCount;
200056ee:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
200056f0:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
200056f4:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
200056f6:	6823      	ldr	r3, [r4, #0]
200056f8:	b2f0      	uxtb	r0, r6
200056fa:	f8df e14c 	ldr.w	lr, [pc, #332]	; 20005848 <HAL_I2C_Mem_Read_DMA+0x1d4>
200056fe:	f3c7 0709 	ubfx	r7, r7, #0, #10
20005702:	685a      	ldr	r2, [r3, #4]
20005704:	8521      	strh	r1, [r4, #40]	; 0x28
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005706:	2119      	movs	r1, #25
  MODIFY_REG(hi2c->Instance->CR2,
20005708:	ea02 020e 	and.w	r2, r2, lr
2000570c:	f8df e148 	ldr.w	lr, [pc, #328]	; 20005858 <HAL_I2C_Mem_Read_DMA+0x1e4>
20005710:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005714:	465a      	mov	r2, fp
  MODIFY_REG(hi2c->Instance->CR2,
20005716:	4338      	orrs	r0, r7
20005718:	ea40 0e0e 	orr.w	lr, r0, lr
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2000571c:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
2000571e:	f8c3 e004 	str.w	lr, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005722:	f7fe fae1 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
20005726:	2800      	cmp	r0, #0
20005728:	d167      	bne.n	200057fa <HAL_I2C_Mem_Read_DMA+0x186>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2000572a:	2e01      	cmp	r6, #1
2000572c:	d009      	beq.n	20005742 <HAL_I2C_Mem_Read_DMA+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2000572e:	0a28      	lsrs	r0, r5, #8
20005730:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005732:	465a      	mov	r2, fp
20005734:	2119      	movs	r1, #25
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
20005736:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20005738:	4620      	mov	r0, r4
2000573a:	f7fe fad5 	bl	20003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
2000573e:	2800      	cmp	r0, #0
20005740:	d15b      	bne.n	200057fa <HAL_I2C_Mem_Read_DMA+0x186>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
20005742:	b2ed      	uxtb	r5, r5
20005744:	6821      	ldr	r1, [r4, #0]
20005746:	628d      	str	r5, [r1, #40]	; 0x28
20005748:	e006      	b.n	20005758 <HAL_I2C_Mem_Read_DMA+0xe4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000574a:	f7fb ffad 	bl	200016a8 <HAL_GetTick>
2000574e:	eba0 030b 	sub.w	r3, r0, fp
20005752:	2b19      	cmp	r3, #25
20005754:	d849      	bhi.n	200057ea <HAL_I2C_Mem_Read_DMA+0x176>
20005756:	6821      	ldr	r1, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20005758:	698d      	ldr	r5, [r1, #24]
2000575a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
2000575e:	d0f4      	beq.n	2000574a <HAL_I2C_Mem_Read_DMA+0xd6>
    if (hi2c->hdmarx != NULL)
20005760:	6be3      	ldr	r3, [r4, #60]	; 0x3c
20005762:	2b00      	cmp	r3, #0
20005764:	d05b      	beq.n	2000581e <HAL_I2C_Mem_Read_DMA+0x1aa>
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
20005766:	2500      	movs	r5, #0
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
20005768:	4836      	ldr	r0, [pc, #216]	; (20005844 <HAL_I2C_Mem_Read_DMA+0x1d0>)
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2000576a:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 2000585c <HAL_I2C_Mem_Read_DMA+0x1e8>
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
2000576e:	3124      	adds	r1, #36	; 0x24
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
20005770:	64d8      	str	r0, [r3, #76]	; 0x4c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20005772:	4618      	mov	r0, r3
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
20005774:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
20005778:	641d      	str	r5, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2000577a:	651d      	str	r5, [r3, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
2000577c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
2000577e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
20005780:	f7fc fae0 	bl	20001d44 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
20005784:	2800      	cmp	r0, #0
20005786:	d13d      	bne.n	20005804 <HAL_I2C_Mem_Read_DMA+0x190>
  MODIFY_REG(hi2c->Instance->CR2,
20005788:	6822      	ldr	r2, [r4, #0]
2000578a:	ea4a 0707 	orr.w	r7, sl, r7
2000578e:	492e      	ldr	r1, [pc, #184]	; (20005848 <HAL_I2C_Mem_Read_DMA+0x1d4>)
20005790:	6853      	ldr	r3, [r2, #4]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
20005792:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20005794:	400b      	ands	r3, r1
20005796:	492d      	ldr	r1, [pc, #180]	; (2000584c <HAL_I2C_Mem_Read_DMA+0x1d8>)
20005798:	b2ee      	uxtb	r6, r5
2000579a:	433b      	orrs	r3, r7
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2000579c:	4f2c      	ldr	r7, [pc, #176]	; (20005850 <HAL_I2C_Mem_Read_DMA+0x1dc>)
  MODIFY_REG(hi2c->Instance->CR2,
2000579e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200057a2:	6b66      	ldr	r6, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
200057a4:	4319      	orrs	r1, r3
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200057a6:	42be      	cmp	r6, r7
  MODIFY_REG(hi2c->Instance->CR2,
200057a8:	6051      	str	r1, [r2, #4]
      hi2c->XferCount -= hi2c->XferSize;
200057aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
200057ac:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->XferCount -= hi2c->XferSize;
200057b0:	eba3 0305 	sub.w	r3, r3, r5
200057b4:	b29b      	uxth	r3, r3
200057b6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200057b8:	d03e      	beq.n	20005838 <HAL_I2C_Mem_Read_DMA+0x1c4>
200057ba:	454e      	cmp	r6, r9
200057bc:	d03c      	beq.n	20005838 <HAL_I2C_Mem_Read_DMA+0x1c4>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200057be:	6813      	ldr	r3, [r2, #0]
200057c0:	ea43 0308 	orr.w	r3, r3, r8
200057c4:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
200057c6:	6813      	ldr	r3, [r2, #0]
200057c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
200057cc:	6013      	str	r3, [r2, #0]
    return HAL_OK;
200057ce:	e000      	b.n	200057d2 <HAL_I2C_Mem_Read_DMA+0x15e>
    return HAL_BUSY;
200057d0:	2002      	movs	r0, #2
}
200057d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200057d6:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
200057da:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200057dc:	6463      	str	r3, [r4, #68]	; 0x44
}
200057de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
200057e2:	21ff      	movs	r1, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
200057e4:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
200057e8:	e785      	b.n	200056f6 <HAL_I2C_Mem_Read_DMA+0x82>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
200057ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
200057ec:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
200057ee:	4313      	orrs	r3, r2
200057f0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
200057f2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
200057f6:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
200057fa:	2300      	movs	r3, #0
      return HAL_ERROR;
200057fc:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
200057fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
20005802:	e7e6      	b.n	200057d2 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
20005804:	2320      	movs	r3, #32
      return HAL_ERROR;
20005806:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
20005808:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      hi2c->State     = HAL_I2C_STATE_READY;
2000580c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20005810:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
20005814:	6c63      	ldr	r3, [r4, #68]	; 0x44
20005816:	f043 0310 	orr.w	r3, r3, #16
2000581a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
2000581c:	e7d9      	b.n	200057d2 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
2000581e:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
20005820:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
20005824:	2001      	movs	r0, #1
      hi2c->State     = HAL_I2C_STATE_READY;
20005826:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2000582a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000582e:	6c63      	ldr	r3, [r4, #68]	; 0x44
20005830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20005834:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
20005836:	e7cc      	b.n	200057d2 <HAL_I2C_Mem_Read_DMA+0x15e>
20005838:	f04f 0890 	mov.w	r8, #144	; 0x90
2000583c:	e7bf      	b.n	200057be <HAL_I2C_Mem_Read_DMA+0x14a>
2000583e:	bf00      	nop
20005840:	ffff0000 	.word	0xffff0000
20005844:	20007519 	.word	0x20007519
20005848:	fc009800 	.word	0xfc009800
2000584c:	80002400 	.word	0x80002400
20005850:	20007181 	.word	0x20007181
20005854:	200072f9 	.word	0x200072f9
20005858:	80002000 	.word	0x80002000
2000585c:	20007615 	.word	0x20007615

20005860 <HAL_I2C_IsDeviceReady>:
{
20005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t I2C_Trials = 0UL;
20005864:	2400      	movs	r4, #0
{
20005866:	b083      	sub	sp, #12
20005868:	4682      	mov	sl, r0
  __IO uint32_t I2C_Trials = 0UL;
2000586a:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
2000586c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
20005870:	2820      	cmp	r0, #32
20005872:	d15f      	bne.n	20005934 <HAL_I2C_IsDeviceReady+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
20005874:	f8da 4000 	ldr.w	r4, [sl]
20005878:	461f      	mov	r7, r3
2000587a:	69a3      	ldr	r3, [r4, #24]
2000587c:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
20005880:	d158      	bne.n	20005934 <HAL_I2C_IsDeviceReady+0xd4>
20005882:	4690      	mov	r8, r2
    __HAL_LOCK(hi2c);
20005884:	f89a 2040 	ldrb.w	r2, [sl, #64]	; 0x40
20005888:	2a01      	cmp	r2, #1
2000588a:	d053      	beq.n	20005934 <HAL_I2C_IsDeviceReady+0xd4>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
2000588c:	f3c1 0209 	ubfx	r2, r1, #0, #10
20005890:	f8df 9168 	ldr.w	r9, [pc, #360]	; 200059fc <HAL_I2C_IsDeviceReady+0x19c>
    hi2c->State = HAL_I2C_STATE_BUSY;
20005894:	2024      	movs	r0, #36	; 0x24
20005896:	4693      	mov	fp, r2
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
20005898:	ea42 0909 	orr.w	r9, r2, r9
    __HAL_LOCK(hi2c);
2000589c:	2201      	movs	r2, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
2000589e:	f88a 0041 	strb.w	r0, [sl, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200058a2:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    __HAL_LOCK(hi2c);
200058a6:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
200058aa:	f8da 300c 	ldr.w	r3, [sl, #12]
200058ae:	2b01      	cmp	r3, #1
200058b0:	bf0c      	ite	eq
200058b2:	464b      	moveq	r3, r9
200058b4:	f44b 5320 	orrne.w	r3, fp, #10240	; 0x2800
200058b8:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
200058ba:	f7fb fef5 	bl	200016a8 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
200058be:	f8da 4000 	ldr.w	r4, [sl]
      tickstart = HAL_GetTick();
200058c2:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
200058c4:	69a2      	ldr	r2, [r4, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
200058c6:	69a3      	ldr	r3, [r4, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
200058c8:	f002 0220 	and.w	r2, r2, #32
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
200058cc:	f003 0310 	and.w	r3, r3, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
200058d0:	4313      	orrs	r3, r2
200058d2:	d10a      	bne.n	200058ea <HAL_I2C_IsDeviceReady+0x8a>
200058d4:	1c7b      	adds	r3, r7, #1
200058d6:	d13d      	bne.n	20005954 <HAL_I2C_IsDeviceReady+0xf4>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
200058d8:	69a1      	ldr	r1, [r4, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
200058da:	69a5      	ldr	r5, [r4, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
200058dc:	f001 0120 	and.w	r1, r1, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
200058e0:	f005 0510 	and.w	r5, r5, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
200058e4:	ea55 0301 	orrs.w	r3, r5, r1
200058e8:	d0f6      	beq.n	200058d8 <HAL_I2C_IsDeviceReady+0x78>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
200058ea:	69a3      	ldr	r3, [r4, #24]
200058ec:	06dd      	lsls	r5, r3, #27
200058ee:	d567      	bpl.n	200059c0 <HAL_I2C_IsDeviceReady+0x160>
200058f0:	1c7b      	adds	r3, r7, #1
200058f2:	d135      	bne.n	20005960 <HAL_I2C_IsDeviceReady+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200058f4:	69a3      	ldr	r3, [r4, #24]
200058f6:	069d      	lsls	r5, r3, #26
200058f8:	d5fc      	bpl.n	200058f4 <HAL_I2C_IsDeviceReady+0x94>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
200058fa:	2320      	movs	r3, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
200058fc:	2210      	movs	r2, #16
200058fe:	61e2      	str	r2, [r4, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20005900:	61e3      	str	r3, [r4, #28]
      if (I2C_Trials == Trials)
20005902:	9b01      	ldr	r3, [sp, #4]
20005904:	4543      	cmp	r3, r8
20005906:	d038      	beq.n	2000597a <HAL_I2C_IsDeviceReady+0x11a>
      I2C_Trials++;
20005908:	9b01      	ldr	r3, [sp, #4]
2000590a:	3301      	adds	r3, #1
2000590c:	9301      	str	r3, [sp, #4]
    } while (I2C_Trials < Trials);
2000590e:	9b01      	ldr	r3, [sp, #4]
20005910:	4543      	cmp	r3, r8
20005912:	d3ca      	bcc.n	200058aa <HAL_I2C_IsDeviceReady+0x4a>
    hi2c->State = HAL_I2C_STATE_READY;
20005914:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
20005916:	2200      	movs	r2, #0
    return HAL_ERROR;
20005918:	2001      	movs	r0, #1
    hi2c->State = HAL_I2C_STATE_READY;
2000591a:	f88a 3041 	strb.w	r3, [sl, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000591e:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
20005922:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20005926:	f043 0320 	orr.w	r3, r3, #32
2000592a:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
}
2000592e:	b003      	add	sp, #12
20005930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
20005934:	2002      	movs	r0, #2
}
20005936:	b003      	add	sp, #12
20005938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2000593c:	2f00      	cmp	r7, #0
2000593e:	d0e9      	beq.n	20005914 <HAL_I2C_IsDeviceReady+0xb4>
20005940:	f8da 4000 	ldr.w	r4, [sl]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
20005944:	69a2      	ldr	r2, [r4, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
20005946:	69a3      	ldr	r3, [r4, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
20005948:	f002 0220 	and.w	r2, r2, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2000594c:	f003 0310 	and.w	r3, r3, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
20005950:	4313      	orrs	r3, r2
20005952:	d1ca      	bne.n	200058ea <HAL_I2C_IsDeviceReady+0x8a>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
20005954:	f7fb fea8 	bl	200016a8 <HAL_GetTick>
20005958:	1b80      	subs	r0, r0, r6
2000595a:	42b8      	cmp	r0, r7
2000595c:	d9ee      	bls.n	2000593c <HAL_I2C_IsDeviceReady+0xdc>
2000595e:	e7d9      	b.n	20005914 <HAL_I2C_IsDeviceReady+0xb4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20005960:	69a3      	ldr	r3, [r4, #24]
20005962:	0698      	lsls	r0, r3, #26
20005964:	d4c9      	bmi.n	200058fa <HAL_I2C_IsDeviceReady+0x9a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20005966:	f7fb fe9f 	bl	200016a8 <HAL_GetTick>
2000596a:	1b80      	subs	r0, r0, r6
2000596c:	4287      	cmp	r7, r0
2000596e:	d335      	bcc.n	200059dc <HAL_I2C_IsDeviceReady+0x17c>
20005970:	2f00      	cmp	r7, #0
20005972:	d033      	beq.n	200059dc <HAL_I2C_IsDeviceReady+0x17c>
20005974:	f8da 4000 	ldr.w	r4, [sl]
20005978:	e7ba      	b.n	200058f0 <HAL_I2C_IsDeviceReady+0x90>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
2000597a:	6863      	ldr	r3, [r4, #4]
2000597c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20005980:	6063      	str	r3, [r4, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20005982:	1c79      	adds	r1, r7, #1
20005984:	d105      	bne.n	20005992 <HAL_I2C_IsDeviceReady+0x132>
20005986:	69a3      	ldr	r3, [r4, #24]
20005988:	069a      	lsls	r2, r3, #26
2000598a:	d5fc      	bpl.n	20005986 <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000598c:	2320      	movs	r3, #32
2000598e:	61e3      	str	r3, [r4, #28]
20005990:	e7ba      	b.n	20005908 <HAL_I2C_IsDeviceReady+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
20005992:	69a3      	ldr	r3, [r4, #24]
20005994:	069b      	lsls	r3, r3, #26
20005996:	d4f9      	bmi.n	2000598c <HAL_I2C_IsDeviceReady+0x12c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20005998:	f7fb fe86 	bl	200016a8 <HAL_GetTick>
2000599c:	1b80      	subs	r0, r0, r6
2000599e:	4287      	cmp	r7, r0
200059a0:	d31c      	bcc.n	200059dc <HAL_I2C_IsDeviceReady+0x17c>
200059a2:	b1df      	cbz	r7, 200059dc <HAL_I2C_IsDeviceReady+0x17c>
200059a4:	f8da 4000 	ldr.w	r4, [sl]
200059a8:	e7eb      	b.n	20005982 <HAL_I2C_IsDeviceReady+0x122>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200059aa:	69a3      	ldr	r3, [r4, #24]
200059ac:	069a      	lsls	r2, r3, #26
200059ae:	d40c      	bmi.n	200059ca <HAL_I2C_IsDeviceReady+0x16a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200059b0:	f7fb fe7a 	bl	200016a8 <HAL_GetTick>
200059b4:	1b80      	subs	r0, r0, r6
200059b6:	4287      	cmp	r7, r0
200059b8:	d310      	bcc.n	200059dc <HAL_I2C_IsDeviceReady+0x17c>
200059ba:	b17f      	cbz	r7, 200059dc <HAL_I2C_IsDeviceReady+0x17c>
200059bc:	f8da 4000 	ldr.w	r4, [sl]
200059c0:	1c78      	adds	r0, r7, #1
200059c2:	d1f2      	bne.n	200059aa <HAL_I2C_IsDeviceReady+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
200059c4:	69a3      	ldr	r3, [r4, #24]
200059c6:	0699      	lsls	r1, r3, #26
200059c8:	d5fc      	bpl.n	200059c4 <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
200059ca:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
200059cc:	2300      	movs	r3, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
200059ce:	61e2      	str	r2, [r4, #28]
        return HAL_OK;
200059d0:	4618      	mov	r0, r3
        hi2c->State = HAL_I2C_STATE_READY;
200059d2:	f88a 2041 	strb.w	r2, [sl, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
200059d6:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
        return HAL_OK;
200059da:	e7ac      	b.n	20005936 <HAL_I2C_IsDeviceReady+0xd6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
200059dc:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
200059e0:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
200059e2:	2200      	movs	r2, #0
          return HAL_ERROR;
200059e4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
200059e6:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
200059e8:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
200059ec:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
200059f0:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
200059f4:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
        return HAL_ERROR;
200059f8:	e79d      	b.n	20005936 <HAL_I2C_IsDeviceReady+0xd6>
200059fa:	bf00      	nop
200059fc:	02002000 	.word	0x02002000

20005a00 <HAL_I2C_Master_Seq_Transmit_IT>:
{
20005a00:	b470      	push	{r4, r5, r6}
20005a02:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
20005a04:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
20005a08:	2820      	cmp	r0, #32
20005a0a:	d159      	bne.n	20005ac0 <HAL_I2C_Master_Seq_Transmit_IT+0xc0>
    __HAL_LOCK(hi2c);
20005a0c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
20005a10:	2801      	cmp	r0, #1
20005a12:	d055      	beq.n	20005ac0 <HAL_I2C_Master_Seq_Transmit_IT+0xc0>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
20005a14:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20005a16:	2610      	movs	r6, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20005a18:	2500      	movs	r5, #0
    hi2c->pBuffPtr    = pData;
20005a1a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
20005a1c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    __HAL_LOCK(hi2c);
20005a20:	2001      	movs	r0, #1
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20005a22:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20005a26:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
20005a28:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
20005a2a:	9b03      	ldr	r3, [sp, #12]
    __HAL_LOCK(hi2c);
20005a2c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->XferOptions = XferOptions;
20005a30:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005a32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
20005a34:	4b29      	ldr	r3, [pc, #164]	; (20005adc <HAL_I2C_Master_Seq_Transmit_IT+0xdc>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005a36:	b292      	uxth	r2, r2
    hi2c->XferISR     = I2C_Master_ISR_IT;
20005a38:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005a3a:	2aff      	cmp	r2, #255	; 0xff
20005a3c:	d82b      	bhi.n	20005a96 <HAL_I2C_Master_Seq_Transmit_IT+0x96>
      hi2c->XferSize = hi2c->XferCount;
20005a3e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      xfermode = hi2c->XferOptions;
20005a40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005a42:	6b25      	ldr	r5, [r4, #48]	; 0x30
20005a44:	b2d3      	uxtb	r3, r2
      hi2c->XferSize = hi2c->XferCount;
20005a46:	b292      	uxth	r2, r2
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005a48:	2d11      	cmp	r5, #17
20005a4a:	fa03 f306 	lsl.w	r3, r3, r6
20005a4e:	8522      	strh	r2, [r4, #40]	; 0x28
20005a50:	d02a      	beq.n	20005aa8 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
20005a52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
20005a54:	2aaa      	cmp	r2, #170	; 0xaa
20005a56:	d03d      	beq.n	20005ad4 <HAL_I2C_Master_Seq_Transmit_IT+0xd4>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
20005a58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
20005a5a:	f5b2 4f2a 	cmp.w	r2, #43520	; 0xaa00
20005a5e:	d035      	beq.n	20005acc <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
20005a60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
20005a62:	b292      	uxth	r2, r2
20005a64:	2aff      	cmp	r2, #255	; 0xff
20005a66:	d82e      	bhi.n	20005ac6 <HAL_I2C_Master_Seq_Transmit_IT+0xc6>
        xfermode = hi2c->XferOptions;
20005a68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
20005a6a:	4e1d      	ldr	r6, [pc, #116]	; (20005ae0 <HAL_I2C_Master_Seq_Transmit_IT+0xe0>)
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
20005a6c:	4a1d      	ldr	r2, [pc, #116]	; (20005ae4 <HAL_I2C_Master_Seq_Transmit_IT+0xe4>)
  MODIFY_REG(hi2c->Instance->CR2,
20005a6e:	f3c1 0109 	ubfx	r1, r1, #0, #10
20005a72:	6825      	ldr	r5, [r4, #0]
20005a74:	430b      	orrs	r3, r1
20005a76:	6869      	ldr	r1, [r5, #4]
20005a78:	4303      	orrs	r3, r0
20005a7a:	4031      	ands	r1, r6
    __HAL_UNLOCK(hi2c);
20005a7c:	2600      	movs	r6, #0
  MODIFY_REG(hi2c->Instance->CR2,
20005a7e:	4313      	orrs	r3, r2
    return HAL_OK;
20005a80:	4630      	mov	r0, r6
  MODIFY_REG(hi2c->Instance->CR2,
20005a82:	430b      	orrs	r3, r1
20005a84:	606b      	str	r3, [r5, #4]
    __HAL_UNLOCK(hi2c);
20005a86:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20005a8a:	682b      	ldr	r3, [r5, #0]
20005a8c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
20005a90:	602b      	str	r3, [r5, #0]
}
20005a92:	bc70      	pop	{r4, r5, r6}
20005a94:	4770      	bx	lr
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005a96:	6b25      	ldr	r5, [r4, #48]	; 0x30
      hi2c->XferSize = MAX_NBYTE_SIZE;
20005a98:	22ff      	movs	r2, #255	; 0xff
20005a9a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
      xfermode = I2C_RELOAD_MODE;
20005a9e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005aa2:	2d11      	cmp	r5, #17
20005aa4:	8522      	strh	r2, [r4, #40]	; 0x28
20005aa6:	d1d4      	bne.n	20005a52 <HAL_I2C_Master_Seq_Transmit_IT+0x52>
20005aa8:	9a03      	ldr	r2, [sp, #12]
20005aaa:	2aaa      	cmp	r2, #170	; 0xaa
20005aac:	d0d1      	beq.n	20005a52 <HAL_I2C_Master_Seq_Transmit_IT+0x52>
20005aae:	f5a2 422a 	sub.w	r2, r2, #43520	; 0xaa00
20005ab2:	fab2 f282 	clz	r2, r2
20005ab6:	0952      	lsrs	r2, r2, #5
20005ab8:	2a00      	cmp	r2, #0
20005aba:	d1ca      	bne.n	20005a52 <HAL_I2C_Master_Seq_Transmit_IT+0x52>
20005abc:	4e0a      	ldr	r6, [pc, #40]	; (20005ae8 <HAL_I2C_Master_Seq_Transmit_IT+0xe8>)
20005abe:	e7d6      	b.n	20005a6e <HAL_I2C_Master_Seq_Transmit_IT+0x6e>
    return HAL_BUSY;
20005ac0:	2002      	movs	r0, #2
}
20005ac2:	bc70      	pop	{r4, r5, r6}
20005ac4:	4770      	bx	lr
20005ac6:	4e06      	ldr	r6, [pc, #24]	; (20005ae0 <HAL_I2C_Master_Seq_Transmit_IT+0xe0>)
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
20005ac8:	4a06      	ldr	r2, [pc, #24]	; (20005ae4 <HAL_I2C_Master_Seq_Transmit_IT+0xe4>)
20005aca:	e7d0      	b.n	20005a6e <HAL_I2C_Master_Seq_Transmit_IT+0x6e>
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
20005acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
20005ad0:	62e2      	str	r2, [r4, #44]	; 0x2c
20005ad2:	e7c5      	b.n	20005a60 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    hi2c->XferOptions = I2C_FIRST_FRAME;
20005ad4:	2200      	movs	r2, #0
20005ad6:	62e2      	str	r2, [r4, #44]	; 0x2c
20005ad8:	e7c2      	b.n	20005a60 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
20005ada:	bf00      	nop
20005adc:	20006f45 	.word	0x20006f45
20005ae0:	fc009800 	.word	0xfc009800
20005ae4:	80002000 	.word	0x80002000
20005ae8:	fc009c00 	.word	0xfc009c00

20005aec <HAL_I2C_Master_Seq_Transmit_DMA>:
{
20005aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20005af0:	460d      	mov	r5, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
20005af2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
20005af6:	2920      	cmp	r1, #32
20005af8:	f040 80a9 	bne.w	20005c4e <HAL_I2C_Master_Seq_Transmit_DMA+0x162>
    __HAL_LOCK(hi2c);
20005afc:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
20005b00:	4604      	mov	r4, r0
20005b02:	2901      	cmp	r1, #1
20005b04:	f000 80a3 	beq.w	20005c4e <HAL_I2C_Master_Seq_Transmit_DMA+0x162>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20005b08:	2110      	movs	r1, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
20005b0a:	2621      	movs	r6, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20005b0c:	2000      	movs	r0, #0
    hi2c->XferISR     = I2C_Master_ISR_DMA;
20005b0e:	4f64      	ldr	r7, [pc, #400]	; (20005ca0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1b4>)
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
20005b10:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20005b14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    __HAL_LOCK(hi2c);
20005b18:	2101      	movs	r1, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20005b1a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
20005b1c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
20005b1e:	9b08      	ldr	r3, [sp, #32]
    hi2c->pBuffPtr    = pData;
20005b20:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferOptions = XferOptions;
20005b22:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005b24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_LOCK(hi2c);
20005b26:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005b2a:	b29b      	uxth	r3, r3
    hi2c->XferISR     = I2C_Master_ISR_DMA;
20005b2c:	6367      	str	r7, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005b2e:	2bff      	cmp	r3, #255	; 0xff
20005b30:	d863      	bhi.n	20005bfa <HAL_I2C_Master_Seq_Transmit_DMA+0x10e>
      hi2c->XferSize = hi2c->XferCount;
20005b32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      xfermode = hi2c->XferOptions;
20005b34:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005b38:	6b21      	ldr	r1, [r4, #48]	; 0x30
      hi2c->XferSize = hi2c->XferCount;
20005b3a:	b29b      	uxth	r3, r3
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005b3c:	2911      	cmp	r1, #17
20005b3e:	8523      	strh	r3, [r4, #40]	; 0x28
20005b40:	d062      	beq.n	20005c08 <HAL_I2C_Master_Seq_Transmit_DMA+0x11c>
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
20005b42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
20005b44:	29aa      	cmp	r1, #170	; 0xaa
20005b46:	f000 8097 	beq.w	20005c78 <HAL_I2C_Master_Seq_Transmit_DMA+0x18c>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
20005b4a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
20005b4c:	f5b1 4f2a 	cmp.w	r1, #43520	; 0xaa00
20005b50:	d102      	bne.n	20005b58 <HAL_I2C_Master_Seq_Transmit_DMA+0x6c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
20005b52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
20005b56:	62e1      	str	r1, [r4, #44]	; 0x2c
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
20005b58:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
20005b5a:	b289      	uxth	r1, r1
20005b5c:	29ff      	cmp	r1, #255	; 0xff
20005b5e:	d879      	bhi.n	20005c54 <HAL_I2C_Master_Seq_Transmit_DMA+0x168>
        xfermode = hi2c->XferOptions;
20005b60:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
20005b64:	f8df a144 	ldr.w	sl, [pc, #324]	; 20005cac <HAL_I2C_Master_Seq_Transmit_DMA+0x1c0>
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
20005b68:	4e4e      	ldr	r6, [pc, #312]	; (20005ca4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1b8>)
    if (hi2c->XferSize > 0U)
20005b6a:	2b00      	cmp	r3, #0
20005b6c:	d05a      	beq.n	20005c24 <HAL_I2C_Master_Seq_Transmit_DMA+0x138>
      if (hi2c->hdmatx != NULL)
20005b6e:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
20005b72:	f1bc 0f00 	cmp.w	ip, #0
20005b76:	f000 8082 	beq.w	20005c7e <HAL_I2C_Master_Seq_Transmit_DMA+0x192>
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
20005b7a:	f04f 0800 	mov.w	r8, #0
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20005b7e:	484a      	ldr	r0, [pc, #296]	; (20005ca8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1bc>)
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
20005b80:	f8df e134 	ldr.w	lr, [pc, #308]	; 20005cb8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1cc>
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
20005b84:	4611      	mov	r1, r2
20005b86:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
20005b88:	f8cc e03c 	str.w	lr, [ip, #60]	; 0x3c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20005b8c:	f8cc 004c 	str.w	r0, [ip, #76]	; 0x4c
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
20005b90:	3228      	adds	r2, #40	; 0x28
20005b92:	4660      	mov	r0, ip
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
20005b94:	f8cc 8040 	str.w	r8, [ip, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
20005b98:	f8cc 8050 	str.w	r8, [ip, #80]	; 0x50
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
20005b9c:	f7fc f8d2 	bl	20001d44 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
20005ba0:	2800      	cmp	r0, #0
20005ba2:	d15b      	bne.n	20005c5c <HAL_I2C_Master_Seq_Transmit_DMA+0x170>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
20005ba4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20005ba6:	f3c5 0509 	ubfx	r5, r5, #0, #10
20005baa:	6823      	ldr	r3, [r4, #0]
20005bac:	fa5f fc82 	uxtb.w	ip, r2
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20005bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
20005bb2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
20005bb6:	f8d3 c004 	ldr.w	ip, [r3, #4]
20005bba:	ea45 0909 	orr.w	r9, r5, r9
20005bbe:	ea0c 0a0a 	and.w	sl, ip, sl
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20005bc2:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 20005cbc <HAL_I2C_Master_Seq_Transmit_DMA+0x1d0>
  MODIFY_REG(hi2c->Instance->CR2,
20005bc6:	ea49 0606 	orr.w	r6, r9, r6
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20005bca:	4561      	cmp	r1, ip
  MODIFY_REG(hi2c->Instance->CR2,
20005bcc:	ea46 060a 	orr.w	r6, r6, sl
20005bd0:	605e      	str	r6, [r3, #4]
        hi2c->XferCount -= hi2c->XferSize;
20005bd2:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
20005bd4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
        hi2c->XferCount -= hi2c->XferSize;
20005bd8:	eba5 0202 	sub.w	r2, r5, r2
20005bdc:	b292      	uxth	r2, r2
20005bde:	8562      	strh	r2, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20005be0:	d05b      	beq.n	20005c9a <HAL_I2C_Master_Seq_Transmit_DMA+0x1ae>
20005be2:	42b9      	cmp	r1, r7
20005be4:	d059      	beq.n	20005c9a <HAL_I2C_Master_Seq_Transmit_DMA+0x1ae>
20005be6:	4601      	mov	r1, r0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20005be8:	681a      	ldr	r2, [r3, #0]
20005bea:	430a      	orrs	r2, r1
20005bec:	601a      	str	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
20005bee:	681a      	ldr	r2, [r3, #0]
20005bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20005bf4:	601a      	str	r2, [r3, #0]
}
20005bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005bfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
      hi2c->XferSize = MAX_NBYTE_SIZE;
20005bfc:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
20005bfe:	f04f 7980 	mov.w	r9, #16777216	; 0x1000000
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005c02:	2911      	cmp	r1, #17
20005c04:	8523      	strh	r3, [r4, #40]	; 0x28
20005c06:	d19c      	bne.n	20005b42 <HAL_I2C_Master_Seq_Transmit_DMA+0x56>
20005c08:	9908      	ldr	r1, [sp, #32]
20005c0a:	29aa      	cmp	r1, #170	; 0xaa
20005c0c:	d099      	beq.n	20005b42 <HAL_I2C_Master_Seq_Transmit_DMA+0x56>
20005c0e:	f5a1 462a 	sub.w	r6, r1, #43520	; 0xaa00
20005c12:	fab6 f686 	clz	r6, r6
20005c16:	0976      	lsrs	r6, r6, #5
20005c18:	2e00      	cmp	r6, #0
20005c1a:	d192      	bne.n	20005b42 <HAL_I2C_Master_Seq_Transmit_DMA+0x56>
20005c1c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 20005cc0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
    if (hi2c->XferSize > 0U)
20005c20:	2b00      	cmp	r3, #0
20005c22:	d1a4      	bne.n	20005b6e <HAL_I2C_Master_Seq_Transmit_DMA+0x82>
  MODIFY_REG(hi2c->Instance->CR2,
20005c24:	6821      	ldr	r1, [r4, #0]
20005c26:	f3c5 0509 	ubfx	r5, r5, #0, #10
20005c2a:	4e20      	ldr	r6, [pc, #128]	; (20005cac <HAL_I2C_Master_Seq_Transmit_DMA+0x1c0>)
    return HAL_OK;
20005c2c:	4618      	mov	r0, r3
  MODIFY_REG(hi2c->Instance->CR2,
20005c2e:	684a      	ldr	r2, [r1, #4]
20005c30:	4032      	ands	r2, r6
20005c32:	4e1f      	ldr	r6, [pc, #124]	; (20005cb0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c4>)
20005c34:	4315      	orrs	r5, r2
      hi2c->XferISR = I2C_Master_ISR_IT;
20005c36:	4a1f      	ldr	r2, [pc, #124]	; (20005cb4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c8>)
  MODIFY_REG(hi2c->Instance->CR2,
20005c38:	432e      	orrs	r6, r5
      hi2c->XferISR = I2C_Master_ISR_IT;
20005c3a:	6362      	str	r2, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
20005c3c:	604e      	str	r6, [r1, #4]
      __HAL_UNLOCK(hi2c);
20005c3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20005c42:	680b      	ldr	r3, [r1, #0]
20005c44:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
20005c48:	600b      	str	r3, [r1, #0]
}
20005c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
20005c4e:	2002      	movs	r0, #2
}
20005c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20005c54:	f8df a054 	ldr.w	sl, [pc, #84]	; 20005cac <HAL_I2C_Master_Seq_Transmit_DMA+0x1c0>
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
20005c58:	4e12      	ldr	r6, [pc, #72]	; (20005ca4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1b8>)
20005c5a:	e786      	b.n	20005b6a <HAL_I2C_Master_Seq_Transmit_DMA+0x7e>
        hi2c->State     = HAL_I2C_STATE_READY;
20005c5c:	2320      	movs	r3, #32
        return HAL_ERROR;
20005c5e:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
20005c60:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
        hi2c->State     = HAL_I2C_STATE_READY;
20005c64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20005c68:	f884 8042 	strb.w	r8, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
20005c6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
20005c6e:	f043 0310 	orr.w	r3, r3, #16
20005c72:	6463      	str	r3, [r4, #68]	; 0x44
}
20005c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->XferOptions = I2C_FIRST_FRAME;
20005c78:	2100      	movs	r1, #0
20005c7a:	62e1      	str	r1, [r4, #44]	; 0x2c
20005c7c:	e76c      	b.n	20005b58 <HAL_I2C_Master_Seq_Transmit_DMA+0x6c>
        hi2c->State     = HAL_I2C_STATE_READY;
20005c7e:	2320      	movs	r3, #32
        return HAL_ERROR;
20005c80:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
20005c82:	f884 c040 	strb.w	ip, [r4, #64]	; 0x40
        hi2c->State     = HAL_I2C_STATE_READY;
20005c86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20005c8a:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20005c8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
20005c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20005c94:	6463      	str	r3, [r4, #68]	; 0x44
}
20005c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20005c9a:	2190      	movs	r1, #144	; 0x90
20005c9c:	e7a4      	b.n	20005be8 <HAL_I2C_Master_Seq_Transmit_DMA+0xfc>
20005c9e:	bf00      	nop
20005ca0:	200072f9 	.word	0x200072f9
20005ca4:	80002000 	.word	0x80002000
20005ca8:	20007519 	.word	0x20007519
20005cac:	fc009800 	.word	0xfc009800
20005cb0:	82002000 	.word	0x82002000
20005cb4:	20006f45 	.word	0x20006f45
20005cb8:	2000757d 	.word	0x2000757d
20005cbc:	20007181 	.word	0x20007181
20005cc0:	fc009c00 	.word	0xfc009c00

20005cc4 <HAL_I2C_Master_Seq_Receive_IT>:
{
20005cc4:	b470      	push	{r4, r5, r6}
20005cc6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
20005cc8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
20005ccc:	2820      	cmp	r0, #32
20005cce:	d159      	bne.n	20005d84 <HAL_I2C_Master_Seq_Receive_IT+0xc0>
    __HAL_LOCK(hi2c);
20005cd0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
20005cd4:	2801      	cmp	r0, #1
20005cd6:	d055      	beq.n	20005d84 <HAL_I2C_Master_Seq_Receive_IT+0xc0>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
20005cd8:	2022      	movs	r0, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20005cda:	2610      	movs	r6, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20005cdc:	2500      	movs	r5, #0
    hi2c->pBuffPtr    = pData;
20005cde:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
20005ce0:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    __HAL_LOCK(hi2c);
20005ce4:	2001      	movs	r0, #1
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20005ce6:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20005cea:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
20005cec:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
20005cee:	9b03      	ldr	r3, [sp, #12]
    __HAL_LOCK(hi2c);
20005cf0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->XferOptions = XferOptions;
20005cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005cf6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
20005cf8:	4b29      	ldr	r3, [pc, #164]	; (20005da0 <HAL_I2C_Master_Seq_Receive_IT+0xdc>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005cfa:	b292      	uxth	r2, r2
    hi2c->XferISR     = I2C_Master_ISR_IT;
20005cfc:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005cfe:	2aff      	cmp	r2, #255	; 0xff
20005d00:	d82b      	bhi.n	20005d5a <HAL_I2C_Master_Seq_Receive_IT+0x96>
      hi2c->XferSize = hi2c->XferCount;
20005d02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      xfermode = hi2c->XferOptions;
20005d04:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005d06:	6b25      	ldr	r5, [r4, #48]	; 0x30
20005d08:	b2d3      	uxtb	r3, r2
      hi2c->XferSize = hi2c->XferCount;
20005d0a:	b292      	uxth	r2, r2
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005d0c:	2d12      	cmp	r5, #18
20005d0e:	fa03 f306 	lsl.w	r3, r3, r6
20005d12:	8522      	strh	r2, [r4, #40]	; 0x28
20005d14:	d02a      	beq.n	20005d6c <HAL_I2C_Master_Seq_Receive_IT+0xa8>
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
20005d16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
20005d18:	2aaa      	cmp	r2, #170	; 0xaa
20005d1a:	d03d      	beq.n	20005d98 <HAL_I2C_Master_Seq_Receive_IT+0xd4>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
20005d1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
20005d1e:	f5b2 4f2a 	cmp.w	r2, #43520	; 0xaa00
20005d22:	d035      	beq.n	20005d90 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
20005d24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
20005d26:	b292      	uxth	r2, r2
20005d28:	2aff      	cmp	r2, #255	; 0xff
20005d2a:	d82e      	bhi.n	20005d8a <HAL_I2C_Master_Seq_Receive_IT+0xc6>
        xfermode = hi2c->XferOptions;
20005d2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
20005d2e:	4e1d      	ldr	r6, [pc, #116]	; (20005da4 <HAL_I2C_Master_Seq_Receive_IT+0xe0>)
  uint32_t xferrequest = I2C_GENERATE_START_READ;
20005d30:	4a1d      	ldr	r2, [pc, #116]	; (20005da8 <HAL_I2C_Master_Seq_Receive_IT+0xe4>)
  MODIFY_REG(hi2c->Instance->CR2,
20005d32:	f3c1 0109 	ubfx	r1, r1, #0, #10
20005d36:	6825      	ldr	r5, [r4, #0]
20005d38:	430b      	orrs	r3, r1
20005d3a:	6869      	ldr	r1, [r5, #4]
20005d3c:	4303      	orrs	r3, r0
20005d3e:	4031      	ands	r1, r6
    __HAL_UNLOCK(hi2c);
20005d40:	2600      	movs	r6, #0
  MODIFY_REG(hi2c->Instance->CR2,
20005d42:	4313      	orrs	r3, r2
    return HAL_OK;
20005d44:	4630      	mov	r0, r6
  MODIFY_REG(hi2c->Instance->CR2,
20005d46:	430b      	orrs	r3, r1
20005d48:	606b      	str	r3, [r5, #4]
    __HAL_UNLOCK(hi2c);
20005d4a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20005d4e:	682b      	ldr	r3, [r5, #0]
20005d50:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
20005d54:	602b      	str	r3, [r5, #0]
}
20005d56:	bc70      	pop	{r4, r5, r6}
20005d58:	4770      	bx	lr
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005d5a:	6b25      	ldr	r5, [r4, #48]	; 0x30
      hi2c->XferSize = MAX_NBYTE_SIZE;
20005d5c:	22ff      	movs	r2, #255	; 0xff
20005d5e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
      xfermode = I2C_RELOAD_MODE;
20005d62:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005d66:	2d12      	cmp	r5, #18
20005d68:	8522      	strh	r2, [r4, #40]	; 0x28
20005d6a:	d1d4      	bne.n	20005d16 <HAL_I2C_Master_Seq_Receive_IT+0x52>
20005d6c:	9a03      	ldr	r2, [sp, #12]
20005d6e:	2aaa      	cmp	r2, #170	; 0xaa
20005d70:	d0d1      	beq.n	20005d16 <HAL_I2C_Master_Seq_Receive_IT+0x52>
20005d72:	f5a2 422a 	sub.w	r2, r2, #43520	; 0xaa00
20005d76:	fab2 f282 	clz	r2, r2
20005d7a:	0952      	lsrs	r2, r2, #5
20005d7c:	2a00      	cmp	r2, #0
20005d7e:	d1ca      	bne.n	20005d16 <HAL_I2C_Master_Seq_Receive_IT+0x52>
20005d80:	4e0a      	ldr	r6, [pc, #40]	; (20005dac <HAL_I2C_Master_Seq_Receive_IT+0xe8>)
20005d82:	e7d6      	b.n	20005d32 <HAL_I2C_Master_Seq_Receive_IT+0x6e>
    return HAL_BUSY;
20005d84:	2002      	movs	r0, #2
}
20005d86:	bc70      	pop	{r4, r5, r6}
20005d88:	4770      	bx	lr
20005d8a:	4e06      	ldr	r6, [pc, #24]	; (20005da4 <HAL_I2C_Master_Seq_Receive_IT+0xe0>)
  uint32_t xferrequest = I2C_GENERATE_START_READ;
20005d8c:	4a06      	ldr	r2, [pc, #24]	; (20005da8 <HAL_I2C_Master_Seq_Receive_IT+0xe4>)
20005d8e:	e7d0      	b.n	20005d32 <HAL_I2C_Master_Seq_Receive_IT+0x6e>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
20005d90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
20005d94:	62e2      	str	r2, [r4, #44]	; 0x2c
20005d96:	e7c5      	b.n	20005d24 <HAL_I2C_Master_Seq_Receive_IT+0x60>
    hi2c->XferOptions = I2C_FIRST_FRAME;
20005d98:	2200      	movs	r2, #0
20005d9a:	62e2      	str	r2, [r4, #44]	; 0x2c
20005d9c:	e7c2      	b.n	20005d24 <HAL_I2C_Master_Seq_Receive_IT+0x60>
20005d9e:	bf00      	nop
20005da0:	20006f45 	.word	0x20006f45
20005da4:	fc009800 	.word	0xfc009800
20005da8:	80002400 	.word	0x80002400
20005dac:	fc009c00 	.word	0xfc009c00

20005db0 <HAL_I2C_Master_Seq_Receive_DMA>:
{
20005db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20005db4:	460d      	mov	r5, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
20005db6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
20005dba:	2920      	cmp	r1, #32
20005dbc:	f040 80a6 	bne.w	20005f0c <HAL_I2C_Master_Seq_Receive_DMA+0x15c>
    __HAL_LOCK(hi2c);
20005dc0:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
20005dc4:	4604      	mov	r4, r0
20005dc6:	2901      	cmp	r1, #1
20005dc8:	f000 80a0 	beq.w	20005f0c <HAL_I2C_Master_Seq_Receive_DMA+0x15c>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20005dcc:	2110      	movs	r1, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
20005dce:	2622      	movs	r6, #34	; 0x22
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20005dd0:	2000      	movs	r0, #0
    hi2c->XferISR     = I2C_Master_ISR_DMA;
20005dd2:	4f62      	ldr	r7, [pc, #392]	; (20005f5c <HAL_I2C_Master_Seq_Receive_DMA+0x1ac>)
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
20005dd4:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20005dd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    __HAL_LOCK(hi2c);
20005ddc:	2101      	movs	r1, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20005dde:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
20005de0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
20005de2:	9b08      	ldr	r3, [sp, #32]
    hi2c->pBuffPtr    = pData;
20005de4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferOptions = XferOptions;
20005de6:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005de8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_LOCK(hi2c);
20005dea:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005dee:	b29b      	uxth	r3, r3
    hi2c->XferISR     = I2C_Master_ISR_DMA;
20005df0:	6367      	str	r7, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20005df2:	2bff      	cmp	r3, #255	; 0xff
20005df4:	d860      	bhi.n	20005eb8 <HAL_I2C_Master_Seq_Receive_DMA+0x108>
      hi2c->XferSize = hi2c->XferCount;
20005df6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      xfermode = hi2c->XferOptions;
20005df8:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005dfc:	6b21      	ldr	r1, [r4, #48]	; 0x30
      hi2c->XferSize = hi2c->XferCount;
20005dfe:	b29b      	uxth	r3, r3
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005e00:	2912      	cmp	r1, #18
20005e02:	8523      	strh	r3, [r4, #40]	; 0x28
20005e04:	d05f      	beq.n	20005ec6 <HAL_I2C_Master_Seq_Receive_DMA+0x116>
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
20005e06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
20005e08:	29aa      	cmp	r1, #170	; 0xaa
20005e0a:	f000 8094 	beq.w	20005f36 <HAL_I2C_Master_Seq_Receive_DMA+0x186>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
20005e0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
20005e10:	f5b1 4f2a 	cmp.w	r1, #43520	; 0xaa00
20005e14:	d102      	bne.n	20005e1c <HAL_I2C_Master_Seq_Receive_DMA+0x6c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
20005e16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
20005e1a:	62e1      	str	r1, [r4, #44]	; 0x2c
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
20005e1c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
20005e1e:	b289      	uxth	r1, r1
20005e20:	29ff      	cmp	r1, #255	; 0xff
20005e22:	d876      	bhi.n	20005f12 <HAL_I2C_Master_Seq_Receive_DMA+0x162>
        xfermode = hi2c->XferOptions;
20005e24:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
20005e28:	f8df a140 	ldr.w	sl, [pc, #320]	; 20005f6c <HAL_I2C_Master_Seq_Receive_DMA+0x1bc>
  uint32_t xferrequest = I2C_GENERATE_START_READ;
20005e2c:	4e4c      	ldr	r6, [pc, #304]	; (20005f60 <HAL_I2C_Master_Seq_Receive_DMA+0x1b0>)
    if (hi2c->XferSize > 0U)
20005e2e:	2b00      	cmp	r3, #0
20005e30:	d057      	beq.n	20005ee2 <HAL_I2C_Master_Seq_Receive_DMA+0x132>
      if (hi2c->hdmarx != NULL)
20005e32:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
20005e36:	f1bc 0f00 	cmp.w	ip, #0
20005e3a:	d07f      	beq.n	20005f3c <HAL_I2C_Master_Seq_Receive_DMA+0x18c>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
20005e3c:	4949      	ldr	r1, [pc, #292]	; (20005f64 <HAL_I2C_Master_Seq_Receive_DMA+0x1b4>)
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
20005e3e:	f04f 0800 	mov.w	r8, #0
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
20005e42:	4849      	ldr	r0, [pc, #292]	; (20005f68 <HAL_I2C_Master_Seq_Receive_DMA+0x1b8>)
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
20005e44:	f8cc 103c 	str.w	r1, [ip, #60]	; 0x3c
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20005e48:	6821      	ldr	r1, [r4, #0]
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
20005e4a:	f8cc 004c 	str.w	r0, [ip, #76]	; 0x4c
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20005e4e:	4660      	mov	r0, ip
20005e50:	3124      	adds	r1, #36	; 0x24
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
20005e52:	f8cc 8040 	str.w	r8, [ip, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
20005e56:	f8cc 8050 	str.w	r8, [ip, #80]	; 0x50
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20005e5a:	f7fb ff73 	bl	20001d44 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
20005e5e:	2800      	cmp	r0, #0
20005e60:	d15b      	bne.n	20005f1a <HAL_I2C_Master_Seq_Receive_DMA+0x16a>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
20005e62:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
20005e64:	f3c5 0509 	ubfx	r5, r5, #0, #10
20005e68:	6823      	ldr	r3, [r4, #0]
20005e6a:	fa5f fc82 	uxtb.w	ip, r2
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20005e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
20005e70:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
20005e74:	f8d3 c004 	ldr.w	ip, [r3, #4]
20005e78:	ea45 0909 	orr.w	r9, r5, r9
20005e7c:	ea0c 0a0a 	and.w	sl, ip, sl
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20005e80:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 20005f78 <HAL_I2C_Master_Seq_Receive_DMA+0x1c8>
  MODIFY_REG(hi2c->Instance->CR2,
20005e84:	ea49 0606 	orr.w	r6, r9, r6
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20005e88:	4561      	cmp	r1, ip
  MODIFY_REG(hi2c->Instance->CR2,
20005e8a:	ea46 060a 	orr.w	r6, r6, sl
20005e8e:	605e      	str	r6, [r3, #4]
        hi2c->XferCount -= hi2c->XferSize;
20005e90:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
20005e92:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
        hi2c->XferCount -= hi2c->XferSize;
20005e96:	eba5 0202 	sub.w	r2, r5, r2
20005e9a:	b292      	uxth	r2, r2
20005e9c:	8562      	strh	r2, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20005e9e:	d05b      	beq.n	20005f58 <HAL_I2C_Master_Seq_Receive_DMA+0x1a8>
20005ea0:	42b9      	cmp	r1, r7
20005ea2:	d059      	beq.n	20005f58 <HAL_I2C_Master_Seq_Receive_DMA+0x1a8>
20005ea4:	4601      	mov	r1, r0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20005ea6:	681a      	ldr	r2, [r3, #0]
20005ea8:	430a      	orrs	r2, r1
20005eaa:	601a      	str	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
20005eac:	681a      	ldr	r2, [r3, #0]
20005eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20005eb2:	601a      	str	r2, [r3, #0]
}
20005eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005eb8:	6b21      	ldr	r1, [r4, #48]	; 0x30
      hi2c->XferSize = MAX_NBYTE_SIZE;
20005eba:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
20005ebc:	f04f 7980 	mov.w	r9, #16777216	; 0x1000000
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20005ec0:	2912      	cmp	r1, #18
20005ec2:	8523      	strh	r3, [r4, #40]	; 0x28
20005ec4:	d19f      	bne.n	20005e06 <HAL_I2C_Master_Seq_Receive_DMA+0x56>
20005ec6:	9908      	ldr	r1, [sp, #32]
20005ec8:	29aa      	cmp	r1, #170	; 0xaa
20005eca:	d09c      	beq.n	20005e06 <HAL_I2C_Master_Seq_Receive_DMA+0x56>
20005ecc:	f5a1 462a 	sub.w	r6, r1, #43520	; 0xaa00
20005ed0:	fab6 f686 	clz	r6, r6
20005ed4:	0976      	lsrs	r6, r6, #5
20005ed6:	2e00      	cmp	r6, #0
20005ed8:	d195      	bne.n	20005e06 <HAL_I2C_Master_Seq_Receive_DMA+0x56>
20005eda:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 20005f7c <HAL_I2C_Master_Seq_Receive_DMA+0x1cc>
    if (hi2c->XferSize > 0U)
20005ede:	2b00      	cmp	r3, #0
20005ee0:	d1a7      	bne.n	20005e32 <HAL_I2C_Master_Seq_Receive_DMA+0x82>
  MODIFY_REG(hi2c->Instance->CR2,
20005ee2:	6821      	ldr	r1, [r4, #0]
20005ee4:	f3c5 0509 	ubfx	r5, r5, #0, #10
20005ee8:	4e20      	ldr	r6, [pc, #128]	; (20005f6c <HAL_I2C_Master_Seq_Receive_DMA+0x1bc>)
    return HAL_OK;
20005eea:	4618      	mov	r0, r3
  MODIFY_REG(hi2c->Instance->CR2,
20005eec:	684a      	ldr	r2, [r1, #4]
20005eee:	4032      	ands	r2, r6
20005ef0:	4e1f      	ldr	r6, [pc, #124]	; (20005f70 <HAL_I2C_Master_Seq_Receive_DMA+0x1c0>)
20005ef2:	4315      	orrs	r5, r2
      hi2c->XferISR = I2C_Master_ISR_IT;
20005ef4:	4a1f      	ldr	r2, [pc, #124]	; (20005f74 <HAL_I2C_Master_Seq_Receive_DMA+0x1c4>)
  MODIFY_REG(hi2c->Instance->CR2,
20005ef6:	432e      	orrs	r6, r5
      hi2c->XferISR = I2C_Master_ISR_IT;
20005ef8:	6362      	str	r2, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
20005efa:	604e      	str	r6, [r1, #4]
      __HAL_UNLOCK(hi2c);
20005efc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20005f00:	680b      	ldr	r3, [r1, #0]
20005f02:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
20005f06:	600b      	str	r3, [r1, #0]
}
20005f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
20005f0c:	2002      	movs	r0, #2
}
20005f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20005f12:	f8df a058 	ldr.w	sl, [pc, #88]	; 20005f6c <HAL_I2C_Master_Seq_Receive_DMA+0x1bc>
  uint32_t xferrequest = I2C_GENERATE_START_READ;
20005f16:	4e12      	ldr	r6, [pc, #72]	; (20005f60 <HAL_I2C_Master_Seq_Receive_DMA+0x1b0>)
20005f18:	e789      	b.n	20005e2e <HAL_I2C_Master_Seq_Receive_DMA+0x7e>
        hi2c->State     = HAL_I2C_STATE_READY;
20005f1a:	2320      	movs	r3, #32
        return HAL_ERROR;
20005f1c:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
20005f1e:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
        hi2c->State     = HAL_I2C_STATE_READY;
20005f22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20005f26:	f884 8042 	strb.w	r8, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
20005f2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
20005f2c:	f043 0310 	orr.w	r3, r3, #16
20005f30:	6463      	str	r3, [r4, #68]	; 0x44
}
20005f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->XferOptions = I2C_FIRST_FRAME;
20005f36:	2100      	movs	r1, #0
20005f38:	62e1      	str	r1, [r4, #44]	; 0x2c
20005f3a:	e76f      	b.n	20005e1c <HAL_I2C_Master_Seq_Receive_DMA+0x6c>
        hi2c->State     = HAL_I2C_STATE_READY;
20005f3c:	2320      	movs	r3, #32
        return HAL_ERROR;
20005f3e:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
20005f40:	f884 c040 	strb.w	ip, [r4, #64]	; 0x40
        hi2c->State     = HAL_I2C_STATE_READY;
20005f44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20005f48:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20005f4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
20005f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20005f52:	6463      	str	r3, [r4, #68]	; 0x44
}
20005f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20005f58:	2190      	movs	r1, #144	; 0x90
20005f5a:	e7a4      	b.n	20005ea6 <HAL_I2C_Master_Seq_Receive_DMA+0xf6>
20005f5c:	200072f9 	.word	0x200072f9
20005f60:	80002400 	.word	0x80002400
20005f64:	20007615 	.word	0x20007615
20005f68:	20007519 	.word	0x20007519
20005f6c:	fc009800 	.word	0xfc009800
20005f70:	82002400 	.word	0x82002400
20005f74:	20006f45 	.word	0x20006f45
20005f78:	20007181 	.word	0x20007181
20005f7c:	fc009c00 	.word	0xfc009c00

20005f80 <HAL_I2C_Slave_Seq_Transmit_IT>:
{
20005f80:	b5f0      	push	{r4, r5, r6, r7, lr}
20005f82:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
20005f84:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
20005f88:	b085      	sub	sp, #20
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
20005f8a:	f000 0028 	and.w	r0, r0, #40	; 0x28
20005f8e:	2828      	cmp	r0, #40	; 0x28
20005f90:	d136      	bne.n	20006000 <HAL_I2C_Slave_Seq_Transmit_IT+0x80>
    if ((pData == NULL) || (Size == 0U))
20005f92:	2900      	cmp	r1, #0
20005f94:	d05b      	beq.n	2000604e <HAL_I2C_Slave_Seq_Transmit_IT+0xce>
20005f96:	2a00      	cmp	r2, #0
20005f98:	d059      	beq.n	2000604e <HAL_I2C_Slave_Seq_Transmit_IT+0xce>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20005f9a:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20005f9c:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20005fa0:	6828      	ldr	r0, [r5, #0]
20005fa2:	f020 00fa 	bic.w	r0, r0, #250	; 0xfa
20005fa6:	6028      	str	r0, [r5, #0]
    __HAL_LOCK(hi2c);
20005fa8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
20005fac:	2801      	cmp	r0, #1
20005fae:	d054      	beq.n	2000605a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
20005fb0:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    __HAL_LOCK(hi2c);
20005fb4:	2601      	movs	r6, #1
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
20005fb6:	282a      	cmp	r0, #42	; 0x2a
    __HAL_LOCK(hi2c);
20005fb8:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
20005fbc:	d023      	beq.n	20006006 <HAL_I2C_Slave_Seq_Transmit_IT+0x86>
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
20005fbe:	2620      	movs	r6, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20005fc0:	2000      	movs	r0, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
20005fc2:	2729      	movs	r7, #41	; 0x29
20005fc4:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
20005fc8:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20005fcc:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
20005fce:	6868      	ldr	r0, [r5, #4]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
20005fd0:	4e28      	ldr	r6, [pc, #160]	; (20006074 <HAL_I2C_Slave_Seq_Transmit_IT+0xf4>)
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
20005fd2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
20005fd6:	6068      	str	r0, [r5, #4]
    hi2c->XferCount   = Size;
20005fd8:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
20005fda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
20005fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
20005fde:	69ab      	ldr	r3, [r5, #24]
    hi2c->pBuffPtr    = pData;
20005fe0:	6261      	str	r1, [r4, #36]	; 0x24
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
20005fe2:	03db      	lsls	r3, r3, #15
    hi2c->XferSize    = hi2c->XferCount;
20005fe4:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferISR     = I2C_Slave_ISR_IT;
20005fe6:	6366      	str	r6, [r4, #52]	; 0x34
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
20005fe8:	d501      	bpl.n	20005fee <HAL_I2C_Slave_Seq_Transmit_IT+0x6e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20005fea:	2308      	movs	r3, #8
20005fec:	61eb      	str	r3, [r5, #28]
    __HAL_UNLOCK(hi2c);
20005fee:	2000      	movs	r0, #0
20005ff0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20005ff4:	682b      	ldr	r3, [r5, #0]
20005ff6:	f043 03fa 	orr.w	r3, r3, #250	; 0xfa
20005ffa:	602b      	str	r3, [r5, #0]
}
20005ffc:	b005      	add	sp, #20
20005ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
20006000:	2001      	movs	r0, #1
}
20006002:	b005      	add	sp, #20
20006004:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006006:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000600a:	6828      	ldr	r0, [r5, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000600c:	f006 0628 	and.w	r6, r6, #40	; 0x28
20006010:	2e28      	cmp	r6, #40	; 0x28
20006012:	bf0c      	ite	eq
20006014:	f06f 0644 	mvneq.w	r6, #68	; 0x44
20006018:	f06f 06f4 	mvnne.w	r6, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000601c:	4030      	ands	r0, r6
2000601e:	6028      	str	r0, [r5, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
20006020:	6828      	ldr	r0, [r5, #0]
20006022:	0400      	lsls	r0, r0, #16
20006024:	d5cb      	bpl.n	20005fbe <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
20006026:	682e      	ldr	r6, [r5, #0]
        if (hi2c->hdmarx != NULL)
20006028:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000602a:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
2000602e:	602e      	str	r6, [r5, #0]
        if (hi2c->hdmarx != NULL)
20006030:	2800      	cmp	r0, #0
20006032:	d0c4      	beq.n	20005fbe <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
20006034:	4d10      	ldr	r5, [pc, #64]	; (20006078 <HAL_I2C_Slave_Seq_Transmit_IT+0xf8>)
20006036:	9101      	str	r1, [sp, #4]
20006038:	6505      	str	r5, [r0, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2000603a:	e9cd 2302 	strd	r2, r3, [sp, #8]
2000603e:	f7fb ff0d 	bl	20001e5c <HAL_DMA_Abort_IT>
20006042:	9b03      	ldr	r3, [sp, #12]
20006044:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
20006048:	b948      	cbnz	r0, 2000605e <HAL_I2C_Slave_Seq_Transmit_IT+0xde>
2000604a:	6825      	ldr	r5, [r4, #0]
2000604c:	e7b7      	b.n	20005fbe <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000604e:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
20006052:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20006054:	6463      	str	r3, [r4, #68]	; 0x44
}
20006056:	b005      	add	sp, #20
20006058:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
2000605a:	2002      	movs	r0, #2
2000605c:	e7d1      	b.n	20006002 <HAL_I2C_Slave_Seq_Transmit_IT+0x82>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2000605e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
20006060:	9101      	str	r1, [sp, #4]
20006062:	6d05      	ldr	r5, [r0, #80]	; 0x50
20006064:	e9cd 2302 	strd	r2, r3, [sp, #8]
20006068:	47a8      	blx	r5
2000606a:	6825      	ldr	r5, [r4, #0]
2000606c:	9901      	ldr	r1, [sp, #4]
2000606e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20006072:	e7a4      	b.n	20005fbe <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
20006074:	20006c7d 	.word	0x20006c7d
20006078:	20006971 	.word	0x20006971

2000607c <HAL_I2C_Slave_Seq_Transmit_DMA>:
{
2000607c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000607e:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
20006080:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
20006084:	b085      	sub	sp, #20
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
20006086:	f000 0028 	and.w	r0, r0, #40	; 0x28
2000608a:	2828      	cmp	r0, #40	; 0x28
2000608c:	d15f      	bne.n	2000614e <HAL_I2C_Slave_Seq_Transmit_DMA+0xd2>
    if ((pData == NULL) || (Size == 0U))
2000608e:	2900      	cmp	r1, #0
20006090:	f000 808f 	beq.w	200061b2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x136>
20006094:	2a00      	cmp	r2, #0
20006096:	f000 808c 	beq.w	200061b2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x136>
    __HAL_LOCK(hi2c);
2000609a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
2000609e:	2801      	cmp	r0, #1
200060a0:	f000 80db 	beq.w	2000625a <HAL_I2C_Slave_Seq_Transmit_DMA+0x1de>
200060a4:	2001      	movs	r0, #1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200060a6:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200060a8:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
    __HAL_LOCK(hi2c);
200060ac:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200060b0:	6828      	ldr	r0, [r5, #0]
200060b2:	f020 00fa 	bic.w	r0, r0, #250	; 0xfa
200060b6:	6028      	str	r0, [r5, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
200060b8:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
200060bc:	282a      	cmp	r0, #42	; 0x2a
200060be:	d049      	beq.n	20006154 <HAL_I2C_Slave_Seq_Transmit_DMA+0xd8>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
200060c0:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
200060c4:	2829      	cmp	r0, #41	; 0x29
200060c6:	b2c6      	uxtb	r6, r0
200060c8:	f000 80a5 	beq.w	20006216 <HAL_I2C_Slave_Seq_Transmit_DMA+0x19a>
200060cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
200060ce:	f04f 0c29 	mov.w	ip, #41	; 0x29
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200060d2:	2720      	movs	r7, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200060d4:	2600      	movs	r6, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
200060d6:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200060da:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200060de:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200060e0:	686f      	ldr	r7, [r5, #4]
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
200060e2:	f8df c188 	ldr.w	ip, [pc, #392]	; 2000626c <HAL_I2C_Slave_Seq_Transmit_DMA+0x1f0>
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200060e6:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
200060ea:	606f      	str	r7, [r5, #4]
    hi2c->XferCount   = Size;
200060ec:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
200060ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
200060f0:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
200060f2:	b292      	uxth	r2, r2
    hi2c->XferOptions = XferOptions;
200060f4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
200060f6:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
    hi2c->XferSize    = hi2c->XferCount;
200060fa:	8522      	strh	r2, [r4, #40]	; 0x28
    if (hi2c->hdmatx != NULL)
200060fc:	2800      	cmp	r0, #0
200060fe:	d07c      	beq.n	200061fa <HAL_I2C_Slave_Seq_Transmit_DMA+0x17e>
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
20006100:	f8df c16c 	ldr.w	ip, [pc, #364]	; 20006270 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1f4>
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
20006104:	4613      	mov	r3, r2
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20006106:	4f57      	ldr	r7, [pc, #348]	; (20006264 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e8>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
20006108:	f105 0228 	add.w	r2, r5, #40	; 0x28
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2000610c:	6406      	str	r6, [r0, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2000610e:	6506      	str	r6, [r0, #80]	; 0x50
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
20006110:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20006114:	64c7      	str	r7, [r0, #76]	; 0x4c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
20006116:	f7fb fe15 	bl	20001d44 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
2000611a:	2800      	cmp	r0, #0
2000611c:	d14f      	bne.n	200061be <HAL_I2C_Slave_Seq_Transmit_DMA+0x142>
      hi2c->XferCount -= hi2c->XferSize;
2000611e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
20006120:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
20006122:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount -= hi2c->XferSize;
20006124:	1a52      	subs	r2, r2, r1
      hi2c->XferSize = 0;
20006126:	8520      	strh	r0, [r4, #40]	; 0x28
      hi2c->XferCount -= hi2c->XferSize;
20006128:	b292      	uxth	r2, r2
2000612a:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
2000612c:	699a      	ldr	r2, [r3, #24]
2000612e:	03d2      	lsls	r2, r2, #15
20006130:	d501      	bpl.n	20006136 <HAL_I2C_Slave_Seq_Transmit_DMA+0xba>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20006132:	2208      	movs	r2, #8
20006134:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
20006136:	2200      	movs	r2, #0
20006138:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2000613c:	681a      	ldr	r2, [r3, #0]
2000613e:	f042 02b8 	orr.w	r2, r2, #184	; 0xb8
20006142:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
20006144:	681a      	ldr	r2, [r3, #0]
20006146:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2000614a:	601a      	str	r2, [r3, #0]
    return HAL_OK;
2000614c:	e000      	b.n	20006150 <HAL_I2C_Slave_Seq_Transmit_DMA+0xd4>
    return HAL_ERROR;
2000614e:	2001      	movs	r0, #1
}
20006150:	b005      	add	sp, #20
20006152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006154:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006158:	6828      	ldr	r0, [r5, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000615a:	f006 0628 	and.w	r6, r6, #40	; 0x28
2000615e:	2e28      	cmp	r6, #40	; 0x28
20006160:	bf0c      	ite	eq
20006162:	f06f 0644 	mvneq.w	r6, #68	; 0x44
20006166:	f06f 06f4 	mvnne.w	r6, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000616a:	4030      	ands	r0, r6
2000616c:	6028      	str	r0, [r5, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2000616e:	6828      	ldr	r0, [r5, #0]
20006170:	0406      	lsls	r6, r0, #16
20006172:	d5ab      	bpl.n	200060cc <HAL_I2C_Slave_Seq_Transmit_DMA+0x50>
        if (hi2c->hdmarx != NULL)
20006174:	6be0      	ldr	r0, [r4, #60]	; 0x3c
20006176:	2800      	cmp	r0, #0
20006178:	d0a8      	beq.n	200060cc <HAL_I2C_Slave_Seq_Transmit_DMA+0x50>
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000617a:	682e      	ldr	r6, [r5, #0]
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2000617c:	4f3a      	ldr	r7, [pc, #232]	; (20006268 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1ec>)
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000617e:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
20006182:	9101      	str	r1, [sp, #4]
20006184:	602e      	str	r6, [r5, #0]
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
20006186:	6507      	str	r7, [r0, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
20006188:	e9cd 2302 	strd	r2, r3, [sp, #8]
2000618c:	f7fb fe66 	bl	20001e5c <HAL_DMA_Abort_IT>
20006190:	9b03      	ldr	r3, [sp, #12]
20006192:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
20006196:	2800      	cmp	r0, #0
20006198:	d061      	beq.n	2000625e <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e2>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2000619a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2000619c:	9101      	str	r1, [sp, #4]
2000619e:	6d05      	ldr	r5, [r0, #80]	; 0x50
200061a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
200061a4:	47a8      	blx	r5
200061a6:	6825      	ldr	r5, [r4, #0]
200061a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
200061aa:	9b03      	ldr	r3, [sp, #12]
200061ac:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
200061b0:	e78d      	b.n	200060ce <HAL_I2C_Slave_Seq_Transmit_DMA+0x52>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200061b2:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
200061b6:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200061b8:	6463      	str	r3, [r4, #68]	; 0x44
}
200061ba:	b005      	add	sp, #20
200061bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_LISTEN;
200061be:	2328      	movs	r3, #40	; 0x28
      return HAL_ERROR;
200061c0:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
200061c2:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      hi2c->State     = HAL_I2C_STATE_LISTEN;
200061c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
200061ca:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
200061ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
200061d0:	f043 0310 	orr.w	r3, r3, #16
200061d4:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
200061d6:	e7bb      	b.n	20006150 <HAL_I2C_Slave_Seq_Transmit_DMA+0xd4>
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200061d8:	2720      	movs	r7, #32
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
200061da:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
200061de:	4e23      	ldr	r6, [pc, #140]	; (2000626c <HAL_I2C_Slave_Seq_Transmit_DMA+0x1f0>)
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200061e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200061e4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200061e6:	6868      	ldr	r0, [r5, #4]
200061e8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
200061ec:	6068      	str	r0, [r5, #4]
    hi2c->XferCount   = Size;
200061ee:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
200061f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
200061f2:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
200061f4:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
200061f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
200061f8:	6366      	str	r6, [r4, #52]	; 0x34
      hi2c->State     = HAL_I2C_STATE_LISTEN;
200061fa:	2328      	movs	r3, #40	; 0x28
      hi2c->Mode      = HAL_I2C_MODE_NONE;
200061fc:	2200      	movs	r2, #0
      return HAL_ERROR;
200061fe:	2001      	movs	r0, #1
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20006200:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20006204:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20006208:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2000620a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000620e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20006212:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
20006214:	e79c      	b.n	20006150 <HAL_I2C_Slave_Seq_Transmit_DMA+0xd4>
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
20006216:	6828      	ldr	r0, [r5, #0]
20006218:	0440      	lsls	r0, r0, #17
2000621a:	f57f af57 	bpl.w	200060cc <HAL_I2C_Slave_Seq_Transmit_DMA+0x50>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000621e:	682f      	ldr	r7, [r5, #0]
        if (hi2c->hdmatx != NULL)
20006220:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
20006222:	f427 4780 	bic.w	r7, r7, #16384	; 0x4000
20006226:	602f      	str	r7, [r5, #0]
        if (hi2c->hdmatx != NULL)
20006228:	2800      	cmp	r0, #0
2000622a:	d0d5      	beq.n	200061d8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x15c>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2000622c:	4d0e      	ldr	r5, [pc, #56]	; (20006268 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1ec>)
2000622e:	9101      	str	r1, [sp, #4]
20006230:	6505      	str	r5, [r0, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
20006232:	e9cd 2302 	strd	r2, r3, [sp, #8]
20006236:	f7fb fe11 	bl	20001e5c <HAL_DMA_Abort_IT>
2000623a:	9b03      	ldr	r3, [sp, #12]
2000623c:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
20006240:	b168      	cbz	r0, 2000625e <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e2>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
20006242:	6ba0      	ldr	r0, [r4, #56]	; 0x38
20006244:	9101      	str	r1, [sp, #4]
20006246:	6d05      	ldr	r5, [r0, #80]	; 0x50
20006248:	e9cd 2302 	strd	r2, r3, [sp, #8]
2000624c:	47a8      	blx	r5
2000624e:	6825      	ldr	r5, [r4, #0]
20006250:	6ba0      	ldr	r0, [r4, #56]	; 0x38
20006252:	9901      	ldr	r1, [sp, #4]
20006254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20006258:	e739      	b.n	200060ce <HAL_I2C_Slave_Seq_Transmit_DMA+0x52>
    __HAL_LOCK(hi2c);
2000625a:	2002      	movs	r0, #2
2000625c:	e778      	b.n	20006150 <HAL_I2C_Slave_Seq_Transmit_DMA+0xd4>
2000625e:	6825      	ldr	r5, [r4, #0]
20006260:	e734      	b.n	200060cc <HAL_I2C_Slave_Seq_Transmit_DMA+0x50>
20006262:	bf00      	nop
20006264:	20007519 	.word	0x20007519
20006268:	20006971 	.word	0x20006971
2000626c:	20007181 	.word	0x20007181
20006270:	2000677d 	.word	0x2000677d

20006274 <HAL_I2C_Slave_Seq_Receive_IT>:
{
20006274:	b5f0      	push	{r4, r5, r6, r7, lr}
20006276:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
20006278:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
2000627c:	b085      	sub	sp, #20
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2000627e:	f000 0028 	and.w	r0, r0, #40	; 0x28
20006282:	2828      	cmp	r0, #40	; 0x28
20006284:	d136      	bne.n	200062f4 <HAL_I2C_Slave_Seq_Receive_IT+0x80>
    if ((pData == NULL) || (Size == 0U))
20006286:	2900      	cmp	r1, #0
20006288:	d05b      	beq.n	20006342 <HAL_I2C_Slave_Seq_Receive_IT+0xce>
2000628a:	2a00      	cmp	r2, #0
2000628c:	d059      	beq.n	20006342 <HAL_I2C_Slave_Seq_Receive_IT+0xce>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000628e:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006290:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006294:	6828      	ldr	r0, [r5, #0]
20006296:	f020 00fc 	bic.w	r0, r0, #252	; 0xfc
2000629a:	6028      	str	r0, [r5, #0]
    __HAL_LOCK(hi2c);
2000629c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
200062a0:	2801      	cmp	r0, #1
200062a2:	d054      	beq.n	2000634e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
200062a4:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    __HAL_LOCK(hi2c);
200062a8:	2601      	movs	r6, #1
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
200062aa:	2829      	cmp	r0, #41	; 0x29
    __HAL_LOCK(hi2c);
200062ac:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
200062b0:	d023      	beq.n	200062fa <HAL_I2C_Slave_Seq_Receive_IT+0x86>
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200062b2:	2620      	movs	r6, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200062b4:	2000      	movs	r0, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
200062b6:	272a      	movs	r7, #42	; 0x2a
200062b8:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200062bc:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200062c0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200062c2:	6868      	ldr	r0, [r5, #4]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
200062c4:	4e28      	ldr	r6, [pc, #160]	; (20006368 <HAL_I2C_Slave_Seq_Receive_IT+0xf4>)
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200062c6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
200062ca:	6068      	str	r0, [r5, #4]
    hi2c->XferCount   = Size;
200062cc:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
200062ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
200062d0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
200062d2:	69ab      	ldr	r3, [r5, #24]
    hi2c->pBuffPtr    = pData;
200062d4:	6261      	str	r1, [r4, #36]	; 0x24
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
200062d6:	03db      	lsls	r3, r3, #15
    hi2c->XferSize    = hi2c->XferCount;
200062d8:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferISR     = I2C_Slave_ISR_IT;
200062da:	6366      	str	r6, [r4, #52]	; 0x34
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
200062dc:	d401      	bmi.n	200062e2 <HAL_I2C_Slave_Seq_Receive_IT+0x6e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
200062de:	2308      	movs	r3, #8
200062e0:	61eb      	str	r3, [r5, #28]
    __HAL_UNLOCK(hi2c);
200062e2:	2000      	movs	r0, #0
200062e4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200062e8:	682b      	ldr	r3, [r5, #0]
200062ea:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
200062ee:	602b      	str	r3, [r5, #0]
}
200062f0:	b005      	add	sp, #20
200062f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
200062f4:	2001      	movs	r0, #1
}
200062f6:	b005      	add	sp, #20
200062f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200062fa:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200062fe:	6828      	ldr	r0, [r5, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006300:	f006 0628 	and.w	r6, r6, #40	; 0x28
20006304:	2e28      	cmp	r6, #40	; 0x28
20006306:	bf0c      	ite	eq
20006308:	f06f 0642 	mvneq.w	r6, #66	; 0x42
2000630c:	f06f 06f2 	mvnne.w	r6, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006310:	4030      	ands	r0, r6
20006312:	6028      	str	r0, [r5, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
20006314:	6828      	ldr	r0, [r5, #0]
20006316:	0440      	lsls	r0, r0, #17
20006318:	d5cb      	bpl.n	200062b2 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000631a:	682e      	ldr	r6, [r5, #0]
        if (hi2c->hdmatx != NULL)
2000631c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000631e:	f426 4680 	bic.w	r6, r6, #16384	; 0x4000
20006322:	602e      	str	r6, [r5, #0]
        if (hi2c->hdmatx != NULL)
20006324:	2800      	cmp	r0, #0
20006326:	d0c4      	beq.n	200062b2 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
20006328:	4d10      	ldr	r5, [pc, #64]	; (2000636c <HAL_I2C_Slave_Seq_Receive_IT+0xf8>)
2000632a:	9101      	str	r1, [sp, #4]
2000632c:	6505      	str	r5, [r0, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2000632e:	e9cd 2302 	strd	r2, r3, [sp, #8]
20006332:	f7fb fd93 	bl	20001e5c <HAL_DMA_Abort_IT>
20006336:	9b03      	ldr	r3, [sp, #12]
20006338:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
2000633c:	b948      	cbnz	r0, 20006352 <HAL_I2C_Slave_Seq_Receive_IT+0xde>
2000633e:	6825      	ldr	r5, [r4, #0]
20006340:	e7b7      	b.n	200062b2 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20006342:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
20006346:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20006348:	6463      	str	r3, [r4, #68]	; 0x44
}
2000634a:	b005      	add	sp, #20
2000634c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
2000634e:	2002      	movs	r0, #2
20006350:	e7d1      	b.n	200062f6 <HAL_I2C_Slave_Seq_Receive_IT+0x82>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
20006352:	6ba0      	ldr	r0, [r4, #56]	; 0x38
20006354:	9101      	str	r1, [sp, #4]
20006356:	6d05      	ldr	r5, [r0, #80]	; 0x50
20006358:	e9cd 2302 	strd	r2, r3, [sp, #8]
2000635c:	47a8      	blx	r5
2000635e:	6825      	ldr	r5, [r4, #0]
20006360:	9901      	ldr	r1, [sp, #4]
20006362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20006366:	e7a4      	b.n	200062b2 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
20006368:	20006c7d 	.word	0x20006c7d
2000636c:	20006971 	.word	0x20006971

20006370 <HAL_I2C_Slave_Seq_Receive_DMA>:
{
20006370:	b5f0      	push	{r4, r5, r6, r7, lr}
20006372:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
20006374:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
20006378:	b085      	sub	sp, #20
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2000637a:	f000 0028 	and.w	r0, r0, #40	; 0x28
2000637e:	2828      	cmp	r0, #40	; 0x28
20006380:	d161      	bne.n	20006446 <HAL_I2C_Slave_Seq_Receive_DMA+0xd6>
    if ((pData == NULL) || (Size == 0U))
20006382:	2900      	cmp	r1, #0
20006384:	f000 8091 	beq.w	200064aa <HAL_I2C_Slave_Seq_Receive_DMA+0x13a>
20006388:	2a00      	cmp	r2, #0
2000638a:	f000 808e 	beq.w	200064aa <HAL_I2C_Slave_Seq_Receive_DMA+0x13a>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000638e:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006390:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006394:	6828      	ldr	r0, [r5, #0]
20006396:	f020 00fc 	bic.w	r0, r0, #252	; 0xfc
2000639a:	6028      	str	r0, [r5, #0]
    __HAL_LOCK(hi2c);
2000639c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
200063a0:	2801      	cmp	r0, #1
200063a2:	f000 80e2 	beq.w	2000656a <HAL_I2C_Slave_Seq_Receive_DMA+0x1fa>
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
200063a6:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    __HAL_LOCK(hi2c);
200063aa:	2601      	movs	r6, #1
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
200063ac:	2829      	cmp	r0, #41	; 0x29
    __HAL_LOCK(hi2c);
200063ae:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
200063b2:	d04b      	beq.n	2000644c <HAL_I2C_Slave_Seq_Receive_DMA+0xdc>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
200063b4:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
200063b8:	282a      	cmp	r0, #42	; 0x2a
200063ba:	b2c6      	uxtb	r6, r0
200063bc:	f000 80b0 	beq.w	20006520 <HAL_I2C_Slave_Seq_Receive_DMA+0x1b0>
200063c0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
200063c2:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200063c6:	2720      	movs	r7, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200063c8:	2600      	movs	r6, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
200063ca:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200063ce:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200063d2:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200063d4:	f8d5 c004 	ldr.w	ip, [r5, #4]
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
200063d8:	4f66      	ldr	r7, [pc, #408]	; (20006574 <HAL_I2C_Slave_Seq_Receive_DMA+0x204>)
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200063da:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
200063de:	f8c5 c004 	str.w	ip, [r5, #4]
    hi2c->XferCount   = Size;
200063e2:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
200063e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
200063e6:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
200063e8:	b292      	uxth	r2, r2
    hi2c->XferOptions = XferOptions;
200063ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
200063ec:	6367      	str	r7, [r4, #52]	; 0x34
    hi2c->XferSize    = hi2c->XferCount;
200063ee:	8522      	strh	r2, [r4, #40]	; 0x28
    if (hi2c->hdmarx != NULL)
200063f0:	2800      	cmp	r0, #0
200063f2:	f000 8087 	beq.w	20006504 <HAL_I2C_Slave_Seq_Receive_DMA+0x194>
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
200063f6:	f8df e188 	ldr.w	lr, [pc, #392]	; 20006580 <HAL_I2C_Slave_Seq_Receive_DMA+0x210>
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
200063fa:	4613      	mov	r3, r2
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
200063fc:	f8df c184 	ldr.w	ip, [pc, #388]	; 20006584 <HAL_I2C_Slave_Seq_Receive_DMA+0x214>
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20006400:	460a      	mov	r2, r1
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
20006402:	6406      	str	r6, [r0, #64]	; 0x40
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20006404:	f105 0124 	add.w	r1, r5, #36	; 0x24
      hi2c->hdmarx->XferAbortCallback = NULL;
20006408:	6506      	str	r6, [r0, #80]	; 0x50
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2000640a:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2000640e:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
20006412:	f7fb fc97 	bl	20001d44 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
20006416:	2800      	cmp	r0, #0
20006418:	d156      	bne.n	200064c8 <HAL_I2C_Slave_Seq_Receive_DMA+0x158>
      hi2c->XferCount -= hi2c->XferSize;
2000641a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
2000641c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferSize = 0;
2000641e:	8520      	strh	r0, [r4, #40]	; 0x28
      hi2c->XferCount -= hi2c->XferSize;
20006420:	1ad2      	subs	r2, r2, r3
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
20006422:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount -= hi2c->XferSize;
20006424:	b292      	uxth	r2, r2
20006426:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
20006428:	699a      	ldr	r2, [r3, #24]
2000642a:	03d2      	lsls	r2, r2, #15
2000642c:	f140 809a 	bpl.w	20006564 <HAL_I2C_Slave_Seq_Receive_DMA+0x1f4>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20006430:	6b62      	ldr	r2, [r4, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
20006432:	2500      	movs	r5, #0
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20006434:	4950      	ldr	r1, [pc, #320]	; (20006578 <HAL_I2C_Slave_Seq_Receive_DMA+0x208>)
    __HAL_UNLOCK(hi2c);
20006436:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2000643a:	428a      	cmp	r2, r1
2000643c:	d03b      	beq.n	200064b6 <HAL_I2C_Slave_Seq_Receive_DMA+0x146>
2000643e:	42ba      	cmp	r2, r7
20006440:	d039      	beq.n	200064b6 <HAL_I2C_Slave_Seq_Receive_DMA+0x146>
20006442:	21fc      	movs	r1, #252	; 0xfc
20006444:	e038      	b.n	200064b8 <HAL_I2C_Slave_Seq_Receive_DMA+0x148>
    return HAL_ERROR;
20006446:	2001      	movs	r0, #1
}
20006448:	b005      	add	sp, #20
2000644a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000644c:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006450:	6828      	ldr	r0, [r5, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006452:	f006 0628 	and.w	r6, r6, #40	; 0x28
20006456:	2e28      	cmp	r6, #40	; 0x28
20006458:	bf0c      	ite	eq
2000645a:	f06f 0642 	mvneq.w	r6, #66	; 0x42
2000645e:	f06f 06f2 	mvnne.w	r6, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006462:	4030      	ands	r0, r6
20006464:	6028      	str	r0, [r5, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
20006466:	6828      	ldr	r0, [r5, #0]
20006468:	0446      	lsls	r6, r0, #17
2000646a:	d5a9      	bpl.n	200063c0 <HAL_I2C_Slave_Seq_Receive_DMA+0x50>
        if (hi2c->hdmatx != NULL)
2000646c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
2000646e:	2800      	cmp	r0, #0
20006470:	d0a6      	beq.n	200063c0 <HAL_I2C_Slave_Seq_Receive_DMA+0x50>
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
20006472:	682e      	ldr	r6, [r5, #0]
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
20006474:	4f41      	ldr	r7, [pc, #260]	; (2000657c <HAL_I2C_Slave_Seq_Receive_DMA+0x20c>)
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
20006476:	f426 4680 	bic.w	r6, r6, #16384	; 0x4000
2000647a:	9101      	str	r1, [sp, #4]
2000647c:	602e      	str	r6, [r5, #0]
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2000647e:	6507      	str	r7, [r0, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
20006480:	e9cd 2302 	strd	r2, r3, [sp, #8]
20006484:	f7fb fcea 	bl	20001e5c <HAL_DMA_Abort_IT>
20006488:	9b03      	ldr	r3, [sp, #12]
2000648a:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
2000648e:	2800      	cmp	r0, #0
20006490:	d06d      	beq.n	2000656e <HAL_I2C_Slave_Seq_Receive_DMA+0x1fe>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
20006492:	6ba0      	ldr	r0, [r4, #56]	; 0x38
20006494:	9101      	str	r1, [sp, #4]
20006496:	6d05      	ldr	r5, [r0, #80]	; 0x50
20006498:	e9cd 2302 	strd	r2, r3, [sp, #8]
2000649c:	47a8      	blx	r5
2000649e:	6825      	ldr	r5, [r4, #0]
200064a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
200064a2:	9b03      	ldr	r3, [sp, #12]
200064a4:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
200064a8:	e78b      	b.n	200063c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x52>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200064aa:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
200064ae:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200064b0:	6463      	str	r3, [r4, #68]	; 0x44
}
200064b2:	b005      	add	sp, #20
200064b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
200064b6:	21b8      	movs	r1, #184	; 0xb8
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200064b8:	681a      	ldr	r2, [r3, #0]
200064ba:	430a      	orrs	r2, r1
200064bc:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
200064be:	681a      	ldr	r2, [r3, #0]
200064c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
200064c4:	601a      	str	r2, [r3, #0]
    return HAL_OK;
200064c6:	e7bf      	b.n	20006448 <HAL_I2C_Slave_Seq_Receive_DMA+0xd8>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
200064c8:	2328      	movs	r3, #40	; 0x28
      return HAL_ERROR;
200064ca:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
200064cc:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      hi2c->State     = HAL_I2C_STATE_LISTEN;
200064d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
200064d4:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
200064d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
200064da:	f043 0310 	orr.w	r3, r3, #16
200064de:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
200064e0:	e7b2      	b.n	20006448 <HAL_I2C_Slave_Seq_Receive_DMA+0xd8>
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200064e2:	2720      	movs	r7, #32
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
200064e4:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
200064e8:	4e22      	ldr	r6, [pc, #136]	; (20006574 <HAL_I2C_Slave_Seq_Receive_DMA+0x204>)
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200064ea:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200064ee:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200064f0:	6868      	ldr	r0, [r5, #4]
200064f2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
200064f6:	6068      	str	r0, [r5, #4]
    hi2c->XferCount   = Size;
200064f8:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
200064fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
200064fc:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
200064fe:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
20006500:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
20006502:	6366      	str	r6, [r4, #52]	; 0x34
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20006504:	2328      	movs	r3, #40	; 0x28
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20006506:	2200      	movs	r2, #0
      return HAL_ERROR;
20006508:	2001      	movs	r0, #1
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2000650a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2000650e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20006512:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
20006514:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20006518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000651c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
2000651e:	e793      	b.n	20006448 <HAL_I2C_Slave_Seq_Receive_DMA+0xd8>
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
20006520:	6828      	ldr	r0, [r5, #0]
20006522:	0400      	lsls	r0, r0, #16
20006524:	f57f af4c 	bpl.w	200063c0 <HAL_I2C_Slave_Seq_Receive_DMA+0x50>
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
20006528:	682f      	ldr	r7, [r5, #0]
        if (hi2c->hdmarx != NULL)
2000652a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000652c:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
20006530:	602f      	str	r7, [r5, #0]
        if (hi2c->hdmarx != NULL)
20006532:	2800      	cmp	r0, #0
20006534:	d0d5      	beq.n	200064e2 <HAL_I2C_Slave_Seq_Receive_DMA+0x172>
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
20006536:	4d11      	ldr	r5, [pc, #68]	; (2000657c <HAL_I2C_Slave_Seq_Receive_DMA+0x20c>)
20006538:	9101      	str	r1, [sp, #4]
2000653a:	6505      	str	r5, [r0, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2000653c:	e9cd 2302 	strd	r2, r3, [sp, #8]
20006540:	f7fb fc8c 	bl	20001e5c <HAL_DMA_Abort_IT>
20006544:	9b03      	ldr	r3, [sp, #12]
20006546:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
2000654a:	b180      	cbz	r0, 2000656e <HAL_I2C_Slave_Seq_Receive_DMA+0x1fe>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2000654c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2000654e:	9101      	str	r1, [sp, #4]
20006550:	6d05      	ldr	r5, [r0, #80]	; 0x50
20006552:	e9cd 2302 	strd	r2, r3, [sp, #8]
20006556:	47a8      	blx	r5
20006558:	6825      	ldr	r5, [r4, #0]
2000655a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2000655c:	9901      	ldr	r1, [sp, #4]
2000655e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20006562:	e72e      	b.n	200063c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20006564:	2208      	movs	r2, #8
20006566:	61da      	str	r2, [r3, #28]
20006568:	e762      	b.n	20006430 <HAL_I2C_Slave_Seq_Receive_DMA+0xc0>
    __HAL_LOCK(hi2c);
2000656a:	2002      	movs	r0, #2
2000656c:	e76c      	b.n	20006448 <HAL_I2C_Slave_Seq_Receive_DMA+0xd8>
2000656e:	6825      	ldr	r5, [r4, #0]
20006570:	e726      	b.n	200063c0 <HAL_I2C_Slave_Seq_Receive_DMA+0x50>
20006572:	bf00      	nop
20006574:	20007181 	.word	0x20007181
20006578:	200072f9 	.word	0x200072f9
2000657c:	20006971 	.word	0x20006971
20006580:	2000682d 	.word	0x2000682d
20006584:	20007519 	.word	0x20007519

20006588 <HAL_I2C_EnableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
20006588:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
2000658c:	2a20      	cmp	r2, #32
2000658e:	d001      	beq.n	20006594 <HAL_I2C_EnableListen_IT+0xc>
    return HAL_BUSY;
20006590:	2002      	movs	r0, #2
}
20006592:	4770      	bx	lr
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20006594:	6801      	ldr	r1, [r0, #0]
20006596:	4603      	mov	r3, r0
    hi2c->State = HAL_I2C_STATE_LISTEN;
20006598:	2228      	movs	r2, #40	; 0x28
    return HAL_OK;
2000659a:	2000      	movs	r0, #0
{
2000659c:	b410      	push	{r4}
    hi2c->State = HAL_I2C_STATE_LISTEN;
2000659e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200065a2:	680a      	ldr	r2, [r1, #0]
    hi2c->XferISR = I2C_Slave_ISR_IT;
200065a4:	4c03      	ldr	r4, [pc, #12]	; (200065b4 <HAL_I2C_EnableListen_IT+0x2c>)
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200065a6:	f042 02b8 	orr.w	r2, r2, #184	; 0xb8
    hi2c->XferISR = I2C_Slave_ISR_IT;
200065aa:	635c      	str	r4, [r3, #52]	; 0x34
}
200065ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200065b0:	600a      	str	r2, [r1, #0]
}
200065b2:	4770      	bx	lr
200065b4:	20006c7d 	.word	0x20006c7d

200065b8 <HAL_I2C_DisableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
200065b8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
200065bc:	2a28      	cmp	r2, #40	; 0x28
200065be:	d001      	beq.n	200065c4 <HAL_I2C_DisableListen_IT+0xc>
    return HAL_BUSY;
200065c0:	2002      	movs	r0, #2
}
200065c2:	4770      	bx	lr
{
200065c4:	b430      	push	{r4, r5}
200065c6:	4603      	mov	r3, r0
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
200065c8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
200065cc:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
200065ce:	2520      	movs	r5, #32
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
200065d0:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
200065d4:	f000 0003 	and.w	r0, r0, #3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200065d8:	681c      	ldr	r4, [r3, #0]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
200065da:	4301      	orrs	r1, r0
    hi2c->XferISR = NULL;
200065dc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_OK;
200065de:	4610      	mov	r0, r2
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
200065e0:	6319      	str	r1, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
200065e2:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
200065e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200065ea:	6823      	ldr	r3, [r4, #0]
200065ec:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
200065f0:	6023      	str	r3, [r4, #0]
}
200065f2:	bc30      	pop	{r4, r5}
200065f4:	4770      	bx	lr
200065f6:	bf00      	nop

200065f8 <HAL_I2C_Master_Abort_IT>:
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
200065f8:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
200065fc:	2b10      	cmp	r3, #16
200065fe:	d12d      	bne.n	2000665c <HAL_I2C_Master_Abort_IT+0x64>
    __HAL_LOCK(hi2c);
20006600:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
20006604:	2b01      	cmp	r3, #1
20006606:	d02b      	beq.n	20006660 <HAL_I2C_Master_Abort_IT+0x68>
20006608:	2201      	movs	r2, #1
{
2000660a:	b470      	push	{r4, r5, r6}
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2000660c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    __HAL_LOCK(hi2c);
20006610:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
20006614:	2b21      	cmp	r3, #33	; 0x21
20006616:	d038      	beq.n	2000668a <HAL_I2C_Master_Abort_IT+0x92>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
20006618:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2000661c:	2b22      	cmp	r3, #34	; 0x22
2000661e:	d021      	beq.n	20006664 <HAL_I2C_Master_Abort_IT+0x6c>
20006620:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_ABORT;
20006622:	2360      	movs	r3, #96	; 0x60
  MODIFY_REG(hi2c->Instance->CR2,
20006624:	4d21      	ldr	r5, [pc, #132]	; (200066ac <HAL_I2C_Master_Abort_IT+0xb4>)
20006626:	f3c1 0109 	ubfx	r1, r1, #0, #10
2000662a:	4c21      	ldr	r4, [pc, #132]	; (200066b0 <HAL_I2C_Master_Abort_IT+0xb8>)
    hi2c->State = HAL_I2C_STATE_ABORT;
2000662c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
20006630:	2600      	movs	r6, #0
  MODIFY_REG(hi2c->Instance->CR2,
20006632:	6853      	ldr	r3, [r2, #4]
20006634:	402b      	ands	r3, r5
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20006636:	6b45      	ldr	r5, [r0, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
20006638:	4319      	orrs	r1, r3
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2000663a:	4b1e      	ldr	r3, [pc, #120]	; (200066b4 <HAL_I2C_Master_Abort_IT+0xbc>)
  MODIFY_REG(hi2c->Instance->CR2,
2000663c:	430c      	orrs	r4, r1
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2000663e:	429d      	cmp	r5, r3
  MODIFY_REG(hi2c->Instance->CR2,
20006640:	6054      	str	r4, [r2, #4]
    __HAL_UNLOCK(hi2c);
20006642:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20006646:	d01e      	beq.n	20006686 <HAL_I2C_Master_Abort_IT+0x8e>
20006648:	4b1b      	ldr	r3, [pc, #108]	; (200066b8 <HAL_I2C_Master_Abort_IT+0xc0>)
2000664a:	429d      	cmp	r5, r3
2000664c:	d01b      	beq.n	20006686 <HAL_I2C_Master_Abort_IT+0x8e>
      tmpisr |= I2C_IT_STOPI;
2000664e:	2120      	movs	r1, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20006650:	6813      	ldr	r3, [r2, #0]
    return HAL_OK;
20006652:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20006654:	430b      	orrs	r3, r1
}
20006656:	bc70      	pop	{r4, r5, r6}
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20006658:	6013      	str	r3, [r2, #0]
}
2000665a:	4770      	bx	lr
    return HAL_ERROR;
2000665c:	2001      	movs	r0, #1
2000665e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
20006660:	2002      	movs	r0, #2
}
20006662:	4770      	bx	lr
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006664:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
20006668:	2512      	movs	r5, #18
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000666a:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000666c:	f004 0428 	and.w	r4, r4, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006670:	6813      	ldr	r3, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006672:	2c28      	cmp	r4, #40	; 0x28
20006674:	bf0c      	ite	eq
20006676:	f06f 0444 	mvneq.w	r4, #68	; 0x44
2000667a:	f06f 04f4 	mvnne.w	r4, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000667e:	4023      	ands	r3, r4
20006680:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
20006682:	6305      	str	r5, [r0, #48]	; 0x30
20006684:	e7cd      	b.n	20006622 <HAL_I2C_Master_Abort_IT+0x2a>
20006686:	2160      	movs	r1, #96	; 0x60
20006688:	e7e2      	b.n	20006650 <HAL_I2C_Master_Abort_IT+0x58>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000668a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2000668e:	2511      	movs	r5, #17
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006690:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006692:	f004 0428 	and.w	r4, r4, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006696:	6813      	ldr	r3, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006698:	2c28      	cmp	r4, #40	; 0x28
2000669a:	bf0c      	ite	eq
2000669c:	f06f 0442 	mvneq.w	r4, #66	; 0x42
200066a0:	f06f 04f2 	mvnne.w	r4, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200066a4:	4023      	ands	r3, r4
200066a6:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
200066a8:	6305      	str	r5, [r0, #48]	; 0x30
200066aa:	e7ba      	b.n	20006622 <HAL_I2C_Master_Abort_IT+0x2a>
200066ac:	fc009800 	.word	0xfc009800
200066b0:	82014000 	.word	0x82014000
200066b4:	20007181 	.word	0x20007181
200066b8:	200072f9 	.word	0x200072f9

200066bc <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
200066bc:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
200066be:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
200066c0:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
200066c2:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
200066c4:	b103      	cbz	r3, 200066c8 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
200066c6:	4718      	bx	r3
}
200066c8:	4770      	bx	lr
200066ca:	bf00      	nop

200066cc <HAL_I2C_MasterTxCpltCallback>:
200066cc:	4770      	bx	lr
200066ce:	bf00      	nop

200066d0 <HAL_I2C_MasterRxCpltCallback>:
200066d0:	4770      	bx	lr
200066d2:	bf00      	nop

200066d4 <HAL_I2C_SlaveTxCpltCallback>:
200066d4:	4770      	bx	lr
200066d6:	bf00      	nop

200066d8 <HAL_I2C_SlaveRxCpltCallback>:
200066d8:	4770      	bx	lr
200066da:	bf00      	nop

200066dc <I2C_ITSlaveSeqCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
200066dc:	6801      	ldr	r1, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
200066de:	2200      	movs	r2, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
200066e0:	680b      	ldr	r3, [r1, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
200066e2:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
200066e6:	045a      	lsls	r2, r3, #17
{
200066e8:	b510      	push	{r4, lr}
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
200066ea:	d50c      	bpl.n	20006706 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
200066ec:	680b      	ldr	r3, [r1, #0]
200066ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
200066f2:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
200066f4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
200066f8:	2b29      	cmp	r3, #41	; 0x29
200066fa:	d00e      	beq.n	2000671a <I2C_ITSlaveSeqCplt+0x3e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
200066fc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
20006700:	2b2a      	cmp	r3, #42	; 0x2a
20006702:	d022      	beq.n	2000674a <I2C_ITSlaveSeqCplt+0x6e>
}
20006704:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
20006706:	041b      	lsls	r3, r3, #16
20006708:	d5f4      	bpl.n	200066f4 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000670a:	680b      	ldr	r3, [r1, #0]
2000670c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
20006710:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
20006712:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
20006716:	2b29      	cmp	r3, #41	; 0x29
20006718:	d1f0      	bne.n	200066fc <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2000671a:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2000671c:	2321      	movs	r3, #33	; 0x21
    __HAL_UNLOCK(hi2c);
2000671e:	2400      	movs	r4, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
20006720:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
20006724:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006726:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000672a:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000672c:	f002 0228 	and.w	r2, r2, #40	; 0x28
20006730:	2a28      	cmp	r2, #40	; 0x28
20006732:	bf0c      	ite	eq
20006734:	f06f 0242 	mvneq.w	r2, #66	; 0x42
20006738:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000673c:	4013      	ands	r3, r2
2000673e:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
20006740:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
20006744:	f7ff ffc6 	bl	200066d4 <HAL_I2C_SlaveTxCpltCallback>
}
20006748:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2000674a:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2000674c:	2322      	movs	r3, #34	; 0x22
    __HAL_UNLOCK(hi2c);
2000674e:	2400      	movs	r4, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
20006750:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
20006754:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006756:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000675a:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000675c:	f002 0228 	and.w	r2, r2, #40	; 0x28
20006760:	2a28      	cmp	r2, #40	; 0x28
20006762:	bf0c      	ite	eq
20006764:	f06f 0244 	mvneq.w	r2, #68	; 0x44
20006768:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000676c:	4013      	ands	r3, r2
2000676e:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
20006770:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
20006774:	f7ff ffb0 	bl	200066d8 <HAL_I2C_SlaveRxCpltCallback>
}
20006778:	bd10      	pop	{r4, pc}
2000677a:	bf00      	nop

2000677c <I2C_DMASlaveTransmitCplt>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000677c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
2000677e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
20006780:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
20006782:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
20006786:	d000      	beq.n	2000678a <I2C_DMASlaveTransmitCplt+0xe>
}
20006788:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000678a:	6802      	ldr	r2, [r0, #0]
2000678c:	6811      	ldr	r1, [r2, #0]
2000678e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
20006792:	6011      	str	r1, [r2, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
20006794:	6811      	ldr	r1, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
20006796:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2000679a:	044c      	lsls	r4, r1, #17
2000679c:	d425      	bmi.n	200067ea <I2C_DMASlaveTransmitCplt+0x6e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2000679e:	040b      	lsls	r3, r1, #16
200067a0:	d503      	bpl.n	200067aa <I2C_DMASlaveTransmitCplt+0x2e>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
200067a2:	6813      	ldr	r3, [r2, #0]
200067a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
200067a8:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
200067aa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
200067ae:	2b29      	cmp	r3, #41	; 0x29
200067b0:	d023      	beq.n	200067fa <I2C_DMASlaveTransmitCplt+0x7e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
200067b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
200067b6:	2b2a      	cmp	r3, #42	; 0x2a
200067b8:	d1e6      	bne.n	20006788 <I2C_DMASlaveTransmitCplt+0xc>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
200067ba:	2322      	movs	r3, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
200067bc:	2128      	movs	r1, #40	; 0x28
    __HAL_UNLOCK(hi2c);
200067be:	2400      	movs	r4, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
200067c0:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
200067c4:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200067c6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200067ca:	6815      	ldr	r5, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200067cc:	f001 0128 	and.w	r1, r1, #40	; 0x28
200067d0:	2928      	cmp	r1, #40	; 0x28
200067d2:	bf0c      	ite	eq
200067d4:	f06f 0344 	mvneq.w	r3, #68	; 0x44
200067d8:	f06f 03f4 	mvnne.w	r3, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200067dc:	402b      	ands	r3, r5
200067de:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
200067e0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
200067e4:	f7ff ff78 	bl	200066d8 <HAL_I2C_SlaveRxCpltCallback>
}
200067e8:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
200067ea:	6813      	ldr	r3, [r2, #0]
200067ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
200067f0:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
200067f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
200067f6:	2b29      	cmp	r3, #41	; 0x29
200067f8:	d1db      	bne.n	200067b2 <I2C_DMASlaveTransmitCplt+0x36>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
200067fa:	2321      	movs	r3, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
200067fc:	2128      	movs	r1, #40	; 0x28
    __HAL_UNLOCK(hi2c);
200067fe:	2400      	movs	r4, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
20006800:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
20006804:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006806:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000680a:	6815      	ldr	r5, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000680c:	f001 0128 	and.w	r1, r1, #40	; 0x28
20006810:	2928      	cmp	r1, #40	; 0x28
20006812:	bf0c      	ite	eq
20006814:	f06f 0342 	mvneq.w	r3, #66	; 0x42
20006818:	f06f 03f2 	mvnne.w	r3, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000681c:	402b      	ands	r3, r5
2000681e:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
20006820:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
20006824:	f7ff ff56 	bl	200066d4 <HAL_I2C_SlaveTxCpltCallback>
}
20006828:	bd38      	pop	{r3, r4, r5, pc}
2000682a:	bf00      	nop

2000682c <I2C_DMASlaveReceiveCplt>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000682c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
2000682e:	b538      	push	{r3, r4, r5, lr}
  if ((__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U) && \
20006830:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  uint32_t tmpoptions = hi2c->XferOptions;
20006832:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U) && \
20006834:	6812      	ldr	r2, [r2, #0]
20006836:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2000683a:	6852      	ldr	r2, [r2, #4]
2000683c:	d000      	beq.n	20006840 <I2C_DMASlaveReceiveCplt+0x14>
2000683e:	b102      	cbz	r2, 20006842 <I2C_DMASlaveReceiveCplt+0x16>
}
20006840:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
20006842:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
20006844:	2100      	movs	r1, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
20006846:	681a      	ldr	r2, [r3, #0]
20006848:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2000684c:	601a      	str	r2, [r3, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2000684e:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
20006850:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
20006854:	0451      	lsls	r1, r2, #17
20006856:	d425      	bmi.n	200068a4 <I2C_DMASlaveReceiveCplt+0x78>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
20006858:	0412      	lsls	r2, r2, #16
2000685a:	d503      	bpl.n	20006864 <I2C_DMASlaveReceiveCplt+0x38>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000685c:	681a      	ldr	r2, [r3, #0]
2000685e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20006862:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
20006864:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
20006868:	2a29      	cmp	r2, #41	; 0x29
2000686a:	d020      	beq.n	200068ae <I2C_DMASlaveReceiveCplt+0x82>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2000686c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
20006870:	2a2a      	cmp	r2, #42	; 0x2a
20006872:	d1e5      	bne.n	20006840 <I2C_DMASlaveReceiveCplt+0x14>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
20006874:	2222      	movs	r2, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
20006876:	2128      	movs	r1, #40	; 0x28
    __HAL_UNLOCK(hi2c);
20006878:	2400      	movs	r4, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2000687a:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2000687e:	6302      	str	r2, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006880:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006884:	681d      	ldr	r5, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006886:	f001 0128 	and.w	r1, r1, #40	; 0x28
2000688a:	2928      	cmp	r1, #40	; 0x28
2000688c:	bf0c      	ite	eq
2000688e:	f06f 0244 	mvneq.w	r2, #68	; 0x44
20006892:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006896:	402a      	ands	r2, r5
20006898:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
2000689a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2000689e:	f7ff ff1b 	bl	200066d8 <HAL_I2C_SlaveRxCpltCallback>
}
200068a2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
200068a4:	681a      	ldr	r2, [r3, #0]
200068a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
200068aa:	601a      	str	r2, [r3, #0]
200068ac:	e7da      	b.n	20006864 <I2C_DMASlaveReceiveCplt+0x38>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
200068ae:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
200068b0:	2221      	movs	r2, #33	; 0x21
    __HAL_UNLOCK(hi2c);
200068b2:	2400      	movs	r4, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
200068b4:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
200068b8:	6302      	str	r2, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200068ba:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200068be:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200068c0:	f001 0128 	and.w	r1, r1, #40	; 0x28
200068c4:	2928      	cmp	r1, #40	; 0x28
200068c6:	bf0c      	ite	eq
200068c8:	f06f 0142 	mvneq.w	r1, #66	; 0x42
200068cc:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200068d0:	400a      	ands	r2, r1
200068d2:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
200068d4:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
200068d8:	f7ff fefc 	bl	200066d4 <HAL_I2C_SlaveTxCpltCallback>
}
200068dc:	bd38      	pop	{r3, r4, r5, pc}
200068de:	bf00      	nop

200068e0 <HAL_I2C_AddrCallback>:
}
200068e0:	4770      	bx	lr
200068e2:	bf00      	nop

200068e4 <I2C_ITAddrCplt.isra.0.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
200068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
200068e6:	6805      	ldr	r5, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
200068e8:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
200068ea:	69a9      	ldr	r1, [r5, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
200068ec:	69aa      	ldr	r2, [r5, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
200068ee:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
200068f0:	68ae      	ldr	r6, [r5, #8]
    transferdirection = I2C_GET_DIR(hi2c);
200068f2:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
200068f6:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
200068fa:	68ef      	ldr	r7, [r5, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
200068fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
20006900:	d10d      	bne.n	2000691e <I2C_ITAddrCplt.isra.0.part.0+0x3a>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
20006902:	ea82 13d6 	eor.w	r3, r2, r6, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
20006906:	f3c6 0209 	ubfx	r2, r6, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
2000690a:	f013 0306 	ands.w	r3, r3, #6
2000690e:	d110      	bne.n	20006932 <I2C_ITAddrCplt.isra.0.part.0+0x4e>
        hi2c->AddrEventCount++;
20006910:	6c86      	ldr	r6, [r0, #72]	; 0x48
20006912:	3601      	adds	r6, #1
20006914:	6486      	str	r6, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
20006916:	6c86      	ldr	r6, [r0, #72]	; 0x48
20006918:	2e02      	cmp	r6, #2
2000691a:	d016      	beq.n	2000694a <I2C_ITAddrCplt.isra.0.part.0+0x66>
}
2000691c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000691e:	682b      	ldr	r3, [r5, #0]
      __HAL_UNLOCK(hi2c);
20006920:	2600      	movs	r6, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006922:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
20006926:	602b      	str	r3, [r5, #0]
      __HAL_UNLOCK(hi2c);
20006928:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2000692c:	f7ff ffd8 	bl	200068e0 <HAL_I2C_AddrCallback>
}
20006930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006932:	682b      	ldr	r3, [r5, #0]
        __HAL_UNLOCK(hi2c);
20006934:	2600      	movs	r6, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
20006936:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000693a:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
2000693e:	602b      	str	r3, [r5, #0]
        __HAL_UNLOCK(hi2c);
20006940:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
20006944:	f7ff ffcc 	bl	200068e0 <HAL_I2C_AddrCallback>
}
20006948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000694a:	2608      	movs	r6, #8
          hi2c->AddrEventCount = 0U;
2000694c:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000694e:	61ee      	str	r6, [r5, #28]
          __HAL_UNLOCK(hi2c);
20006950:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
20006954:	f7ff ffc4 	bl	200068e0 <HAL_I2C_AddrCallback>
}
20006958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000695a:	bf00      	nop

2000695c <HAL_I2C_ListenCpltCallback>:
2000695c:	4770      	bx	lr
2000695e:	bf00      	nop

20006960 <HAL_I2C_MemTxCpltCallback>:
20006960:	4770      	bx	lr
20006962:	bf00      	nop

20006964 <HAL_I2C_MemRxCpltCallback>:
20006964:	4770      	bx	lr
20006966:	bf00      	nop

20006968 <HAL_I2C_ErrorCallback>:
20006968:	4770      	bx	lr
2000696a:	bf00      	nop

2000696c <HAL_I2C_AbortCpltCallback>:
2000696c:	4770      	bx	lr
2000696e:	bf00      	nop

20006970 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20006970:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
20006972:	b508      	push	{r3, lr}
  if (hi2c->hdmatx != NULL)
20006974:	6b83      	ldr	r3, [r0, #56]	; 0x38
20006976:	b10b      	cbz	r3, 2000697c <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
20006978:	2200      	movs	r2, #0
2000697a:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
2000697c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
2000697e:	b10b      	cbz	r3, 20006984 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
20006980:	2200      	movs	r2, #0
20006982:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
20006984:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
20006988:	2b60      	cmp	r3, #96	; 0x60
2000698a:	d006      	beq.n	2000699a <I2C_DMAAbort+0x2a>
    hi2c->PreviousState = I2C_STATE_NONE;
2000698c:	2300      	movs	r3, #0
2000698e:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
20006990:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
20006994:	f7ff ffe8 	bl	20006968 <HAL_I2C_ErrorCallback>
}
20006998:	bd08      	pop	{r3, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
2000699a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
2000699c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
2000699e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
200069a2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
200069a6:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
200069a8:	f7ff ffe0 	bl	2000696c <HAL_I2C_AbortCpltCallback>
}
200069ac:	bd08      	pop	{r3, pc}
200069ae:	bf00      	nop

200069b0 <I2C_ITError>:
{
200069b0:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
200069b2:	4a4a      	ldr	r2, [pc, #296]	; (20006adc <I2C_ITError+0x12c>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
200069b4:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
200069b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
200069ba:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
200069bc:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
200069c0:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
200069c2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
200069c4:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
200069c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
200069c8:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
200069ca:	ea41 0102 	orr.w	r1, r1, r2
200069ce:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
200069d0:	d86c      	bhi.n	20006aac <I2C_ITError+0xfc>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200069d2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    hi2c->State         = HAL_I2C_STATE_LISTEN;
200069d6:	2628      	movs	r6, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200069d8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200069dc:	4032      	ands	r2, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200069de:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200069e0:	4030      	ands	r0, r6
    hi2c->XferISR       = I2C_Slave_ISR_IT;
200069e2:	4d3f      	ldr	r5, [pc, #252]	; (20006ae0 <I2C_ITError+0x130>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200069e4:	42b2      	cmp	r2, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200069e6:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200069e8:	bf14      	ite	ne
200069ea:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
200069ee:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200069f2:	42b0      	cmp	r0, r6
200069f4:	bf18      	it	ne
200069f6:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200069fa:	400a      	ands	r2, r1
200069fc:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
200069fe:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
20006a02:	6365      	str	r5, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
20006a04:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
20006a06:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
20006a08:	b118      	cbz	r0, 20006a12 <I2C_ITError+0x62>
20006a0a:	2a11      	cmp	r2, #17
20006a0c:	d01e      	beq.n	20006a4c <I2C_ITError+0x9c>
20006a0e:	2a21      	cmp	r2, #33	; 0x21
20006a10:	d01c      	beq.n	20006a4c <I2C_ITError+0x9c>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
20006a12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
20006a14:	b118      	cbz	r0, 20006a1e <I2C_ITError+0x6e>
20006a16:	2a12      	cmp	r2, #18
20006a18:	d02e      	beq.n	20006a78 <I2C_ITError+0xc8>
20006a1a:	2a22      	cmp	r2, #34	; 0x22
20006a1c:	d02c      	beq.n	20006a78 <I2C_ITError+0xc8>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
20006a1e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
20006a22:	2b60      	cmp	r3, #96	; 0x60
20006a24:	d007      	beq.n	20006a36 <I2C_ITError+0x86>
    hi2c->PreviousState = I2C_STATE_NONE;
20006a26:	2300      	movs	r3, #0
    HAL_I2C_ErrorCallback(hi2c);
20006a28:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
20006a2a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
20006a2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
20006a30:	f7ff ff9a 	bl	20006968 <HAL_I2C_ErrorCallback>
}
20006a34:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
20006a36:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
20006a38:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
20006a3a:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
20006a3c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
20006a40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
20006a44:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
20006a46:	f7ff ff91 	bl	2000696c <HAL_I2C_AbortCpltCallback>
}
20006a4a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
20006a4c:	681a      	ldr	r2, [r3, #0]
20006a4e:	0451      	lsls	r1, r2, #17
20006a50:	d43f      	bmi.n	20006ad2 <I2C_ITError+0x122>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
20006a52:	f7fb fc41 	bl	200022d8 <HAL_DMA_GetState>
20006a56:	2801      	cmp	r0, #1
20006a58:	d0e1      	beq.n	20006a1e <I2C_ITError+0x6e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
20006a5a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
20006a5c:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
20006a5e:	4a21      	ldr	r2, [pc, #132]	; (20006ae4 <I2C_ITError+0x134>)
20006a60:	6502      	str	r2, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
20006a62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
20006a66:	f7fb f9f9 	bl	20001e5c <HAL_DMA_Abort_IT>
20006a6a:	2800      	cmp	r0, #0
20006a6c:	d0e2      	beq.n	20006a34 <I2C_ITError+0x84>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
20006a6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
20006a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
20006a74:	6d03      	ldr	r3, [r0, #80]	; 0x50
20006a76:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
20006a78:	681a      	ldr	r2, [r3, #0]
20006a7a:	0412      	lsls	r2, r2, #16
20006a7c:	d503      	bpl.n	20006a86 <I2C_ITError+0xd6>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
20006a7e:	681a      	ldr	r2, [r3, #0]
20006a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20006a84:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
20006a86:	f7fb fc27 	bl	200022d8 <HAL_DMA_GetState>
20006a8a:	2801      	cmp	r0, #1
20006a8c:	d0c7      	beq.n	20006a1e <I2C_ITError+0x6e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
20006a8e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
20006a90:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
20006a92:	4a14      	ldr	r2, [pc, #80]	; (20006ae4 <I2C_ITError+0x134>)
20006a94:	6502      	str	r2, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
20006a96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
20006a9a:	f7fb f9df 	bl	20001e5c <HAL_DMA_Abort_IT>
20006a9e:	2800      	cmp	r0, #0
20006aa0:	d0c8      	beq.n	20006a34 <I2C_ITError+0x84>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
20006aa2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
20006aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
20006aa8:	6d03      	ldr	r3, [r0, #80]	; 0x50
20006aaa:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006aac:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006aae:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006ab2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006ab6:	681a      	ldr	r2, [r3, #0]
20006ab8:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
20006abc:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
20006abe:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
20006ac2:	2a60      	cmp	r2, #96	; 0x60
20006ac4:	d002      	beq.n	20006acc <I2C_ITError+0x11c>
      hi2c->State         = HAL_I2C_STATE_READY;
20006ac6:	2220      	movs	r2, #32
20006ac8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->XferISR       = NULL;
20006acc:	2200      	movs	r2, #0
20006ace:	6362      	str	r2, [r4, #52]	; 0x34
20006ad0:	e798      	b.n	20006a04 <I2C_ITError+0x54>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
20006ad2:	681a      	ldr	r2, [r3, #0]
20006ad4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20006ad8:	601a      	str	r2, [r3, #0]
20006ada:	e7ba      	b.n	20006a52 <I2C_ITError+0xa2>
20006adc:	ffff0000 	.word	0xffff0000
20006ae0:	20006c7d 	.word	0x20006c7d
20006ae4:	20006971 	.word	0x20006971

20006ae8 <I2C_ITSlaveCplt>:
{
20006ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20006aea:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
20006aec:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20006aee:	2620      	movs	r6, #32
{
20006af0:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
20006af2:	6818      	ldr	r0, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
20006af4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20006af8:	61de      	str	r6, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
20006afa:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
20006afe:	2a21      	cmp	r2, #33	; 0x21
20006b00:	d168      	bne.n	20006bd4 <I2C_ITSlaveCplt+0xec>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006b02:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006b06:	6819      	ldr	r1, [r3, #0]
20006b08:	f021 01fa 	bic.w	r1, r1, #250	; 0xfa
20006b0c:	6019      	str	r1, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
20006b0e:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
20006b10:	6859      	ldr	r1, [r3, #4]
  I2C_RESET_CR2(hi2c);
20006b12:	4e58      	ldr	r6, [pc, #352]	; (20006c74 <I2C_ITSlaveCplt+0x18c>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
20006b14:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
20006b18:	6059      	str	r1, [r3, #4]
  I2C_RESET_CR2(hi2c);
20006b1a:	685a      	ldr	r2, [r3, #4]
20006b1c:	4032      	ands	r2, r6
20006b1e:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
20006b20:	699a      	ldr	r2, [r3, #24]
20006b22:	0792      	lsls	r2, r2, #30
20006b24:	d501      	bpl.n	20006b2a <I2C_ITSlaveCplt+0x42>
    hi2c->Instance->TXDR = 0x00U;
20006b26:	2200      	movs	r2, #0
20006b28:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
20006b2a:	699a      	ldr	r2, [r3, #24]
20006b2c:	07d7      	lsls	r7, r2, #31
20006b2e:	d403      	bmi.n	20006b38 <I2C_ITSlaveCplt+0x50>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
20006b30:	699a      	ldr	r2, [r3, #24]
20006b32:	f042 0201 	orr.w	r2, r2, #1
20006b36:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
20006b38:	0446      	lsls	r6, r0, #17
20006b3a:	d555      	bpl.n	20006be8 <I2C_ITSlaveCplt+0x100>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
20006b3c:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
20006b3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
20006b40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20006b44:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
20006b46:	b119      	cbz	r1, 20006b50 <I2C_ITSlaveCplt+0x68>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
20006b48:	680a      	ldr	r2, [r1, #0]
20006b4a:	6852      	ldr	r2, [r2, #4]
20006b4c:	b292      	uxth	r2, r2
20006b4e:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
20006b50:	076a      	lsls	r2, r5, #29
20006b52:	d509      	bpl.n	20006b68 <I2C_ITSlaveCplt+0x80>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
20006b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    tmpITFlags &= ~I2C_FLAG_RXNE;
20006b56:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
20006b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
20006b5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
20006b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
20006b60:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
20006b62:	3301      	adds	r3, #1
20006b64:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
20006b66:	bb72      	cbnz	r2, 20006bc6 <I2C_ITSlaveCplt+0xde>
  if (hi2c->XferCount != 0U)
20006b68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
20006b6a:	b29b      	uxth	r3, r3
20006b6c:	b11b      	cbz	r3, 20006b76 <I2C_ITSlaveCplt+0x8e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20006b6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
20006b70:	f043 0304 	orr.w	r3, r3, #4
20006b74:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
20006b76:	2700      	movs	r7, #0
20006b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
20006b7c:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
20006b7e:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
20006b80:	2e00      	cmp	r6, #0
20006b82:	d13b      	bne.n	20006bfc <I2C_ITSlaveCplt+0x114>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
20006b84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
20006b86:	4d3c      	ldr	r5, [pc, #240]	; (20006c78 <I2C_ITSlaveCplt+0x190>)
20006b88:	42ab      	cmp	r3, r5
20006b8a:	d10e      	bne.n	20006baa <I2C_ITSlaveCplt+0xc2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
20006b8c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
20006b90:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
20006b92:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
20006b96:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
20006b98:	f04f 0320 	mov.w	r3, #32
20006b9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
20006ba0:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
20006ba2:	d063      	beq.n	20006c6c <I2C_ITSlaveCplt+0x184>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
20006ba4:	f7ff fd96 	bl	200066d4 <HAL_I2C_SlaveTxCpltCallback>
}
20006ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveSeqCplt(hi2c);
20006baa:	4620      	mov	r0, r4
20006bac:	f7ff fd96 	bl	200066dc <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
20006bb0:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20006bb2:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
20006bb4:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
20006bb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
20006bba:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
20006bbe:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
20006bc0:	f7ff fecc 	bl	2000695c <HAL_I2C_ListenCpltCallback>
}
20006bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
20006bc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
20006bc8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
20006bca:	3b01      	subs	r3, #1
      hi2c->XferSize--;
20006bcc:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
20006bce:	b29b      	uxth	r3, r3
20006bd0:	8563      	strh	r3, [r4, #42]	; 0x2a
20006bd2:	e7c9      	b.n	20006b68 <I2C_ITSlaveCplt+0x80>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
20006bd4:	2a22      	cmp	r2, #34	; 0x22
20006bd6:	d19b      	bne.n	20006b10 <I2C_ITSlaveCplt+0x28>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006bd8:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006bdc:	6819      	ldr	r1, [r3, #0]
20006bde:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
20006be2:	6019      	str	r1, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
20006be4:	6322      	str	r2, [r4, #48]	; 0x30
20006be6:	e793      	b.n	20006b10 <I2C_ITSlaveCplt+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
20006be8:	0401      	lsls	r1, r0, #16
20006bea:	d5b1      	bpl.n	20006b50 <I2C_ITSlaveCplt+0x68>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
20006bec:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
20006bee:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
20006bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20006bf4:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
20006bf6:	2900      	cmp	r1, #0
20006bf8:	d1a6      	bne.n	20006b48 <I2C_ITSlaveCplt+0x60>
20006bfa:	e7a9      	b.n	20006b50 <I2C_ITSlaveCplt+0x68>
    I2C_ITError(hi2c, hi2c->ErrorCode);
20006bfc:	6c61      	ldr	r1, [r4, #68]	; 0x44
20006bfe:	4620      	mov	r0, r4
20006c00:	f7ff fed6 	bl	200069b0 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
20006c04:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
20006c08:	2b28      	cmp	r3, #40	; 0x28
20006c0a:	d1cd      	bne.n	20006ba8 <I2C_ITSlaveCplt+0xc0>
  hi2c->State = HAL_I2C_STATE_READY;
20006c0c:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20006c0e:	4a1a      	ldr	r2, [pc, #104]	; (20006c78 <I2C_ITSlaveCplt+0x190>)
  hi2c->XferISR = NULL;
20006c10:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20006c12:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
20006c14:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
20006c16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
20006c1a:	076b      	lsls	r3, r5, #29
  hi2c->Mode = HAL_I2C_MODE_NONE;
20006c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
20006c20:	d512      	bpl.n	20006c48 <I2C_ITSlaveCplt+0x160>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
20006c22:	6822      	ldr	r2, [r4, #0]
20006c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
20006c26:	6a52      	ldr	r2, [r2, #36]	; 0x24
20006c28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
20006c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
20006c2c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
20006c2e:	3301      	adds	r3, #1
20006c30:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
20006c32:	b14a      	cbz	r2, 20006c48 <I2C_ITSlaveCplt+0x160>
      hi2c->XferCount--;
20006c34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
20006c36:	3a01      	subs	r2, #1
      hi2c->XferCount--;
20006c38:	3b01      	subs	r3, #1
      hi2c->XferSize--;
20006c3a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
20006c3c:	b29b      	uxth	r3, r3
20006c3e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20006c40:	6c63      	ldr	r3, [r4, #68]	; 0x44
20006c42:	f043 0304 	orr.w	r3, r3, #4
20006c46:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006c48:	6823      	ldr	r3, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20006c4a:	2510      	movs	r5, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006c4c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
20006c50:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006c52:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  HAL_I2C_ListenCpltCallback(hi2c);
20006c56:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006c58:	681a      	ldr	r2, [r3, #0]
20006c5a:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
20006c5e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20006c60:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
20006c62:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
20006c66:	f7ff fe79 	bl	2000695c <HAL_I2C_ListenCpltCallback>
}
20006c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
20006c6c:	f7ff fd34 	bl	200066d8 <HAL_I2C_SlaveRxCpltCallback>
}
20006c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20006c72:	bf00      	nop
20006c74:	fe00e800 	.word	0xfe00e800
20006c78:	ffff0000 	.word	0xffff0000

20006c7c <I2C_Slave_ISR_IT>:
{
20006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
20006c7e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
20006c82:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
20006c84:	2b01      	cmp	r3, #1
20006c86:	d07e      	beq.n	20006d86 <I2C_Slave_ISR_IT+0x10a>
20006c88:	4617      	mov	r7, r2
20006c8a:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
20006c8c:	068a      	lsls	r2, r1, #26
20006c8e:	4604      	mov	r4, r0
20006c90:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
20006c92:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
20006c96:	d501      	bpl.n	20006c9c <I2C_Slave_ISR_IT+0x20>
20006c98:	06bb      	lsls	r3, r7, #26
20006c9a:	d460      	bmi.n	20006d5e <I2C_Slave_ISR_IT+0xe2>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
20006c9c:	06ea      	lsls	r2, r5, #27
20006c9e:	d51b      	bpl.n	20006cd8 <I2C_Slave_ISR_IT+0x5c>
20006ca0:	06fb      	lsls	r3, r7, #27
20006ca2:	d519      	bpl.n	20006cd8 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount == 0U)
20006ca4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
20006ca6:	b29b      	uxth	r3, r3
20006ca8:	2b00      	cmp	r3, #0
20006caa:	d15d      	bne.n	20006d68 <I2C_Slave_ISR_IT+0xec>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
20006cac:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
20006cb0:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
20006cb4:	b2d2      	uxtb	r2, r2
20006cb6:	d101      	bne.n	20006cbc <I2C_Slave_ISR_IT+0x40>
20006cb8:	2a28      	cmp	r2, #40	; 0x28
20006cba:	d07b      	beq.n	20006db4 <I2C_Slave_ISR_IT+0x138>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
20006cbc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20006cc0:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
20006cc2:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20006cc4:	6823      	ldr	r3, [r4, #0]
20006cc6:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
20006cc8:	d102      	bne.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
20006cca:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
20006cce:	d160      	bne.n	20006d92 <I2C_Slave_ISR_IT+0x116>
  __HAL_UNLOCK(hi2c);
20006cd0:	2000      	movs	r0, #0
20006cd2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
20006cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
20006cd8:	076a      	lsls	r2, r5, #29
20006cda:	d40d      	bmi.n	20006cf8 <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
20006cdc:	0728      	lsls	r0, r5, #28
20006cde:	d529      	bpl.n	20006d34 <I2C_Slave_ISR_IT+0xb8>
20006ce0:	0739      	lsls	r1, r7, #28
20006ce2:	d527      	bpl.n	20006d34 <I2C_Slave_ISR_IT+0xb8>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
20006ce4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
20006ce8:	f003 0328 	and.w	r3, r3, #40	; 0x28
20006cec:	2b28      	cmp	r3, #40	; 0x28
20006cee:	d05d      	beq.n	20006dac <I2C_Slave_ISR_IT+0x130>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20006cf0:	6823      	ldr	r3, [r4, #0]
20006cf2:	2208      	movs	r2, #8
20006cf4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
20006cf6:	e7eb      	b.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
20006cf8:	077b      	lsls	r3, r7, #29
20006cfa:	d5ef      	bpl.n	20006cdc <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
20006cfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
20006cfe:	b29b      	uxth	r3, r3
20006d00:	b16b      	cbz	r3, 20006d1e <I2C_Slave_ISR_IT+0xa2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
20006d02:	6822      	ldr	r2, [r4, #0]
20006d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
20006d06:	6a52      	ldr	r2, [r2, #36]	; 0x24
20006d08:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
20006d0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
20006d0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
20006d0e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
20006d10:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
20006d12:	3101      	adds	r1, #1
      hi2c->XferCount--;
20006d14:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
20006d16:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
20006d18:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
20006d1a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
20006d1c:	8522      	strh	r2, [r4, #40]	; 0x28
    if ((hi2c->XferCount == 0U) && \
20006d1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
20006d20:	b29b      	uxth	r3, r3
20006d22:	2b00      	cmp	r3, #0
20006d24:	d1d4      	bne.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
20006d26:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
20006d2a:	d0d1      	beq.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
        I2C_ITSlaveSeqCplt(hi2c);
20006d2c:	4620      	mov	r0, r4
20006d2e:	f7ff fcd5 	bl	200066dc <I2C_ITSlaveSeqCplt>
20006d32:	e7cd      	b.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
20006d34:	07aa      	lsls	r2, r5, #30
20006d36:	d5cb      	bpl.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
20006d38:	07bb      	lsls	r3, r7, #30
20006d3a:	d5c9      	bpl.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
    if (hi2c->XferCount > 0U)
20006d3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
20006d3e:	b29b      	uxth	r3, r3
20006d40:	b31b      	cbz	r3, 20006d8a <I2C_Slave_ISR_IT+0x10e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
20006d42:	6a61      	ldr	r1, [r4, #36]	; 0x24
20006d44:	6823      	ldr	r3, [r4, #0]
20006d46:	f811 0b01 	ldrb.w	r0, [r1], #1
      hi2c->XferSize--;
20006d4a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
20006d4c:	6298      	str	r0, [r3, #40]	; 0x28
      hi2c->XferCount--;
20006d4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
20006d50:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
20006d52:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
20006d54:	3b01      	subs	r3, #1
      hi2c->XferSize--;
20006d56:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
20006d58:	b29b      	uxth	r3, r3
20006d5a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
20006d5c:	e7b8      	b.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
20006d5e:	f7ff fec3 	bl	20006ae8 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
20006d62:	06ea      	lsls	r2, r5, #27
20006d64:	d5b8      	bpl.n	20006cd8 <I2C_Slave_ISR_IT+0x5c>
20006d66:	e79b      	b.n	20006ca0 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20006d68:	6823      	ldr	r3, [r4, #0]
20006d6a:	2210      	movs	r2, #16
20006d6c:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20006d6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
20006d70:	f043 0304 	orr.w	r3, r3, #4
20006d74:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
20006d76:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
20006d7a:	d1a9      	bne.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
        I2C_ITError(hi2c, hi2c->ErrorCode);
20006d7c:	6c61      	ldr	r1, [r4, #68]	; 0x44
20006d7e:	4620      	mov	r0, r4
20006d80:	f7ff fe16 	bl	200069b0 <I2C_ITError>
20006d84:	e7a4      	b.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
  __HAL_LOCK(hi2c);
20006d86:	2002      	movs	r0, #2
}
20006d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
20006d8a:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
20006d8e:	d19f      	bne.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
20006d90:	e7cc      	b.n	20006d2c <I2C_Slave_ISR_IT+0xb0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
20006d92:	699a      	ldr	r2, [r3, #24]
20006d94:	0790      	lsls	r0, r2, #30
20006d96:	d501      	bpl.n	20006d9c <I2C_Slave_ISR_IT+0x120>
    hi2c->Instance->TXDR = 0x00U;
20006d98:	2200      	movs	r2, #0
20006d9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
20006d9c:	699a      	ldr	r2, [r3, #24]
20006d9e:	07d1      	lsls	r1, r2, #31
20006da0:	d4c4      	bmi.n	20006d2c <I2C_Slave_ISR_IT+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
20006da2:	699a      	ldr	r2, [r3, #24]
20006da4:	f042 0201 	orr.w	r2, r2, #1
20006da8:	619a      	str	r2, [r3, #24]
20006daa:	e7bf      	b.n	20006d2c <I2C_Slave_ISR_IT+0xb0>
20006dac:	4620      	mov	r0, r4
20006dae:	f7ff fd99 	bl	200068e4 <I2C_ITAddrCplt.isra.0.part.0>
20006db2:	e78d      	b.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20006db4:	4917      	ldr	r1, [pc, #92]	; (20006e14 <I2C_Slave_ISR_IT+0x198>)
  hi2c->State = HAL_I2C_STATE_READY;
20006db6:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
20006db8:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
20006dba:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20006dbc:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
20006dbe:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
20006dc0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
20006dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
20006dc8:	d512      	bpl.n	20006df0 <I2C_Slave_ISR_IT+0x174>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
20006dca:	6822      	ldr	r2, [r4, #0]
20006dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
20006dce:	6a52      	ldr	r2, [r2, #36]	; 0x24
20006dd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
20006dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
20006dd4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
20006dd6:	3301      	adds	r3, #1
20006dd8:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
20006dda:	b14a      	cbz	r2, 20006df0 <I2C_Slave_ISR_IT+0x174>
      hi2c->XferCount--;
20006ddc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
20006dde:	3a01      	subs	r2, #1
      hi2c->XferCount--;
20006de0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
20006de2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
20006de4:	b29b      	uxth	r3, r3
20006de6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20006de8:	6c63      	ldr	r3, [r4, #68]	; 0x44
20006dea:	f043 0304 	orr.w	r3, r3, #4
20006dee:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006df0:	6823      	ldr	r3, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20006df2:	2510      	movs	r5, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006df4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
20006df8:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006dfa:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  HAL_I2C_ListenCpltCallback(hi2c);
20006dfe:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006e00:	681a      	ldr	r2, [r3, #0]
20006e02:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
20006e06:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20006e08:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
20006e0a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
20006e0e:	f7ff fda5 	bl	2000695c <HAL_I2C_ListenCpltCallback>
}
20006e12:	e75d      	b.n	20006cd0 <I2C_Slave_ISR_IT+0x54>
20006e14:	ffff0000 	.word	0xffff0000

20006e18 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20006e18:	2220      	movs	r2, #32
20006e1a:	6803      	ldr	r3, [r0, #0]
{
20006e1c:	b530      	push	{r4, r5, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20006e1e:	61da      	str	r2, [r3, #28]
{
20006e20:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
20006e22:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
20006e26:	2a21      	cmp	r2, #33	; 0x21
20006e28:	d053      	beq.n	20006ed2 <I2C_ITMasterCplt+0xba>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
20006e2a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
20006e2e:	2a22      	cmp	r2, #34	; 0x22
20006e30:	d038      	beq.n	20006ea4 <I2C_ITMasterCplt+0x8c>
  I2C_RESET_CR2(hi2c);
20006e32:	685a      	ldr	r2, [r3, #4]
  hi2c->XferISR       = NULL;
20006e34:	2500      	movs	r5, #0
  I2C_RESET_CR2(hi2c);
20006e36:	4c41      	ldr	r4, [pc, #260]	; (20006f3c <I2C_ITMasterCplt+0x124>)
20006e38:	4022      	ands	r2, r4
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
20006e3a:	4c41      	ldr	r4, [pc, #260]	; (20006f40 <I2C_ITMasterCplt+0x128>)
  I2C_RESET_CR2(hi2c);
20006e3c:	605a      	str	r2, [r3, #4]
  hi2c->XferISR       = NULL;
20006e3e:	6345      	str	r5, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
20006e40:	06cd      	lsls	r5, r1, #27
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
20006e42:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
20006e44:	d505      	bpl.n	20006e52 <I2C_ITMasterCplt+0x3a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20006e46:	2210      	movs	r2, #16
20006e48:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20006e4a:	6c42      	ldr	r2, [r0, #68]	; 0x44
20006e4c:	f042 0204 	orr.w	r2, r2, #4
20006e50:	6442      	str	r2, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
20006e52:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
20006e56:	2a60      	cmp	r2, #96	; 0x60
20006e58:	d034      	beq.n	20006ec4 <I2C_ITMasterCplt+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
20006e5a:	699a      	ldr	r2, [r3, #24]
20006e5c:	0791      	lsls	r1, r2, #30
20006e5e:	d501      	bpl.n	20006e64 <I2C_ITMasterCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
20006e60:	2200      	movs	r2, #0
20006e62:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
20006e64:	699a      	ldr	r2, [r3, #24]
20006e66:	07d2      	lsls	r2, r2, #31
20006e68:	d403      	bmi.n	20006e72 <I2C_ITMasterCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
20006e6a:	699a      	ldr	r2, [r3, #24]
20006e6c:	f042 0201 	orr.w	r2, r2, #1
20006e70:	619a      	str	r2, [r3, #24]
  tmperror = hi2c->ErrorCode;
20006e72:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
20006e74:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
20006e78:	2a60      	cmp	r2, #96	; 0x60
20006e7a:	d00d      	beq.n	20006e98 <I2C_ITMasterCplt+0x80>
20006e7c:	1e1a      	subs	r2, r3, #0
20006e7e:	bf18      	it	ne
20006e80:	2201      	movne	r2, #1
20006e82:	b94b      	cbnz	r3, 20006e98 <I2C_ITMasterCplt+0x80>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
20006e84:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
20006e88:	2b21      	cmp	r3, #33	; 0x21
20006e8a:	d041      	beq.n	20006f10 <I2C_ITMasterCplt+0xf8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
20006e8c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
20006e90:	2b22      	cmp	r3, #34	; 0x22
20006e92:	d02e      	beq.n	20006ef2 <I2C_ITMasterCplt+0xda>
}
20006e94:	b003      	add	sp, #12
20006e96:	bd30      	pop	{r4, r5, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
20006e98:	6c41      	ldr	r1, [r0, #68]	; 0x44
}
20006e9a:	b003      	add	sp, #12
20006e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    I2C_ITError(hi2c, hi2c->ErrorCode);
20006ea0:	f7ff bd86 	b.w	200069b0 <I2C_ITError>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006ea4:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
20006ea8:	2512      	movs	r5, #18
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006eaa:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006eac:	f004 0428 	and.w	r4, r4, #40	; 0x28
20006eb0:	2c28      	cmp	r4, #40	; 0x28
20006eb2:	bf0c      	ite	eq
20006eb4:	f06f 0444 	mvneq.w	r4, #68	; 0x44
20006eb8:	f06f 04f4 	mvnne.w	r4, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006ebc:	4022      	ands	r2, r4
20006ebe:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
20006ec0:	6305      	str	r5, [r0, #48]	; 0x30
20006ec2:	e7b6      	b.n	20006e32 <I2C_ITMasterCplt+0x1a>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
20006ec4:	074c      	lsls	r4, r1, #29
20006ec6:	d5c8      	bpl.n	20006e5a <I2C_ITMasterCplt+0x42>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
20006ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20006eca:	b2d2      	uxtb	r2, r2
20006ecc:	9201      	str	r2, [sp, #4]
    UNUSED(tmpreg);
20006ece:	9a01      	ldr	r2, [sp, #4]
20006ed0:	e7c3      	b.n	20006e5a <I2C_ITMasterCplt+0x42>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006ed2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
20006ed6:	2511      	movs	r5, #17
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006ed8:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20006eda:	f004 0428 	and.w	r4, r4, #40	; 0x28
20006ede:	2c28      	cmp	r4, #40	; 0x28
20006ee0:	bf0c      	ite	eq
20006ee2:	f06f 0442 	mvneq.w	r4, #66	; 0x42
20006ee6:	f06f 04f2 	mvnne.w	r4, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20006eea:	4022      	ands	r2, r4
20006eec:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
20006eee:	6305      	str	r5, [r0, #48]	; 0x30
20006ef0:	e79f      	b.n	20006e32 <I2C_ITMasterCplt+0x1a>
    hi2c->State = HAL_I2C_STATE_READY;
20006ef2:	2320      	movs	r3, #32
      __HAL_UNLOCK(hi2c);
20006ef4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
20006ef8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
20006efc:	6302      	str	r2, [r0, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
20006efe:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
20006f02:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
20006f06:	2b40      	cmp	r3, #64	; 0x40
20006f08:	d014      	beq.n	20006f34 <I2C_ITMasterCplt+0x11c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
20006f0a:	f7ff fbe1 	bl	200066d0 <HAL_I2C_MasterRxCpltCallback>
}
20006f0e:	e7c1      	b.n	20006e94 <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
20006f10:	2320      	movs	r3, #32
      __HAL_UNLOCK(hi2c);
20006f12:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
20006f16:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
20006f1a:	6302      	str	r2, [r0, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
20006f1c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
20006f20:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
20006f24:	2b40      	cmp	r3, #64	; 0x40
20006f26:	d002      	beq.n	20006f2e <I2C_ITMasterCplt+0x116>
      HAL_I2C_MasterTxCpltCallback(hi2c);
20006f28:	f7ff fbd0 	bl	200066cc <HAL_I2C_MasterTxCpltCallback>
20006f2c:	e7b2      	b.n	20006e94 <I2C_ITMasterCplt+0x7c>
      HAL_I2C_MemTxCpltCallback(hi2c);
20006f2e:	f7ff fd17 	bl	20006960 <HAL_I2C_MemTxCpltCallback>
20006f32:	e7af      	b.n	20006e94 <I2C_ITMasterCplt+0x7c>
      HAL_I2C_MemRxCpltCallback(hi2c);
20006f34:	f7ff fd16 	bl	20006964 <HAL_I2C_MemRxCpltCallback>
20006f38:	e7ac      	b.n	20006e94 <I2C_ITMasterCplt+0x7c>
20006f3a:	bf00      	nop
20006f3c:	fe00e800 	.word	0xfe00e800
20006f40:	ffff0000 	.word	0xffff0000

20006f44 <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
20006f44:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
20006f48:	2b01      	cmp	r3, #1
20006f4a:	f000 80ba 	beq.w	200070c2 <I2C_Master_ISR_IT+0x17e>
20006f4e:	2301      	movs	r3, #1
{
20006f50:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
20006f52:	06cf      	lsls	r7, r1, #27
{
20006f54:	b083      	sub	sp, #12
20006f56:	4604      	mov	r4, r0
20006f58:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
20006f5a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
20006f5e:	d51a      	bpl.n	20006f96 <I2C_Master_ISR_IT+0x52>
20006f60:	06d6      	lsls	r6, r2, #27
20006f62:	d518      	bpl.n	20006f96 <I2C_Master_ISR_IT+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20006f64:	6803      	ldr	r3, [r0, #0]
20006f66:	2110      	movs	r1, #16
20006f68:	61d9      	str	r1, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20006f6a:	6c41      	ldr	r1, [r0, #68]	; 0x44
20006f6c:	f041 0104 	orr.w	r1, r1, #4
20006f70:	6441      	str	r1, [r0, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
20006f72:	6999      	ldr	r1, [r3, #24]
20006f74:	0788      	lsls	r0, r1, #30
20006f76:	d501      	bpl.n	20006f7c <I2C_Master_ISR_IT+0x38>
    hi2c->Instance->TXDR = 0x00U;
20006f78:	2100      	movs	r1, #0
20006f7a:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
20006f7c:	6999      	ldr	r1, [r3, #24]
20006f7e:	07c9      	lsls	r1, r1, #31
20006f80:	d562      	bpl.n	20007048 <I2C_Master_ISR_IT+0x104>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
20006f82:	06a9      	lsls	r1, r5, #26
20006f84:	d502      	bpl.n	20006f8c <I2C_Master_ISR_IT+0x48>
20006f86:	0693      	lsls	r3, r2, #26
20006f88:	f100 8092 	bmi.w	200070b0 <I2C_Master_ISR_IT+0x16c>
  __HAL_UNLOCK(hi2c);
20006f8c:	2000      	movs	r0, #0
20006f8e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
20006f92:	b003      	add	sp, #12
20006f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
20006f96:	076f      	lsls	r7, r5, #29
20006f98:	d411      	bmi.n	20006fbe <I2C_Master_ISR_IT+0x7a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
20006f9a:	07a8      	lsls	r0, r5, #30
20006f9c:	d522      	bpl.n	20006fe4 <I2C_Master_ISR_IT+0xa0>
20006f9e:	0791      	lsls	r1, r2, #30
20006fa0:	d520      	bpl.n	20006fe4 <I2C_Master_ISR_IT+0xa0>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
20006fa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
20006fa4:	6823      	ldr	r3, [r4, #0]
20006fa6:	f810 6b01 	ldrb.w	r6, [r0], #1
    hi2c->XferSize--;
20006faa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
20006fac:	629e      	str	r6, [r3, #40]	; 0x28
    hi2c->XferCount--;
20006fae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
20006fb0:	3901      	subs	r1, #1
    hi2c->pBuffPtr++;
20006fb2:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->XferCount--;
20006fb4:	3b01      	subs	r3, #1
    hi2c->XferSize--;
20006fb6:	8521      	strh	r1, [r4, #40]	; 0x28
    hi2c->XferCount--;
20006fb8:	b29b      	uxth	r3, r3
20006fba:	8563      	strh	r3, [r4, #42]	; 0x2a
20006fbc:	e7e1      	b.n	20006f82 <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
20006fbe:	0756      	lsls	r6, r2, #29
20006fc0:	d5eb      	bpl.n	20006f9a <I2C_Master_ISR_IT+0x56>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
20006fc2:	6821      	ldr	r1, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
20006fc4:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
20006fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
20006fca:	6a49      	ldr	r1, [r1, #36]	; 0x24
20006fcc:	7019      	strb	r1, [r3, #0]
    hi2c->XferCount--;
20006fce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
20006fd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    hi2c->XferSize--;
20006fd2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    hi2c->XferCount--;
20006fd4:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
20006fd6:	3001      	adds	r0, #1
    hi2c->XferCount--;
20006fd8:	b29b      	uxth	r3, r3
    hi2c->XferSize--;
20006fda:	3901      	subs	r1, #1
    hi2c->pBuffPtr++;
20006fdc:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->XferCount--;
20006fde:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
20006fe0:	8521      	strh	r1, [r4, #40]	; 0x28
    hi2c->XferCount--;
20006fe2:	e7ce      	b.n	20006f82 <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
20006fe4:	062b      	lsls	r3, r5, #24
20006fe6:	d416      	bmi.n	20007016 <I2C_Master_ISR_IT+0xd2>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
20006fe8:	066e      	lsls	r6, r5, #25
20006fea:	d5ca      	bpl.n	20006f82 <I2C_Master_ISR_IT+0x3e>
20006fec:	0650      	lsls	r0, r2, #25
20006fee:	d5c8      	bpl.n	20006f82 <I2C_Master_ISR_IT+0x3e>
    if (hi2c->XferCount == 0U)
20006ff0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
20006ff2:	b29b      	uxth	r3, r3
20006ff4:	2b00      	cmp	r3, #0
20006ff6:	d154      	bne.n	200070a2 <I2C_Master_ISR_IT+0x15e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
20006ff8:	6821      	ldr	r1, [r4, #0]
20006ffa:	684b      	ldr	r3, [r1, #4]
20006ffc:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
20007000:	d1bf      	bne.n	20006f82 <I2C_Master_ISR_IT+0x3e>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
20007002:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
20007004:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
20007008:	f040 808a 	bne.w	20007120 <I2C_Master_ISR_IT+0x1dc>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2000700c:	684b      	ldr	r3, [r1, #4]
2000700e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20007012:	604b      	str	r3, [r1, #4]
20007014:	e7b5      	b.n	20006f82 <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
20007016:	0657      	lsls	r7, r2, #25
20007018:	d5b3      	bpl.n	20006f82 <I2C_Master_ISR_IT+0x3e>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2000701a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2000701c:	b29b      	uxth	r3, r3
2000701e:	b1c3      	cbz	r3, 20007052 <I2C_Master_ISR_IT+0x10e>
20007020:	8d23      	ldrh	r3, [r4, #40]	; 0x28
20007022:	b9b3      	cbnz	r3, 20007052 <I2C_Master_ISR_IT+0x10e>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
20007024:	6820      	ldr	r0, [r4, #0]
20007026:	6841      	ldr	r1, [r0, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
20007028:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2000702a:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000702e:	b29b      	uxth	r3, r3
20007030:	2bff      	cmp	r3, #255	; 0xff
20007032:	d961      	bls.n	200070f8 <I2C_Master_ISR_IT+0x1b4>
  MODIFY_REG(hi2c->Instance->CR2,
20007034:	6843      	ldr	r3, [r0, #4]
        hi2c->XferSize = MAX_NBYTE_SIZE;
20007036:	27ff      	movs	r7, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
20007038:	4e4f      	ldr	r6, [pc, #316]	; (20007178 <I2C_Master_ISR_IT+0x234>)
        hi2c->XferSize = MAX_NBYTE_SIZE;
2000703a:	8527      	strh	r7, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
2000703c:	4033      	ands	r3, r6
2000703e:	4e4f      	ldr	r6, [pc, #316]	; (2000717c <I2C_Master_ISR_IT+0x238>)
20007040:	4319      	orrs	r1, r3
20007042:	430e      	orrs	r6, r1
20007044:	6046      	str	r6, [r0, #4]
}
20007046:	e79c      	b.n	20006f82 <I2C_Master_ISR_IT+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
20007048:	6999      	ldr	r1, [r3, #24]
2000704a:	f041 0101 	orr.w	r1, r1, #1
2000704e:	6199      	str	r1, [r3, #24]
20007050:	e797      	b.n	20006f82 <I2C_Master_ISR_IT+0x3e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
20007052:	6821      	ldr	r1, [r4, #0]
20007054:	684b      	ldr	r3, [r1, #4]
20007056:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
2000705a:	d122      	bne.n	200070a2 <I2C_Master_ISR_IT+0x15e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
2000705c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
20007060:	2720      	movs	r7, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
20007062:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
20007066:	9201      	str	r2, [sp, #4]
20007068:	2821      	cmp	r0, #33	; 0x21
2000706a:	d02c      	beq.n	200070c6 <I2C_Master_ISR_IT+0x182>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2000706c:	2612      	movs	r6, #18
    hi2c->State         = HAL_I2C_STATE_READY;
2000706e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
20007072:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterRxCpltCallback(hi2c);
20007074:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
20007076:	6326      	str	r6, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20007078:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000707c:	f8d1 c000 	ldr.w	ip, [r1]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20007080:	f007 0728 	and.w	r7, r7, #40	; 0x28
20007084:	2f28      	cmp	r7, #40	; 0x28
20007086:	bf0c      	ite	eq
20007088:	f06f 0644 	mvneq.w	r6, #68	; 0x44
2000708c:	f06f 06f4 	mvnne.w	r6, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20007090:	ea06 060c 	and.w	r6, r6, ip
20007094:	600e      	str	r6, [r1, #0]
    __HAL_UNLOCK(hi2c);
20007096:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
2000709a:	f7ff fb19 	bl	200066d0 <HAL_I2C_MasterRxCpltCallback>
2000709e:	9a01      	ldr	r2, [sp, #4]
200070a0:	e76f      	b.n	20006f82 <I2C_Master_ISR_IT+0x3e>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
200070a2:	2140      	movs	r1, #64	; 0x40
200070a4:	4620      	mov	r0, r4
200070a6:	9201      	str	r2, [sp, #4]
200070a8:	f7ff fc82 	bl	200069b0 <I2C_ITError>
200070ac:	9a01      	ldr	r2, [sp, #4]
200070ae:	e768      	b.n	20006f82 <I2C_Master_ISR_IT+0x3e>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
200070b0:	4620      	mov	r0, r4
200070b2:	4629      	mov	r1, r5
200070b4:	f7ff feb0 	bl	20006e18 <I2C_ITMasterCplt>
  __HAL_UNLOCK(hi2c);
200070b8:	2000      	movs	r0, #0
200070ba:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
200070be:	b003      	add	sp, #12
200070c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hi2c);
200070c2:	2002      	movs	r0, #2
}
200070c4:	4770      	bx	lr
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
200070c6:	2611      	movs	r6, #17
    hi2c->State         = HAL_I2C_STATE_READY;
200070c8:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
200070cc:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterTxCpltCallback(hi2c);
200070ce:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
200070d0:	6326      	str	r6, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200070d2:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200070d6:	680f      	ldr	r7, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200070d8:	f006 0628 	and.w	r6, r6, #40	; 0x28
200070dc:	2e28      	cmp	r6, #40	; 0x28
200070de:	bf0c      	ite	eq
200070e0:	f06f 0642 	mvneq.w	r6, #66	; 0x42
200070e4:	f06f 06f2 	mvnne.w	r6, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200070e8:	403e      	ands	r6, r7
200070ea:	600e      	str	r6, [r1, #0]
    __HAL_UNLOCK(hi2c);
200070ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
200070f0:	f7ff faec 	bl	200066cc <HAL_I2C_MasterTxCpltCallback>
}
200070f4:	9a01      	ldr	r2, [sp, #4]
200070f6:	e744      	b.n	20006f82 <I2C_Master_ISR_IT+0x3e>
        hi2c->XferSize = hi2c->XferCount;
200070f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
200070fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
200070fc:	b29b      	uxth	r3, r3
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
200070fe:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
20007102:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
20007104:	d02d      	beq.n	20007162 <I2C_Master_ISR_IT+0x21e>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
20007106:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  MODIFY_REG(hi2c->Instance->CR2,
20007108:	b2db      	uxtb	r3, r3
2000710a:	6846      	ldr	r6, [r0, #4]
2000710c:	f8df c068 	ldr.w	ip, [pc, #104]	; 20007178 <I2C_Master_ISR_IT+0x234>
20007110:	ea06 060c 	and.w	r6, r6, ip
20007114:	433e      	orrs	r6, r7
20007116:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
2000711a:	4319      	orrs	r1, r3
2000711c:	6041      	str	r1, [r0, #4]
}
2000711e:	e730      	b.n	20006f82 <I2C_Master_ISR_IT+0x3e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
20007120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
20007124:	2720      	movs	r7, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
20007126:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
2000712a:	9201      	str	r2, [sp, #4]
2000712c:	2821      	cmp	r0, #33	; 0x21
2000712e:	d0ca      	beq.n	200070c6 <I2C_Master_ISR_IT+0x182>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
20007130:	2612      	movs	r6, #18
    hi2c->State         = HAL_I2C_STATE_READY;
20007132:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
20007136:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterRxCpltCallback(hi2c);
20007138:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2000713a:	6326      	str	r6, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000713c:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20007140:	680f      	ldr	r7, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20007142:	f006 0628 	and.w	r6, r6, #40	; 0x28
20007146:	2e28      	cmp	r6, #40	; 0x28
20007148:	bf0c      	ite	eq
2000714a:	f06f 0644 	mvneq.w	r6, #68	; 0x44
2000714e:	f06f 06f4 	mvnne.w	r6, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20007152:	403e      	ands	r6, r7
20007154:	600e      	str	r6, [r1, #0]
    __HAL_UNLOCK(hi2c);
20007156:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
2000715a:	f7ff fab9 	bl	200066d0 <HAL_I2C_MasterRxCpltCallback>
2000715e:	9a01      	ldr	r2, [sp, #4]
20007160:	e70f      	b.n	20006f82 <I2C_Master_ISR_IT+0x3e>
  MODIFY_REG(hi2c->Instance->CR2,
20007162:	6846      	ldr	r6, [r0, #4]
20007164:	b2db      	uxtb	r3, r3
20007166:	4f04      	ldr	r7, [pc, #16]	; (20007178 <I2C_Master_ISR_IT+0x234>)
20007168:	403e      	ands	r6, r7
2000716a:	4331      	orrs	r1, r6
2000716c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
20007170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
20007174:	6043      	str	r3, [r0, #4]
}
20007176:	e704      	b.n	20006f82 <I2C_Master_ISR_IT+0x3e>
20007178:	fc009c00 	.word	0xfc009c00
2000717c:	01ff0000 	.word	0x01ff0000

20007180 <I2C_Slave_ISR_DMA>:
{
20007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
20007182:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
20007186:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
20007188:	2b01      	cmp	r3, #1
2000718a:	d07b      	beq.n	20007284 <I2C_Slave_ISR_DMA+0x104>
2000718c:	4617      	mov	r7, r2
2000718e:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
20007190:	068a      	lsls	r2, r1, #26
20007192:	4604      	mov	r4, r0
20007194:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
20007196:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2000719a:	d501      	bpl.n	200071a0 <I2C_Slave_ISR_DMA+0x20>
2000719c:	06bb      	lsls	r3, r7, #26
2000719e:	d428      	bmi.n	200071f2 <I2C_Slave_ISR_DMA+0x72>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
200071a0:	06e8      	lsls	r0, r5, #27
200071a2:	d515      	bpl.n	200071d0 <I2C_Slave_ISR_DMA+0x50>
200071a4:	06f9      	lsls	r1, r7, #27
200071a6:	d513      	bpl.n	200071d0 <I2C_Slave_ISR_DMA+0x50>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
200071a8:	0bfb      	lsrs	r3, r7, #15
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
200071aa:	f3c7 3180 	ubfx	r1, r7, #14, #1
200071ae:	ea43 3297 	orr.w	r2, r3, r7, lsr #14
200071b2:	07d2      	lsls	r2, r2, #31
200071b4:	d522      	bpl.n	200071fc <I2C_Slave_ISR_DMA+0x7c>
      if (hi2c->hdmarx != NULL)
200071b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
200071b8:	b322      	cbz	r2, 20007204 <I2C_Slave_ISR_DMA+0x84>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
200071ba:	07df      	lsls	r7, r3, #31
200071bc:	d522      	bpl.n	20007204 <I2C_Slave_ISR_DMA+0x84>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
200071be:	6813      	ldr	r3, [r2, #0]
200071c0:	685b      	ldr	r3, [r3, #4]
200071c2:	b9fb      	cbnz	r3, 20007204 <I2C_Slave_ISR_DMA+0x84>
      if (hi2c->hdmatx != NULL)
200071c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
200071c6:	b31b      	cbz	r3, 20007210 <I2C_Slave_ISR_DMA+0x90>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
200071c8:	b311      	cbz	r1, 20007210 <I2C_Slave_ISR_DMA+0x90>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
200071ca:	681b      	ldr	r3, [r3, #0]
200071cc:	685b      	ldr	r3, [r3, #4]
200071ce:	e01f      	b.n	20007210 <I2C_Slave_ISR_DMA+0x90>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
200071d0:	072a      	lsls	r2, r5, #28
200071d2:	d50a      	bpl.n	200071ea <I2C_Slave_ISR_DMA+0x6a>
200071d4:	073b      	lsls	r3, r7, #28
200071d6:	d508      	bpl.n	200071ea <I2C_Slave_ISR_DMA+0x6a>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
200071d8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
200071dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
200071e0:	2b28      	cmp	r3, #40	; 0x28
200071e2:	d051      	beq.n	20007288 <I2C_Slave_ISR_DMA+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
200071e4:	6823      	ldr	r3, [r4, #0]
200071e6:	2208      	movs	r2, #8
200071e8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
200071ea:	2000      	movs	r0, #0
200071ec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
200071f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, ITFlags);
200071f2:	f7ff fc79 	bl	20006ae8 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
200071f6:	06e8      	lsls	r0, r5, #27
200071f8:	d5ea      	bpl.n	200071d0 <I2C_Slave_ISR_DMA+0x50>
200071fa:	e7d3      	b.n	200071a4 <I2C_Slave_ISR_DMA+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
200071fc:	6823      	ldr	r3, [r4, #0]
200071fe:	2210      	movs	r2, #16
20007200:	61da      	str	r2, [r3, #28]
20007202:	e7f2      	b.n	200071ea <I2C_Slave_ISR_DMA+0x6a>
      if (hi2c->hdmatx != NULL)
20007204:	6ba3      	ldr	r3, [r4, #56]	; 0x38
20007206:	b323      	cbz	r3, 20007252 <I2C_Slave_ISR_DMA+0xd2>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
20007208:	b319      	cbz	r1, 20007252 <I2C_Slave_ISR_DMA+0xd2>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
2000720a:	681b      	ldr	r3, [r3, #0]
2000720c:	685b      	ldr	r3, [r3, #4]
2000720e:	bb03      	cbnz	r3, 20007252 <I2C_Slave_ISR_DMA+0xd2>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
20007210:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
20007214:	2b28      	cmp	r3, #40	; 0x28
20007216:	d102      	bne.n	2000721e <I2C_Slave_ISR_DMA+0x9e>
20007218:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
2000721c:	d038      	beq.n	20007290 <I2C_Slave_ISR_DMA+0x110>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2000721e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20007222:	2210      	movs	r2, #16
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
20007224:	2b29      	cmp	r3, #41	; 0x29
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20007226:	6823      	ldr	r3, [r4, #0]
20007228:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2000722a:	d1de      	bne.n	200071ea <I2C_Slave_ISR_DMA+0x6a>
2000722c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
20007230:	d0db      	beq.n	200071ea <I2C_Slave_ISR_DMA+0x6a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
20007232:	699a      	ldr	r2, [r3, #24]
20007234:	0790      	lsls	r0, r2, #30
20007236:	d501      	bpl.n	2000723c <I2C_Slave_ISR_DMA+0xbc>
    hi2c->Instance->TXDR = 0x00U;
20007238:	2200      	movs	r2, #0
2000723a:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2000723c:	699a      	ldr	r2, [r3, #24]
2000723e:	07d1      	lsls	r1, r2, #31
20007240:	d403      	bmi.n	2000724a <I2C_Slave_ISR_DMA+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
20007242:	699a      	ldr	r2, [r3, #24]
20007244:	f042 0201 	orr.w	r2, r2, #1
20007248:	619a      	str	r2, [r3, #24]
          I2C_ITSlaveSeqCplt(hi2c);
2000724a:	4620      	mov	r0, r4
2000724c:	f7ff fa46 	bl	200066dc <I2C_ITSlaveSeqCplt>
20007250:	e7cb      	b.n	200071ea <I2C_Slave_ISR_DMA+0x6a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20007252:	6823      	ldr	r3, [r4, #0]
20007254:	2210      	movs	r2, #16
20007256:	61da      	str	r2, [r3, #28]
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
20007258:	f036 7280 	bics.w	r2, r6, #16777216	; 0x1000000
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000725c:	6c63      	ldr	r3, [r4, #68]	; 0x44
2000725e:	f043 0304 	orr.w	r3, r3, #4
20007262:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
20007264:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
20007268:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2000726a:	d1be      	bne.n	200071ea <I2C_Slave_ISR_DMA+0x6a>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2000726c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
20007270:	2b21      	cmp	r3, #33	; 0x21
20007272:	d001      	beq.n	20007278 <I2C_Slave_ISR_DMA+0xf8>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
20007274:	2b22      	cmp	r3, #34	; 0x22
20007276:	d100      	bne.n	2000727a <I2C_Slave_ISR_DMA+0xfa>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
20007278:	6323      	str	r3, [r4, #48]	; 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
2000727a:	6c61      	ldr	r1, [r4, #68]	; 0x44
2000727c:	4620      	mov	r0, r4
2000727e:	f7ff fb97 	bl	200069b0 <I2C_ITError>
20007282:	e7b2      	b.n	200071ea <I2C_Slave_ISR_DMA+0x6a>
  __HAL_LOCK(hi2c);
20007284:	2002      	movs	r0, #2
}
20007286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20007288:	4620      	mov	r0, r4
2000728a:	f7ff fb2b 	bl	200068e4 <I2C_ITAddrCplt.isra.0.part.0>
2000728e:	e7ac      	b.n	200071ea <I2C_Slave_ISR_DMA+0x6a>
  hi2c->PreviousState = I2C_STATE_NONE;
20007290:	2300      	movs	r3, #0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20007292:	4918      	ldr	r1, [pc, #96]	; (200072f4 <I2C_Slave_ISR_DMA+0x174>)
  hi2c->State = HAL_I2C_STATE_READY;
20007294:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
20007296:	076d      	lsls	r5, r5, #29
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20007298:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->XferISR = NULL;
2000729a:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->PreviousState = I2C_STATE_NONE;
2000729c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
2000729e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
200072a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
200072a6:	d512      	bpl.n	200072ce <I2C_Slave_ISR_DMA+0x14e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
200072a8:	6822      	ldr	r2, [r4, #0]
200072aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
200072ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
200072ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
200072b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
200072b2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
200072b4:	3301      	adds	r3, #1
200072b6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
200072b8:	b14a      	cbz	r2, 200072ce <I2C_Slave_ISR_DMA+0x14e>
      hi2c->XferCount--;
200072ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
200072bc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
200072be:	3b01      	subs	r3, #1
      hi2c->XferSize--;
200072c0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
200072c2:	b29b      	uxth	r3, r3
200072c4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
200072c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
200072c8:	f043 0304 	orr.w	r3, r3, #4
200072cc:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200072ce:	6823      	ldr	r3, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
200072d0:	2510      	movs	r5, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200072d2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
200072d6:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200072d8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  HAL_I2C_ListenCpltCallback(hi2c);
200072dc:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200072de:	681a      	ldr	r2, [r3, #0]
200072e0:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
200072e4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
200072e6:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
200072e8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
200072ec:	f7ff fb36 	bl	2000695c <HAL_I2C_ListenCpltCallback>
}
200072f0:	e77b      	b.n	200071ea <I2C_Slave_ISR_DMA+0x6a>
200072f2:	bf00      	nop
200072f4:	ffff0000 	.word	0xffff0000

200072f8 <I2C_Master_ISR_DMA>:
{
200072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
200072fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
200072fe:	2b01      	cmp	r3, #1
20007300:	d07e      	beq.n	20007400 <I2C_Master_ISR_DMA+0x108>
20007302:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
20007304:	06cd      	lsls	r5, r1, #27
20007306:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
20007308:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2000730c:	d523      	bpl.n	20007356 <I2C_Master_ISR_DMA+0x5e>
2000730e:	06d0      	lsls	r0, r2, #27
20007310:	d521      	bpl.n	20007356 <I2C_Master_ISR_DMA+0x5e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20007312:	2210      	movs	r2, #16
20007314:	6823      	ldr	r3, [r4, #0]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20007316:	6b61      	ldr	r1, [r4, #52]	; 0x34
20007318:	487c      	ldr	r0, [pc, #496]	; (2000750c <I2C_Master_ISR_DMA+0x214>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000731a:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000731c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2000731e:	4281      	cmp	r1, r0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20007320:	f042 0204 	orr.w	r2, r2, #4
20007324:	6462      	str	r2, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20007326:	d069      	beq.n	200073fc <I2C_Master_ISR_DMA+0x104>
20007328:	4a79      	ldr	r2, [pc, #484]	; (20007510 <I2C_Master_ISR_DMA+0x218>)
2000732a:	4291      	cmp	r1, r2
2000732c:	d066      	beq.n	200073fc <I2C_Master_ISR_DMA+0x104>
      tmpisr |= I2C_IT_STOPI;
2000732e:	2120      	movs	r1, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20007330:	681a      	ldr	r2, [r3, #0]
20007332:	430a      	orrs	r2, r1
20007334:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
20007336:	699a      	ldr	r2, [r3, #24]
20007338:	0791      	lsls	r1, r2, #30
2000733a:	d501      	bpl.n	20007340 <I2C_Master_ISR_DMA+0x48>
    hi2c->Instance->TXDR = 0x00U;
2000733c:	2200      	movs	r2, #0
2000733e:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
20007340:	699a      	ldr	r2, [r3, #24]
20007342:	07d2      	lsls	r2, r2, #31
20007344:	d403      	bmi.n	2000734e <I2C_Master_ISR_DMA+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
20007346:	699a      	ldr	r2, [r3, #24]
20007348:	f042 0201 	orr.w	r2, r2, #1
2000734c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(hi2c);
2000734e:	2000      	movs	r0, #0
20007350:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
20007354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
20007356:	060f      	lsls	r7, r1, #24
20007358:	d532      	bpl.n	200073c0 <I2C_Master_ISR_DMA+0xc8>
2000735a:	0656      	lsls	r6, r2, #25
2000735c:	d546      	bpl.n	200073ec <I2C_Master_ISR_DMA+0xf4>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
2000735e:	6823      	ldr	r3, [r4, #0]
20007360:	681a      	ldr	r2, [r3, #0]
20007362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20007366:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
20007368:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
2000736a:	b292      	uxth	r2, r2
2000736c:	2a00      	cmp	r2, #0
2000736e:	d049      	beq.n	20007404 <I2C_Master_ISR_DMA+0x10c>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
20007370:	685d      	ldr	r5, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
20007372:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
20007374:	f3c5 0509 	ubfx	r5, r5, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
20007378:	b289      	uxth	r1, r1
2000737a:	29ff      	cmp	r1, #255	; 0xff
2000737c:	d86a      	bhi.n	20007454 <I2C_Master_ISR_DMA+0x15c>
        hi2c->XferSize = hi2c->XferCount;
2000737e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
20007380:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
20007382:	b291      	uxth	r1, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
20007384:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
20007388:	8521      	strh	r1, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2000738a:	b2c8      	uxtb	r0, r1
2000738c:	f000 8089 	beq.w	200074a2 <I2C_Master_ISR_DMA+0x1aa>
          xfermode = hi2c->XferOptions;
20007390:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
20007392:	0400      	lsls	r0, r0, #16
  MODIFY_REG(hi2c->Instance->CR2,
20007394:	685a      	ldr	r2, [r3, #4]
20007396:	4e5f      	ldr	r6, [pc, #380]	; (20007514 <I2C_Master_ISR_DMA+0x21c>)
20007398:	4032      	ands	r2, r6
2000739a:	432a      	orrs	r2, r5
2000739c:	433a      	orrs	r2, r7
2000739e:	4302      	orrs	r2, r0
200073a0:	605a      	str	r2, [r3, #4]
      hi2c->XferCount -= hi2c->XferSize;
200073a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
200073a4:	1a52      	subs	r2, r2, r1
200073a6:	b292      	uxth	r2, r2
200073a8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
200073aa:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
200073ae:	2a22      	cmp	r2, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
200073b0:	681a      	ldr	r2, [r3, #0]
200073b2:	bf0c      	ite	eq
200073b4:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
200073b8:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
200073bc:	601a      	str	r2, [r3, #0]
200073be:	e7c6      	b.n	2000734e <I2C_Master_ISR_DMA+0x56>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
200073c0:	064d      	lsls	r5, r1, #25
200073c2:	d513      	bpl.n	200073ec <I2C_Master_ISR_DMA+0xf4>
200073c4:	0650      	lsls	r0, r2, #25
200073c6:	d511      	bpl.n	200073ec <I2C_Master_ISR_DMA+0xf4>
    if (hi2c->XferCount == 0U)
200073c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
200073ca:	b29b      	uxth	r3, r3
200073cc:	2b00      	cmp	r3, #0
200073ce:	d13c      	bne.n	2000744a <I2C_Master_ISR_DMA+0x152>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
200073d0:	6822      	ldr	r2, [r4, #0]
200073d2:	6853      	ldr	r3, [r2, #4]
200073d4:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
200073d8:	d1b9      	bne.n	2000734e <I2C_Master_ISR_DMA+0x56>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
200073da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
200073dc:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
200073e0:	d140      	bne.n	20007464 <I2C_Master_ISR_DMA+0x16c>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
200073e2:	6853      	ldr	r3, [r2, #4]
200073e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
200073e8:	6053      	str	r3, [r2, #4]
200073ea:	e7b0      	b.n	2000734e <I2C_Master_ISR_DMA+0x56>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
200073ec:	068b      	lsls	r3, r1, #26
200073ee:	d5ae      	bpl.n	2000734e <I2C_Master_ISR_DMA+0x56>
200073f0:	0692      	lsls	r2, r2, #26
200073f2:	d5ac      	bpl.n	2000734e <I2C_Master_ISR_DMA+0x56>
    I2C_ITMasterCplt(hi2c, ITFlags);
200073f4:	4620      	mov	r0, r4
200073f6:	f7ff fd0f 	bl	20006e18 <I2C_ITMasterCplt>
200073fa:	e7a8      	b.n	2000734e <I2C_Master_ISR_DMA+0x56>
200073fc:	2160      	movs	r1, #96	; 0x60
200073fe:	e797      	b.n	20007330 <I2C_Master_ISR_DMA+0x38>
  __HAL_LOCK(hi2c);
20007400:	2002      	movs	r0, #2
}
20007402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
20007404:	685a      	ldr	r2, [r3, #4]
20007406:	f012 7200 	ands.w	r2, r2, #33554432	; 0x2000000
2000740a:	d11e      	bne.n	2000744a <I2C_Master_ISR_DMA+0x152>
  hi2c->Mode = HAL_I2C_MODE_NONE;
2000740c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
20007410:	2520      	movs	r5, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
20007412:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
20007416:	2921      	cmp	r1, #33	; 0x21
20007418:	d047      	beq.n	200074aa <I2C_Master_ISR_DMA+0x1b2>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2000741a:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
2000741c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
20007420:	6362      	str	r2, [r4, #52]	; 0x34
    HAL_I2C_MasterRxCpltCallback(hi2c);
20007422:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
20007424:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20007426:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000742a:	681e      	ldr	r6, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000742c:	f005 0528 	and.w	r5, r5, #40	; 0x28
20007430:	2d28      	cmp	r5, #40	; 0x28
20007432:	bf0c      	ite	eq
20007434:	f06f 0144 	mvneq.w	r1, #68	; 0x44
20007438:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000743c:	4031      	ands	r1, r6
2000743e:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
20007440:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
20007444:	f7ff f944 	bl	200066d0 <HAL_I2C_MasterRxCpltCallback>
20007448:	e781      	b.n	2000734e <I2C_Master_ISR_DMA+0x56>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2000744a:	2140      	movs	r1, #64	; 0x40
2000744c:	4620      	mov	r0, r4
2000744e:	f7ff faaf 	bl	200069b0 <I2C_ITError>
20007452:	e77c      	b.n	2000734e <I2C_Master_ISR_DMA+0x56>
        hi2c->XferSize = MAX_NBYTE_SIZE;
20007454:	22ff      	movs	r2, #255	; 0xff
20007456:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
        xfermode = I2C_RELOAD_MODE;
2000745a:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
2000745e:	4611      	mov	r1, r2
        hi2c->XferSize = MAX_NBYTE_SIZE;
20007460:	8522      	strh	r2, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
20007462:	e797      	b.n	20007394 <I2C_Master_ISR_DMA+0x9c>
  hi2c->Mode = HAL_I2C_MODE_NONE;
20007464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
20007468:	2520      	movs	r5, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2000746a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
2000746e:	2921      	cmp	r1, #33	; 0x21
20007470:	d033      	beq.n	200074da <I2C_Master_ISR_DMA+0x1e2>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
20007472:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
20007474:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
20007478:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterRxCpltCallback(hi2c);
2000747a:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2000747c:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000747e:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20007482:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
20007484:	f005 0528 	and.w	r5, r5, #40	; 0x28
20007488:	2d28      	cmp	r5, #40	; 0x28
2000748a:	bf0c      	ite	eq
2000748c:	f06f 0544 	mvneq.w	r5, #68	; 0x44
20007490:	f06f 05f4 	mvnne.w	r5, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
20007494:	4029      	ands	r1, r5
20007496:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
20007498:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
2000749c:	f7ff f918 	bl	200066d0 <HAL_I2C_MasterRxCpltCallback>
200074a0:	e755      	b.n	2000734e <I2C_Master_ISR_DMA+0x56>
          xfermode = I2C_AUTOEND_MODE;
200074a2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
200074a6:	0400      	lsls	r0, r0, #16
200074a8:	e774      	b.n	20007394 <I2C_Master_ISR_DMA+0x9c>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
200074aa:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
200074ac:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
200074b0:	6362      	str	r2, [r4, #52]	; 0x34
    HAL_I2C_MasterTxCpltCallback(hi2c);
200074b2:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
200074b4:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200074b6:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200074ba:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200074bc:	f005 0528 	and.w	r5, r5, #40	; 0x28
200074c0:	2d28      	cmp	r5, #40	; 0x28
200074c2:	bf0c      	ite	eq
200074c4:	f06f 0542 	mvneq.w	r5, #66	; 0x42
200074c8:	f06f 05f2 	mvnne.w	r5, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200074cc:	4029      	ands	r1, r5
200074ce:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
200074d0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
200074d4:	f7ff f8fa 	bl	200066cc <HAL_I2C_MasterTxCpltCallback>
}
200074d8:	e739      	b.n	2000734e <I2C_Master_ISR_DMA+0x56>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
200074da:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
200074dc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
200074e0:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterTxCpltCallback(hi2c);
200074e2:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
200074e4:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200074e6:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200074ea:	6815      	ldr	r5, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
200074ec:	f001 0128 	and.w	r1, r1, #40	; 0x28
200074f0:	2928      	cmp	r1, #40	; 0x28
200074f2:	bf0c      	ite	eq
200074f4:	f06f 0142 	mvneq.w	r1, #66	; 0x42
200074f8:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
200074fc:	4029      	ands	r1, r5
200074fe:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
20007500:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
20007504:	f7ff f8e2 	bl	200066cc <HAL_I2C_MasterTxCpltCallback>
}
20007508:	e721      	b.n	2000734e <I2C_Master_ISR_DMA+0x56>
2000750a:	bf00      	nop
2000750c:	20007181 	.word	0x20007181
20007510:	200072f9 	.word	0x200072f9
20007514:	fc009c00 	.word	0xfc009c00

20007518 <I2C_DMAError>:
{
20007518:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000751a:	6b85      	ldr	r5, [r0, #56]	; 0x38
{
2000751c:	4603      	mov	r3, r0
  if (hi2c->hdmatx != NULL)
2000751e:	6baa      	ldr	r2, [r5, #56]	; 0x38
20007520:	b30a      	cbz	r2, 20007566 <I2C_DMAError+0x4e>
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
20007522:	6811      	ldr	r1, [r2, #0]
  if (hi2c->hdmarx != NULL)
20007524:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
20007526:	684c      	ldr	r4, [r1, #4]
20007528:	fab4 f484 	clz	r4, r4
2000752c:	0964      	lsrs	r4, r4, #5
  if (hi2c->hdmarx != NULL)
2000752e:	b192      	cbz	r2, 20007556 <I2C_DMAError+0x3e>
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
20007530:	6812      	ldr	r2, [r2, #0]
20007532:	6852      	ldr	r2, [r2, #4]
20007534:	b97a      	cbnz	r2, 20007556 <I2C_DMAError+0x3e>
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
20007536:	4618      	mov	r0, r3
20007538:	f7fa fed2 	bl	200022e0 <HAL_DMA_GetError>
2000753c:	2802      	cmp	r0, #2
2000753e:	d011      	beq.n	20007564 <I2C_DMAError+0x4c>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
20007540:	682a      	ldr	r2, [r5, #0]
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
20007542:	4628      	mov	r0, r5
20007544:	2110      	movs	r1, #16
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
20007546:	6853      	ldr	r3, [r2, #4]
20007548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2000754c:	6053      	str	r3, [r2, #4]
}
2000754e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
20007552:	f7ff ba2d 	b.w	200069b0 <I2C_ITError>
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
20007556:	4618      	mov	r0, r3
20007558:	f7fa fec2 	bl	200022e0 <HAL_DMA_GetError>
2000755c:	2802      	cmp	r0, #2
2000755e:	d001      	beq.n	20007564 <I2C_DMAError+0x4c>
20007560:	2c00      	cmp	r4, #0
20007562:	d1ed      	bne.n	20007540 <I2C_DMAError+0x28>
}
20007564:	bd38      	pop	{r3, r4, r5, pc}
  if (hi2c->hdmarx != NULL)
20007566:	6bea      	ldr	r2, [r5, #60]	; 0x3c
20007568:	b11a      	cbz	r2, 20007572 <I2C_DMAError+0x5a>
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
2000756a:	6812      	ldr	r2, [r2, #0]
2000756c:	6852      	ldr	r2, [r2, #4]
2000756e:	2a00      	cmp	r2, #0
20007570:	d0e1      	beq.n	20007536 <I2C_DMAError+0x1e>
}
20007572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
20007576:	f7fa beb3 	b.w	200022e0 <HAL_DMA_GetError>
2000757a:	bf00      	nop

2000757c <I2C_DMAMasterTransmitCplt>:
{
2000757c:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000757e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
20007580:	6822      	ldr	r2, [r4, #0]
20007582:	6813      	ldr	r3, [r2, #0]
20007584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
20007588:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
2000758a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2000758c:	b29b      	uxth	r3, r3
2000758e:	b95b      	cbnz	r3, 200075a8 <I2C_DMAMasterTransmitCplt+0x2c>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20007590:	6b63      	ldr	r3, [r4, #52]	; 0x34
20007592:	491e      	ldr	r1, [pc, #120]	; (2000760c <I2C_DMAMasterTransmitCplt+0x90>)
20007594:	428b      	cmp	r3, r1
20007596:	d02a      	beq.n	200075ee <I2C_DMAMasterTransmitCplt+0x72>
20007598:	491d      	ldr	r1, [pc, #116]	; (20007610 <I2C_DMAMasterTransmitCplt+0x94>)
2000759a:	428b      	cmp	r3, r1
2000759c:	d027      	beq.n	200075ee <I2C_DMAMasterTransmitCplt+0x72>
      tmpisr |= I2C_IT_STOPI;
2000759e:	2120      	movs	r1, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200075a0:	6813      	ldr	r3, [r2, #0]
200075a2:	430b      	orrs	r3, r1
200075a4:	6013      	str	r3, [r2, #0]
}
200075a6:	bd10      	pop	{r4, pc}
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200075a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
200075aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
200075ac:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200075ae:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr += hi2c->XferSize;
200075b0:	4401      	add	r1, r0
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200075b2:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr += hi2c->XferSize;
200075b4:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200075b6:	d817      	bhi.n	200075e8 <I2C_DMAMasterTransmitCplt+0x6c>
      hi2c->XferSize = hi2c->XferCount;
200075b8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
200075ba:	b280      	uxth	r0, r0
200075bc:	4603      	mov	r3, r0
200075be:	8520      	strh	r0, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
200075c0:	3228      	adds	r2, #40	; 0x28
200075c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
200075c4:	f7fa fbbe 	bl	20001d44 <HAL_DMA_Start_IT>
200075c8:	b9c8      	cbnz	r0, 200075fe <I2C_DMAMasterTransmitCplt+0x82>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
200075ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
200075cc:	4a0f      	ldr	r2, [pc, #60]	; (2000760c <I2C_DMAMasterTransmitCplt+0x90>)
200075ce:	4293      	cmp	r3, r2
200075d0:	d00f      	beq.n	200075f2 <I2C_DMAMasterTransmitCplt+0x76>
200075d2:	4a0f      	ldr	r2, [pc, #60]	; (20007610 <I2C_DMAMasterTransmitCplt+0x94>)
200075d4:	1a9b      	subs	r3, r3, r2
200075d6:	fab3 f383 	clz	r3, r3
200075da:	095b      	lsrs	r3, r3, #5
200075dc:	b94b      	cbnz	r3, 200075f2 <I2C_DMAMasterTransmitCplt+0x76>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200075de:	6821      	ldr	r1, [r4, #0]
200075e0:	680a      	ldr	r2, [r1, #0]
200075e2:	4313      	orrs	r3, r2
200075e4:	600b      	str	r3, [r1, #0]
}
200075e6:	bd10      	pop	{r4, pc}
200075e8:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
200075ea:	4618      	mov	r0, r3
200075ec:	e7e7      	b.n	200075be <I2C_DMAMasterTransmitCplt+0x42>
200075ee:	2160      	movs	r1, #96	; 0x60
200075f0:	e7d6      	b.n	200075a0 <I2C_DMAMasterTransmitCplt+0x24>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200075f2:	6821      	ldr	r1, [r4, #0]
      tmpisr |= I2C_IT_TCI;
200075f4:	2340      	movs	r3, #64	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
200075f6:	680a      	ldr	r2, [r1, #0]
200075f8:	4313      	orrs	r3, r2
200075fa:	600b      	str	r3, [r1, #0]
200075fc:	e7f3      	b.n	200075e6 <I2C_DMAMasterTransmitCplt+0x6a>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
200075fe:	4620      	mov	r0, r4
20007600:	2110      	movs	r1, #16
}
20007602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
20007606:	f7ff b9d3 	b.w	200069b0 <I2C_ITError>
2000760a:	bf00      	nop
2000760c:	20007181 	.word	0x20007181
20007610:	200072f9 	.word	0x200072f9

20007614 <I2C_DMAMasterReceiveCplt>:
{
20007614:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20007616:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
20007618:	6821      	ldr	r1, [r4, #0]
2000761a:	680b      	ldr	r3, [r1, #0]
2000761c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
20007620:	600b      	str	r3, [r1, #0]
  if (hi2c->XferCount == 0U)
20007622:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
20007624:	b29b      	uxth	r3, r3
20007626:	b95b      	cbnz	r3, 20007640 <I2C_DMAMasterReceiveCplt+0x2c>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20007628:	6b63      	ldr	r3, [r4, #52]	; 0x34
2000762a:	4a1e      	ldr	r2, [pc, #120]	; (200076a4 <I2C_DMAMasterReceiveCplt+0x90>)
2000762c:	4293      	cmp	r3, r2
2000762e:	d02a      	beq.n	20007686 <I2C_DMAMasterReceiveCplt+0x72>
20007630:	4a1d      	ldr	r2, [pc, #116]	; (200076a8 <I2C_DMAMasterReceiveCplt+0x94>)
20007632:	4293      	cmp	r3, r2
20007634:	d027      	beq.n	20007686 <I2C_DMAMasterReceiveCplt+0x72>
      tmpisr |= I2C_IT_STOPI;
20007636:	2220      	movs	r2, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20007638:	680b      	ldr	r3, [r1, #0]
2000763a:	4313      	orrs	r3, r2
2000763c:	600b      	str	r3, [r1, #0]
}
2000763e:	bd10      	pop	{r4, pc}
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20007640:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
20007642:	6a62      	ldr	r2, [r4, #36]	; 0x24
20007644:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20007646:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr += hi2c->XferSize;
20007648:	4402      	add	r2, r0
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000764a:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr += hi2c->XferSize;
2000764c:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000764e:	d817      	bhi.n	20007680 <I2C_DMAMasterReceiveCplt+0x6c>
      hi2c->XferSize = hi2c->XferCount;
20007650:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
20007652:	b280      	uxth	r0, r0
20007654:	4603      	mov	r3, r0
20007656:	8520      	strh	r0, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
20007658:	3124      	adds	r1, #36	; 0x24
2000765a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2000765c:	f7fa fb72 	bl	20001d44 <HAL_DMA_Start_IT>
20007660:	b9c8      	cbnz	r0, 20007696 <I2C_DMAMasterReceiveCplt+0x82>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
20007662:	6b63      	ldr	r3, [r4, #52]	; 0x34
20007664:	4a0f      	ldr	r2, [pc, #60]	; (200076a4 <I2C_DMAMasterReceiveCplt+0x90>)
20007666:	4293      	cmp	r3, r2
20007668:	d00f      	beq.n	2000768a <I2C_DMAMasterReceiveCplt+0x76>
2000766a:	4a0f      	ldr	r2, [pc, #60]	; (200076a8 <I2C_DMAMasterReceiveCplt+0x94>)
2000766c:	1a9b      	subs	r3, r3, r2
2000766e:	fab3 f383 	clz	r3, r3
20007672:	095b      	lsrs	r3, r3, #5
20007674:	b94b      	cbnz	r3, 2000768a <I2C_DMAMasterReceiveCplt+0x76>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
20007676:	6821      	ldr	r1, [r4, #0]
20007678:	680a      	ldr	r2, [r1, #0]
2000767a:	4313      	orrs	r3, r2
2000767c:	600b      	str	r3, [r1, #0]
}
2000767e:	bd10      	pop	{r4, pc}
20007680:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
20007682:	4618      	mov	r0, r3
20007684:	e7e7      	b.n	20007656 <I2C_DMAMasterReceiveCplt+0x42>
20007686:	2260      	movs	r2, #96	; 0x60
20007688:	e7d6      	b.n	20007638 <I2C_DMAMasterReceiveCplt+0x24>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2000768a:	6821      	ldr	r1, [r4, #0]
      tmpisr |= I2C_IT_TCI;
2000768c:	2340      	movs	r3, #64	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2000768e:	680a      	ldr	r2, [r1, #0]
20007690:	4313      	orrs	r3, r2
20007692:	600b      	str	r3, [r1, #0]
20007694:	e7f3      	b.n	2000767e <I2C_DMAMasterReceiveCplt+0x6a>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
20007696:	4620      	mov	r0, r4
20007698:	2110      	movs	r1, #16
}
2000769a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2000769e:	f7ff b987 	b.w	200069b0 <I2C_ITError>
200076a2:	bf00      	nop
200076a4:	20007181 	.word	0x20007181
200076a8:	200072f9 	.word	0x200072f9

200076ac <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
200076ac:	6803      	ldr	r3, [r0, #0]
200076ae:	699a      	ldr	r2, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
200076b0:	6819      	ldr	r1, [r3, #0]
{
200076b2:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
200076b4:	05d4      	lsls	r4, r2, #23
200076b6:	d52f      	bpl.n	20007718 <HAL_I2C_ER_IRQHandler+0x6c>
200076b8:	060c      	lsls	r4, r1, #24
200076ba:	d51f      	bpl.n	200076fc <HAL_I2C_ER_IRQHandler+0x50>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
200076bc:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
200076be:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
200076c2:	f041 0101 	orr.w	r1, r1, #1
200076c6:	6441      	str	r1, [r0, #68]	; 0x44
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
200076c8:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
200076ca:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
200076cc:	d529      	bpl.n	20007722 <HAL_I2C_ER_IRQHandler+0x76>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
200076ce:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
200076d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
200076d4:	0592      	lsls	r2, r2, #22
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
200076d6:	f041 0108 	orr.w	r1, r1, #8
200076da:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
200076dc:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
200076de:	d506      	bpl.n	200076ee <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
200076e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
200076e2:	f44f 7100 	mov.w	r1, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
200076e6:	f042 0202 	orr.w	r2, r2, #2
200076ea:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
200076ec:	61d9      	str	r1, [r3, #28]
  tmperror = hi2c->ErrorCode;
200076ee:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
200076f0:	f011 0f0b 	tst.w	r1, #11
200076f4:	d10c      	bne.n	20007710 <HAL_I2C_ER_IRQHandler+0x64>
}
200076f6:	f85d 4b04 	ldr.w	r4, [sp], #4
200076fa:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
200076fc:	0554      	lsls	r4, r2, #21
200076fe:	d4f6      	bmi.n	200076ee <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
20007700:	0594      	lsls	r4, r2, #22
20007702:	d5f4      	bpl.n	200076ee <HAL_I2C_ER_IRQHandler+0x42>
20007704:	0609      	lsls	r1, r1, #24
20007706:	d4eb      	bmi.n	200076e0 <HAL_I2C_ER_IRQHandler+0x34>
  tmperror = hi2c->ErrorCode;
20007708:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2000770a:	f011 0f0b 	tst.w	r1, #11
2000770e:	d0f2      	beq.n	200076f6 <HAL_I2C_ER_IRQHandler+0x4a>
}
20007710:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
20007714:	f7ff b94c 	b.w	200069b0 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
20007718:	0554      	lsls	r4, r2, #21
2000771a:	d5f1      	bpl.n	20007700 <HAL_I2C_ER_IRQHandler+0x54>
2000771c:	0609      	lsls	r1, r1, #24
2000771e:	d4d6      	bmi.n	200076ce <HAL_I2C_ER_IRQHandler+0x22>
20007720:	e7e5      	b.n	200076ee <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
20007722:	0592      	lsls	r2, r2, #22
20007724:	d4dc      	bmi.n	200076e0 <HAL_I2C_ER_IRQHandler+0x34>
20007726:	e7e2      	b.n	200076ee <HAL_I2C_ER_IRQHandler+0x42>

20007728 <HAL_I2C_GetState>:
  return hi2c->State;
20007728:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
2000772c:	4770      	bx	lr
2000772e:	bf00      	nop

20007730 <HAL_I2C_GetMode>:
  return hi2c->Mode;
20007730:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
}
20007734:	4770      	bx	lr
20007736:	bf00      	nop

20007738 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
20007738:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
2000773a:	4770      	bx	lr

2000773c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000773c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
20007740:	2a20      	cmp	r2, #32
20007742:	d121      	bne.n	20007788 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
20007744:	4603      	mov	r3, r0
{
20007746:	b470      	push	{r4, r5, r6}
20007748:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000774a:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
2000774e:	2a01      	cmp	r2, #1
20007750:	d01c      	beq.n	2000778c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
20007752:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
20007754:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20007756:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
20007758:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
2000775c:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
2000775e:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
20007760:	f024 0401 	bic.w	r4, r4, #1
20007764:	6014      	str	r4, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
20007766:	6814      	ldr	r4, [r2, #0]
20007768:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
2000776c:	6014      	str	r4, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
2000776e:	6814      	ldr	r4, [r2, #0]
20007770:	4321      	orrs	r1, r4
20007772:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
20007774:	6811      	ldr	r1, [r2, #0]
20007776:	f041 0101 	orr.w	r1, r1, #1
2000777a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
2000777c:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
20007780:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
20007784:	bc70      	pop	{r4, r5, r6}
20007786:	4770      	bx	lr
    return HAL_BUSY;
20007788:	2002      	movs	r0, #2
}
2000778a:	4770      	bx	lr
    return HAL_BUSY;
2000778c:	2002      	movs	r0, #2
}
2000778e:	bc70      	pop	{r4, r5, r6}
20007790:	4770      	bx	lr
20007792:	bf00      	nop

20007794 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
20007794:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
20007798:	2a20      	cmp	r2, #32
2000779a:	d120      	bne.n	200077de <HAL_I2CEx_ConfigDigitalFilter+0x4a>
2000779c:	4603      	mov	r3, r0
{
2000779e:	b470      	push	{r4, r5, r6}
200077a0:	b2d6      	uxtb	r6, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
200077a2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
200077a6:	2a01      	cmp	r2, #1
200077a8:	d01b      	beq.n	200077e2 <HAL_I2CEx_ConfigDigitalFilter+0x4e>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
200077aa:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
200077ac:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
200077ae:	2500      	movs	r5, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
200077b0:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
200077b4:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
200077b6:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
200077b8:	f024 0401 	bic.w	r4, r4, #1
200077bc:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
200077be:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
200077c0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
200077c4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
200077c8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
200077ca:	6811      	ldr	r1, [r2, #0]
200077cc:	f041 0101 	orr.w	r1, r1, #1
200077d0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
200077d2:	f883 6041 	strb.w	r6, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
200077d6:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
200077da:	bc70      	pop	{r4, r5, r6}
200077dc:	4770      	bx	lr
    return HAL_BUSY;
200077de:	2002      	movs	r0, #2
}
200077e0:	4770      	bx	lr
    return HAL_BUSY;
200077e2:	2002      	movs	r0, #2
}
200077e4:	bc70      	pop	{r4, r5, r6}
200077e6:	4770      	bx	lr

200077e8 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
200077e8:	4a09      	ldr	r2, [pc, #36]	; (20007810 <HAL_I2CEx_EnableFastModePlus+0x28>)
200077ea:	6c51      	ldr	r1, [r2, #68]	; 0x44
200077ec:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
{
200077f0:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
200077f2:	6451      	str	r1, [r2, #68]	; 0x44
{
200077f4:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
200077f6:	6c52      	ldr	r2, [r2, #68]	; 0x44

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
200077f8:	4c06      	ldr	r4, [pc, #24]	; (20007814 <HAL_I2CEx_EnableFastModePlus+0x2c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
200077fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
200077fe:	9201      	str	r2, [sp, #4]
20007800:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
20007802:	6863      	ldr	r3, [r4, #4]
20007804:	4318      	orrs	r0, r3
20007806:	6060      	str	r0, [r4, #4]
}
20007808:	b003      	add	sp, #12
2000780a:	f85d 4b04 	ldr.w	r4, [sp], #4
2000780e:	4770      	bx	lr
20007810:	40023800 	.word	0x40023800
20007814:	40013800 	.word	0x40013800

20007818 <HAL_I2CEx_DisableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
20007818:	4a0a      	ldr	r2, [pc, #40]	; (20007844 <HAL_I2CEx_DisableFastModePlus+0x2c>)
2000781a:	6c51      	ldr	r1, [r2, #68]	; 0x44
2000781c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
{
20007820:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
20007822:	6451      	str	r1, [r2, #68]	; 0x44
{
20007824:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
20007826:	6c52      	ldr	r2, [r2, #68]	; 0x44

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
20007828:	4c07      	ldr	r4, [pc, #28]	; (20007848 <HAL_I2CEx_DisableFastModePlus+0x30>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000782a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
2000782e:	9201      	str	r2, [sp, #4]
20007830:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
20007832:	6863      	ldr	r3, [r4, #4]
20007834:	ea23 0000 	bic.w	r0, r3, r0
20007838:	6060      	str	r0, [r4, #4]
}
2000783a:	b003      	add	sp, #12
2000783c:	f85d 4b04 	ldr.w	r4, [sp], #4
20007840:	4770      	bx	lr
20007842:	bf00      	nop
20007844:	40023800 	.word	0x40023800
20007848:	40013800 	.word	0x40013800

2000784c <HAL_PWR_DeInit>:
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
  __HAL_RCC_PWR_FORCE_RESET();
2000784c:	4b04      	ldr	r3, [pc, #16]	; (20007860 <HAL_PWR_DeInit+0x14>)
2000784e:	6a1a      	ldr	r2, [r3, #32]
20007850:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
20007854:	621a      	str	r2, [r3, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
20007856:	6a1a      	ldr	r2, [r3, #32]
20007858:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
2000785c:	621a      	str	r2, [r3, #32]
}
2000785e:	4770      	bx	lr
20007860:	40023800 	.word	0x40023800

20007864 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
20007864:	4a02      	ldr	r2, [pc, #8]	; (20007870 <HAL_PWR_EnableBkUpAccess+0xc>)
20007866:	6813      	ldr	r3, [r2, #0]
20007868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000786c:	6013      	str	r3, [r2, #0]
}
2000786e:	4770      	bx	lr
20007870:	40007000 	.word	0x40007000

20007874 <HAL_PWR_DisableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  /* Disable access to RTC and backup registers */
	CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
20007874:	4a02      	ldr	r2, [pc, #8]	; (20007880 <HAL_PWR_DisableBkUpAccess+0xc>)
20007876:	6813      	ldr	r3, [r2, #0]
20007878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2000787c:	6013      	str	r3, [r2, #0]
}
2000787e:	4770      	bx	lr
20007880:	40007000 	.word	0x40007000

20007884 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
20007884:	491b      	ldr	r1, [pc, #108]	; (200078f4 <HAL_PWR_ConfigPVD+0x70>)
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
20007886:	4b1c      	ldr	r3, [pc, #112]	; (200078f8 <HAL_PWR_ConfigPVD+0x74>)
  MODIFY_REG(PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
20007888:	680a      	ldr	r2, [r1, #0]
{
2000788a:	b410      	push	{r4}
  MODIFY_REG(PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
2000788c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
20007890:	6804      	ldr	r4, [r0, #0]
20007892:	4322      	orrs	r2, r4
20007894:	600a      	str	r2, [r1, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
20007896:	685a      	ldr	r2, [r3, #4]
20007898:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
2000789c:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
2000789e:	681a      	ldr	r2, [r3, #0]
200078a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
200078a4:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
200078a6:	689a      	ldr	r2, [r3, #8]
200078a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
200078ac:	609a      	str	r2, [r3, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
200078ae:	68da      	ldr	r2, [r3, #12]
200078b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
200078b4:	60da      	str	r2, [r3, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
200078b6:	6842      	ldr	r2, [r0, #4]
200078b8:	03d4      	lsls	r4, r2, #15
200078ba:	d503      	bpl.n	200078c4 <HAL_PWR_ConfigPVD+0x40>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
200078bc:	6819      	ldr	r1, [r3, #0]
200078be:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
200078c2:	6019      	str	r1, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
200078c4:	0390      	lsls	r0, r2, #14
200078c6:	d504      	bpl.n	200078d2 <HAL_PWR_ConfigPVD+0x4e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
200078c8:	490b      	ldr	r1, [pc, #44]	; (200078f8 <HAL_PWR_ConfigPVD+0x74>)
200078ca:	684b      	ldr	r3, [r1, #4]
200078cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200078d0:	604b      	str	r3, [r1, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
200078d2:	07d1      	lsls	r1, r2, #31
200078d4:	d504      	bpl.n	200078e0 <HAL_PWR_ConfigPVD+0x5c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
200078d6:	4908      	ldr	r1, [pc, #32]	; (200078f8 <HAL_PWR_ConfigPVD+0x74>)
200078d8:	688b      	ldr	r3, [r1, #8]
200078da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200078de:	608b      	str	r3, [r1, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
200078e0:	0793      	lsls	r3, r2, #30
200078e2:	d504      	bpl.n	200078ee <HAL_PWR_ConfigPVD+0x6a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
200078e4:	4a04      	ldr	r2, [pc, #16]	; (200078f8 <HAL_PWR_ConfigPVD+0x74>)
200078e6:	68d3      	ldr	r3, [r2, #12]
200078e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200078ec:	60d3      	str	r3, [r2, #12]
  }
}
200078ee:	f85d 4b04 	ldr.w	r4, [sp], #4
200078f2:	4770      	bx	lr
200078f4:	40007000 	.word	0x40007000
200078f8:	40013c00 	.word	0x40013c00

200078fc <HAL_PWR_EnablePVD>:
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  /* Enable the power voltage detector */
	SET_BIT(PWR->CR1, PWR_CR1_PVDE);
200078fc:	4a02      	ldr	r2, [pc, #8]	; (20007908 <HAL_PWR_EnablePVD+0xc>)
200078fe:	6813      	ldr	r3, [r2, #0]
20007900:	f043 0310 	orr.w	r3, r3, #16
20007904:	6013      	str	r3, [r2, #0]
}
20007906:	4770      	bx	lr
20007908:	40007000 	.word	0x40007000

2000790c <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
	CLEAR_BIT(PWR->CR1, PWR_CR1_PVDE);
2000790c:	4a02      	ldr	r2, [pc, #8]	; (20007918 <HAL_PWR_DisablePVD+0xc>)
2000790e:	6813      	ldr	r3, [r2, #0]
20007910:	f023 0310 	bic.w	r3, r3, #16
20007914:	6013      	str	r3, [r2, #0]
}
20007916:	4770      	bx	lr
20007918:	40007000 	.word	0x40007000

2000791c <HAL_PWR_EnableWakeUpPin>:
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
  
  /* Enable wake-up pin */
  SET_BIT(PWR->CSR2, (PWR_EWUP_MASK & WakeUpPinPolarity));
2000791c:	4a07      	ldr	r2, [pc, #28]	; (2000793c <HAL_PWR_EnableWakeUpPin+0x20>)
{
2000791e:	b410      	push	{r4}
  SET_BIT(PWR->CSR2, (PWR_EWUP_MASK & WakeUpPinPolarity));
20007920:	68d1      	ldr	r1, [r2, #12]
20007922:	f400 547c 	and.w	r4, r0, #16128	; 0x3f00
20007926:	4321      	orrs	r1, r4
20007928:	60d1      	str	r1, [r2, #12]
	
  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR2, (PWR_EWUP_MASK & WakeUpPinPolarity), (WakeUpPinPolarity >> 0x06));
2000792a:	6893      	ldr	r3, [r2, #8]
2000792c:	ea23 0304 	bic.w	r3, r3, r4
}
20007930:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(PWR->CR2, (PWR_EWUP_MASK & WakeUpPinPolarity), (WakeUpPinPolarity >> 0x06));
20007934:	ea43 1090 	orr.w	r0, r3, r0, lsr #6
20007938:	6090      	str	r0, [r2, #8]
}
2000793a:	4770      	bx	lr
2000793c:	40007000 	.word	0x40007000

20007940 <HAL_PWR_DisableWakeUpPin>:
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CSR2, WakeUpPinx);
20007940:	4a02      	ldr	r2, [pc, #8]	; (2000794c <HAL_PWR_DisableWakeUpPin+0xc>)
20007942:	68d3      	ldr	r3, [r2, #12]
20007944:	ea23 0000 	bic.w	r0, r3, r0
20007948:	60d0      	str	r0, [r2, #12]
}
2000794a:	4770      	bx	lr
2000794c:	40007000 	.word	0x40007000

20007950 <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
20007950:	4a08      	ldr	r2, [pc, #32]	; (20007974 <HAL_PWR_EnterSLEEPMode+0x24>)
20007952:	6913      	ldr	r3, [r2, #16]
20007954:	f023 0304 	bic.w	r3, r3, #4
20007958:	6113      	str	r3, [r2, #16]
2000795a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
2000795e:	f3bf 8f6f 	isb	sy
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
20007962:	2901      	cmp	r1, #1
20007964:	d003      	beq.n	2000796e <HAL_PWR_EnterSLEEPMode+0x1e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
20007966:	bf40      	sev
    __WFE();
20007968:	bf20      	wfe
    __WFE();
2000796a:	bf20      	wfe
  }
}
2000796c:	4770      	bx	lr
    __WFI();
2000796e:	bf30      	wfi
20007970:	4770      	bx	lr
20007972:	bf00      	nop
20007974:	e000ed00 	.word	0xe000ed00

20007978 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
20007978:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR1;
2000797a:	4c0f      	ldr	r4, [pc, #60]	; (200079b8 <HAL_PWR_EnterSTOPMode+0x40>)

  /* Store the new value */
  PWR->CR1 = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
2000797c:	4a0f      	ldr	r2, [pc, #60]	; (200079bc <HAL_PWR_EnterSTOPMode+0x44>)
  tmpreg = PWR->CR1;
2000797e:	6823      	ldr	r3, [r4, #0]
  tmpreg &= (uint32_t)~(PWR_CR1_PDDS | PWR_CR1_LPDS);
20007980:	f023 0303 	bic.w	r3, r3, #3
  tmpreg |= Regulator;
20007984:	4303      	orrs	r3, r0
  PWR->CR1 = tmpreg;
20007986:	6023      	str	r3, [r4, #0]
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
20007988:	6913      	ldr	r3, [r2, #16]
2000798a:	f043 0304 	orr.w	r3, r3, #4
2000798e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
20007990:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
20007994:	f3bf 8f6f 	isb	sy
  /* Ensure that all instructions done before entering STOP mode */
  __DSB();
  __ISB();

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
20007998:	2901      	cmp	r1, #1
2000799a:	d00a      	beq.n	200079b2 <HAL_PWR_EnterSTOPMode+0x3a>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
2000799c:	bf40      	sev
    __WFE();
2000799e:	bf20      	wfe
    __WFE();
200079a0:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
200079a2:	4a06      	ldr	r2, [pc, #24]	; (200079bc <HAL_PWR_EnterSTOPMode+0x44>)
}
200079a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
200079a8:	6913      	ldr	r3, [r2, #16]
200079aa:	f023 0304 	bic.w	r3, r3, #4
200079ae:	6113      	str	r3, [r2, #16]
}
200079b0:	4770      	bx	lr
    __WFI();
200079b2:	bf30      	wfi
200079b4:	e7f5      	b.n	200079a2 <HAL_PWR_EnterSTOPMode+0x2a>
200079b6:	bf00      	nop
200079b8:	40007000 	.word	0x40007000
200079bc:	e000ed00 	.word	0xe000ed00

200079c0 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Select Standby mode */
  PWR->CR1 |= PWR_CR1_PDDS;
200079c0:	4905      	ldr	r1, [pc, #20]	; (200079d8 <HAL_PWR_EnterSTANDBYMode+0x18>)
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
200079c2:	4a06      	ldr	r2, [pc, #24]	; (200079dc <HAL_PWR_EnterSTANDBYMode+0x1c>)
  PWR->CR1 |= PWR_CR1_PDDS;
200079c4:	680b      	ldr	r3, [r1, #0]
200079c6:	f043 0302 	orr.w	r3, r3, #2
200079ca:	600b      	str	r3, [r1, #0]
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
200079cc:	6913      	ldr	r3, [r2, #16]
200079ce:	f043 0304 	orr.w	r3, r3, #4
200079d2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
200079d4:	bf30      	wfi
}
200079d6:	4770      	bx	lr
200079d8:	40007000 	.word	0x40007000
200079dc:	e000ed00 	.word	0xe000ed00

200079e0 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
200079e0:	4770      	bx	lr
200079e2:	bf00      	nop

200079e4 <HAL_PWR_PVD_IRQHandler>:
{
200079e4:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
200079e6:	4c05      	ldr	r4, [pc, #20]	; (200079fc <HAL_PWR_PVD_IRQHandler+0x18>)
200079e8:	6963      	ldr	r3, [r4, #20]
200079ea:	03db      	lsls	r3, r3, #15
200079ec:	d400      	bmi.n	200079f0 <HAL_PWR_PVD_IRQHandler+0xc>
}
200079ee:	bd10      	pop	{r4, pc}
    HAL_PWR_PVDCallback();
200079f0:	f7ff fff6 	bl	200079e0 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
200079f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200079f8:	6163      	str	r3, [r4, #20]
}
200079fa:	bd10      	pop	{r4, pc}
200079fc:	40013c00 	.word	0x40013c00

20007a00 <HAL_PWR_EnableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
20007a00:	4a02      	ldr	r2, [pc, #8]	; (20007a0c <HAL_PWR_EnableSleepOnExit+0xc>)
20007a02:	6913      	ldr	r3, [r2, #16]
20007a04:	f043 0302 	orr.w	r3, r3, #2
20007a08:	6113      	str	r3, [r2, #16]
}
20007a0a:	4770      	bx	lr
20007a0c:	e000ed00 	.word	0xe000ed00

20007a10 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
20007a10:	4a02      	ldr	r2, [pc, #8]	; (20007a1c <HAL_PWR_DisableSleepOnExit+0xc>)
20007a12:	6913      	ldr	r3, [r2, #16]
20007a14:	f023 0302 	bic.w	r3, r3, #2
20007a18:	6113      	str	r3, [r2, #16]
}
20007a1a:	4770      	bx	lr
20007a1c:	e000ed00 	.word	0xe000ed00

20007a20 <HAL_PWR_EnableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
20007a20:	4a02      	ldr	r2, [pc, #8]	; (20007a2c <HAL_PWR_EnableSEVOnPend+0xc>)
20007a22:	6913      	ldr	r3, [r2, #16]
20007a24:	f043 0310 	orr.w	r3, r3, #16
20007a28:	6113      	str	r3, [r2, #16]
}
20007a2a:	4770      	bx	lr
20007a2c:	e000ed00 	.word	0xe000ed00

20007a30 <HAL_PWR_DisableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
20007a30:	4a02      	ldr	r2, [pc, #8]	; (20007a3c <HAL_PWR_DisableSEVOnPend+0xc>)
20007a32:	6913      	ldr	r3, [r2, #16]
20007a34:	f023 0310 	bic.w	r3, r3, #16
20007a38:	6113      	str	r3, [r2, #16]
}
20007a3a:	4770      	bx	lr
20007a3c:	e000ed00 	.word	0xe000ed00

20007a40 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
20007a40:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Enable Backup regulator */
  PWR->CSR1 |= PWR_CSR1_BRE;
20007a42:	4b0d      	ldr	r3, [pc, #52]	; (20007a78 <HAL_PWREx_EnableBkUpReg+0x38>)
20007a44:	685a      	ldr	r2, [r3, #4]

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
20007a46:	461d      	mov	r5, r3
  PWR->CSR1 |= PWR_CSR1_BRE;
20007a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20007a4c:	605a      	str	r2, [r3, #4]
  PWR->CSR1 |= PWR_CSR1_EIWUP;
20007a4e:	685a      	ldr	r2, [r3, #4]
20007a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20007a54:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
20007a56:	f7f9 fe27 	bl	200016a8 <HAL_GetTick>
20007a5a:	4604      	mov	r4, r0
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
20007a5c:	e005      	b.n	20007a6a <HAL_PWREx_EnableBkUpReg+0x2a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
20007a5e:	f7f9 fe23 	bl	200016a8 <HAL_GetTick>
20007a62:	1b00      	subs	r0, r0, r4
20007a64:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20007a68:	d804      	bhi.n	20007a74 <HAL_PWREx_EnableBkUpReg+0x34>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
20007a6a:	686b      	ldr	r3, [r5, #4]
20007a6c:	071b      	lsls	r3, r3, #28
20007a6e:	d5f6      	bpl.n	20007a5e <HAL_PWREx_EnableBkUpReg+0x1e>
    {
      return HAL_TIMEOUT;
    } 
  }
  return HAL_OK;
20007a70:	2000      	movs	r0, #0
}
20007a72:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
20007a74:	2003      	movs	r0, #3
}
20007a76:	bd38      	pop	{r3, r4, r5, pc}
20007a78:	40007000 	.word	0x40007000

20007a7c <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
20007a7c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Disable Backup regulator */
  PWR->CSR1 &= (uint32_t)~((uint32_t)PWR_CSR1_BRE);
20007a7e:	4b0e      	ldr	r3, [pc, #56]	; (20007ab8 <HAL_PWREx_DisableBkUpReg+0x3c>)
20007a80:	685a      	ldr	r2, [r3, #4]

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
20007a82:	461d      	mov	r5, r3
  PWR->CSR1 &= (uint32_t)~((uint32_t)PWR_CSR1_BRE);
20007a84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20007a88:	605a      	str	r2, [r3, #4]
  PWR->CSR1 |= PWR_CSR1_EIWUP;
20007a8a:	685a      	ldr	r2, [r3, #4]
20007a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20007a90:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
20007a92:	f7f9 fe09 	bl	200016a8 <HAL_GetTick>
20007a96:	4604      	mov	r4, r0
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
20007a98:	e005      	b.n	20007aa6 <HAL_PWREx_DisableBkUpReg+0x2a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
20007a9a:	f7f9 fe05 	bl	200016a8 <HAL_GetTick>
20007a9e:	1b00      	subs	r0, r0, r4
20007aa0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20007aa4:	d805      	bhi.n	20007ab2 <HAL_PWREx_DisableBkUpReg+0x36>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
20007aa6:	686b      	ldr	r3, [r5, #4]
20007aa8:	f013 0308 	ands.w	r3, r3, #8
20007aac:	d1f5      	bne.n	20007a9a <HAL_PWREx_DisableBkUpReg+0x1e>
    {
      return HAL_TIMEOUT;
    } 
  }
  return HAL_OK;
20007aae:	4618      	mov	r0, r3
}
20007ab0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
20007ab2:	2003      	movs	r0, #3
}
20007ab4:	bd38      	pop	{r3, r4, r5, pc}
20007ab6:	bf00      	nop
20007ab8:	40007000 	.word	0x40007000

20007abc <HAL_PWREx_EnableFlashPowerDown>:
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
  /* Enable the Flash Power Down */
  PWR->CR1 |= PWR_CR1_FPDS;
20007abc:	4a02      	ldr	r2, [pc, #8]	; (20007ac8 <HAL_PWREx_EnableFlashPowerDown+0xc>)
20007abe:	6813      	ldr	r3, [r2, #0]
20007ac0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20007ac4:	6013      	str	r3, [r2, #0]
}
20007ac6:	4770      	bx	lr
20007ac8:	40007000 	.word	0x40007000

20007acc <HAL_PWREx_DisableFlashPowerDown>:
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
  /* Disable the Flash Power Down */
  PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_FPDS);
20007acc:	4a02      	ldr	r2, [pc, #8]	; (20007ad8 <HAL_PWREx_DisableFlashPowerDown+0xc>)
20007ace:	6813      	ldr	r3, [r2, #0]
20007ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
20007ad4:	6013      	str	r3, [r2, #0]
}
20007ad6:	4770      	bx	lr
20007ad8:	40007000 	.word	0x40007000

20007adc <HAL_PWREx_EnableMainRegulatorLowVoltage>:
  * @retval None
  */
void HAL_PWREx_EnableMainRegulatorLowVoltage(void)
{
  /* Enable Main regulator low voltage */
  PWR->CR1 |= PWR_CR1_MRUDS;
20007adc:	4a02      	ldr	r2, [pc, #8]	; (20007ae8 <HAL_PWREx_EnableMainRegulatorLowVoltage+0xc>)
20007ade:	6813      	ldr	r3, [r2, #0]
20007ae0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
20007ae4:	6013      	str	r3, [r2, #0]
}
20007ae6:	4770      	bx	lr
20007ae8:	40007000 	.word	0x40007000

20007aec <HAL_PWREx_DisableMainRegulatorLowVoltage>:
  * @retval None
  */
void HAL_PWREx_DisableMainRegulatorLowVoltage(void)
{  
  /* Disable Main regulator low voltage */
  PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_MRUDS);
20007aec:	4a02      	ldr	r2, [pc, #8]	; (20007af8 <HAL_PWREx_DisableMainRegulatorLowVoltage+0xc>)
20007aee:	6813      	ldr	r3, [r2, #0]
20007af0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
20007af4:	6013      	str	r3, [r2, #0]
}
20007af6:	4770      	bx	lr
20007af8:	40007000 	.word	0x40007000

20007afc <HAL_PWREx_EnableLowRegulatorLowVoltage>:
  * @retval None
  */
void HAL_PWREx_EnableLowRegulatorLowVoltage(void)
{
  /* Enable low power regulator */
  PWR->CR1 |= PWR_CR1_LPUDS;
20007afc:	4a02      	ldr	r2, [pc, #8]	; (20007b08 <HAL_PWREx_EnableLowRegulatorLowVoltage+0xc>)
20007afe:	6813      	ldr	r3, [r2, #0]
20007b00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20007b04:	6013      	str	r3, [r2, #0]
}
20007b06:	4770      	bx	lr
20007b08:	40007000 	.word	0x40007000

20007b0c <HAL_PWREx_DisableLowRegulatorLowVoltage>:
  * @retval None
  */
void HAL_PWREx_DisableLowRegulatorLowVoltage(void)
{
  /* Disable low power regulator */
  PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_LPUDS);
20007b0c:	4a02      	ldr	r2, [pc, #8]	; (20007b18 <HAL_PWREx_DisableLowRegulatorLowVoltage+0xc>)
20007b0e:	6813      	ldr	r3, [r2, #0]
20007b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
20007b14:	6013      	str	r3, [r2, #0]
}
20007b16:	4770      	bx	lr
20007b18:	40007000 	.word	0x40007000

20007b1c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
20007b1c:	4a1b      	ldr	r2, [pc, #108]	; (20007b8c <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
20007b1e:	4b1c      	ldr	r3, [pc, #112]	; (20007b90 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
20007b20:	6c11      	ldr	r1, [r2, #64]	; 0x40
20007b22:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
20007b26:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
20007b28:	6411      	str	r1, [r2, #64]	; 0x40
{
20007b2a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
20007b2c:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20007b2e:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
20007b30:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
20007b34:	9201      	str	r2, [sp, #4]
20007b36:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
20007b38:	681a      	ldr	r2, [r3, #0]
20007b3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
20007b3e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
20007b40:	f7f9 fdb2 	bl	200016a8 <HAL_GetTick>
20007b44:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20007b46:	e005      	b.n	20007b54 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20007b48:	f7f9 fdae 	bl	200016a8 <HAL_GetTick>
20007b4c:	1b00      	subs	r0, r0, r4
20007b4e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20007b52:	d817      	bhi.n	20007b84 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20007b54:	686b      	ldr	r3, [r5, #4]
20007b56:	03da      	lsls	r2, r3, #15
20007b58:	d5f6      	bpl.n	20007b48 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20007b5a:	682b      	ldr	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20007b5c:	4e0c      	ldr	r6, [pc, #48]	; (20007b90 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20007b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20007b62:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
20007b64:	f7f9 fda0 	bl	200016a8 <HAL_GetTick>
20007b68:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20007b6a:	e005      	b.n	20007b78 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20007b6c:	f7f9 fd9c 	bl	200016a8 <HAL_GetTick>
20007b70:	1b00      	subs	r0, r0, r4
20007b72:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20007b76:	d805      	bhi.n	20007b84 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20007b78:	6873      	ldr	r3, [r6, #4]
20007b7a:	039b      	lsls	r3, r3, #14
20007b7c:	d5f6      	bpl.n	20007b6c <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
20007b7e:	2000      	movs	r0, #0
}
20007b80:	b002      	add	sp, #8
20007b82:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
20007b84:	2003      	movs	r0, #3
}
20007b86:	b002      	add	sp, #8
20007b88:	bd70      	pop	{r4, r5, r6, pc}
20007b8a:	bf00      	nop
20007b8c:	40023800 	.word	0x40023800
20007b90:	40007000 	.word	0x40007000

20007b94 <HAL_PWREx_DisableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_DisableOverDrive(void)
{
  uint32_t tickstart = 0;
  
  __HAL_RCC_PWR_CLK_ENABLE();
20007b94:	4a1b      	ldr	r2, [pc, #108]	; (20007c04 <HAL_PWREx_DisableOverDrive+0x70>)
    
  /* Disable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
20007b96:	4b1c      	ldr	r3, [pc, #112]	; (20007c08 <HAL_PWREx_DisableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
20007b98:	6c11      	ldr	r1, [r2, #64]	; 0x40
20007b9a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
20007b9e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
20007ba0:	6411      	str	r1, [r2, #64]	; 0x40
{
20007ba2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
20007ba4:	6c12      	ldr	r2, [r2, #64]	; 0x40
  
  /* Get tick */
  tickstart = HAL_GetTick();
 
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20007ba6:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
20007ba8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
20007bac:	9201      	str	r2, [sp, #4]
20007bae:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
20007bb0:	681a      	ldr	r2, [r3, #0]
20007bb2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
20007bb6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
20007bb8:	f7f9 fd76 	bl	200016a8 <HAL_GetTick>
20007bbc:	4604      	mov	r4, r0
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20007bbe:	e005      	b.n	20007bcc <HAL_PWREx_DisableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20007bc0:	f7f9 fd72 	bl	200016a8 <HAL_GetTick>
20007bc4:	1b00      	subs	r0, r0, r4
20007bc6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20007bca:	d818      	bhi.n	20007bfe <HAL_PWREx_DisableOverDrive+0x6a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20007bcc:	686b      	ldr	r3, [r5, #4]
20007bce:	039b      	lsls	r3, r3, #14
20007bd0:	d4f6      	bmi.n	20007bc0 <HAL_PWREx_DisableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  } 
  
  /* Disable the Over-drive */
  __HAL_PWR_OVERDRIVE_DISABLE();
20007bd2:	682b      	ldr	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20007bd4:	4e0c      	ldr	r6, [pc, #48]	; (20007c08 <HAL_PWREx_DisableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVE_DISABLE();
20007bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20007bda:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
20007bdc:	f7f9 fd64 	bl	200016a8 <HAL_GetTick>
20007be0:	4604      	mov	r4, r0
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20007be2:	e005      	b.n	20007bf0 <HAL_PWREx_DisableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20007be4:	f7f9 fd60 	bl	200016a8 <HAL_GetTick>
20007be8:	1b00      	subs	r0, r0, r4
20007bea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20007bee:	d806      	bhi.n	20007bfe <HAL_PWREx_DisableOverDrive+0x6a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20007bf0:	6873      	ldr	r3, [r6, #4]
20007bf2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
20007bf6:	d1f5      	bne.n	20007be4 <HAL_PWREx_DisableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  }
  
  return HAL_OK;
20007bf8:	4618      	mov	r0, r3
}
20007bfa:	b002      	add	sp, #8
20007bfc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
20007bfe:	2003      	movs	r0, #3
}
20007c00:	b002      	add	sp, #8
20007c02:	bd70      	pop	{r4, r5, r6, pc}
20007c04:	40023800 	.word	0x40023800
20007c08:	40007000 	.word	0x40007000

20007c0c <HAL_PWREx_EnterUnderDriveSTOPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
HAL_StatusTypeDef HAL_PWREx_EnterUnderDriveSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
20007c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
20007c0e:	4c21      	ldr	r4, [pc, #132]	; (20007c94 <HAL_PWREx_EnterUnderDriveSTOPMode+0x88>)
{
20007c10:	460e      	mov	r6, r1
20007c12:	b083      	sub	sp, #12
  /* Enable the Under-drive Mode ---------------------------------------------*/
  /* Clear Under-drive flag */
  __HAL_PWR_CLEAR_ODRUDR_FLAG();
20007c14:	4b20      	ldr	r3, [pc, #128]	; (20007c98 <HAL_PWREx_EnterUnderDriveSTOPMode+0x8c>)
  __HAL_RCC_PWR_CLK_ENABLE();
20007c16:	6c25      	ldr	r5, [r4, #64]	; 0x40
{
20007c18:	4607      	mov	r7, r0
  __HAL_PWR_CLEAR_ODRUDR_FLAG();
20007c1a:	4a20      	ldr	r2, [pc, #128]	; (20007c9c <HAL_PWREx_EnterUnderDriveSTOPMode+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
20007c1c:	f045 5180 	orr.w	r1, r5, #268435456	; 0x10000000

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait for UnderDrive mode is ready */
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_UDRDY))
20007c20:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
20007c22:	6421      	str	r1, [r4, #64]	; 0x40
20007c24:	6c21      	ldr	r1, [r4, #64]	; 0x40
20007c26:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
20007c2a:	9101      	str	r1, [sp, #4]
20007c2c:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_CLEAR_ODRUDR_FLAG();
20007c2e:	6859      	ldr	r1, [r3, #4]
20007c30:	430a      	orrs	r2, r1
20007c32:	605a      	str	r2, [r3, #4]
  __HAL_PWR_UNDERDRIVE_ENABLE();
20007c34:	681a      	ldr	r2, [r3, #0]
20007c36:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
20007c3a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
20007c3c:	f7f9 fd34 	bl	200016a8 <HAL_GetTick>
20007c40:	4604      	mov	r4, r0
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_UDRDY))
20007c42:	e005      	b.n	20007c50 <HAL_PWREx_EnterUnderDriveSTOPMode+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_UDERDRIVE_TIMEOUT_VALUE)
20007c44:	f7f9 fd30 	bl	200016a8 <HAL_GetTick>
20007c48:	1b03      	subs	r3, r0, r4
20007c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20007c4e:	d81c      	bhi.n	20007c8a <HAL_PWREx_EnterUnderDriveSTOPMode+0x7e>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_UDRDY))
20007c50:	686b      	ldr	r3, [r5, #4]
20007c52:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
20007c56:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
20007c5a:	d0f3      	beq.n	20007c44 <HAL_PWREx_EnterUnderDriveSTOPMode+0x38>
      return HAL_TIMEOUT;
    }
  }
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tempreg = PWR->CR1;
20007c5c:	6829      	ldr	r1, [r5, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_SLEEPENTRY_WFI)
20007c5e:	2e01      	cmp	r6, #1
  tempreg &= (uint32_t)~(PWR_CR1_PDDS | PWR_CR1_LPDS | PWR_CR1_LPUDS | PWR_CR1_MRUDS);
20007c60:	4b0f      	ldr	r3, [pc, #60]	; (20007ca0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x94>)
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
20007c62:	4a10      	ldr	r2, [pc, #64]	; (20007ca4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
  tempreg &= (uint32_t)~(PWR_CR1_PDDS | PWR_CR1_LPDS | PWR_CR1_LPUDS | PWR_CR1_MRUDS);
20007c64:	ea03 0301 	and.w	r3, r3, r1
  tempreg |= Regulator;
20007c68:	ea47 0703 	orr.w	r7, r7, r3
  PWR->CR1 = tempreg;
20007c6c:	602f      	str	r7, [r5, #0]
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
20007c6e:	6913      	ldr	r3, [r2, #16]
20007c70:	f043 0304 	orr.w	r3, r3, #4
20007c74:	6113      	str	r3, [r2, #16]
  if(STOPEntry == PWR_SLEEPENTRY_WFI)
20007c76:	d00b      	beq.n	20007c90 <HAL_PWREx_EnterUnderDriveSTOPMode+0x84>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
20007c78:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
20007c7a:	4a0a      	ldr	r2, [pc, #40]	; (20007ca4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)

  return HAL_OK;  
20007c7c:	2000      	movs	r0, #0
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
20007c7e:	6913      	ldr	r3, [r2, #16]
20007c80:	f023 0304 	bic.w	r3, r3, #4
20007c84:	6113      	str	r3, [r2, #16]
}
20007c86:	b003      	add	sp, #12
20007c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
20007c8a:	2003      	movs	r0, #3
}
20007c8c:	b003      	add	sp, #12
20007c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __WFI();
20007c90:	bf30      	wfi
20007c92:	e7f2      	b.n	20007c7a <HAL_PWREx_EnterUnderDriveSTOPMode+0x6e>
20007c94:	40023800 	.word	0x40023800
20007c98:	40007000 	.word	0x40007000
20007c9c:	000c0100 	.word	0x000c0100
20007ca0:	fffff3fc 	.word	0xfffff3fc
20007ca4:	e000ed00 	.word	0xe000ed00

20007ca8 <HAL_PWREx_GetVoltageRange>:
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1, PWR_REGULATOR_VOLTAGE_SCALE2 or 
  *            PWR_REGULATOR_VOLTAGE_SCALE3)PWR_REGULATOR_VOLTAGE_SCALE1
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
20007ca8:	4b02      	ldr	r3, [pc, #8]	; (20007cb4 <HAL_PWREx_GetVoltageRange+0xc>)
20007caa:	6818      	ldr	r0, [r3, #0]
}
20007cac:	f400 4040 	and.w	r0, r0, #49152	; 0xc000
20007cb0:	4770      	bx	lr
20007cb2:	bf00      	nop
20007cb4:	40007000 	.word	0x40007000

20007cb8 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t tickstart = 0;

  assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));

  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
20007cb8:	4b2a      	ldr	r3, [pc, #168]	; (20007d64 <HAL_PWREx_ControlVoltageScaling+0xac>)
20007cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20007cbc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
20007cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
20007cc2:	641a      	str	r2, [r3, #64]	; 0x40
{
20007cc4:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
20007cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20007cc8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
20007ccc:	9200      	str	r2, [sp, #0]
20007cce:	9a00      	ldr	r2, [sp, #0]

  /* Check if the PLL is used as system clock or not */
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20007cd0:	689a      	ldr	r2, [r3, #8]
20007cd2:	f002 020c 	and.w	r2, r2, #12
20007cd6:	2a08      	cmp	r2, #8
20007cd8:	d040      	beq.n	20007d5c <HAL_PWREx_ControlVoltageScaling+0xa4>
  {
    /* Disable the main PLL */
    __HAL_RCC_PLL_DISABLE();
20007cda:	681a      	ldr	r2, [r3, #0]
20007cdc:	4606      	mov	r6, r0
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20007cde:	461d      	mov	r5, r3
    __HAL_RCC_PLL_DISABLE();
20007ce0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
20007ce4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();    
20007ce6:	f7f9 fcdf 	bl	200016a8 <HAL_GetTick>
20007cea:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20007cec:	e004      	b.n	20007cf8 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20007cee:	f7f9 fcdb 	bl	200016a8 <HAL_GetTick>
20007cf2:	1b03      	subs	r3, r0, r4
20007cf4:	2b02      	cmp	r3, #2
20007cf6:	d82e      	bhi.n	20007d56 <HAL_PWREx_ControlVoltageScaling+0x9e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20007cf8:	682b      	ldr	r3, [r5, #0]
20007cfa:	0199      	lsls	r1, r3, #6
20007cfc:	d4f7      	bmi.n	20007cee <HAL_PWREx_ControlVoltageScaling+0x36>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
20007cfe:	4a1a      	ldr	r2, [pc, #104]	; (20007d68 <HAL_PWREx_ControlVoltageScaling+0xb0>)
    __HAL_RCC_PLL_ENABLE();
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20007d00:	4f18      	ldr	r7, [pc, #96]	; (20007d64 <HAL_PWREx_ControlVoltageScaling+0xac>)
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
20007d02:	6813      	ldr	r3, [r2, #0]
20007d04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
20007d08:	431e      	orrs	r6, r3
20007d0a:	6016      	str	r6, [r2, #0]
20007d0c:	6813      	ldr	r3, [r2, #0]
20007d0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
20007d12:	9301      	str	r3, [sp, #4]
20007d14:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_PLL_ENABLE();
20007d16:	682b      	ldr	r3, [r5, #0]
20007d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20007d1c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
20007d1e:	f7f9 fcc3 	bl	200016a8 <HAL_GetTick>
20007d22:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20007d24:	e004      	b.n	20007d30 <HAL_PWREx_ControlVoltageScaling+0x78>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20007d26:	f7f9 fcbf 	bl	200016a8 <HAL_GetTick>
20007d2a:	1b00      	subs	r0, r0, r4
20007d2c:	2802      	cmp	r0, #2
20007d2e:	d812      	bhi.n	20007d56 <HAL_PWREx_ControlVoltageScaling+0x9e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20007d30:	683b      	ldr	r3, [r7, #0]
20007d32:	019a      	lsls	r2, r3, #6
20007d34:	d5f7      	bpl.n	20007d26 <HAL_PWREx_ControlVoltageScaling+0x6e>
        return HAL_TIMEOUT;
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
20007d36:	f7f9 fcb7 	bl	200016a8 <HAL_GetTick>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
20007d3a:	4d0b      	ldr	r5, [pc, #44]	; (20007d68 <HAL_PWREx_ControlVoltageScaling+0xb0>)
    tickstart = HAL_GetTick();
20007d3c:	4604      	mov	r4, r0
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
20007d3e:	e005      	b.n	20007d4c <HAL_PWREx_ControlVoltageScaling+0x94>
    {
      if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
20007d40:	f7f9 fcb2 	bl	200016a8 <HAL_GetTick>
20007d44:	1b00      	subs	r0, r0, r4
20007d46:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20007d4a:	d804      	bhi.n	20007d56 <HAL_PWREx_ControlVoltageScaling+0x9e>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
20007d4c:	686b      	ldr	r3, [r5, #4]
20007d4e:	045b      	lsls	r3, r3, #17
20007d50:	d5f6      	bpl.n	20007d40 <HAL_PWREx_ControlVoltageScaling+0x88>
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
20007d52:	2000      	movs	r0, #0
20007d54:	e000      	b.n	20007d58 <HAL_PWREx_ControlVoltageScaling+0xa0>
        return HAL_TIMEOUT;
20007d56:	2003      	movs	r0, #3
}
20007d58:	b003      	add	sp, #12
20007d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
20007d5c:	2001      	movs	r0, #1
}
20007d5e:	b003      	add	sp, #12
20007d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
20007d62:	bf00      	nop
20007d64:	40023800 	.word	0x40023800
20007d68:	40007000 	.word	0x40007000

20007d6c <QSPI_DMARxCplt>:
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
20007d6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hqspi->RxXferCount = 0U;
20007d6e:	2100      	movs	r1, #0

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
20007d70:	681a      	ldr	r2, [r3, #0]
  hqspi->RxXferCount = 0U;
20007d72:	6399      	str	r1, [r3, #56]	; 0x38
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
20007d74:	6813      	ldr	r3, [r2, #0]
20007d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20007d7a:	6013      	str	r3, [r2, #0]
}
20007d7c:	4770      	bx	lr
20007d7e:	bf00      	nop

20007d80 <QSPI_DMATxCplt>:
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
20007d80:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hqspi->TxXferCount = 0U;
20007d82:	2100      	movs	r1, #0

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
20007d84:	681a      	ldr	r2, [r3, #0]
  hqspi->TxXferCount = 0U;
20007d86:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
20007d88:	6813      	ldr	r3, [r2, #0]
20007d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20007d8e:	6013      	str	r3, [r2, #0]
}
20007d90:	4770      	bx	lr
20007d92:	bf00      	nop

20007d94 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
20007d94:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
20007d96:	6a4c      	ldr	r4, [r1, #36]	; 0x24
{
20007d98:	b082      	sub	sp, #8
  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
20007d9a:	b114      	cbz	r4, 20007da2 <QSPI_Config+0xe>
20007d9c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
20007da0:	d130      	bne.n	20007e04 <QSPI_Config+0x70>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
20007da2:	698b      	ldr	r3, [r1, #24]
20007da4:	2b00      	cmp	r3, #0
20007da6:	d034      	beq.n	20007e12 <QSPI_Config+0x7e>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
20007da8:	6a0e      	ldr	r6, [r1, #32]
20007daa:	2e00      	cmp	r6, #0
20007dac:	d059      	beq.n	20007e62 <QSPI_Config+0xce>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
20007dae:	6805      	ldr	r5, [r0, #0]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007db0:	4323      	orrs	r3, r4
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
20007db2:	688f      	ldr	r7, [r1, #8]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
20007db4:	69c8      	ldr	r0, [r1, #28]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
20007db6:	61ef      	str	r7, [r5, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
20007db8:	2800      	cmp	r0, #0
20007dba:	f000 80ae 	beq.w	20007f1a <QSPI_Config+0x186>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007dbe:	4313      	orrs	r3, r2
20007dc0:	690f      	ldr	r7, [r1, #16]
20007dc2:	680c      	ldr	r4, [r1, #0]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
20007dc4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007dc8:	ea43 0306 	orr.w	r3, r3, r6
20007dcc:	68ce      	ldr	r6, [r1, #12]
20007dce:	ea43 0300 	orr.w	r3, r3, r0
20007dd2:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
20007dd4:	ea43 0300 	orr.w	r3, r3, r0
20007dd8:	6b08      	ldr	r0, [r1, #48]	; 0x30
20007dda:	ea43 0300 	orr.w	r3, r3, r0
20007dde:	6948      	ldr	r0, [r1, #20]
20007de0:	9001      	str	r0, [sp, #4]
20007de2:	6b48      	ldr	r0, [r1, #52]	; 0x34
20007de4:	ea43 0300 	orr.w	r3, r3, r0
20007de8:	9801      	ldr	r0, [sp, #4]
20007dea:	ea43 0307 	orr.w	r3, r3, r7
20007dee:	ea43 0306 	orr.w	r3, r3, r6
20007df2:	ea43 0304 	orr.w	r3, r3, r4
20007df6:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
20007dfa:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
20007dfc:	d060      	beq.n	20007ec0 <QSPI_Config+0x12c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
20007dfe:	684b      	ldr	r3, [r1, #4]
20007e00:	61ab      	str	r3, [r5, #24]
20007e02:	e05d      	b.n	20007ec0 <QSPI_Config+0x12c>
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
20007e04:	6a8b      	ldr	r3, [r1, #40]	; 0x28
20007e06:	6805      	ldr	r5, [r0, #0]
20007e08:	3b01      	subs	r3, #1
20007e0a:	612b      	str	r3, [r5, #16]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
20007e0c:	698b      	ldr	r3, [r1, #24]
20007e0e:	2b00      	cmp	r3, #0
20007e10:	d1ca      	bne.n	20007da8 <QSPI_Config+0x14>
      }
    }
  }
  else
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
20007e12:	6a0b      	ldr	r3, [r1, #32]
20007e14:	2b00      	cmp	r3, #0
20007e16:	d044      	beq.n	20007ea2 <QSPI_Config+0x10e>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
20007e18:	6806      	ldr	r6, [r0, #0]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007e1a:	4323      	orrs	r3, r4
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
20007e1c:	688d      	ldr	r5, [r1, #8]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
20007e1e:	69c8      	ldr	r0, [r1, #28]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
20007e20:	61f5      	str	r5, [r6, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
20007e22:	2800      	cmp	r0, #0
20007e24:	d069      	beq.n	20007efa <QSPI_Config+0x166>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007e26:	4313      	orrs	r3, r2
20007e28:	6b4d      	ldr	r5, [r1, #52]	; 0x34
20007e2a:	690f      	ldr	r7, [r1, #16]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
20007e2c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007e30:	ea43 0300 	orr.w	r3, r3, r0
20007e34:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
20007e36:	68cc      	ldr	r4, [r1, #12]
20007e38:	ea43 0300 	orr.w	r3, r3, r0
20007e3c:	6b08      	ldr	r0, [r1, #48]	; 0x30
20007e3e:	ea43 0300 	orr.w	r3, r3, r0
20007e42:	6948      	ldr	r0, [r1, #20]
20007e44:	ea43 0305 	orr.w	r3, r3, r5
20007e48:	ea43 0307 	orr.w	r3, r3, r7
20007e4c:	ea43 0304 	orr.w	r3, r3, r4
20007e50:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
20007e54:	6173      	str	r3, [r6, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
20007e56:	d033      	beq.n	20007ec0 <QSPI_Config+0x12c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
20007e58:	684b      	ldr	r3, [r1, #4]
20007e5a:	61b3      	str	r3, [r6, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
20007e5c:	b002      	add	sp, #8
20007e5e:	bcf0      	pop	{r4, r5, r6, r7}
20007e60:	4770      	bx	lr
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
20007e62:	69cd      	ldr	r5, [r1, #28]
20007e64:	2d00      	cmp	r5, #0
20007e66:	d06c      	beq.n	20007f42 <QSPI_Config+0x1ae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007e68:	4323      	orrs	r3, r4
20007e6a:	6806      	ldr	r6, [r0, #0]
20007e6c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
20007e6e:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007e72:	ea43 0002 	orr.w	r0, r3, r2
20007e76:	6b0f      	ldr	r7, [r1, #48]	; 0x30
20007e78:	6b4b      	ldr	r3, [r1, #52]	; 0x34
20007e7a:	ea40 0005 	orr.w	r0, r0, r5
20007e7e:	68cd      	ldr	r5, [r1, #12]
20007e80:	ea40 0004 	orr.w	r0, r0, r4
20007e84:	680c      	ldr	r4, [r1, #0]
20007e86:	ea40 0007 	orr.w	r0, r0, r7
20007e8a:	ea40 0003 	orr.w	r0, r0, r3
20007e8e:	694b      	ldr	r3, [r1, #20]
20007e90:	ea40 0005 	orr.w	r0, r0, r5
20007e94:	ea40 0004 	orr.w	r0, r0, r4
20007e98:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
20007e9c:	6170      	str	r0, [r6, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
20007e9e:	d1db      	bne.n	20007e58 <QSPI_Config+0xc4>
20007ea0:	e00e      	b.n	20007ec0 <QSPI_Config+0x12c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
20007ea2:	69cb      	ldr	r3, [r1, #28]
20007ea4:	b97b      	cbnz	r3, 20007ec6 <QSPI_Config+0x132>
        if (cmd->DataMode != QSPI_DATA_NONE)
20007ea6:	b15c      	cbz	r4, 20007ec0 <QSPI_Config+0x12c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007ea8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
20007eaa:	6800      	ldr	r0, [r0, #0]
20007eac:	4323      	orrs	r3, r4
20007eae:	e9d1 540c 	ldrd	r5, r4, [r1, #48]	; 0x30
20007eb2:	4313      	orrs	r3, r2
20007eb4:	694a      	ldr	r2, [r1, #20]
20007eb6:	432b      	orrs	r3, r5
20007eb8:	4323      	orrs	r3, r4
20007eba:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
20007ebe:	6143      	str	r3, [r0, #20]
}
20007ec0:	b002      	add	sp, #8
20007ec2:	bcf0      	pop	{r4, r5, r6, r7}
20007ec4:	4770      	bx	lr
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007ec6:	4323      	orrs	r3, r4
20007ec8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
20007eca:	6b0d      	ldr	r5, [r1, #48]	; 0x30
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
20007ecc:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007ed0:	ea43 0302 	orr.w	r3, r3, r2
20007ed4:	6800      	ldr	r0, [r0, #0]
20007ed6:	ea43 0304 	orr.w	r3, r3, r4
20007eda:	6b4c      	ldr	r4, [r1, #52]	; 0x34
20007edc:	ea43 0305 	orr.w	r3, r3, r5
20007ee0:	68cd      	ldr	r5, [r1, #12]
20007ee2:	ea43 0304 	orr.w	r3, r3, r4
20007ee6:	694c      	ldr	r4, [r1, #20]
20007ee8:	ea43 0305 	orr.w	r3, r3, r5
20007eec:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
20007ef0:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
20007ef2:	d0e5      	beq.n	20007ec0 <QSPI_Config+0x12c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
20007ef4:	684b      	ldr	r3, [r1, #4]
20007ef6:	6183      	str	r3, [r0, #24]
20007ef8:	e7e2      	b.n	20007ec0 <QSPI_Config+0x12c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007efa:	e9d1 050b 	ldrd	r0, r5, [r1, #44]	; 0x2c
20007efe:	4313      	orrs	r3, r2
20007f00:	6b4c      	ldr	r4, [r1, #52]	; 0x34
20007f02:	4303      	orrs	r3, r0
20007f04:	432b      	orrs	r3, r5
20007f06:	e9d1 0204 	ldrd	r0, r2, [r1, #16]
20007f0a:	4323      	orrs	r3, r4
20007f0c:	4303      	orrs	r3, r0
20007f0e:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
20007f12:	6173      	str	r3, [r6, #20]
}
20007f14:	b002      	add	sp, #8
20007f16:	bcf0      	pop	{r4, r5, r6, r7}
20007f18:	4770      	bx	lr
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007f1a:	4313      	orrs	r3, r2
20007f1c:	6b4f      	ldr	r7, [r1, #52]	; 0x34
20007f1e:	690c      	ldr	r4, [r1, #16]
20007f20:	4333      	orrs	r3, r6
20007f22:	694a      	ldr	r2, [r1, #20]
20007f24:	e9d1 0c0b 	ldrd	r0, ip, [r1, #44]	; 0x2c
20007f28:	4303      	orrs	r3, r0
20007f2a:	6808      	ldr	r0, [r1, #0]
20007f2c:	ea43 030c 	orr.w	r3, r3, ip
20007f30:	433b      	orrs	r3, r7
20007f32:	4323      	orrs	r3, r4
20007f34:	4303      	orrs	r3, r0
20007f36:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
20007f3a:	616b      	str	r3, [r5, #20]
}
20007f3c:	b002      	add	sp, #8
20007f3e:	bcf0      	pop	{r4, r5, r6, r7}
20007f40:	4770      	bx	lr
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
20007f42:	431c      	orrs	r4, r3
20007f44:	6ace      	ldr	r6, [r1, #44]	; 0x2c
20007f46:	6800      	ldr	r0, [r0, #0]
20007f48:	ea44 0302 	orr.w	r3, r4, r2
20007f4c:	680c      	ldr	r4, [r1, #0]
20007f4e:	694a      	ldr	r2, [r1, #20]
20007f50:	4333      	orrs	r3, r6
20007f52:	e9d1 750c 	ldrd	r7, r5, [r1, #48]	; 0x30
20007f56:	433b      	orrs	r3, r7
20007f58:	432b      	orrs	r3, r5
20007f5a:	4323      	orrs	r3, r4
20007f5c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
20007f60:	6143      	str	r3, [r0, #20]
}
20007f62:	b002      	add	sp, #8
20007f64:	bcf0      	pop	{r4, r5, r6, r7}
20007f66:	4770      	bx	lr
}
20007f68:	4770      	bx	lr
20007f6a:	bf00      	nop

20007f6c <HAL_QSPI_Init>:
{
20007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20007f6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
20007f70:	f7f9 fb9a 	bl	200016a8 <HAL_GetTick>
  if(hqspi == NULL)
20007f74:	2c00      	cmp	r4, #0
20007f76:	d04e      	beq.n	20008016 <HAL_QSPI_Init+0xaa>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
20007f78:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
20007f7c:	4606      	mov	r6, r0
20007f7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20007f82:	2b00      	cmp	r3, #0
20007f84:	d03d      	beq.n	20008002 <HAL_QSPI_Init+0x96>
20007f86:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
20007f88:	6823      	ldr	r3, [r4, #0]
20007f8a:	68a1      	ldr	r1, [r4, #8]
20007f8c:	681a      	ldr	r2, [r3, #0]
20007f8e:	3901      	subs	r1, #1
20007f90:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
20007f94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
20007f98:	601a      	str	r2, [r3, #0]
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
20007f9a:	e001      	b.n	20007fa0 <HAL_QSPI_Init+0x34>
    if (Timeout != HAL_MAX_DELAY)
20007f9c:	1c7a      	adds	r2, r7, #1
20007f9e:	d128      	bne.n	20007ff2 <HAL_QSPI_Init+0x86>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
20007fa0:	689d      	ldr	r5, [r3, #8]
20007fa2:	f015 0520 	ands.w	r5, r5, #32
20007fa6:	d1f9      	bne.n	20007f9c <HAL_QSPI_Init+0x30>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
20007fa8:	e9d4 1607 	ldrd	r1, r6, [r4, #28]
20007fac:	68e2      	ldr	r2, [r4, #12]
    hqspi->State = HAL_QSPI_STATE_READY;
20007fae:	4628      	mov	r0, r5
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
20007fb0:	681f      	ldr	r7, [r3, #0]
20007fb2:	430a      	orrs	r2, r1
20007fb4:	6861      	ldr	r1, [r4, #4]
20007fb6:	4332      	orrs	r2, r6
20007fb8:	4e1c      	ldr	r6, [pc, #112]	; (2000802c <HAL_QSPI_Init+0xc0>)
20007fba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
20007fbe:	403e      	ands	r6, r7
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
20007fc0:	6961      	ldr	r1, [r4, #20]
20007fc2:	69a7      	ldr	r7, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
20007fc4:	4332      	orrs	r2, r6
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
20007fc6:	4e1a      	ldr	r6, [pc, #104]	; (20008030 <HAL_QSPI_Init+0xc4>)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
20007fc8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
20007fca:	ea41 0207 	orr.w	r2, r1, r7
20007fce:	685f      	ldr	r7, [r3, #4]
20007fd0:	6921      	ldr	r1, [r4, #16]
20007fd2:	403e      	ands	r6, r7
20007fd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hqspi->State = HAL_QSPI_STATE_READY;
20007fd8:	2101      	movs	r1, #1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
20007fda:	4332      	orrs	r2, r6
20007fdc:	605a      	str	r2, [r3, #4]
    __HAL_QSPI_ENABLE(hqspi);
20007fde:	681a      	ldr	r2, [r3, #0]
20007fe0:	430a      	orrs	r2, r1
20007fe2:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20007fe4:	6465      	str	r5, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
20007fe6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
20007fea:	2300      	movs	r3, #0
20007fec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
20007ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20007ff2:	f7f9 fb59 	bl	200016a8 <HAL_GetTick>
20007ff6:	1b80      	subs	r0, r0, r6
20007ff8:	42b8      	cmp	r0, r7
20007ffa:	d80e      	bhi.n	2000801a <HAL_QSPI_Init+0xae>
20007ffc:	b16f      	cbz	r7, 2000801a <HAL_QSPI_Init+0xae>
20007ffe:	6823      	ldr	r3, [r4, #0]
20008000:	e7ce      	b.n	20007fa0 <HAL_QSPI_Init+0x34>
    HAL_QSPI_MspInit(hqspi);
20008002:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
20008004:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
20008008:	f7f8 ffc2 	bl	20000f90 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
2000800c:	f241 3388 	movw	r3, #5000	; 0x1388
}
20008010:	461f      	mov	r7, r3
  hqspi->Timeout = Timeout;
20008012:	64a3      	str	r3, [r4, #72]	; 0x48
}
20008014:	e7b8      	b.n	20007f88 <HAL_QSPI_Init+0x1c>
    return HAL_ERROR;
20008016:	2001      	movs	r0, #1
}
20008018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hqspi->State     = HAL_QSPI_STATE_ERROR;
2000801a:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
2000801c:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
2000801e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
20008022:	6c63      	ldr	r3, [r4, #68]	; 0x44
20008024:	4303      	orrs	r3, r0
20008026:	6463      	str	r3, [r4, #68]	; 0x44
  if(status == HAL_OK)
20008028:	e7df      	b.n	20007fea <HAL_QSPI_Init+0x7e>
2000802a:	bf00      	nop
2000802c:	00ffff2f 	.word	0x00ffff2f
20008030:	ffe0f8fe 	.word	0xffe0f8fe
20008034:	4770      	bx	lr
20008036:	bf00      	nop

20008038 <HAL_QSPI_DeInit>:
  if(hqspi == NULL)
20008038:	b180      	cbz	r0, 2000805c <HAL_QSPI_DeInit+0x24>
  __HAL_QSPI_DISABLE(hqspi);
2000803a:	6802      	ldr	r2, [r0, #0]
2000803c:	6813      	ldr	r3, [r2, #0]
2000803e:	f023 0301 	bic.w	r3, r3, #1
{
20008042:	b510      	push	{r4, lr}
  __HAL_QSPI_DISABLE(hqspi);
20008044:	6013      	str	r3, [r2, #0]
20008046:	4604      	mov	r4, r0
  HAL_QSPI_MspDeInit(hqspi);
20008048:	f7f9 f804 	bl	20001054 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000804c:	2300      	movs	r3, #0
2000804e:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
20008050:	4618      	mov	r0, r3
  hqspi->State = HAL_QSPI_STATE_RESET;
20008052:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
20008056:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
2000805a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
2000805c:	2001      	movs	r0, #1
}
2000805e:	4770      	bx	lr

20008060 <HAL_QSPI_Command>:
{
20008060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20008064:	4604      	mov	r4, r0
20008066:	460d      	mov	r5, r1
20008068:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
2000806a:	f7f9 fb1d 	bl	200016a8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
2000806e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
20008072:	2b01      	cmp	r3, #1
20008074:	d03b      	beq.n	200080ee <HAL_QSPI_Command+0x8e>
20008076:	2301      	movs	r3, #1
20008078:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
2000807c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
20008080:	2b01      	cmp	r3, #1
20008082:	b2de      	uxtb	r6, r3
20008084:	d006      	beq.n	20008094 <HAL_QSPI_Command+0x34>
    status = HAL_BUSY;
20008086:	2602      	movs	r6, #2
  __HAL_UNLOCK(hqspi);
20008088:	2300      	movs	r3, #0
}
2000808a:	4630      	mov	r0, r6
  __HAL_UNLOCK(hqspi);
2000808c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
20008090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20008094:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY;
20008096:	2302      	movs	r3, #2
20008098:	4607      	mov	r7, r0
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000809a:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
2000809c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
200080a0:	f1b8 3fff 	cmp.w	r8, #4294967295
200080a4:	6823      	ldr	r3, [r4, #0]
200080a6:	d10e      	bne.n	200080c6 <HAL_QSPI_Command+0x66>
200080a8:	689a      	ldr	r2, [r3, #8]
200080aa:	f012 0220 	ands.w	r2, r2, #32
200080ae:	d1fb      	bne.n	200080a8 <HAL_QSPI_Command+0x48>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
200080b0:	4629      	mov	r1, r5
200080b2:	4620      	mov	r0, r4
200080b4:	f7ff fe6e 	bl	20007d94 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
200080b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
200080ba:	b1e3      	cbz	r3, 200080f6 <HAL_QSPI_Command+0x96>
        hqspi->State = HAL_QSPI_STATE_READY;
200080bc:	2301      	movs	r3, #1
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
200080be:	2600      	movs	r6, #0
        hqspi->State = HAL_QSPI_STATE_READY;
200080c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
200080c4:	e7e0      	b.n	20008088 <HAL_QSPI_Command+0x28>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
200080c6:	689a      	ldr	r2, [r3, #8]
200080c8:	f012 0220 	ands.w	r2, r2, #32
200080cc:	d01e      	beq.n	2000810c <HAL_QSPI_Command+0xac>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200080ce:	f7f9 faeb 	bl	200016a8 <HAL_GetTick>
200080d2:	1bc0      	subs	r0, r0, r7
200080d4:	4580      	cmp	r8, r0
200080d6:	d302      	bcc.n	200080de <HAL_QSPI_Command+0x7e>
200080d8:	f1b8 0f00 	cmp.w	r8, #0
200080dc:	d1e0      	bne.n	200080a0 <HAL_QSPI_Command+0x40>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
200080de:	2304      	movs	r3, #4
200080e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
200080e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
200080e6:	f043 0301 	orr.w	r3, r3, #1
200080ea:	6463      	str	r3, [r4, #68]	; 0x44
        if (status == HAL_OK)
200080ec:	e7cc      	b.n	20008088 <HAL_QSPI_Command+0x28>
  __HAL_LOCK(hqspi);
200080ee:	2602      	movs	r6, #2
}
200080f0:	4630      	mov	r0, r6
200080f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
200080f6:	6822      	ldr	r2, [r4, #0]
200080f8:	6893      	ldr	r3, [r2, #8]
200080fa:	079b      	lsls	r3, r3, #30
200080fc:	d5fc      	bpl.n	200080f8 <HAL_QSPI_Command+0x98>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
200080fe:	2102      	movs	r1, #2
          hqspi->State = HAL_QSPI_STATE_READY;
20008100:	2301      	movs	r3, #1
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
20008102:	2600      	movs	r6, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
20008104:	60d1      	str	r1, [r2, #12]
          hqspi->State = HAL_QSPI_STATE_READY;
20008106:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
2000810a:	e7bd      	b.n	20008088 <HAL_QSPI_Command+0x28>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2000810c:	4629      	mov	r1, r5
2000810e:	4620      	mov	r0, r4
20008110:	f7ff fe40 	bl	20007d94 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
20008114:	6a6b      	ldr	r3, [r5, #36]	; 0x24
20008116:	b143      	cbz	r3, 2000812a <HAL_QSPI_Command+0xca>
20008118:	e7d0      	b.n	200080bc <HAL_QSPI_Command+0x5c>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000811a:	f7f9 fac5 	bl	200016a8 <HAL_GetTick>
2000811e:	1bc0      	subs	r0, r0, r7
20008120:	4580      	cmp	r8, r0
20008122:	d3dc      	bcc.n	200080de <HAL_QSPI_Command+0x7e>
20008124:	f1b8 0f00 	cmp.w	r8, #0
20008128:	d0d9      	beq.n	200080de <HAL_QSPI_Command+0x7e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
2000812a:	6822      	ldr	r2, [r4, #0]
2000812c:	6893      	ldr	r3, [r2, #8]
2000812e:	0799      	lsls	r1, r3, #30
20008130:	d5f3      	bpl.n	2000811a <HAL_QSPI_Command+0xba>
20008132:	e7e4      	b.n	200080fe <HAL_QSPI_Command+0x9e>

20008134 <HAL_QSPI_Command_IT>:
{
20008134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20008138:	4604      	mov	r4, r0
2000813a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
2000813c:	f7f9 fab4 	bl	200016a8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
20008140:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
20008144:	2b01      	cmp	r3, #1
20008146:	d04a      	beq.n	200081de <HAL_QSPI_Command_IT+0xaa>
20008148:	2301      	movs	r3, #1
2000814a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
2000814e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
20008152:	2b01      	cmp	r3, #1
20008154:	b2de      	uxtb	r6, r3
20008156:	d006      	beq.n	20008166 <HAL_QSPI_Command_IT+0x32>
    __HAL_UNLOCK(hqspi);
20008158:	2300      	movs	r3, #0
    status = HAL_BUSY;
2000815a:	2602      	movs	r6, #2
    __HAL_UNLOCK(hqspi);
2000815c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
20008160:	4630      	mov	r0, r6
20008162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20008166:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY;
20008168:	2302      	movs	r3, #2
2000816a:	4605      	mov	r5, r0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2000816c:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20008170:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
20008172:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
20008176:	f1b8 3fff 	cmp.w	r8, #4294967295
2000817a:	6822      	ldr	r2, [r4, #0]
2000817c:	d114      	bne.n	200081a8 <HAL_QSPI_Command_IT+0x74>
2000817e:	6893      	ldr	r3, [r2, #8]
20008180:	0699      	lsls	r1, r3, #26
20008182:	d4fc      	bmi.n	2000817e <HAL_QSPI_Command_IT+0x4a>
      if (cmd->DataMode == QSPI_DATA_NONE)
20008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20008186:	b33b      	cbz	r3, 200081d8 <HAL_QSPI_Command_IT+0xa4>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
20008188:	2200      	movs	r2, #0
2000818a:	4639      	mov	r1, r7
2000818c:	4620      	mov	r0, r4
2000818e:	f7ff fe01 	bl	20007d94 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
20008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20008194:	bb3b      	cbnz	r3, 200081e6 <HAL_QSPI_Command_IT+0xb2>
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
20008196:	6822      	ldr	r2, [r4, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
20008198:	461e      	mov	r6, r3
        __HAL_UNLOCK(hqspi);
2000819a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
2000819e:	6813      	ldr	r3, [r2, #0]
200081a0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
200081a4:	6013      	str	r3, [r2, #0]
200081a6:	e7db      	b.n	20008160 <HAL_QSPI_Command_IT+0x2c>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
200081a8:	6893      	ldr	r3, [r2, #8]
200081aa:	069b      	lsls	r3, r3, #26
200081ac:	d5ea      	bpl.n	20008184 <HAL_QSPI_Command_IT+0x50>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200081ae:	f7f9 fa7b 	bl	200016a8 <HAL_GetTick>
200081b2:	1b40      	subs	r0, r0, r5
200081b4:	4580      	cmp	r8, r0
200081b6:	d302      	bcc.n	200081be <HAL_QSPI_Command_IT+0x8a>
200081b8:	f1b8 0f00 	cmp.w	r8, #0
200081bc:	d1db      	bne.n	20008176 <HAL_QSPI_Command_IT+0x42>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
200081be:	2304      	movs	r3, #4
      __HAL_UNLOCK(hqspi);
200081c0:	2200      	movs	r2, #0
}
200081c2:	4630      	mov	r0, r6
        hqspi->State     = HAL_QSPI_STATE_ERROR;
200081c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
200081c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
200081ca:	f043 0301 	orr.w	r3, r3, #1
200081ce:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hqspi);
200081d0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
200081d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
200081d8:	2303      	movs	r3, #3
200081da:	60d3      	str	r3, [r2, #12]
200081dc:	e7d4      	b.n	20008188 <HAL_QSPI_Command_IT+0x54>
  __HAL_LOCK(hqspi);
200081de:	2602      	movs	r6, #2
}
200081e0:	4630      	mov	r0, r6
200081e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hqspi);
200081e6:	2300      	movs	r3, #0
        hqspi->State = HAL_QSPI_STATE_READY;
200081e8:	2201      	movs	r2, #1
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
200081ea:	461e      	mov	r6, r3
        hqspi->State = HAL_QSPI_STATE_READY;
200081ec:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hqspi);
200081f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
200081f4:	e7b4      	b.n	20008160 <HAL_QSPI_Command_IT+0x2c>
200081f6:	bf00      	nop

200081f8 <HAL_QSPI_Transmit>:
{
200081f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
200081fc:	4604      	mov	r4, r0
200081fe:	4689      	mov	r9, r1
20008200:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
20008202:	f7f9 fa51 	bl	200016a8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
20008206:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
2000820a:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hqspi);
2000820c:	2b01      	cmp	r3, #1
2000820e:	d067      	beq.n	200082e0 <HAL_QSPI_Transmit+0xe8>
20008210:	2301      	movs	r3, #1
20008212:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
20008216:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
2000821a:	2b01      	cmp	r3, #1
2000821c:	fa5f f883 	uxtb.w	r8, r3
20008220:	d007      	beq.n	20008232 <HAL_QSPI_Transmit+0x3a>
    status = HAL_BUSY;
20008222:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
20008226:	2300      	movs	r3, #0
}
20008228:	4640      	mov	r0, r8
  __HAL_UNLOCK(hqspi);
2000822a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
2000822e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20008232:	2300      	movs	r3, #0
20008234:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
20008236:	f1b9 0f00 	cmp.w	r9, #0
2000823a:	d056      	beq.n	200082ea <HAL_QSPI_Transmit+0xf2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
2000823c:	2312      	movs	r3, #18
2000823e:	4606      	mov	r6, r0
20008240:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
20008244:	693b      	ldr	r3, [r7, #16]
20008246:	3301      	adds	r3, #1
20008248:	62e3      	str	r3, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
2000824a:	693b      	ldr	r3, [r7, #16]
      hqspi->pTxBuffPtr = pData;
2000824c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
20008250:	3301      	adds	r3, #1
20008252:	62a3      	str	r3, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
20008254:	697b      	ldr	r3, [r7, #20]
20008256:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
2000825a:	617b      	str	r3, [r7, #20]
      while(hqspi->TxXferCount > 0U)
2000825c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2000825e:	2b00      	cmp	r3, #0
20008260:	d031      	beq.n	200082c6 <HAL_QSPI_Transmit+0xce>
20008262:	1c69      	adds	r1, r5, #1
20008264:	463b      	mov	r3, r7
20008266:	d111      	bne.n	2000828c <HAL_QSPI_Transmit+0x94>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
20008268:	689a      	ldr	r2, [r3, #8]
2000826a:	0752      	lsls	r2, r2, #29
2000826c:	d5fc      	bpl.n	20008268 <HAL_QSPI_Transmit+0x70>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
2000826e:	6a63      	ldr	r3, [r4, #36]	; 0x24
20008270:	781b      	ldrb	r3, [r3, #0]
20008272:	f887 3020 	strb.w	r3, [r7, #32]
        hqspi->TxXferCount--;
20008276:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hqspi->pTxBuffPtr++;
20008278:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
2000827a:	3a01      	subs	r2, #1
        hqspi->pTxBuffPtr++;
2000827c:	3301      	adds	r3, #1
        hqspi->TxXferCount--;
2000827e:	62e2      	str	r2, [r4, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
20008280:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hqspi->pTxBuffPtr++;
20008282:	6263      	str	r3, [r4, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
20008284:	b1f2      	cbz	r2, 200082c4 <HAL_QSPI_Transmit+0xcc>
20008286:	1c69      	adds	r1, r5, #1
20008288:	6823      	ldr	r3, [r4, #0]
2000828a:	d0ed      	beq.n	20008268 <HAL_QSPI_Transmit+0x70>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
2000828c:	689b      	ldr	r3, [r3, #8]
2000828e:	0758      	lsls	r0, r3, #29
20008290:	d4ed      	bmi.n	2000826e <HAL_QSPI_Transmit+0x76>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20008292:	f7f9 fa09 	bl	200016a8 <HAL_GetTick>
20008296:	1b80      	subs	r0, r0, r6
20008298:	4285      	cmp	r5, r0
2000829a:	d301      	bcc.n	200082a0 <HAL_QSPI_Transmit+0xa8>
2000829c:	2d00      	cmp	r5, #0
2000829e:	d1f2      	bne.n	20008286 <HAL_QSPI_Transmit+0x8e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
200082a0:	2304      	movs	r3, #4
200082a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
200082a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
200082a8:	f043 0301 	orr.w	r3, r3, #1
200082ac:	6463      	str	r3, [r4, #68]	; 0x44
        if (status == HAL_OK)
200082ae:	e013      	b.n	200082d8 <HAL_QSPI_Transmit+0xe0>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
200082b0:	68bb      	ldr	r3, [r7, #8]
200082b2:	079b      	lsls	r3, r3, #30
200082b4:	d40c      	bmi.n	200082d0 <HAL_QSPI_Transmit+0xd8>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200082b6:	f7f9 f9f7 	bl	200016a8 <HAL_GetTick>
200082ba:	1b80      	subs	r0, r0, r6
200082bc:	4285      	cmp	r5, r0
200082be:	d3ef      	bcc.n	200082a0 <HAL_QSPI_Transmit+0xa8>
200082c0:	2d00      	cmp	r5, #0
200082c2:	d0ed      	beq.n	200082a0 <HAL_QSPI_Transmit+0xa8>
200082c4:	6827      	ldr	r7, [r4, #0]
200082c6:	1c69      	adds	r1, r5, #1
200082c8:	d1f2      	bne.n	200082b0 <HAL_QSPI_Transmit+0xb8>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
200082ca:	68bb      	ldr	r3, [r7, #8]
200082cc:	079a      	lsls	r2, r3, #30
200082ce:	d5fc      	bpl.n	200082ca <HAL_QSPI_Transmit+0xd2>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
200082d0:	2302      	movs	r3, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
200082d2:	f04f 0800 	mov.w	r8, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
200082d6:	60fb      	str	r3, [r7, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
200082d8:	2301      	movs	r3, #1
200082da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
200082de:	e7a2      	b.n	20008226 <HAL_QSPI_Transmit+0x2e>
  __HAL_LOCK(hqspi);
200082e0:	f04f 0802 	mov.w	r8, #2
}
200082e4:	4640      	mov	r0, r8
200082e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
200082ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
200082ec:	f043 0308 	orr.w	r3, r3, #8
200082f0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
200082f2:	e798      	b.n	20008226 <HAL_QSPI_Transmit+0x2e>

200082f4 <HAL_QSPI_Receive>:
{
200082f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
200082f8:	4604      	mov	r4, r0
200082fa:	4615      	mov	r5, r2
200082fc:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
200082fe:	f7f9 f9d3 	bl	200016a8 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
20008302:	6827      	ldr	r7, [r4, #0]
20008304:	69ba      	ldr	r2, [r7, #24]
  __HAL_LOCK(hqspi);
20008306:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
2000830a:	2b01      	cmp	r3, #1
2000830c:	d06c      	beq.n	200083e8 <HAL_QSPI_Receive+0xf4>
2000830e:	2301      	movs	r3, #1
20008310:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
20008314:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
20008318:	2b01      	cmp	r3, #1
2000831a:	fa5f f883 	uxtb.w	r8, r3
2000831e:	d007      	beq.n	20008330 <HAL_QSPI_Receive+0x3c>
    status = HAL_BUSY;
20008320:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
20008324:	2300      	movs	r3, #0
}
20008326:	4640      	mov	r0, r8
  __HAL_UNLOCK(hqspi);
20008328:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
2000832c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20008330:	2300      	movs	r3, #0
20008332:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
20008334:	f1b9 0f00 	cmp.w	r9, #0
20008338:	d05b      	beq.n	200083f2 <HAL_QSPI_Receive+0xfe>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
2000833a:	2322      	movs	r3, #34	; 0x22
2000833c:	4606      	mov	r6, r0
2000833e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
20008342:	693b      	ldr	r3, [r7, #16]
20008344:	3301      	adds	r3, #1
20008346:	63a3      	str	r3, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
20008348:	693b      	ldr	r3, [r7, #16]
      hqspi->pRxBuffPtr = pData;
2000834a:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
2000834e:	3301      	adds	r3, #1
20008350:	6363      	str	r3, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
20008352:	697b      	ldr	r3, [r7, #20]
20008354:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
20008358:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
2000835c:	617b      	str	r3, [r7, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
2000835e:	61ba      	str	r2, [r7, #24]
      while(hqspi->RxXferCount > 0U)
20008360:	6ba3      	ldr	r3, [r4, #56]	; 0x38
20008362:	2b00      	cmp	r3, #0
20008364:	d033      	beq.n	200083ce <HAL_QSPI_Receive+0xda>
20008366:	1c68      	adds	r0, r5, #1
20008368:	463b      	mov	r3, r7
2000836a:	d112      	bne.n	20008392 <HAL_QSPI_Receive+0x9e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
2000836c:	689a      	ldr	r2, [r3, #8]
2000836e:	f012 0f06 	tst.w	r2, #6
20008372:	d0fb      	beq.n	2000836c <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
20008374:	f897 2020 	ldrb.w	r2, [r7, #32]
20008378:	6b23      	ldr	r3, [r4, #48]	; 0x30
2000837a:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
2000837c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hqspi->pRxBuffPtr++;
2000837e:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
20008380:	3a01      	subs	r2, #1
        hqspi->pRxBuffPtr++;
20008382:	3301      	adds	r3, #1
        hqspi->RxXferCount--;
20008384:	63a2      	str	r2, [r4, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
20008386:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hqspi->pRxBuffPtr++;
20008388:	6323      	str	r3, [r4, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
2000838a:	b1fa      	cbz	r2, 200083cc <HAL_QSPI_Receive+0xd8>
2000838c:	1c68      	adds	r0, r5, #1
2000838e:	6823      	ldr	r3, [r4, #0]
20008390:	d0ec      	beq.n	2000836c <HAL_QSPI_Receive+0x78>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
20008392:	689b      	ldr	r3, [r3, #8]
20008394:	f013 0f06 	tst.w	r3, #6
20008398:	d1ec      	bne.n	20008374 <HAL_QSPI_Receive+0x80>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000839a:	f7f9 f985 	bl	200016a8 <HAL_GetTick>
2000839e:	1b80      	subs	r0, r0, r6
200083a0:	4285      	cmp	r5, r0
200083a2:	d301      	bcc.n	200083a8 <HAL_QSPI_Receive+0xb4>
200083a4:	2d00      	cmp	r5, #0
200083a6:	d1f1      	bne.n	2000838c <HAL_QSPI_Receive+0x98>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
200083a8:	2304      	movs	r3, #4
200083aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
200083ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
200083b0:	f043 0301 	orr.w	r3, r3, #1
200083b4:	6463      	str	r3, [r4, #68]	; 0x44
        if  (status == HAL_OK)
200083b6:	e013      	b.n	200083e0 <HAL_QSPI_Receive+0xec>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
200083b8:	68bb      	ldr	r3, [r7, #8]
200083ba:	079b      	lsls	r3, r3, #30
200083bc:	d40c      	bmi.n	200083d8 <HAL_QSPI_Receive+0xe4>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200083be:	f7f9 f973 	bl	200016a8 <HAL_GetTick>
200083c2:	1b80      	subs	r0, r0, r6
200083c4:	4285      	cmp	r5, r0
200083c6:	d3ef      	bcc.n	200083a8 <HAL_QSPI_Receive+0xb4>
200083c8:	2d00      	cmp	r5, #0
200083ca:	d0ed      	beq.n	200083a8 <HAL_QSPI_Receive+0xb4>
200083cc:	6827      	ldr	r7, [r4, #0]
200083ce:	1c69      	adds	r1, r5, #1
200083d0:	d1f2      	bne.n	200083b8 <HAL_QSPI_Receive+0xc4>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
200083d2:	68bb      	ldr	r3, [r7, #8]
200083d4:	079a      	lsls	r2, r3, #30
200083d6:	d5fc      	bpl.n	200083d2 <HAL_QSPI_Receive+0xde>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
200083d8:	2302      	movs	r3, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
200083da:	f04f 0800 	mov.w	r8, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
200083de:	60fb      	str	r3, [r7, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
200083e0:	2301      	movs	r3, #1
200083e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
200083e6:	e79d      	b.n	20008324 <HAL_QSPI_Receive+0x30>
  __HAL_LOCK(hqspi);
200083e8:	f04f 0802 	mov.w	r8, #2
}
200083ec:	4640      	mov	r0, r8
200083ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
200083f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
200083f4:	f043 0308 	orr.w	r3, r3, #8
200083f8:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
200083fa:	e793      	b.n	20008324 <HAL_QSPI_Receive+0x30>

200083fc <HAL_QSPI_Transmit_IT>:
  __HAL_LOCK(hqspi);
200083fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
20008400:	2b01      	cmp	r3, #1
20008402:	d035      	beq.n	20008470 <HAL_QSPI_Transmit_IT+0x74>
20008404:	2301      	movs	r3, #1
20008406:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
2000840a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2000840e:	2b01      	cmp	r3, #1
20008410:	b2da      	uxtb	r2, r3
20008412:	d005      	beq.n	20008420 <HAL_QSPI_Transmit_IT+0x24>
    __HAL_UNLOCK(hqspi);
20008414:	2300      	movs	r3, #0
    status = HAL_BUSY;
20008416:	2202      	movs	r2, #2
    __HAL_UNLOCK(hqspi);
20008418:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
2000841c:	4610      	mov	r0, r2
2000841e:	4770      	bx	lr
{
20008420:	b470      	push	{r4, r5, r6}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20008422:	2400      	movs	r4, #0
20008424:	6444      	str	r4, [r0, #68]	; 0x44
    if(pData != NULL )
20008426:	b1d1      	cbz	r1, 2000845e <HAL_QSPI_Transmit_IT+0x62>
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
20008428:	6803      	ldr	r3, [r0, #0]
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
2000842a:	2212      	movs	r2, #18
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
2000842c:	2603      	movs	r6, #3
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
2000842e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  HAL_StatusTypeDef status = HAL_OK;
20008432:	4622      	mov	r2, r4
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
20008434:	691d      	ldr	r5, [r3, #16]
20008436:	3501      	adds	r5, #1
20008438:	62c5      	str	r5, [r0, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
2000843a:	691d      	ldr	r5, [r3, #16]
      hqspi->pTxBuffPtr = pData;
2000843c:	6241      	str	r1, [r0, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
2000843e:	3501      	adds	r5, #1
20008440:	6285      	str	r5, [r0, #40]	; 0x28
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
20008442:	60de      	str	r6, [r3, #12]
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
20008444:	6959      	ldr	r1, [r3, #20]
20008446:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
2000844a:	6159      	str	r1, [r3, #20]
      __HAL_UNLOCK(hqspi);
2000844c:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
}
20008450:	4610      	mov	r0, r2
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
20008452:	6819      	ldr	r1, [r3, #0]
20008454:	f441 21e0 	orr.w	r1, r1, #458752	; 0x70000
}
20008458:	bc70      	pop	{r4, r5, r6}
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
2000845a:	6019      	str	r1, [r3, #0]
}
2000845c:	4770      	bx	lr
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000845e:	6c43      	ldr	r3, [r0, #68]	; 0x44
20008460:	f043 0308 	orr.w	r3, r3, #8
20008464:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hqspi);
20008466:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
}
2000846a:	4610      	mov	r0, r2
2000846c:	bc70      	pop	{r4, r5, r6}
2000846e:	4770      	bx	lr
  __HAL_LOCK(hqspi);
20008470:	2202      	movs	r2, #2
}
20008472:	4610      	mov	r0, r2
20008474:	4770      	bx	lr
20008476:	bf00      	nop

20008478 <HAL_QSPI_Receive_IT>:
{
20008478:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
2000847a:	6804      	ldr	r4, [r0, #0]
2000847c:	69a6      	ldr	r6, [r4, #24]
  __HAL_LOCK(hqspi);
2000847e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
20008482:	2b01      	cmp	r3, #1
20008484:	d037      	beq.n	200084f6 <HAL_QSPI_Receive_IT+0x7e>
20008486:	2301      	movs	r3, #1
20008488:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
2000848c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
20008490:	2b01      	cmp	r3, #1
20008492:	b2da      	uxtb	r2, r3
20008494:	d006      	beq.n	200084a4 <HAL_QSPI_Receive_IT+0x2c>
    __HAL_UNLOCK(hqspi);
20008496:	2300      	movs	r3, #0
    status = HAL_BUSY;
20008498:	2202      	movs	r2, #2
    __HAL_UNLOCK(hqspi);
2000849a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
2000849e:	4610      	mov	r0, r2
200084a0:	bcf0      	pop	{r4, r5, r6, r7}
200084a2:	4770      	bx	lr
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
200084a4:	2500      	movs	r5, #0
200084a6:	6445      	str	r5, [r0, #68]	; 0x44
    if(pData != NULL )
200084a8:	b1e1      	cbz	r1, 200084e4 <HAL_QSPI_Receive_IT+0x6c>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
200084aa:	2322      	movs	r3, #34	; 0x22
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
200084ac:	2703      	movs	r7, #3
  HAL_StatusTypeDef status = HAL_OK;
200084ae:	462a      	mov	r2, r5
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
200084b0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
200084b4:	6923      	ldr	r3, [r4, #16]
200084b6:	3301      	adds	r3, #1
200084b8:	6383      	str	r3, [r0, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
200084ba:	6923      	ldr	r3, [r4, #16]
      hqspi->pRxBuffPtr = pData;
200084bc:	6301      	str	r1, [r0, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
200084be:	3301      	adds	r3, #1
200084c0:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
200084c2:	60e7      	str	r7, [r4, #12]
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
200084c4:	6963      	ldr	r3, [r4, #20]
200084c6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
200084ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
200084ce:	6163      	str	r3, [r4, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
200084d0:	61a6      	str	r6, [r4, #24]
      __HAL_UNLOCK(hqspi);
200084d2:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
}
200084d6:	4610      	mov	r0, r2
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
200084d8:	6823      	ldr	r3, [r4, #0]
200084da:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
200084de:	6023      	str	r3, [r4, #0]
}
200084e0:	bcf0      	pop	{r4, r5, r6, r7}
200084e2:	4770      	bx	lr
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
200084e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
200084e6:	f043 0308 	orr.w	r3, r3, #8
200084ea:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hqspi);
200084ec:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
}
200084f0:	4610      	mov	r0, r2
200084f2:	bcf0      	pop	{r4, r5, r6, r7}
200084f4:	4770      	bx	lr
  __HAL_LOCK(hqspi);
200084f6:	2202      	movs	r2, #2
}
200084f8:	bcf0      	pop	{r4, r5, r6, r7}
200084fa:	4610      	mov	r0, r2
200084fc:	4770      	bx	lr
200084fe:	bf00      	nop

20008500 <HAL_QSPI_Transmit_DMA>:
{
20008500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
20008504:	6805      	ldr	r5, [r0, #0]
20008506:	692a      	ldr	r2, [r5, #16]
  __HAL_LOCK(hqspi);
20008508:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
2000850c:	2b01      	cmp	r3, #1
2000850e:	d068      	beq.n	200085e2 <HAL_QSPI_Transmit_DMA+0xe2>
20008510:	2301      	movs	r3, #1
20008512:	4604      	mov	r4, r0
20008514:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
20008518:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2000851c:	2b01      	cmp	r3, #1
2000851e:	b2de      	uxtb	r6, r3
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20008520:	f04f 0300 	mov.w	r3, #0
  if(hqspi->State == HAL_QSPI_STATE_READY)
20008524:	d005      	beq.n	20008532 <HAL_QSPI_Transmit_DMA+0x32>
    status = HAL_BUSY;
20008526:	2602      	movs	r6, #2
    __HAL_UNLOCK(hqspi);
20008528:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
2000852c:	4630      	mov	r0, r6
2000852e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20008532:	6443      	str	r3, [r0, #68]	; 0x44
    if(pData != NULL )
20008534:	2900      	cmp	r1, #0
20008536:	d04b      	beq.n	200085d0 <HAL_QSPI_Transmit_DMA+0xd0>
      if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
20008538:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
2000853a:	3201      	adds	r2, #1
      if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
2000853c:	6943      	ldr	r3, [r0, #20]
2000853e:	2b00      	cmp	r3, #0
20008540:	d139      	bne.n	200085b6 <HAL_QSPI_Transmit_DMA+0xb6>
          hqspi->TxXferCount = (data_size >> 2U);
20008542:	62e2      	str	r2, [r4, #44]	; 0x2c
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
20008544:	2212      	movs	r2, #18
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
20008546:	2303      	movs	r3, #3
        hqspi->hdma->Init.Direction = DMA_MEMORY_TO_PERIPH;
20008548:	f04f 0e40 	mov.w	lr, #64	; 0x40
        hqspi->hdma->XferCpltCallback = QSPI_DMATxCplt;
2000854c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 2000862c <HAL_QSPI_Transmit_DMA+0x12c>
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
20008550:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        if (HAL_DMA_Start_IT(hqspi->hdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize) == HAL_OK)
20008554:	f105 0220 	add.w	r2, r5, #32
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
20008558:	60eb      	str	r3, [r5, #12]
        hqspi->hdma->XferAbortCallback = NULL;
2000855a:	2700      	movs	r7, #0
        hqspi->TxXferSize = hqspi->TxXferCount;
2000855c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
2000855e:	f8d0 c000 	ldr.w	ip, [r0]
        hqspi->TxXferSize = hqspi->TxXferCount;
20008562:	62a3      	str	r3, [r4, #40]	; 0x28
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
20008564:	696b      	ldr	r3, [r5, #20]
        hqspi->pTxBuffPtr = pData;
20008566:	6261      	str	r1, [r4, #36]	; 0x24
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
20008568:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
2000856c:	616b      	str	r3, [r5, #20]
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
2000856e:	f8dc 3000 	ldr.w	r3, [ip]
        hqspi->hdma->XferHalfCpltCallback = QSPI_DMATxHalfCplt;
20008572:	4d2c      	ldr	r5, [pc, #176]	; (20008624 <HAL_QSPI_Transmit_DMA+0x124>)
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
20008574:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
        hqspi->hdma->XferCpltCallback = QSPI_DMATxCplt;
20008578:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
        hqspi->hdma->XferHalfCpltCallback = QSPI_DMATxHalfCplt;
2000857c:	6405      	str	r5, [r0, #64]	; 0x40
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
2000857e:	ea43 030e 	orr.w	r3, r3, lr
        hqspi->hdma->XferErrorCallback = QSPI_DMAError;
20008582:	4d29      	ldr	r5, [pc, #164]	; (20008628 <HAL_QSPI_Transmit_DMA+0x128>)
        hqspi->hdma->XferAbortCallback = NULL;
20008584:	6507      	str	r7, [r0, #80]	; 0x50
        hqspi->hdma->Init.Direction = DMA_MEMORY_TO_PERIPH;
20008586:	f8c0 e008 	str.w	lr, [r0, #8]
        hqspi->hdma->XferErrorCallback = QSPI_DMAError;
2000858a:	64c5      	str	r5, [r0, #76]	; 0x4c
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
2000858c:	f8cc 3000 	str.w	r3, [ip]
        if (HAL_DMA_Start_IT(hqspi->hdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize) == HAL_OK)
20008590:	6aa3      	ldr	r3, [r4, #40]	; 0x28
20008592:	f7f9 fbd7 	bl	20001d44 <HAL_DMA_Start_IT>
20008596:	bb40      	cbnz	r0, 200085ea <HAL_QSPI_Transmit_DMA+0xea>
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
20008598:	6823      	ldr	r3, [r4, #0]
2000859a:	4606      	mov	r6, r0
          __HAL_UNLOCK(hqspi);
2000859c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
200085a0:	681a      	ldr	r2, [r3, #0]
}
200085a2:	4630      	mov	r0, r6
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
200085a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
200085a8:	601a      	str	r2, [r3, #0]
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
200085aa:	681a      	ldr	r2, [r3, #0]
200085ac:	f042 0204 	orr.w	r2, r2, #4
200085b0:	601a      	str	r2, [r3, #0]
}
200085b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_HALFWORD)
200085b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
200085ba:	d022      	beq.n	20008602 <HAL_QSPI_Transmit_DMA+0x102>
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_WORD)
200085bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
200085c0:	d1c0      	bne.n	20008544 <HAL_QSPI_Transmit_DMA+0x44>
        if (((data_size % 4U) != 0U) || ((hqspi->Init.FifoThreshold % 4U) != 0U))
200085c2:	0797      	lsls	r7, r2, #30
200085c4:	d125      	bne.n	20008612 <HAL_QSPI_Transmit_DMA+0x112>
200085c6:	68a3      	ldr	r3, [r4, #8]
200085c8:	079b      	lsls	r3, r3, #30
200085ca:	d122      	bne.n	20008612 <HAL_QSPI_Transmit_DMA+0x112>
          hqspi->TxXferCount = (data_size >> 2U);
200085cc:	0892      	lsrs	r2, r2, #2
200085ce:	e7b8      	b.n	20008542 <HAL_QSPI_Transmit_DMA+0x42>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
200085d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
200085d2:	f043 0308 	orr.w	r3, r3, #8
200085d6:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hqspi);
200085d8:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
}
200085dc:	4630      	mov	r0, r6
200085de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hqspi);
200085e2:	2602      	movs	r6, #2
}
200085e4:	4630      	mov	r0, r6
200085e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
200085ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
200085ec:	2201      	movs	r2, #1
}
200085ee:	4630      	mov	r0, r6
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
200085f0:	f043 0304 	orr.w	r3, r3, #4
200085f4:	6463      	str	r3, [r4, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
200085f6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hqspi);
200085fa:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
}
200085fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((data_size % 2U) != 0U) || ((hqspi->Init.FifoThreshold % 2U) != 0U))
20008602:	07d7      	lsls	r7, r2, #31
20008604:	d405      	bmi.n	20008612 <HAL_QSPI_Transmit_DMA+0x112>
20008606:	68a3      	ldr	r3, [r4, #8]
20008608:	07db      	lsls	r3, r3, #31
2000860a:	d402      	bmi.n	20008612 <HAL_QSPI_Transmit_DMA+0x112>
          hqspi->TxXferCount = (data_size >> 1U);
2000860c:	0852      	lsrs	r2, r2, #1
2000860e:	62e2      	str	r2, [r4, #44]	; 0x2c
      if (status == HAL_OK)
20008610:	e798      	b.n	20008544 <HAL_QSPI_Transmit_DMA+0x44>
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
20008612:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hqspi);
20008614:	2200      	movs	r2, #0
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
20008616:	f043 0308 	orr.w	r3, r3, #8
2000861a:	6463      	str	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hqspi);
2000861c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (status == HAL_OK)
20008620:	e784      	b.n	2000852c <HAL_QSPI_Transmit_DMA+0x2c>
20008622:	bf00      	nop
20008624:	20008ac5 	.word	0x20008ac5
20008628:	20008a21 	.word	0x20008a21
2000862c:	20007d81 	.word	0x20007d81

20008630 <HAL_QSPI_Receive_DMA>:
{
20008630:	460a      	mov	r2, r1
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
20008632:	6801      	ldr	r1, [r0, #0]
{
20008634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
20008638:	698e      	ldr	r6, [r1, #24]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
2000863a:	690f      	ldr	r7, [r1, #16]
  __HAL_LOCK(hqspi);
2000863c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
20008640:	2b01      	cmp	r3, #1
20008642:	d06a      	beq.n	2000871a <HAL_QSPI_Receive_DMA+0xea>
20008644:	2301      	movs	r3, #1
20008646:	4604      	mov	r4, r0
20008648:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
2000864c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
20008650:	2b01      	cmp	r3, #1
20008652:	b2dd      	uxtb	r5, r3
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20008654:	f04f 0300 	mov.w	r3, #0
  if(hqspi->State == HAL_QSPI_STATE_READY)
20008658:	d005      	beq.n	20008666 <HAL_QSPI_Receive_DMA+0x36>
    status = HAL_BUSY;
2000865a:	2502      	movs	r5, #2
    __HAL_UNLOCK(hqspi);
2000865c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
20008660:	4628      	mov	r0, r5
20008662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20008666:	6443      	str	r3, [r0, #68]	; 0x44
    if(pData != NULL )
20008668:	2a00      	cmp	r2, #0
2000866a:	d04d      	beq.n	20008708 <HAL_QSPI_Receive_DMA+0xd8>
      if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
2000866c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
2000866e:	3701      	adds	r7, #1
      if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
20008670:	6943      	ldr	r3, [r0, #20]
20008672:	2b00      	cmp	r3, #0
20008674:	d13b      	bne.n	200086ee <HAL_QSPI_Receive_DMA+0xbe>
          hqspi->RxXferCount = (data_size >> 2U);
20008676:	63a7      	str	r7, [r4, #56]	; 0x38
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
20008678:	f04f 0c22 	mov.w	ip, #34	; 0x22
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
2000867c:	2303      	movs	r3, #3
        hqspi->hdma->XferCpltCallback = QSPI_DMARxCplt;
2000867e:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 2000875c <HAL_QSPI_Receive_DMA+0x12c>
        hqspi->hdma->XferAbortCallback = NULL;
20008682:	2700      	movs	r7, #0
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
20008684:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
        if (HAL_DMA_Start_IT(hqspi->hdma, (uint32_t)&hqspi->Instance->DR, (uint32_t)pData, hqspi->RxXferSize) == HAL_OK)
20008688:	3120      	adds	r1, #32
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
2000868a:	f841 3c14 	str.w	r3, [r1, #-20]
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
2000868e:	f8d0 c000 	ldr.w	ip, [r0]
        hqspi->RxXferSize = hqspi->RxXferCount;
20008692:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hqspi->hdma->XferHalfCpltCallback = QSPI_DMARxHalfCplt;
20008694:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 20008760 <HAL_QSPI_Receive_DMA+0x130>
        hqspi->RxXferSize = hqspi->RxXferCount;
20008698:	6363      	str	r3, [r4, #52]	; 0x34
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
2000869a:	f8dc 3000 	ldr.w	r3, [ip]
        hqspi->pRxBuffPtr = pData;
2000869e:	6322      	str	r2, [r4, #48]	; 0x30
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
200086a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
        hqspi->hdma->XferCpltCallback = QSPI_DMARxCplt;
200086a4:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
        hqspi->hdma->XferErrorCallback = QSPI_DMAError;
200086a8:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 20008764 <HAL_QSPI_Receive_DMA+0x134>
        hqspi->hdma->XferHalfCpltCallback = QSPI_DMARxHalfCplt;
200086ac:	f8c0 8040 	str.w	r8, [r0, #64]	; 0x40
        hqspi->hdma->Init.Direction = DMA_PERIPH_TO_MEMORY;
200086b0:	6087      	str	r7, [r0, #8]
        hqspi->hdma->XferAbortCallback = NULL;
200086b2:	e9c0 e713 	strd	lr, r7, [r0, #76]	; 0x4c
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
200086b6:	f8cc 3000 	str.w	r3, [ip]
        if (HAL_DMA_Start_IT(hqspi->hdma, (uint32_t)&hqspi->Instance->DR, (uint32_t)pData, hqspi->RxXferSize) == HAL_OK)
200086ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
200086bc:	f7f9 fb42 	bl	20001d44 <HAL_DMA_Start_IT>
200086c0:	bb78      	cbnz	r0, 20008722 <HAL_QSPI_Receive_DMA+0xf2>
          MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
200086c2:	6823      	ldr	r3, [r4, #0]
200086c4:	4605      	mov	r5, r0
200086c6:	695a      	ldr	r2, [r3, #20]
200086c8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
200086cc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
200086d0:	615a      	str	r2, [r3, #20]
          WRITE_REG(hqspi->Instance->AR, addr_reg);
200086d2:	619e      	str	r6, [r3, #24]
          __HAL_UNLOCK(hqspi);
200086d4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
200086d8:	4628      	mov	r0, r5
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
200086da:	681a      	ldr	r2, [r3, #0]
200086dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
200086e0:	601a      	str	r2, [r3, #0]
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
200086e2:	681a      	ldr	r2, [r3, #0]
200086e4:	f042 0204 	orr.w	r2, r2, #4
200086e8:	601a      	str	r2, [r3, #0]
}
200086ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_HALFWORD)
200086ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
200086f2:	d022      	beq.n	2000873a <HAL_QSPI_Receive_DMA+0x10a>
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_WORD)
200086f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
200086f8:	d1be      	bne.n	20008678 <HAL_QSPI_Receive_DMA+0x48>
        if (((data_size % 4U) != 0U) || ((hqspi->Init.FifoThreshold % 4U) != 0U))
200086fa:	07bb      	lsls	r3, r7, #30
200086fc:	d125      	bne.n	2000874a <HAL_QSPI_Receive_DMA+0x11a>
200086fe:	68a3      	ldr	r3, [r4, #8]
20008700:	079b      	lsls	r3, r3, #30
20008702:	d122      	bne.n	2000874a <HAL_QSPI_Receive_DMA+0x11a>
          hqspi->RxXferCount = (data_size >> 2U);
20008704:	08bf      	lsrs	r7, r7, #2
20008706:	e7b6      	b.n	20008676 <HAL_QSPI_Receive_DMA+0x46>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
20008708:	6c43      	ldr	r3, [r0, #68]	; 0x44
2000870a:	f043 0308 	orr.w	r3, r3, #8
2000870e:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hqspi);
20008710:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
}
20008714:	4628      	mov	r0, r5
20008716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hqspi);
2000871a:	2502      	movs	r5, #2
}
2000871c:	4628      	mov	r0, r5
2000871e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
20008722:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
20008724:	2201      	movs	r2, #1
}
20008726:	4628      	mov	r0, r5
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
20008728:	f043 0304 	orr.w	r3, r3, #4
2000872c:	6463      	str	r3, [r4, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
2000872e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hqspi);
20008732:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
}
20008736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((data_size % 2U) != 0U) || ((hqspi->Init.FifoThreshold % 2U) != 0U))
2000873a:	07fb      	lsls	r3, r7, #31
2000873c:	d405      	bmi.n	2000874a <HAL_QSPI_Receive_DMA+0x11a>
2000873e:	68a3      	ldr	r3, [r4, #8]
20008740:	07db      	lsls	r3, r3, #31
20008742:	d402      	bmi.n	2000874a <HAL_QSPI_Receive_DMA+0x11a>
          hqspi->RxXferCount = (data_size >> 1U);
20008744:	087f      	lsrs	r7, r7, #1
20008746:	63a7      	str	r7, [r4, #56]	; 0x38
      if (status == HAL_OK)
20008748:	e796      	b.n	20008678 <HAL_QSPI_Receive_DMA+0x48>
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000874a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hqspi);
2000874c:	2200      	movs	r2, #0
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000874e:	f043 0308 	orr.w	r3, r3, #8
20008752:	6463      	str	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hqspi);
20008754:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (status == HAL_OK)
20008758:	e782      	b.n	20008660 <HAL_QSPI_Receive_DMA+0x30>
2000875a:	bf00      	nop
2000875c:	20007d6d 	.word	0x20007d6d
20008760:	20008ab5 	.word	0x20008ab5
20008764:	20008a21 	.word	0x20008a21

20008768 <HAL_QSPI_AutoPolling>:
{
20008768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000876c:	4604      	mov	r4, r0
2000876e:	461d      	mov	r5, r3
20008770:	460f      	mov	r7, r1
20008772:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
20008774:	f7f8 ff98 	bl	200016a8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
20008778:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
2000877c:	2b01      	cmp	r3, #1
2000877e:	d04f      	beq.n	20008820 <HAL_QSPI_AutoPolling+0xb8>
20008780:	2301      	movs	r3, #1
20008782:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
20008786:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
2000878a:	2b01      	cmp	r3, #1
2000878c:	fa5f f883 	uxtb.w	r8, r3
20008790:	d007      	beq.n	200087a2 <HAL_QSPI_AutoPolling+0x3a>
    status = HAL_BUSY;
20008792:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
20008796:	2300      	movs	r3, #0
}
20008798:	4640      	mov	r0, r8
  __HAL_UNLOCK(hqspi);
2000879a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
2000879e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
200087a2:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
200087a4:	2342      	movs	r3, #66	; 0x42
200087a6:	4681      	mov	r9, r0
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
200087a8:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
200087aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
200087ae:	1c68      	adds	r0, r5, #1
200087b0:	6823      	ldr	r3, [r4, #0]
200087b2:	d129      	bne.n	20008808 <HAL_QSPI_AutoPolling+0xa0>
200087b4:	689a      	ldr	r2, [r3, #8]
200087b6:	0691      	lsls	r1, r2, #26
200087b8:	d4fc      	bmi.n	200087b4 <HAL_QSPI_AutoPolling+0x4c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
200087ba:	6832      	ldr	r2, [r6, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
200087bc:	4639      	mov	r1, r7
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
200087be:	6870      	ldr	r0, [r6, #4]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
200087c0:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
200087c2:	68b2      	ldr	r2, [r6, #8]
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
200087c4:	6258      	str	r0, [r3, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
200087c6:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
200087c8:	681a      	ldr	r2, [r3, #0]
200087ca:	6930      	ldr	r0, [r6, #16]
200087cc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
      cmd->NbData = cfg->StatusBytesSize;
200087d0:	f8d6 c00c 	ldr.w	ip, [r6, #12]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
200087d4:	ea42 0600 	orr.w	r6, r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
200087d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
200087dc:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
200087de:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
200087e2:	601e      	str	r6, [r3, #0]
      cmd->NbData = cfg->StatusBytesSize;
200087e4:	f8c7 c028 	str.w	ip, [r7, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
200087e8:	f7ff fad4 	bl	20007d94 <QSPI_Config>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
200087ec:	1c68      	adds	r0, r5, #1
200087ee:	6822      	ldr	r2, [r4, #0]
200087f0:	d11b      	bne.n	2000882a <HAL_QSPI_AutoPolling+0xc2>
200087f2:	6893      	ldr	r3, [r2, #8]
200087f4:	0719      	lsls	r1, r3, #28
200087f6:	d5fc      	bpl.n	200087f2 <HAL_QSPI_AutoPolling+0x8a>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
200087f8:	2108      	movs	r1, #8
        hqspi->State = HAL_QSPI_STATE_READY;
200087fa:	2301      	movs	r3, #1
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
200087fc:	f04f 0800 	mov.w	r8, #0
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
20008800:	60d1      	str	r1, [r2, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
20008802:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
20008806:	e7c6      	b.n	20008796 <HAL_QSPI_AutoPolling+0x2e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
20008808:	689a      	ldr	r2, [r3, #8]
2000880a:	0692      	lsls	r2, r2, #26
2000880c:	d5d5      	bpl.n	200087ba <HAL_QSPI_AutoPolling+0x52>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000880e:	f7f8 ff4b 	bl	200016a8 <HAL_GetTick>
20008812:	eba0 0009 	sub.w	r0, r0, r9
20008816:	4285      	cmp	r5, r0
20008818:	d312      	bcc.n	20008840 <HAL_QSPI_AutoPolling+0xd8>
2000881a:	2d00      	cmp	r5, #0
2000881c:	d1c7      	bne.n	200087ae <HAL_QSPI_AutoPolling+0x46>
2000881e:	e00f      	b.n	20008840 <HAL_QSPI_AutoPolling+0xd8>
  __HAL_LOCK(hqspi);
20008820:	f04f 0802 	mov.w	r8, #2
}
20008824:	4640      	mov	r0, r8
20008826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
2000882a:	6893      	ldr	r3, [r2, #8]
2000882c:	071b      	lsls	r3, r3, #28
2000882e:	d4e3      	bmi.n	200087f8 <HAL_QSPI_AutoPolling+0x90>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20008830:	f7f8 ff3a 	bl	200016a8 <HAL_GetTick>
20008834:	eba0 0009 	sub.w	r0, r0, r9
20008838:	4285      	cmp	r5, r0
2000883a:	d301      	bcc.n	20008840 <HAL_QSPI_AutoPolling+0xd8>
2000883c:	2d00      	cmp	r5, #0
2000883e:	d1d5      	bne.n	200087ec <HAL_QSPI_AutoPolling+0x84>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
20008840:	2304      	movs	r3, #4
20008842:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
20008846:	6c63      	ldr	r3, [r4, #68]	; 0x44
20008848:	f043 0301 	orr.w	r3, r3, #1
2000884c:	6463      	str	r3, [r4, #68]	; 0x44
      if (status == HAL_OK)
2000884e:	e7a2      	b.n	20008796 <HAL_QSPI_AutoPolling+0x2e>

20008850 <HAL_QSPI_AutoPolling_IT>:
{
20008850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
20008854:	4604      	mov	r4, r0
20008856:	460f      	mov	r7, r1
20008858:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
2000885a:	f7f8 ff25 	bl	200016a8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
2000885e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
20008862:	2b01      	cmp	r3, #1
20008864:	d05b      	beq.n	2000891e <HAL_QSPI_AutoPolling_IT+0xce>
20008866:	2301      	movs	r3, #1
20008868:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
2000886c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
20008870:	2b01      	cmp	r3, #1
20008872:	b2de      	uxtb	r6, r3
20008874:	d006      	beq.n	20008884 <HAL_QSPI_AutoPolling_IT+0x34>
    __HAL_UNLOCK(hqspi);
20008876:	2300      	movs	r3, #0
    status = HAL_BUSY;
20008878:	2602      	movs	r6, #2
    __HAL_UNLOCK(hqspi);
2000887a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
2000887e:	4630      	mov	r0, r6
20008880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20008884:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
20008886:	2342      	movs	r3, #66	; 0x42
20008888:	4680      	mov	r8, r0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2000888a:	f8d4 9048 	ldr.w	r9, [r4, #72]	; 0x48
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000888e:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
20008890:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
20008894:	f1b9 3fff 	cmp.w	r9, #4294967295
20008898:	6823      	ldr	r3, [r4, #0]
2000889a:	d127      	bne.n	200088ec <HAL_QSPI_AutoPolling_IT+0x9c>
2000889c:	689a      	ldr	r2, [r3, #8]
2000889e:	0691      	lsls	r1, r2, #26
200088a0:	d4fc      	bmi.n	2000889c <HAL_QSPI_AutoPolling_IT+0x4c>
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
200088a2:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
200088a6:	6828      	ldr	r0, [r5, #0]
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
200088a8:	f04f 0c09 	mov.w	ip, #9
      cmd->NbData = cfg->StatusBytesSize;
200088ac:	68ee      	ldr	r6, [r5, #12]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
200088ae:	6298      	str	r0, [r3, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
200088b0:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
200088b2:	6259      	str	r1, [r3, #36]	; 0x24
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
200088b4:	6969      	ldr	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
200088b6:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
200088b8:	681a      	ldr	r2, [r3, #0]
200088ba:	4308      	orrs	r0, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
200088bc:	4639      	mov	r1, r7
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
200088be:	f422 0540 	bic.w	r5, r2, #12582912	; 0xc00000
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
200088c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
200088c6:	4305      	orrs	r5, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
200088c8:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
200088ca:	601d      	str	r5, [r3, #0]
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
200088cc:	f8c3 c00c 	str.w	ip, [r3, #12]
      cmd->NbData = cfg->StatusBytesSize;
200088d0:	62be      	str	r6, [r7, #40]	; 0x28
      __HAL_UNLOCK(hqspi);
200088d2:	2600      	movs	r6, #0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
200088d4:	f7ff fa5e 	bl	20007d94 <QSPI_Config>
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
200088d8:	6822      	ldr	r2, [r4, #0]
      __HAL_UNLOCK(hqspi);
200088da:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
}
200088de:	4630      	mov	r0, r6
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
200088e0:	6813      	ldr	r3, [r2, #0]
200088e2:	f443 2310 	orr.w	r3, r3, #589824	; 0x90000
200088e6:	6013      	str	r3, [r2, #0]
}
200088e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
200088ec:	689a      	ldr	r2, [r3, #8]
200088ee:	0692      	lsls	r2, r2, #26
200088f0:	d5d7      	bpl.n	200088a2 <HAL_QSPI_AutoPolling_IT+0x52>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200088f2:	f7f8 fed9 	bl	200016a8 <HAL_GetTick>
200088f6:	eba0 0008 	sub.w	r0, r0, r8
200088fa:	4581      	cmp	r9, r0
200088fc:	d302      	bcc.n	20008904 <HAL_QSPI_AutoPolling_IT+0xb4>
200088fe:	f1b9 0f00 	cmp.w	r9, #0
20008902:	d1c7      	bne.n	20008894 <HAL_QSPI_AutoPolling_IT+0x44>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
20008904:	2304      	movs	r3, #4
      __HAL_UNLOCK(hqspi);
20008906:	2200      	movs	r2, #0
}
20008908:	4630      	mov	r0, r6
        hqspi->State     = HAL_QSPI_STATE_ERROR;
2000890a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
2000890e:	6c63      	ldr	r3, [r4, #68]	; 0x44
20008910:	f043 0301 	orr.w	r3, r3, #1
20008914:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hqspi);
20008916:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
2000891a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hqspi);
2000891e:	2602      	movs	r6, #2
}
20008920:	4630      	mov	r0, r6
20008922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
20008926:	bf00      	nop

20008928 <HAL_QSPI_MemoryMapped>:
{
20008928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000892c:	4604      	mov	r4, r0
2000892e:	460f      	mov	r7, r1
20008930:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
20008932:	f7f8 feb9 	bl	200016a8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
20008936:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
2000893a:	2b01      	cmp	r3, #1
2000893c:	d042      	beq.n	200089c4 <HAL_QSPI_MemoryMapped+0x9c>
2000893e:	2301      	movs	r3, #1
20008940:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
20008944:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
20008948:	2b01      	cmp	r3, #1
2000894a:	b2de      	uxtb	r6, r3
2000894c:	d006      	beq.n	2000895c <HAL_QSPI_MemoryMapped+0x34>
    status = HAL_BUSY;
2000894e:	2602      	movs	r6, #2
  __HAL_UNLOCK(hqspi);
20008950:	2300      	movs	r3, #0
}
20008952:	4630      	mov	r0, r6
  __HAL_UNLOCK(hqspi);
20008954:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
20008958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000895c:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
2000895e:	2382      	movs	r3, #130	; 0x82
20008960:	4605      	mov	r5, r0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
20008962:	f8d4 9048 	ldr.w	r9, [r4, #72]	; 0x48
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
20008966:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
20008968:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
2000896c:	f1b9 3fff 	cmp.w	r9, #4294967295
20008970:	6822      	ldr	r2, [r4, #0]
20008972:	d114      	bne.n	2000899e <HAL_QSPI_MemoryMapped+0x76>
20008974:	6893      	ldr	r3, [r2, #8]
20008976:	0699      	lsls	r1, r3, #26
20008978:	d4fc      	bmi.n	20008974 <HAL_QSPI_MemoryMapped+0x4c>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
2000897a:	6813      	ldr	r3, [r2, #0]
2000897c:	f8d8 1004 	ldr.w	r1, [r8, #4]
20008980:	f023 0308 	bic.w	r3, r3, #8
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
20008984:	2908      	cmp	r1, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
20008986:	ea43 0301 	orr.w	r3, r3, r1
2000898a:	6013      	str	r3, [r2, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
2000898c:	d01e      	beq.n	200089cc <HAL_QSPI_MemoryMapped+0xa4>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
2000898e:	4639      	mov	r1, r7
20008990:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
20008994:	4620      	mov	r0, r4
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
20008996:	2600      	movs	r6, #0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
20008998:	f7ff f9fc 	bl	20007d94 <QSPI_Config>
2000899c:	e7d8      	b.n	20008950 <HAL_QSPI_MemoryMapped+0x28>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
2000899e:	6893      	ldr	r3, [r2, #8]
200089a0:	069b      	lsls	r3, r3, #26
200089a2:	d5ea      	bpl.n	2000897a <HAL_QSPI_MemoryMapped+0x52>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
200089a4:	f7f8 fe80 	bl	200016a8 <HAL_GetTick>
200089a8:	1b40      	subs	r0, r0, r5
200089aa:	4581      	cmp	r9, r0
200089ac:	d302      	bcc.n	200089b4 <HAL_QSPI_MemoryMapped+0x8c>
200089ae:	f1b9 0f00 	cmp.w	r9, #0
200089b2:	d1db      	bne.n	2000896c <HAL_QSPI_MemoryMapped+0x44>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
200089b4:	2304      	movs	r3, #4
200089b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
200089ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
200089bc:	f043 0301 	orr.w	r3, r3, #1
200089c0:	6463      	str	r3, [r4, #68]	; 0x44
    if (status == HAL_OK)
200089c2:	e7c5      	b.n	20008950 <HAL_QSPI_MemoryMapped+0x28>
  __HAL_LOCK(hqspi);
200089c4:	2602      	movs	r6, #2
}
200089c6:	4630      	mov	r0, r6
200089c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
200089cc:	f8d8 1000 	ldr.w	r1, [r8]
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
200089d0:	2310      	movs	r3, #16
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
200089d2:	6311      	str	r1, [r2, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
200089d4:	60d3      	str	r3, [r2, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
200089d6:	6813      	ldr	r3, [r2, #0]
200089d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
200089dc:	6013      	str	r3, [r2, #0]
200089de:	e7d6      	b.n	2000898e <HAL_QSPI_MemoryMapped+0x66>

200089e0 <HAL_QSPI_ErrorCallback>:
200089e0:	4770      	bx	lr
200089e2:	bf00      	nop

200089e4 <QSPI_DMAAbortCplt>:
{
200089e4:	b508      	push	{r3, lr}
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
200089e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hqspi->RxXferCount = 0U;
200089e8:	2300      	movs	r3, #0
200089ea:	6383      	str	r3, [r0, #56]	; 0x38
  hqspi->TxXferCount = 0U;
200089ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  if(hqspi->State == HAL_QSPI_STATE_ABORT)
200089ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
200089f2:	2b08      	cmp	r3, #8
200089f4:	d10b      	bne.n	20008a0e <QSPI_DMAAbortCplt+0x2a>
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
200089f6:	6803      	ldr	r3, [r0, #0]
200089f8:	2202      	movs	r2, #2
200089fa:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
200089fc:	681a      	ldr	r2, [r3, #0]
200089fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
20008a02:	601a      	str	r2, [r3, #0]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
20008a04:	681a      	ldr	r2, [r3, #0]
20008a06:	f042 0202 	orr.w	r2, r2, #2
20008a0a:	601a      	str	r2, [r3, #0]
}
20008a0c:	bd08      	pop	{r3, pc}
    hqspi->State = HAL_QSPI_STATE_READY;
20008a0e:	2301      	movs	r3, #1
20008a10:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
20008a14:	f7ff ffe4 	bl	200089e0 <HAL_QSPI_ErrorCallback>
}
20008a18:	bd08      	pop	{r3, pc}
20008a1a:	bf00      	nop

20008a1c <HAL_QSPI_AbortCpltCallback>:
20008a1c:	4770      	bx	lr
20008a1e:	bf00      	nop

20008a20 <QSPI_DMAError>:
{
20008a20:	b510      	push	{r4, lr}
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
20008a22:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
20008a24:	f7f9 fc5c 	bl	200022e0 <HAL_DMA_GetError>
20008a28:	2802      	cmp	r0, #2
20008a2a:	d025      	beq.n	20008a78 <QSPI_DMAError+0x58>
  hqspi->RxXferCount = 0U;
20008a2c:	2100      	movs	r1, #0
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008a2e:	6823      	ldr	r3, [r4, #0]
  hqspi->RxXferCount = 0U;
20008a30:	63a1      	str	r1, [r4, #56]	; 0x38
  hqspi->TxXferCount = 0U;
20008a32:	62e1      	str	r1, [r4, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
20008a34:	6c62      	ldr	r2, [r4, #68]	; 0x44
20008a36:	f042 0204 	orr.w	r2, r2, #4
20008a3a:	6462      	str	r2, [r4, #68]	; 0x44
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008a3c:	681a      	ldr	r2, [r3, #0]
20008a3e:	f022 0204 	bic.w	r2, r2, #4
20008a42:	601a      	str	r2, [r3, #0]
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
20008a44:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
20008a48:	0790      	lsls	r0, r2, #30
20008a4a:	d515      	bpl.n	20008a78 <QSPI_DMAError+0x58>
    hqspi->State = HAL_QSPI_STATE_ABORT;
20008a4c:	2208      	movs	r2, #8
    __HAL_UNLOCK(hqspi);
20008a4e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hqspi->State = HAL_QSPI_STATE_ABORT;
20008a52:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
20008a56:	681a      	ldr	r2, [r3, #0]
20008a58:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
20008a5c:	601a      	str	r2, [r3, #0]
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20008a5e:	681a      	ldr	r2, [r3, #0]
20008a60:	0752      	lsls	r2, r2, #29
20008a62:	d40a      	bmi.n	20008a7a <QSPI_DMAError+0x5a>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
20008a64:	2202      	movs	r2, #2
20008a66:	60da      	str	r2, [r3, #12]
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
20008a68:	681a      	ldr	r2, [r3, #0]
20008a6a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
20008a6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
20008a70:	681a      	ldr	r2, [r3, #0]
20008a72:	f042 0202 	orr.w	r2, r2, #2
20008a76:	601a      	str	r2, [r3, #0]
}
20008a78:	bd10      	pop	{r4, pc}
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008a7a:	681a      	ldr	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
20008a7c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008a7e:	f022 0204 	bic.w	r2, r2, #4
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
20008a82:	4907      	ldr	r1, [pc, #28]	; (20008aa0 <QSPI_DMAError+0x80>)
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008a84:	601a      	str	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
20008a86:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
20008a88:	f7f9 f9e8 	bl	20001e5c <HAL_DMA_Abort_IT>
20008a8c:	2800      	cmp	r0, #0
20008a8e:	d0f3      	beq.n	20008a78 <QSPI_DMAError+0x58>
        hqspi->State = HAL_QSPI_STATE_READY;
20008a90:	2301      	movs	r3, #1
        HAL_QSPI_AbortCpltCallback(hqspi);
20008a92:	4620      	mov	r0, r4
        hqspi->State = HAL_QSPI_STATE_READY;
20008a94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_QSPI_AbortCpltCallback(hqspi);
20008a98:	f7ff ffc0 	bl	20008a1c <HAL_QSPI_AbortCpltCallback>
}
20008a9c:	bd10      	pop	{r4, pc}
20008a9e:	bf00      	nop
20008aa0:	200089e5 	.word	0x200089e5

20008aa4 <HAL_QSPI_CmdCpltCallback>:
20008aa4:	4770      	bx	lr
20008aa6:	bf00      	nop

20008aa8 <HAL_QSPI_RxCpltCallback>:
20008aa8:	4770      	bx	lr
20008aaa:	bf00      	nop

20008aac <HAL_QSPI_TxCpltCallback>:
20008aac:	4770      	bx	lr
20008aae:	bf00      	nop

20008ab0 <HAL_QSPI_RxHalfCpltCallback>:
20008ab0:	4770      	bx	lr
20008ab2:	bf00      	nop

20008ab4 <QSPI_DMARxHalfCplt>:
  HAL_QSPI_RxHalfCpltCallback(hqspi);
20008ab4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
20008ab6:	b508      	push	{r3, lr}
  HAL_QSPI_RxHalfCpltCallback(hqspi);
20008ab8:	f7ff fffa 	bl	20008ab0 <HAL_QSPI_RxHalfCpltCallback>
}
20008abc:	bd08      	pop	{r3, pc}
20008abe:	bf00      	nop

20008ac0 <HAL_QSPI_TxHalfCpltCallback>:
20008ac0:	4770      	bx	lr
20008ac2:	bf00      	nop

20008ac4 <QSPI_DMATxHalfCplt>:
  HAL_QSPI_TxHalfCpltCallback(hqspi);
20008ac4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
20008ac6:	b508      	push	{r3, lr}
  HAL_QSPI_TxHalfCpltCallback(hqspi);
20008ac8:	f7ff fffa 	bl	20008ac0 <HAL_QSPI_TxHalfCpltCallback>
}
20008acc:	bd08      	pop	{r3, pc}
20008ace:	bf00      	nop

20008ad0 <HAL_QSPI_FifoThresholdCallback>:
20008ad0:	4770      	bx	lr
20008ad2:	bf00      	nop

20008ad4 <HAL_QSPI_StatusMatchCallback>:
20008ad4:	4770      	bx	lr
20008ad6:	bf00      	nop

20008ad8 <HAL_QSPI_TimeOutCallback>:
20008ad8:	4770      	bx	lr
20008ada:	bf00      	nop

20008adc <HAL_QSPI_IRQHandler>:
{
20008adc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag = READ_REG(hqspi->Instance->SR);
20008ade:	6803      	ldr	r3, [r0, #0]
{
20008ae0:	4604      	mov	r4, r0
  uint32_t flag = READ_REG(hqspi->Instance->SR);
20008ae2:	689a      	ldr	r2, [r3, #8]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
20008ae4:	6819      	ldr	r1, [r3, #0]
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
20008ae6:	0755      	lsls	r5, r2, #29
20008ae8:	d50e      	bpl.n	20008b08 <HAL_QSPI_IRQHandler+0x2c>
20008aea:	0348      	lsls	r0, r1, #13
20008aec:	d50c      	bpl.n	20008b08 <HAL_QSPI_IRQHandler+0x2c>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
20008aee:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
20008af2:	2a12      	cmp	r2, #18
20008af4:	d075      	beq.n	20008be2 <HAL_QSPI_IRQHandler+0x106>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
20008af6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
20008afa:	2a22      	cmp	r2, #34	; 0x22
20008afc:	f000 80a1 	beq.w	20008c42 <HAL_QSPI_IRQHandler+0x166>
    HAL_QSPI_FifoThresholdCallback(hqspi);
20008b00:	4620      	mov	r0, r4
20008b02:	f7ff ffe5 	bl	20008ad0 <HAL_QSPI_FifoThresholdCallback>
}
20008b06:	bd38      	pop	{r3, r4, r5, pc}
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
20008b08:	0795      	lsls	r5, r2, #30
20008b0a:	d526      	bpl.n	20008b5a <HAL_QSPI_IRQHandler+0x7e>
20008b0c:	0388      	lsls	r0, r1, #14
20008b0e:	d524      	bpl.n	20008b5a <HAL_QSPI_IRQHandler+0x7e>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
20008b10:	2202      	movs	r2, #2
20008b12:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
20008b14:	681a      	ldr	r2, [r3, #0]
20008b16:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
20008b1a:	601a      	str	r2, [r3, #0]
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
20008b1c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
20008b20:	2a12      	cmp	r2, #18
20008b22:	d07a      	beq.n	20008c1a <HAL_QSPI_IRQHandler+0x13e>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
20008b24:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
20008b28:	2a22      	cmp	r2, #34	; 0x22
20008b2a:	f000 80a9 	beq.w	20008c80 <HAL_QSPI_IRQHandler+0x1a4>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
20008b2e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
20008b32:	2a02      	cmp	r2, #2
20008b34:	f000 80d0 	beq.w	20008cd8 <HAL_QSPI_IRQHandler+0x1fc>
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
20008b38:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
20008b3c:	2a08      	cmp	r2, #8
20008b3e:	d1e2      	bne.n	20008b06 <HAL_QSPI_IRQHandler+0x2a>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
20008b40:	695a      	ldr	r2, [r3, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
20008b42:	2101      	movs	r1, #1
        HAL_QSPI_AbortCpltCallback(hqspi);
20008b44:	4620      	mov	r0, r4
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
20008b46:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
20008b4a:	615a      	str	r2, [r3, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
20008b4c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
20008b50:	6c63      	ldr	r3, [r4, #68]	; 0x44
20008b52:	bb3b      	cbnz	r3, 20008ba4 <HAL_QSPI_IRQHandler+0xc8>
        HAL_QSPI_AbortCpltCallback(hqspi);
20008b54:	f7ff ff62 	bl	20008a1c <HAL_QSPI_AbortCpltCallback>
}
20008b58:	bd38      	pop	{r3, r4, r5, pc}
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
20008b5a:	0715      	lsls	r5, r2, #28
20008b5c:	d425      	bmi.n	20008baa <HAL_QSPI_IRQHandler+0xce>
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
20008b5e:	07d5      	lsls	r5, r2, #31
20008b60:	d535      	bpl.n	20008bce <HAL_QSPI_IRQHandler+0xf2>
20008b62:	03c8      	lsls	r0, r1, #15
20008b64:	d533      	bpl.n	20008bce <HAL_QSPI_IRQHandler+0xf2>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
20008b66:	2501      	movs	r5, #1
20008b68:	60dd      	str	r5, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
20008b6a:	681a      	ldr	r2, [r3, #0]
20008b6c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
20008b70:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
20008b72:	6c62      	ldr	r2, [r4, #68]	; 0x44
20008b74:	f042 0202 	orr.w	r2, r2, #2
20008b78:	6462      	str	r2, [r4, #68]	; 0x44
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20008b7a:	681a      	ldr	r2, [r3, #0]
20008b7c:	0752      	lsls	r2, r2, #29
20008b7e:	d579      	bpl.n	20008c74 <HAL_QSPI_IRQHandler+0x198>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008b80:	681a      	ldr	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
20008b82:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008b84:	f022 0204 	bic.w	r2, r2, #4
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
20008b88:	4957      	ldr	r1, [pc, #348]	; (20008ce8 <HAL_QSPI_IRQHandler+0x20c>)
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008b8a:	601a      	str	r2, [r3, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
20008b8c:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
20008b8e:	f7f9 f965 	bl	20001e5c <HAL_DMA_Abort_IT>
20008b92:	2800      	cmp	r0, #0
20008b94:	d0b7      	beq.n	20008b06 <HAL_QSPI_IRQHandler+0x2a>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
20008b96:	6c63      	ldr	r3, [r4, #68]	; 0x44
        HAL_QSPI_ErrorCallback(hqspi);
20008b98:	4620      	mov	r0, r4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
20008b9a:	f043 0304 	orr.w	r3, r3, #4
20008b9e:	6463      	str	r3, [r4, #68]	; 0x44
        hqspi->State = HAL_QSPI_STATE_READY;
20008ba0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        HAL_QSPI_ErrorCallback(hqspi);
20008ba4:	f7ff ff1c 	bl	200089e0 <HAL_QSPI_ErrorCallback>
}
20008ba8:	bd38      	pop	{r3, r4, r5, pc}
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
20008baa:	0308      	lsls	r0, r1, #12
20008bac:	d5d7      	bpl.n	20008b5e <HAL_QSPI_IRQHandler+0x82>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
20008bae:	2208      	movs	r2, #8
20008bb0:	60da      	str	r2, [r3, #12]
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
20008bb2:	681a      	ldr	r2, [r3, #0]
20008bb4:	0252      	lsls	r2, r2, #9
20008bb6:	d506      	bpl.n	20008bc6 <HAL_QSPI_IRQHandler+0xea>
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
20008bb8:	681a      	ldr	r2, [r3, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
20008bba:	2101      	movs	r1, #1
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
20008bbc:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
20008bc0:	601a      	str	r2, [r3, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
20008bc2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_QSPI_StatusMatchCallback(hqspi);
20008bc6:	4620      	mov	r0, r4
20008bc8:	f7ff ff84 	bl	20008ad4 <HAL_QSPI_StatusMatchCallback>
}
20008bcc:	bd38      	pop	{r3, r4, r5, pc}
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
20008bce:	06d0      	lsls	r0, r2, #27
20008bd0:	d599      	bpl.n	20008b06 <HAL_QSPI_IRQHandler+0x2a>
20008bd2:	02ca      	lsls	r2, r1, #11
20008bd4:	d597      	bpl.n	20008b06 <HAL_QSPI_IRQHandler+0x2a>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
20008bd6:	2210      	movs	r2, #16
    HAL_QSPI_TimeOutCallback(hqspi);
20008bd8:	4620      	mov	r0, r4
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
20008bda:	60da      	str	r2, [r3, #12]
    HAL_QSPI_TimeOutCallback(hqspi);
20008bdc:	f7ff ff7c 	bl	20008ad8 <HAL_QSPI_TimeOutCallback>
}
20008be0:	bd38      	pop	{r3, r4, r5, pc}
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
20008be2:	689a      	ldr	r2, [r3, #8]
20008be4:	0750      	lsls	r0, r2, #29
20008be6:	d58b      	bpl.n	20008b00 <HAL_QSPI_IRQHandler+0x24>
20008be8:	4618      	mov	r0, r3
20008bea:	e00e      	b.n	20008c0a <HAL_QSPI_IRQHandler+0x12e>
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
20008bec:	6a62      	ldr	r2, [r4, #36]	; 0x24
20008bee:	7812      	ldrb	r2, [r2, #0]
20008bf0:	f883 2020 	strb.w	r2, [r3, #32]
          hqspi->TxXferCount--;
20008bf4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
20008bf6:	6820      	ldr	r0, [r4, #0]
          hqspi->TxXferCount--;
20008bf8:	3901      	subs	r1, #1
          hqspi->pTxBuffPtr++;
20008bfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hqspi->TxXferCount--;
20008bfc:	62e1      	str	r1, [r4, #44]	; 0x2c
          hqspi->pTxBuffPtr++;
20008bfe:	3201      	adds	r2, #1
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
20008c00:	6881      	ldr	r1, [r0, #8]
          hqspi->pTxBuffPtr++;
20008c02:	6262      	str	r2, [r4, #36]	; 0x24
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
20008c04:	074d      	lsls	r5, r1, #29
20008c06:	f57f af7b 	bpl.w	20008b00 <HAL_QSPI_IRQHandler+0x24>
        if (hqspi->TxXferCount > 0U)
20008c0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
20008c0c:	2a00      	cmp	r2, #0
20008c0e:	d1ed      	bne.n	20008bec <HAL_QSPI_IRQHandler+0x110>
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
20008c10:	6803      	ldr	r3, [r0, #0]
20008c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
20008c16:	6003      	str	r3, [r0, #0]
          break;
20008c18:	e772      	b.n	20008b00 <HAL_QSPI_IRQHandler+0x24>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20008c1a:	681a      	ldr	r2, [r3, #0]
20008c1c:	0751      	lsls	r1, r2, #29
20008c1e:	d509      	bpl.n	20008c34 <HAL_QSPI_IRQHandler+0x158>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008c20:	681a      	ldr	r2, [r3, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
20008c22:	6be1      	ldr	r1, [r4, #60]	; 0x3c
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008c24:	f022 0204 	bic.w	r2, r2, #4
        __HAL_DMA_DISABLE(hqspi->hdma);
20008c28:	6809      	ldr	r1, [r1, #0]
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008c2a:	601a      	str	r2, [r3, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
20008c2c:	680b      	ldr	r3, [r1, #0]
20008c2e:	f023 0301 	bic.w	r3, r3, #1
20008c32:	600b      	str	r3, [r1, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
20008c34:	2301      	movs	r3, #1
      HAL_QSPI_TxCpltCallback(hqspi);
20008c36:	4620      	mov	r0, r4
      hqspi->State = HAL_QSPI_STATE_READY;
20008c38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_TxCpltCallback(hqspi);
20008c3c:	f7ff ff36 	bl	20008aac <HAL_QSPI_TxCpltCallback>
}
20008c40:	bd38      	pop	{r3, r4, r5, pc}
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
20008c42:	689a      	ldr	r2, [r3, #8]
20008c44:	0752      	lsls	r2, r2, #29
20008c46:	f57f af5b 	bpl.w	20008b00 <HAL_QSPI_IRQHandler+0x24>
20008c4a:	4618      	mov	r0, r3
20008c4c:	e00e      	b.n	20008c6c <HAL_QSPI_IRQHandler+0x190>
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
20008c4e:	f893 1020 	ldrb.w	r1, [r3, #32]
20008c52:	6b22      	ldr	r2, [r4, #48]	; 0x30
20008c54:	7011      	strb	r1, [r2, #0]
          hqspi->RxXferCount--;
20008c56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
20008c58:	6820      	ldr	r0, [r4, #0]
          hqspi->RxXferCount--;
20008c5a:	3901      	subs	r1, #1
          hqspi->pRxBuffPtr++;
20008c5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
          hqspi->RxXferCount--;
20008c5e:	63a1      	str	r1, [r4, #56]	; 0x38
          hqspi->pRxBuffPtr++;
20008c60:	3201      	adds	r2, #1
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
20008c62:	6881      	ldr	r1, [r0, #8]
          hqspi->pRxBuffPtr++;
20008c64:	6322      	str	r2, [r4, #48]	; 0x30
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
20008c66:	0749      	lsls	r1, r1, #29
20008c68:	f57f af4a 	bpl.w	20008b00 <HAL_QSPI_IRQHandler+0x24>
        if (hqspi->RxXferCount > 0U)
20008c6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
20008c6e:	2a00      	cmp	r2, #0
20008c70:	d1ed      	bne.n	20008c4e <HAL_QSPI_IRQHandler+0x172>
20008c72:	e7cd      	b.n	20008c10 <HAL_QSPI_IRQHandler+0x134>
      HAL_QSPI_ErrorCallback(hqspi);
20008c74:	4620      	mov	r0, r4
      hqspi->State = HAL_QSPI_STATE_READY;
20008c76:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
      HAL_QSPI_ErrorCallback(hqspi);
20008c7a:	f7ff feb1 	bl	200089e0 <HAL_QSPI_ErrorCallback>
}
20008c7e:	bd38      	pop	{r3, r4, r5, pc}
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20008c80:	681a      	ldr	r2, [r3, #0]
20008c82:	0752      	lsls	r2, r2, #29
20008c84:	d41d      	bmi.n	20008cc2 <HAL_QSPI_IRQHandler+0x1e6>
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
20008c86:	689a      	ldr	r2, [r3, #8]
20008c88:	f412 5f7c 	tst.w	r2, #16128	; 0x3f00
20008c8c:	d10f      	bne.n	20008cae <HAL_QSPI_IRQHandler+0x1d2>
20008c8e:	e011      	b.n	20008cb4 <HAL_QSPI_IRQHandler+0x1d8>
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
20008c90:	f893 1020 	ldrb.w	r1, [r3, #32]
20008c94:	6b22      	ldr	r2, [r4, #48]	; 0x30
20008c96:	7011      	strb	r1, [r2, #0]
            hqspi->RxXferCount--;
20008c98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
20008c9a:	6820      	ldr	r0, [r4, #0]
            hqspi->RxXferCount--;
20008c9c:	3901      	subs	r1, #1
            hqspi->pRxBuffPtr++;
20008c9e:	6b22      	ldr	r2, [r4, #48]	; 0x30
            hqspi->RxXferCount--;
20008ca0:	63a1      	str	r1, [r4, #56]	; 0x38
            hqspi->pRxBuffPtr++;
20008ca2:	3201      	adds	r2, #1
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
20008ca4:	6881      	ldr	r1, [r0, #8]
            hqspi->pRxBuffPtr++;
20008ca6:	6322      	str	r2, [r4, #48]	; 0x30
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
20008ca8:	f411 5f7c 	tst.w	r1, #16128	; 0x3f00
20008cac:	d002      	beq.n	20008cb4 <HAL_QSPI_IRQHandler+0x1d8>
          if (hqspi->RxXferCount > 0U)
20008cae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
20008cb0:	2a00      	cmp	r2, #0
20008cb2:	d1ed      	bne.n	20008c90 <HAL_QSPI_IRQHandler+0x1b4>
      hqspi->State = HAL_QSPI_STATE_READY;
20008cb4:	2301      	movs	r3, #1
      HAL_QSPI_RxCpltCallback(hqspi);
20008cb6:	4620      	mov	r0, r4
      hqspi->State = HAL_QSPI_STATE_READY;
20008cb8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_RxCpltCallback(hqspi);
20008cbc:	f7ff fef4 	bl	20008aa8 <HAL_QSPI_RxCpltCallback>
}
20008cc0:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008cc2:	681a      	ldr	r2, [r3, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
20008cc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008cc6:	f022 0204 	bic.w	r2, r2, #4
        __HAL_DMA_DISABLE(hqspi->hdma);
20008cca:	6809      	ldr	r1, [r1, #0]
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008ccc:	601a      	str	r2, [r3, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
20008cce:	680b      	ldr	r3, [r1, #0]
20008cd0:	f023 0301 	bic.w	r3, r3, #1
20008cd4:	600b      	str	r3, [r1, #0]
20008cd6:	e7ed      	b.n	20008cb4 <HAL_QSPI_IRQHandler+0x1d8>
      hqspi->State = HAL_QSPI_STATE_READY;
20008cd8:	2301      	movs	r3, #1
      HAL_QSPI_CmdCpltCallback(hqspi);
20008cda:	4620      	mov	r0, r4
      hqspi->State = HAL_QSPI_STATE_READY;
20008cdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_QSPI_CmdCpltCallback(hqspi);
20008ce0:	f7ff fee0 	bl	20008aa4 <HAL_QSPI_CmdCpltCallback>
}
20008ce4:	bd38      	pop	{r3, r4, r5, pc}
20008ce6:	bf00      	nop
20008ce8:	200089e5 	.word	0x200089e5

20008cec <HAL_QSPI_GetState>:
  return hqspi->State;
20008cec:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
20008cf0:	4770      	bx	lr
20008cf2:	bf00      	nop

20008cf4 <HAL_QSPI_GetError>:
  return hqspi->ErrorCode;
20008cf4:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
20008cf6:	4770      	bx	lr

20008cf8 <HAL_QSPI_Abort>:
{
20008cf8:	b570      	push	{r4, r5, r6, lr}
20008cfa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
20008cfc:	f7f8 fcd4 	bl	200016a8 <HAL_GetTick>
20008d00:	4606      	mov	r6, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
20008d02:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
20008d06:	f013 0002 	ands.w	r0, r3, #2
20008d0a:	d020      	beq.n	20008d4e <HAL_QSPI_Abort+0x56>
    __HAL_UNLOCK(hqspi);
20008d0c:	2200      	movs	r2, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20008d0e:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(hqspi);
20008d10:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20008d14:	681a      	ldr	r2, [r3, #0]
20008d16:	0755      	lsls	r5, r2, #29
20008d18:	d425      	bmi.n	20008d66 <HAL_QSPI_Abort+0x6e>
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
20008d1a:	681a      	ldr	r2, [r3, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
20008d1c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
20008d1e:	f042 0202 	orr.w	r2, r2, #2
20008d22:	601a      	str	r2, [r3, #0]
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
20008d24:	1c68      	adds	r0, r5, #1
20008d26:	d113      	bne.n	20008d50 <HAL_QSPI_Abort+0x58>
20008d28:	689a      	ldr	r2, [r3, #8]
20008d2a:	0791      	lsls	r1, r2, #30
20008d2c:	d5fc      	bpl.n	20008d28 <HAL_QSPI_Abort+0x30>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
20008d2e:	2202      	movs	r2, #2
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
20008d30:	6ca5      	ldr	r5, [r4, #72]	; 0x48
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
20008d32:	60da      	str	r2, [r3, #12]
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
20008d34:	1c68      	adds	r0, r5, #1
20008d36:	d120      	bne.n	20008d7a <HAL_QSPI_Abort+0x82>
20008d38:	689a      	ldr	r2, [r3, #8]
20008d3a:	0691      	lsls	r1, r2, #26
20008d3c:	d4fc      	bmi.n	20008d38 <HAL_QSPI_Abort+0x40>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
20008d3e:	695a      	ldr	r2, [r3, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
20008d40:	2101      	movs	r1, #1
20008d42:	2000      	movs	r0, #0
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
20008d44:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
20008d48:	615a      	str	r2, [r3, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
20008d4a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
}
20008d4e:	bd70      	pop	{r4, r5, r6, pc}
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
20008d50:	689a      	ldr	r2, [r3, #8]
20008d52:	0792      	lsls	r2, r2, #30
20008d54:	d4eb      	bmi.n	20008d2e <HAL_QSPI_Abort+0x36>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20008d56:	f7f8 fca7 	bl	200016a8 <HAL_GetTick>
20008d5a:	1b80      	subs	r0, r0, r6
20008d5c:	4285      	cmp	r5, r0
20008d5e:	d31d      	bcc.n	20008d9c <HAL_QSPI_Abort+0xa4>
20008d60:	b1e5      	cbz	r5, 20008d9c <HAL_QSPI_Abort+0xa4>
20008d62:	6823      	ldr	r3, [r4, #0]
20008d64:	e7de      	b.n	20008d24 <HAL_QSPI_Abort+0x2c>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008d66:	681a      	ldr	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
20008d68:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008d6a:	f022 0204 	bic.w	r2, r2, #4
20008d6e:	601a      	str	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
20008d70:	f7f9 f82c 	bl	20001dcc <HAL_DMA_Abort>
      if(status != HAL_OK)
20008d74:	b960      	cbnz	r0, 20008d90 <HAL_QSPI_Abort+0x98>
20008d76:	6823      	ldr	r3, [r4, #0]
20008d78:	e7cf      	b.n	20008d1a <HAL_QSPI_Abort+0x22>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
20008d7a:	689a      	ldr	r2, [r3, #8]
20008d7c:	0692      	lsls	r2, r2, #26
20008d7e:	d5de      	bpl.n	20008d3e <HAL_QSPI_Abort+0x46>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
20008d80:	f7f8 fc92 	bl	200016a8 <HAL_GetTick>
20008d84:	1b80      	subs	r0, r0, r6
20008d86:	4285      	cmp	r5, r0
20008d88:	d308      	bcc.n	20008d9c <HAL_QSPI_Abort+0xa4>
20008d8a:	b13d      	cbz	r5, 20008d9c <HAL_QSPI_Abort+0xa4>
20008d8c:	6823      	ldr	r3, [r4, #0]
20008d8e:	e7d1      	b.n	20008d34 <HAL_QSPI_Abort+0x3c>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
20008d90:	6c62      	ldr	r2, [r4, #68]	; 0x44
20008d92:	6823      	ldr	r3, [r4, #0]
20008d94:	f042 0204 	orr.w	r2, r2, #4
20008d98:	6462      	str	r2, [r4, #68]	; 0x44
20008d9a:	e7be      	b.n	20008d1a <HAL_QSPI_Abort+0x22>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
20008d9c:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
20008d9e:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
20008da0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
20008da4:	6c63      	ldr	r3, [r4, #68]	; 0x44
20008da6:	4303      	orrs	r3, r0
20008da8:	6463      	str	r3, [r4, #68]	; 0x44
}
20008daa:	bd70      	pop	{r4, r5, r6, pc}

20008dac <HAL_QSPI_Abort_IT>:
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
20008dac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
20008db0:	079a      	lsls	r2, r3, #30
20008db2:	d51b      	bpl.n	20008dec <HAL_QSPI_Abort_IT+0x40>
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
20008db4:	6802      	ldr	r2, [r0, #0]
    hqspi->State = HAL_QSPI_STATE_ABORT;
20008db6:	2308      	movs	r3, #8
    __HAL_UNLOCK(hqspi);
20008db8:	2100      	movs	r1, #0
{
20008dba:	b510      	push	{r4, lr}
    __HAL_UNLOCK(hqspi);
20008dbc:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    hqspi->State = HAL_QSPI_STATE_ABORT;
20008dc0:	4604      	mov	r4, r0
20008dc2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
20008dc6:	6813      	ldr	r3, [r2, #0]
20008dc8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
20008dcc:	6013      	str	r3, [r2, #0]
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
20008dce:	6813      	ldr	r3, [r2, #0]
20008dd0:	075b      	lsls	r3, r3, #29
20008dd2:	d40d      	bmi.n	20008df0 <HAL_QSPI_Abort_IT+0x44>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
20008dd4:	2302      	movs	r3, #2
20008dd6:	60d3      	str	r3, [r2, #12]
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
20008dd8:	6813      	ldr	r3, [r2, #0]
20008dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20008dde:	6013      	str	r3, [r2, #0]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
20008de0:	6813      	ldr	r3, [r2, #0]
20008de2:	f043 0302 	orr.w	r3, r3, #2
20008de6:	6013      	str	r3, [r2, #0]
}
20008de8:	2000      	movs	r0, #0
20008dea:	bd10      	pop	{r4, pc}
20008dec:	2000      	movs	r0, #0
20008dee:	4770      	bx	lr
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008df0:	6813      	ldr	r3, [r2, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
20008df2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008df4:	f023 0304 	bic.w	r3, r3, #4
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
20008df8:	4906      	ldr	r1, [pc, #24]	; (20008e14 <HAL_QSPI_Abort_IT+0x68>)
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
20008dfa:	6013      	str	r3, [r2, #0]
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
20008dfc:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
20008dfe:	f7f9 f82d 	bl	20001e5c <HAL_DMA_Abort_IT>
20008e02:	2800      	cmp	r0, #0
20008e04:	d0f0      	beq.n	20008de8 <HAL_QSPI_Abort_IT+0x3c>
        hqspi->State = HAL_QSPI_STATE_READY;
20008e06:	2301      	movs	r3, #1
        HAL_QSPI_AbortCpltCallback(hqspi);
20008e08:	4620      	mov	r0, r4
        hqspi->State = HAL_QSPI_STATE_READY;
20008e0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_QSPI_AbortCpltCallback(hqspi);
20008e0e:	f7ff fe05 	bl	20008a1c <HAL_QSPI_AbortCpltCallback>
20008e12:	e7e9      	b.n	20008de8 <HAL_QSPI_Abort_IT+0x3c>
20008e14:	200089e5 	.word	0x200089e5

20008e18 <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
20008e18:	6481      	str	r1, [r0, #72]	; 0x48
}
20008e1a:	4770      	bx	lr

20008e1c <HAL_QSPI_SetFifoThreshold>:
  __HAL_LOCK(hqspi);
20008e1c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
20008e20:	2a01      	cmp	r2, #1
20008e22:	d01c      	beq.n	20008e5e <HAL_QSPI_SetFifoThreshold+0x42>
20008e24:	2201      	movs	r2, #1
20008e26:	4603      	mov	r3, r0
20008e28:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
20008e2c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
20008e30:	2a01      	cmp	r2, #1
20008e32:	d004      	beq.n	20008e3e <HAL_QSPI_SetFifoThreshold+0x22>
  __HAL_UNLOCK(hqspi);
20008e34:	2200      	movs	r2, #0
    status = HAL_BUSY;
20008e36:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
20008e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
20008e3c:	4770      	bx	lr
{
20008e3e:	b430      	push	{r4, r5}
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
20008e40:	6804      	ldr	r4, [r0, #0]
20008e42:	1e4d      	subs	r5, r1, #1
    hqspi->Init.FifoThreshold = Threshold;
20008e44:	6081      	str	r1, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
20008e46:	2000      	movs	r0, #0
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
20008e48:	6822      	ldr	r2, [r4, #0]
20008e4a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
20008e4e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
20008e52:	6022      	str	r2, [r4, #0]
  __HAL_UNLOCK(hqspi);
20008e54:	2200      	movs	r2, #0
20008e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
20008e5a:	bc30      	pop	{r4, r5}
20008e5c:	4770      	bx	lr
  __HAL_LOCK(hqspi);
20008e5e:	2002      	movs	r0, #2
20008e60:	4770      	bx	lr
20008e62:	bf00      	nop

20008e64 <HAL_QSPI_GetFifoThreshold>:
  return ((READ_BIT(hqspi->Instance->CR, QUADSPI_CR_FTHRES) >> QUADSPI_CR_FTHRES_Pos) + 1U);
20008e64:	6803      	ldr	r3, [r0, #0]
20008e66:	6818      	ldr	r0, [r3, #0]
20008e68:	f3c0 2004 	ubfx	r0, r0, #8, #5
}
20008e6c:	3001      	adds	r0, #1
20008e6e:	4770      	bx	lr

20008e70 <HAL_QSPI_SetFlashID>:
  __HAL_LOCK(hqspi);
20008e70:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
20008e74:	2a01      	cmp	r2, #1
20008e76:	d01b      	beq.n	20008eb0 <HAL_QSPI_SetFlashID+0x40>
20008e78:	2201      	movs	r2, #1
20008e7a:	4603      	mov	r3, r0
20008e7c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
20008e80:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
20008e84:	2a01      	cmp	r2, #1
20008e86:	d004      	beq.n	20008e92 <HAL_QSPI_SetFlashID+0x22>
  __HAL_UNLOCK(hqspi);
20008e88:	2200      	movs	r2, #0
    status = HAL_BUSY;
20008e8a:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
20008e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
20008e90:	4770      	bx	lr
{
20008e92:	b410      	push	{r4}
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FSEL, FlashID);
20008e94:	6804      	ldr	r4, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
20008e96:	2000      	movs	r0, #0
    hqspi->Init.FlashID = FlashID;
20008e98:	61d9      	str	r1, [r3, #28]
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FSEL, FlashID);
20008e9a:	6822      	ldr	r2, [r4, #0]
20008e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20008ea0:	4311      	orrs	r1, r2
  __HAL_UNLOCK(hqspi);
20008ea2:	2200      	movs	r2, #0
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FSEL, FlashID);
20008ea4:	6021      	str	r1, [r4, #0]
  __HAL_UNLOCK(hqspi);
20008ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
20008eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
20008eae:	4770      	bx	lr
  __HAL_LOCK(hqspi);
20008eb0:	2002      	movs	r0, #2
20008eb2:	4770      	bx	lr

20008eb4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
20008eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20008eb6:	f7f8 fbf7 	bl	200016a8 <HAL_GetTick>

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
20008eba:	4b47      	ldr	r3, [pc, #284]	; (20008fd8 <HAL_RCC_DeInit+0x124>)
  tickstart = HAL_GetTick();
20008ebc:	4605      	mov	r5, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
20008ebe:	681a      	ldr	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
20008ec0:	461c      	mov	r4, r3
  SET_BIT(RCC->CR, RCC_CR_HSION);
20008ec2:	f042 0201 	orr.w	r2, r2, #1
20008ec6:	601a      	str	r2, [r3, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
20008ec8:	e004      	b.n	20008ed4 <HAL_RCC_DeInit+0x20>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20008eca:	f7f8 fbed 	bl	200016a8 <HAL_GetTick>
20008ece:	1b40      	subs	r0, r0, r5
20008ed0:	2802      	cmp	r0, #2
20008ed2:	d87e      	bhi.n	20008fd2 <HAL_RCC_DeInit+0x11e>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
20008ed4:	6823      	ldr	r3, [r4, #0]
20008ed6:	079e      	lsls	r6, r3, #30
20008ed8:	d5f7      	bpl.n	20008eca <HAL_RCC_DeInit+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
20008eda:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20008edc:	f241 3788 	movw	r7, #5000	; 0x1388
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
20008ee0:	4e3d      	ldr	r6, [pc, #244]	; (20008fd8 <HAL_RCC_DeInit+0x124>)
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
20008ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20008ee6:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
20008ee8:	f7f8 fbde 	bl	200016a8 <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
20008eec:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
20008eee:	4605      	mov	r5, r0
  CLEAR_REG(RCC->CFGR);
20008ef0:	60a3      	str	r3, [r4, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
20008ef2:	e004      	b.n	20008efe <HAL_RCC_DeInit+0x4a>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20008ef4:	f7f8 fbd8 	bl	200016a8 <HAL_GetTick>
20008ef8:	1b40      	subs	r0, r0, r5
20008efa:	42b8      	cmp	r0, r7
20008efc:	d869      	bhi.n	20008fd2 <HAL_RCC_DeInit+0x11e>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
20008efe:	68b3      	ldr	r3, [r6, #8]
20008f00:	f013 0f0c 	tst.w	r3, #12
20008f04:	d1f6      	bne.n	20008ef4 <HAL_RCC_DeInit+0x40>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20008f06:	f7f8 fbcf 	bl	200016a8 <HAL_GetTick>

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
20008f0a:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
20008f0c:	4604      	mov	r4, r0

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
20008f0e:	4d32      	ldr	r5, [pc, #200]	; (20008fd8 <HAL_RCC_DeInit+0x124>)
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
20008f10:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
20008f14:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
20008f16:	e004      	b.n	20008f22 <HAL_RCC_DeInit+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20008f18:	f7f8 fbc6 	bl	200016a8 <HAL_GetTick>
20008f1c:	1b00      	subs	r0, r0, r4
20008f1e:	2864      	cmp	r0, #100	; 0x64
20008f20:	d857      	bhi.n	20008fd2 <HAL_RCC_DeInit+0x11e>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
20008f22:	682b      	ldr	r3, [r5, #0]
20008f24:	0398      	lsls	r0, r3, #14
20008f26:	d4f7      	bmi.n	20008f18 <HAL_RCC_DeInit+0x64>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20008f28:	f7f8 fbbe 	bl	200016a8 <HAL_GetTick>

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
20008f2c:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
20008f2e:	4604      	mov	r4, r0

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
20008f30:	4e29      	ldr	r6, [pc, #164]	; (20008fd8 <HAL_RCC_DeInit+0x124>)
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
20008f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
20008f36:	602b      	str	r3, [r5, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
20008f38:	e004      	b.n	20008f44 <HAL_RCC_DeInit+0x90>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20008f3a:	f7f8 fbb5 	bl	200016a8 <HAL_GetTick>
20008f3e:	1b00      	subs	r0, r0, r4
20008f40:	2802      	cmp	r0, #2
20008f42:	d846      	bhi.n	20008fd2 <HAL_RCC_DeInit+0x11e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
20008f44:	6833      	ldr	r3, [r6, #0]
20008f46:	0199      	lsls	r1, r3, #6
20008f48:	d4f7      	bmi.n	20008f3a <HAL_RCC_DeInit+0x86>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20008f4a:	f7f8 fbad 	bl	200016a8 <HAL_GetTick>

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
20008f4e:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
20008f50:	4604      	mov	r4, r0

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20008f52:	4d21      	ldr	r5, [pc, #132]	; (20008fd8 <HAL_RCC_DeInit+0x124>)
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
20008f54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
20008f58:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20008f5a:	e004      	b.n	20008f66 <HAL_RCC_DeInit+0xb2>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20008f5c:	f7f8 fba4 	bl	200016a8 <HAL_GetTick>
20008f60:	1b00      	subs	r0, r0, r4
20008f62:	2864      	cmp	r0, #100	; 0x64
20008f64:	d835      	bhi.n	20008fd2 <HAL_RCC_DeInit+0x11e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20008f66:	682b      	ldr	r3, [r5, #0]
20008f68:	011a      	lsls	r2, r3, #4
20008f6a:	d4f7      	bmi.n	20008f5c <HAL_RCC_DeInit+0xa8>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20008f6c:	f7f8 fb9c 	bl	200016a8 <HAL_GetTick>

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
20008f70:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
20008f72:	4606      	mov	r6, r0

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
20008f74:	4c18      	ldr	r4, [pc, #96]	; (20008fd8 <HAL_RCC_DeInit+0x124>)
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
20008f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20008f7a:	602b      	str	r3, [r5, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
20008f7c:	e004      	b.n	20008f88 <HAL_RCC_DeInit+0xd4>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20008f7e:	f7f8 fb93 	bl	200016a8 <HAL_GetTick>
20008f82:	1b80      	subs	r0, r0, r6
20008f84:	2864      	cmp	r0, #100	; 0x64
20008f86:	d824      	bhi.n	20008fd2 <HAL_RCC_DeInit+0x11e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
20008f88:	6823      	ldr	r3, [r4, #0]
20008f8a:	009b      	lsls	r3, r3, #2
20008f8c:	d4f7      	bmi.n	20008f7e <HAL_RCC_DeInit+0xca>

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;

  /* Reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
20008f8e:	4b13      	ldr	r3, [pc, #76]	; (20008fdc <HAL_RCC_DeInit+0x128>)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
20008f90:	4a13      	ldr	r2, [pc, #76]	; (20008fe0 <HAL_RCC_DeInit+0x12c>)

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
20008f92:	4814      	ldr	r0, [pc, #80]	; (20008fe4 <HAL_RCC_DeInit+0x130>)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
20008f94:	6062      	str	r2, [r4, #4]
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
20008f96:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
20008f9a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
20008f9e:	68e3      	ldr	r3, [r4, #12]
  SystemCoreClock = HSI_VALUE;
20008fa0:	4a11      	ldr	r2, [pc, #68]	; (20008fe8 <HAL_RCC_DeInit+0x134>)
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
20008fa2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
  SystemCoreClock = HSI_VALUE;
20008fa6:	4911      	ldr	r1, [pc, #68]	; (20008fec <HAL_RCC_DeInit+0x138>)
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
20008fa8:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
20008faa:	68e3      	ldr	r3, [r4, #12]
20008fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
20008fb0:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
20008fb2:	6f63      	ldr	r3, [r4, #116]	; 0x74
20008fb4:	f023 0301 	bic.w	r3, r3, #1
20008fb8:	6763      	str	r3, [r4, #116]	; 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
20008fba:	6f63      	ldr	r3, [r4, #116]	; 0x74
20008fbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20008fc0:	6763      	str	r3, [r4, #116]	; 0x74
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
20008fc2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HSI_VALUE;
20008fc4:	6011      	str	r1, [r2, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
20008fc6:	f7f8 fb33 	bl	20001630 <HAL_InitTick>
      return HAL_TIMEOUT;
20008fca:	3800      	subs	r0, #0
20008fcc:	bf18      	it	ne
20008fce:	2001      	movne	r0, #1
  }
  else
  {
    return HAL_OK;
  }
}
20008fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
20008fd2:	2003      	movs	r0, #3
}
20008fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20008fd6:	bf00      	nop
20008fd8:	40023800 	.word	0x40023800
20008fdc:	24003000 	.word	0x24003000
20008fe0:	24003010 	.word	0x24003010
20008fe4:	20000220 	.word	0x20000220
20008fe8:	20000218 	.word	0x20000218
20008fec:	00f42400 	.word	0x00f42400

20008ff0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
20008ff0:	2800      	cmp	r0, #0
20008ff2:	f000 81c8 	beq.w	20009386 <HAL_RCC_OscConfig+0x396>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20008ff6:	6803      	ldr	r3, [r0, #0]
{
20008ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20008ffc:	07dd      	lsls	r5, r3, #31
{
20008ffe:	b082      	sub	sp, #8
20009000:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20009002:	d535      	bpl.n	20009070 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
20009004:	49ac      	ldr	r1, [pc, #688]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
20009006:	688a      	ldr	r2, [r1, #8]
20009008:	f002 020c 	and.w	r2, r2, #12
2000900c:	2a04      	cmp	r2, #4
2000900e:	f000 80e6 	beq.w	200091de <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20009012:	688a      	ldr	r2, [r1, #8]
20009014:	f002 020c 	and.w	r2, r2, #12
20009018:	2a08      	cmp	r2, #8
2000901a:	f000 80dc 	beq.w	200091d6 <HAL_RCC_OscConfig+0x1e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2000901e:	6863      	ldr	r3, [r4, #4]
20009020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20009024:	d010      	beq.n	20009048 <HAL_RCC_OscConfig+0x58>
20009026:	2b00      	cmp	r3, #0
20009028:	f000 8104 	beq.w	20009234 <HAL_RCC_OscConfig+0x244>
2000902c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20009030:	4ba1      	ldr	r3, [pc, #644]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
20009032:	681a      	ldr	r2, [r3, #0]
20009034:	f000 8197 	beq.w	20009366 <HAL_RCC_OscConfig+0x376>
20009038:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
2000903c:	601a      	str	r2, [r3, #0]
2000903e:	681a      	ldr	r2, [r3, #0]
20009040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
20009044:	601a      	str	r2, [r3, #0]
20009046:	e004      	b.n	20009052 <HAL_RCC_OscConfig+0x62>
20009048:	4a9b      	ldr	r2, [pc, #620]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
2000904a:	6813      	ldr	r3, [r2, #0]
2000904c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20009050:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20009052:	f7f8 fb29 	bl	200016a8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20009056:	4e98      	ldr	r6, [pc, #608]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
20009058:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000905a:	e005      	b.n	20009068 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2000905c:	f7f8 fb24 	bl	200016a8 <HAL_GetTick>
20009060:	1b40      	subs	r0, r0, r5
20009062:	2864      	cmp	r0, #100	; 0x64
20009064:	f200 80e2 	bhi.w	2000922c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20009068:	6833      	ldr	r3, [r6, #0]
2000906a:	039a      	lsls	r2, r3, #14
2000906c:	d5f6      	bpl.n	2000905c <HAL_RCC_OscConfig+0x6c>
2000906e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20009070:	079f      	lsls	r7, r3, #30
20009072:	d529      	bpl.n	200090c8 <HAL_RCC_OscConfig+0xd8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
20009074:	4a90      	ldr	r2, [pc, #576]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
20009076:	6891      	ldr	r1, [r2, #8]
20009078:	f011 0f0c 	tst.w	r1, #12
2000907c:	f000 8082 	beq.w	20009184 <HAL_RCC_OscConfig+0x194>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20009080:	6891      	ldr	r1, [r2, #8]
20009082:	f001 010c 	and.w	r1, r1, #12
20009086:	2908      	cmp	r1, #8
20009088:	d079      	beq.n	2000917e <HAL_RCC_OscConfig+0x18e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
2000908a:	68e3      	ldr	r3, [r4, #12]
2000908c:	2b00      	cmp	r3, #0
2000908e:	f000 8109 	beq.w	200092a4 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20009092:	4b89      	ldr	r3, [pc, #548]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
20009094:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20009096:	461e      	mov	r6, r3
        __HAL_RCC_HSI_ENABLE();
20009098:	f042 0201 	orr.w	r2, r2, #1
2000909c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
2000909e:	f7f8 fb03 	bl	200016a8 <HAL_GetTick>
200090a2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200090a4:	e005      	b.n	200090b2 <HAL_RCC_OscConfig+0xc2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
200090a6:	f7f8 faff 	bl	200016a8 <HAL_GetTick>
200090aa:	1b40      	subs	r0, r0, r5
200090ac:	2802      	cmp	r0, #2
200090ae:	f200 80bd 	bhi.w	2000922c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200090b2:	6833      	ldr	r3, [r6, #0]
200090b4:	0798      	lsls	r0, r3, #30
200090b6:	d5f6      	bpl.n	200090a6 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
200090b8:	6833      	ldr	r3, [r6, #0]
200090ba:	6922      	ldr	r2, [r4, #16]
200090bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
200090c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
200090c4:	6033      	str	r3, [r6, #0]
200090c6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
200090c8:	071a      	lsls	r2, r3, #28
200090ca:	d41f      	bmi.n	2000910c <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
200090cc:	075d      	lsls	r5, r3, #29
200090ce:	d535      	bpl.n	2000913c <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
200090d0:	4b79      	ldr	r3, [pc, #484]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
200090d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
200090d4:	00d0      	lsls	r0, r2, #3
200090d6:	d573      	bpl.n	200091c0 <HAL_RCC_OscConfig+0x1d0>
  FlagStatus pwrclkchanged = RESET;
200090d8:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
200090da:	4b78      	ldr	r3, [pc, #480]	; (200092bc <HAL_RCC_OscConfig+0x2cc>)
200090dc:	681a      	ldr	r2, [r3, #0]
200090de:	05d1      	lsls	r1, r2, #23
200090e0:	f140 8093 	bpl.w	2000920a <HAL_RCC_OscConfig+0x21a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
200090e4:	68a3      	ldr	r3, [r4, #8]
200090e6:	2b01      	cmp	r3, #1
200090e8:	f000 80f4 	beq.w	200092d4 <HAL_RCC_OscConfig+0x2e4>
200090ec:	2b00      	cmp	r3, #0
200090ee:	f000 80b8 	beq.w	20009262 <HAL_RCC_OscConfig+0x272>
200090f2:	2b05      	cmp	r3, #5
200090f4:	4b70      	ldr	r3, [pc, #448]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
200090f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
200090f8:	f000 813d 	beq.w	20009376 <HAL_RCC_OscConfig+0x386>
200090fc:	f022 0201 	bic.w	r2, r2, #1
20009100:	671a      	str	r2, [r3, #112]	; 0x70
20009102:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20009104:	f022 0204 	bic.w	r2, r2, #4
20009108:	671a      	str	r2, [r3, #112]	; 0x70
2000910a:	e0e8      	b.n	200092de <HAL_RCC_OscConfig+0x2ee>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
2000910c:	6963      	ldr	r3, [r4, #20]
2000910e:	2b00      	cmp	r3, #0
20009110:	d043      	beq.n	2000919a <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_LSI_ENABLE();
20009112:	4b69      	ldr	r3, [pc, #420]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
20009114:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20009116:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
20009118:	f042 0201 	orr.w	r2, r2, #1
2000911c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
2000911e:	f7f8 fac3 	bl	200016a8 <HAL_GetTick>
20009122:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20009124:	e004      	b.n	20009130 <HAL_RCC_OscConfig+0x140>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20009126:	f7f8 fabf 	bl	200016a8 <HAL_GetTick>
2000912a:	1b40      	subs	r0, r0, r5
2000912c:	2802      	cmp	r0, #2
2000912e:	d87d      	bhi.n	2000922c <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20009130:	6f73      	ldr	r3, [r6, #116]	; 0x74
20009132:	079b      	lsls	r3, r3, #30
20009134:	d5f7      	bpl.n	20009126 <HAL_RCC_OscConfig+0x136>
20009136:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20009138:	075d      	lsls	r5, r3, #29
2000913a:	d4c9      	bmi.n	200090d0 <HAL_RCC_OscConfig+0xe0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2000913c:	69a0      	ldr	r0, [r4, #24]
2000913e:	b1d0      	cbz	r0, 20009176 <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
20009140:	4b5d      	ldr	r3, [pc, #372]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
20009142:	689a      	ldr	r2, [r3, #8]
20009144:	f002 020c 	and.w	r2, r2, #12
20009148:	2a08      	cmp	r2, #8
2000914a:	f000 80db 	beq.w	20009304 <HAL_RCC_OscConfig+0x314>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000914e:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20009150:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20009152:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
20009154:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
20009158:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000915a:	f000 8116 	beq.w	2000938a <HAL_RCC_OscConfig+0x39a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000915e:	f7f8 faa3 	bl	200016a8 <HAL_GetTick>
20009162:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20009164:	e004      	b.n	20009170 <HAL_RCC_OscConfig+0x180>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20009166:	f7f8 fa9f 	bl	200016a8 <HAL_GetTick>
2000916a:	1b00      	subs	r0, r0, r4
2000916c:	2802      	cmp	r0, #2
2000916e:	d85d      	bhi.n	2000922c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20009170:	682b      	ldr	r3, [r5, #0]
20009172:	019b      	lsls	r3, r3, #6
20009174:	d4f7      	bmi.n	20009166 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
20009176:	2000      	movs	r0, #0
}
20009178:	b002      	add	sp, #8
2000917a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000917e:	6852      	ldr	r2, [r2, #4]
20009180:	0256      	lsls	r6, r2, #9
20009182:	d482      	bmi.n	2000908a <HAL_RCC_OscConfig+0x9a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20009184:	4a4c      	ldr	r2, [pc, #304]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
20009186:	6812      	ldr	r2, [r2, #0]
20009188:	0795      	lsls	r5, r2, #30
2000918a:	d532      	bpl.n	200091f2 <HAL_RCC_OscConfig+0x202>
2000918c:	68e2      	ldr	r2, [r4, #12]
2000918e:	2a01      	cmp	r2, #1
20009190:	d02f      	beq.n	200091f2 <HAL_RCC_OscConfig+0x202>
        return HAL_ERROR;
20009192:	2001      	movs	r0, #1
}
20009194:	b002      	add	sp, #8
20009196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
2000919a:	4b47      	ldr	r3, [pc, #284]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
2000919c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000919e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
200091a0:	f022 0201 	bic.w	r2, r2, #1
200091a4:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
200091a6:	f7f8 fa7f 	bl	200016a8 <HAL_GetTick>
200091aa:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200091ac:	e004      	b.n	200091b8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
200091ae:	f7f8 fa7b 	bl	200016a8 <HAL_GetTick>
200091b2:	1b40      	subs	r0, r0, r5
200091b4:	2802      	cmp	r0, #2
200091b6:	d839      	bhi.n	2000922c <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200091b8:	6f73      	ldr	r3, [r6, #116]	; 0x74
200091ba:	079f      	lsls	r7, r3, #30
200091bc:	d4f7      	bmi.n	200091ae <HAL_RCC_OscConfig+0x1be>
200091be:	e7ba      	b.n	20009136 <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_ENABLE();
200091c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
200091c2:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
200091c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
200091c8:	641a      	str	r2, [r3, #64]	; 0x40
200091ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200091cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200091d0:	9301      	str	r3, [sp, #4]
200091d2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
200091d4:	e781      	b.n	200090da <HAL_RCC_OscConfig+0xea>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200091d6:	684a      	ldr	r2, [r1, #4]
200091d8:	0250      	lsls	r0, r2, #9
200091da:	f57f af20 	bpl.w	2000901e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200091de:	4a36      	ldr	r2, [pc, #216]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
200091e0:	6812      	ldr	r2, [r2, #0]
200091e2:	0391      	lsls	r1, r2, #14
200091e4:	f57f af44 	bpl.w	20009070 <HAL_RCC_OscConfig+0x80>
200091e8:	6862      	ldr	r2, [r4, #4]
200091ea:	2a00      	cmp	r2, #0
200091ec:	f47f af40 	bne.w	20009070 <HAL_RCC_OscConfig+0x80>
200091f0:	e7cf      	b.n	20009192 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
200091f2:	4931      	ldr	r1, [pc, #196]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
200091f4:	6920      	ldr	r0, [r4, #16]
200091f6:	680a      	ldr	r2, [r1, #0]
200091f8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
200091fc:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
20009200:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20009202:	071a      	lsls	r2, r3, #28
20009204:	f57f af62 	bpl.w	200090cc <HAL_RCC_OscConfig+0xdc>
20009208:	e780      	b.n	2000910c <HAL_RCC_OscConfig+0x11c>
      PWR->CR1 |= PWR_CR1_DBP;
2000920a:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
2000920c:	461f      	mov	r7, r3
      PWR->CR1 |= PWR_CR1_DBP;
2000920e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20009212:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
20009214:	f7f8 fa48 	bl	200016a8 <HAL_GetTick>
20009218:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
2000921a:	683b      	ldr	r3, [r7, #0]
2000921c:	05da      	lsls	r2, r3, #23
2000921e:	f53f af61 	bmi.w	200090e4 <HAL_RCC_OscConfig+0xf4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20009222:	f7f8 fa41 	bl	200016a8 <HAL_GetTick>
20009226:	1b80      	subs	r0, r0, r6
20009228:	2864      	cmp	r0, #100	; 0x64
2000922a:	d9f6      	bls.n	2000921a <HAL_RCC_OscConfig+0x22a>
            return HAL_TIMEOUT;
2000922c:	2003      	movs	r0, #3
}
2000922e:	b002      	add	sp, #8
20009230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20009234:	4b20      	ldr	r3, [pc, #128]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
20009236:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20009238:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2000923a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
2000923e:	601a      	str	r2, [r3, #0]
20009240:	681a      	ldr	r2, [r3, #0]
20009242:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
20009246:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
20009248:	f7f8 fa2e 	bl	200016a8 <HAL_GetTick>
2000924c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000924e:	e004      	b.n	2000925a <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20009250:	f7f8 fa2a 	bl	200016a8 <HAL_GetTick>
20009254:	1b40      	subs	r0, r0, r5
20009256:	2864      	cmp	r0, #100	; 0x64
20009258:	d8e8      	bhi.n	2000922c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000925a:	6833      	ldr	r3, [r6, #0]
2000925c:	039b      	lsls	r3, r3, #14
2000925e:	d4f7      	bmi.n	20009250 <HAL_RCC_OscConfig+0x260>
20009260:	e705      	b.n	2000906e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20009262:	4b15      	ldr	r3, [pc, #84]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20009264:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20009268:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000926a:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2000926c:	f022 0201 	bic.w	r2, r2, #1
20009270:	671a      	str	r2, [r3, #112]	; 0x70
20009272:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20009274:	f022 0204 	bic.w	r2, r2, #4
20009278:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
2000927a:	f7f8 fa15 	bl	200016a8 <HAL_GetTick>
2000927e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20009280:	e004      	b.n	2000928c <HAL_RCC_OscConfig+0x29c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20009282:	f7f8 fa11 	bl	200016a8 <HAL_GetTick>
20009286:	1b80      	subs	r0, r0, r6
20009288:	4540      	cmp	r0, r8
2000928a:	d8cf      	bhi.n	2000922c <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000928c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
2000928e:	0798      	lsls	r0, r3, #30
20009290:	d4f7      	bmi.n	20009282 <HAL_RCC_OscConfig+0x292>
    if (pwrclkchanged == SET)
20009292:	2d00      	cmp	r5, #0
20009294:	f43f af52 	beq.w	2000913c <HAL_RCC_OscConfig+0x14c>
      __HAL_RCC_PWR_CLK_DISABLE();
20009298:	4a07      	ldr	r2, [pc, #28]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
2000929a:	6c13      	ldr	r3, [r2, #64]	; 0x40
2000929c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
200092a0:	6413      	str	r3, [r2, #64]	; 0x40
200092a2:	e74b      	b.n	2000913c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
200092a4:	4b04      	ldr	r3, [pc, #16]	; (200092b8 <HAL_RCC_OscConfig+0x2c8>)
200092a6:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
200092a8:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
200092aa:	f022 0201 	bic.w	r2, r2, #1
200092ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
200092b0:	f7f8 f9fa 	bl	200016a8 <HAL_GetTick>
200092b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
200092b6:	e008      	b.n	200092ca <HAL_RCC_OscConfig+0x2da>
200092b8:	40023800 	.word	0x40023800
200092bc:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
200092c0:	f7f8 f9f2 	bl	200016a8 <HAL_GetTick>
200092c4:	1b40      	subs	r0, r0, r5
200092c6:	2802      	cmp	r0, #2
200092c8:	d8b0      	bhi.n	2000922c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
200092ca:	6833      	ldr	r3, [r6, #0]
200092cc:	0799      	lsls	r1, r3, #30
200092ce:	d4f7      	bmi.n	200092c0 <HAL_RCC_OscConfig+0x2d0>
200092d0:	6823      	ldr	r3, [r4, #0]
200092d2:	e6f9      	b.n	200090c8 <HAL_RCC_OscConfig+0xd8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
200092d4:	4a46      	ldr	r2, [pc, #280]	; (200093f0 <HAL_RCC_OscConfig+0x400>)
200092d6:	6f13      	ldr	r3, [r2, #112]	; 0x70
200092d8:	f043 0301 	orr.w	r3, r3, #1
200092dc:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
200092de:	f7f8 f9e3 	bl	200016a8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200092e2:	4f43      	ldr	r7, [pc, #268]	; (200093f0 <HAL_RCC_OscConfig+0x400>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
200092e4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
200092e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200092ea:	e004      	b.n	200092f6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
200092ec:	f7f8 f9dc 	bl	200016a8 <HAL_GetTick>
200092f0:	1b80      	subs	r0, r0, r6
200092f2:	4540      	cmp	r0, r8
200092f4:	d89a      	bhi.n	2000922c <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200092f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
200092f8:	079b      	lsls	r3, r3, #30
200092fa:	d5f7      	bpl.n	200092ec <HAL_RCC_OscConfig+0x2fc>
    if (pwrclkchanged == SET)
200092fc:	2d00      	cmp	r5, #0
200092fe:	f43f af1d 	beq.w	2000913c <HAL_RCC_OscConfig+0x14c>
20009302:	e7c9      	b.n	20009298 <HAL_RCC_OscConfig+0x2a8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20009304:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
20009306:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20009308:	f43f af36 	beq.w	20009178 <HAL_RCC_OscConfig+0x188>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000930c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20009310:	69e1      	ldr	r1, [r4, #28]
20009312:	428b      	cmp	r3, r1
20009314:	f47f af3d 	bne.w	20009192 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
20009318:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000931c:	6a21      	ldr	r1, [r4, #32]
2000931e:	428b      	cmp	r3, r1
20009320:	f47f af37 	bne.w	20009192 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
20009324:	f647 73c0 	movw	r3, #32704	; 0x7fc0
20009328:	6a61      	ldr	r1, [r4, #36]	; 0x24
2000932a:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000932c:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
20009330:	f47f af2f 	bne.w	20009192 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
20009334:	6aa3      	ldr	r3, [r4, #40]	; 0x28
20009336:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
2000933a:	085b      	lsrs	r3, r3, #1
2000933c:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
2000933e:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
20009342:	f47f af26 	bne.w	20009192 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20009346:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
2000934a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
2000934c:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
20009350:	f47f af1f 	bne.w	20009192 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
20009354:	6b23      	ldr	r3, [r4, #48]	; 0x30
20009356:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
2000935a:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
2000935e:	bf14      	ite	ne
20009360:	2001      	movne	r0, #1
20009362:	2000      	moveq	r0, #0
20009364:	e708      	b.n	20009178 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20009366:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2000936a:	601a      	str	r2, [r3, #0]
2000936c:	681a      	ldr	r2, [r3, #0]
2000936e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
20009372:	601a      	str	r2, [r3, #0]
20009374:	e66d      	b.n	20009052 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20009376:	f042 0204 	orr.w	r2, r2, #4
2000937a:	671a      	str	r2, [r3, #112]	; 0x70
2000937c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2000937e:	f042 0201 	orr.w	r2, r2, #1
20009382:	671a      	str	r2, [r3, #112]	; 0x70
20009384:	e7ab      	b.n	200092de <HAL_RCC_OscConfig+0x2ee>
    return HAL_ERROR;
20009386:	2001      	movs	r0, #1
}
20009388:	4770      	bx	lr
        tickstart = HAL_GetTick();
2000938a:	f7f8 f98d 	bl	200016a8 <HAL_GetTick>
2000938e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20009390:	e005      	b.n	2000939e <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20009392:	f7f8 f989 	bl	200016a8 <HAL_GetTick>
20009396:	1b80      	subs	r0, r0, r6
20009398:	2802      	cmp	r0, #2
2000939a:	f63f af47 	bhi.w	2000922c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000939e:	682b      	ldr	r3, [r5, #0]
200093a0:	0199      	lsls	r1, r3, #6
200093a2:	d4f6      	bmi.n	20009392 <HAL_RCC_OscConfig+0x3a2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
200093a4:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
200093a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
200093aa:	4313      	orrs	r3, r2
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200093ac:	4e10      	ldr	r6, [pc, #64]	; (200093f0 <HAL_RCC_OscConfig+0x400>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
200093ae:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
200093b2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
200093b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
200093b8:	0852      	lsrs	r2, r2, #1
200093ba:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
200093be:	3a01      	subs	r2, #1
200093c0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
200093c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
200093c8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
200093ca:	682b      	ldr	r3, [r5, #0]
200093cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
200093d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
200093d2:	f7f8 f969 	bl	200016a8 <HAL_GetTick>
200093d6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200093d8:	e005      	b.n	200093e6 <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
200093da:	f7f8 f965 	bl	200016a8 <HAL_GetTick>
200093de:	1b00      	subs	r0, r0, r4
200093e0:	2802      	cmp	r0, #2
200093e2:	f63f af23 	bhi.w	2000922c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200093e6:	6833      	ldr	r3, [r6, #0]
200093e8:	019a      	lsls	r2, r3, #6
200093ea:	d5f6      	bpl.n	200093da <HAL_RCC_OscConfig+0x3ea>
200093ec:	e6c3      	b.n	20009176 <HAL_RCC_OscConfig+0x186>
200093ee:	bf00      	nop
200093f0:	40023800 	.word	0x40023800

200093f4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
200093f4:	2800      	cmp	r0, #0
200093f6:	f000 80b4 	beq.w	20009562 <HAL_RCC_ClockConfig+0x16e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
200093fa:	4a61      	ldr	r2, [pc, #388]	; (20009580 <HAL_RCC_ClockConfig+0x18c>)
200093fc:	6813      	ldr	r3, [r2, #0]
200093fe:	f003 030f 	and.w	r3, r3, #15
20009402:	428b      	cmp	r3, r1
{
20009404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20009408:	4604      	mov	r4, r0
2000940a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2000940c:	d20c      	bcs.n	20009428 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000940e:	6813      	ldr	r3, [r2, #0]
20009410:	f023 030f 	bic.w	r3, r3, #15
20009414:	430b      	orrs	r3, r1
20009416:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
20009418:	6813      	ldr	r3, [r2, #0]
2000941a:	f003 030f 	and.w	r3, r3, #15
2000941e:	428b      	cmp	r3, r1
20009420:	d002      	beq.n	20009428 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
20009422:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
20009424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20009428:	6823      	ldr	r3, [r4, #0]
2000942a:	0798      	lsls	r0, r3, #30
2000942c:	d514      	bpl.n	20009458 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000942e:	0759      	lsls	r1, r3, #29
20009430:	d504      	bpl.n	2000943c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20009432:	4954      	ldr	r1, [pc, #336]	; (20009584 <HAL_RCC_ClockConfig+0x190>)
20009434:	688a      	ldr	r2, [r1, #8]
20009436:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
2000943a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000943c:	071a      	lsls	r2, r3, #28
2000943e:	d504      	bpl.n	2000944a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20009440:	4950      	ldr	r1, [pc, #320]	; (20009584 <HAL_RCC_ClockConfig+0x190>)
20009442:	688a      	ldr	r2, [r1, #8]
20009444:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
20009448:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2000944a:	494e      	ldr	r1, [pc, #312]	; (20009584 <HAL_RCC_ClockConfig+0x190>)
2000944c:	68a0      	ldr	r0, [r4, #8]
2000944e:	688a      	ldr	r2, [r1, #8]
20009450:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
20009454:	4302      	orrs	r2, r0
20009456:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20009458:	07df      	lsls	r7, r3, #31
2000945a:	d521      	bpl.n	200094a0 <HAL_RCC_ClockConfig+0xac>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2000945c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000945e:	4b49      	ldr	r3, [pc, #292]	; (20009584 <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20009460:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20009462:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20009464:	d07f      	beq.n	20009566 <HAL_RCC_ClockConfig+0x172>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
20009466:	2a02      	cmp	r2, #2
20009468:	d078      	beq.n	2000955c <HAL_RCC_ClockConfig+0x168>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000946a:	0799      	lsls	r1, r3, #30
2000946c:	d5d9      	bpl.n	20009422 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000946e:	4945      	ldr	r1, [pc, #276]	; (20009584 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20009470:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20009474:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20009476:	460f      	mov	r7, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20009478:	f023 0303 	bic.w	r3, r3, #3
2000947c:	4313      	orrs	r3, r2
2000947e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
20009480:	f7f8 f912 	bl	200016a8 <HAL_GetTick>
20009484:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20009486:	e004      	b.n	20009492 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20009488:	f7f8 f90e 	bl	200016a8 <HAL_GetTick>
2000948c:	1b80      	subs	r0, r0, r6
2000948e:	4540      	cmp	r0, r8
20009490:	d86c      	bhi.n	2000956c <HAL_RCC_ClockConfig+0x178>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20009492:	68bb      	ldr	r3, [r7, #8]
20009494:	6862      	ldr	r2, [r4, #4]
20009496:	f003 030c 	and.w	r3, r3, #12
2000949a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
2000949e:	d1f3      	bne.n	20009488 <HAL_RCC_ClockConfig+0x94>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
200094a0:	4a37      	ldr	r2, [pc, #220]	; (20009580 <HAL_RCC_ClockConfig+0x18c>)
200094a2:	6813      	ldr	r3, [r2, #0]
200094a4:	f003 030f 	and.w	r3, r3, #15
200094a8:	42ab      	cmp	r3, r5
200094aa:	d909      	bls.n	200094c0 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
200094ac:	6813      	ldr	r3, [r2, #0]
200094ae:	f023 030f 	bic.w	r3, r3, #15
200094b2:	432b      	orrs	r3, r5
200094b4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
200094b6:	6813      	ldr	r3, [r2, #0]
200094b8:	f003 030f 	and.w	r3, r3, #15
200094bc:	42ab      	cmp	r3, r5
200094be:	d1b0      	bne.n	20009422 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
200094c0:	6823      	ldr	r3, [r4, #0]
200094c2:	075a      	lsls	r2, r3, #29
200094c4:	d506      	bpl.n	200094d4 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
200094c6:	492f      	ldr	r1, [pc, #188]	; (20009584 <HAL_RCC_ClockConfig+0x190>)
200094c8:	68e0      	ldr	r0, [r4, #12]
200094ca:	688a      	ldr	r2, [r1, #8]
200094cc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
200094d0:	4302      	orrs	r2, r0
200094d2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
200094d4:	071b      	lsls	r3, r3, #28
200094d6:	d431      	bmi.n	2000953c <HAL_RCC_ClockConfig+0x148>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
200094d8:	492a      	ldr	r1, [pc, #168]	; (20009584 <HAL_RCC_ClockConfig+0x190>)
200094da:	688b      	ldr	r3, [r1, #8]
200094dc:	f003 030c 	and.w	r3, r3, #12
200094e0:	2b04      	cmp	r3, #4
200094e2:	d039      	beq.n	20009558 <HAL_RCC_ClockConfig+0x164>
200094e4:	2b08      	cmp	r3, #8
200094e6:	d118      	bne.n	2000951a <HAL_RCC_ClockConfig+0x126>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200094e8:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
200094ea:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200094ec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
200094f0:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
200094f2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
200094f6:	d03b      	beq.n	20009570 <HAL_RCC_ClockConfig+0x17c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
200094f8:	4823      	ldr	r0, [pc, #140]	; (20009588 <HAL_RCC_ClockConfig+0x194>)
200094fa:	f3c1 1188 	ubfx	r1, r1, #6, #9
200094fe:	2300      	movs	r3, #0
20009500:	fba1 0100 	umull	r0, r1, r1, r0
20009504:	f7f7 faa2 	bl	20000a4c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
20009508:	4b1e      	ldr	r3, [pc, #120]	; (20009584 <HAL_RCC_ClockConfig+0x190>)
2000950a:	685b      	ldr	r3, [r3, #4]
2000950c:	f3c3 4301 	ubfx	r3, r3, #16, #2
20009510:	3301      	adds	r3, #1
20009512:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
20009514:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
20009518:	e000      	b.n	2000951c <HAL_RCC_ClockConfig+0x128>
      sysclockfreq = HSI_VALUE;
2000951a:	4b1c      	ldr	r3, [pc, #112]	; (2000958c <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
2000951c:	4a19      	ldr	r2, [pc, #100]	; (20009584 <HAL_RCC_ClockConfig+0x190>)
2000951e:	4c1c      	ldr	r4, [pc, #112]	; (20009590 <HAL_RCC_ClockConfig+0x19c>)
20009520:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
20009522:	481c      	ldr	r0, [pc, #112]	; (20009594 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
20009524:	f3c2 1203 	ubfx	r2, r2, #4, #4
20009528:	491b      	ldr	r1, [pc, #108]	; (20009598 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
2000952a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
2000952c:	5ca2      	ldrb	r2, [r4, r2]
2000952e:	40d3      	lsrs	r3, r2
20009530:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
20009532:	f7f8 f87d 	bl	20001630 <HAL_InitTick>
  return HAL_OK;
20009536:	2000      	movs	r0, #0
}
20009538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
2000953c:	4a11      	ldr	r2, [pc, #68]	; (20009584 <HAL_RCC_ClockConfig+0x190>)
2000953e:	6921      	ldr	r1, [r4, #16]
20009540:	6893      	ldr	r3, [r2, #8]
20009542:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
20009546:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
2000954a:	490e      	ldr	r1, [pc, #56]	; (20009584 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
2000954c:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
2000954e:	688b      	ldr	r3, [r1, #8]
20009550:	f003 030c 	and.w	r3, r3, #12
20009554:	2b04      	cmp	r3, #4
20009556:	d1c5      	bne.n	200094e4 <HAL_RCC_ClockConfig+0xf0>
20009558:	4b0b      	ldr	r3, [pc, #44]	; (20009588 <HAL_RCC_ClockConfig+0x194>)
2000955a:	e7df      	b.n	2000951c <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000955c:	0198      	lsls	r0, r3, #6
2000955e:	d486      	bmi.n	2000946e <HAL_RCC_ClockConfig+0x7a>
20009560:	e75f      	b.n	20009422 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
20009562:	2001      	movs	r0, #1
}
20009564:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20009566:	039e      	lsls	r6, r3, #14
20009568:	d481      	bmi.n	2000946e <HAL_RCC_ClockConfig+0x7a>
2000956a:	e75a      	b.n	20009422 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
2000956c:	2003      	movs	r0, #3
2000956e:	e759      	b.n	20009424 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20009570:	4806      	ldr	r0, [pc, #24]	; (2000958c <HAL_RCC_ClockConfig+0x198>)
20009572:	f3c1 1188 	ubfx	r1, r1, #6, #9
20009576:	fba1 0100 	umull	r0, r1, r1, r0
2000957a:	f7f7 fa67 	bl	20000a4c <__aeabi_uldivmod>
2000957e:	e7c3      	b.n	20009508 <HAL_RCC_ClockConfig+0x114>
20009580:	40023c00 	.word	0x40023c00
20009584:	40023800 	.word	0x40023800
20009588:	017d7840 	.word	0x017d7840
2000958c:	00f42400 	.word	0x00f42400
20009590:	2000f9f8 	.word	0x2000f9f8
20009594:	20000220 	.word	0x20000220
20009598:	20000218 	.word	0x20000218

2000959c <HAL_RCC_MCOConfig>:
{
2000959c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
200095a0:	460d      	mov	r5, r1
200095a2:	b088      	sub	sp, #32
200095a4:	4614      	mov	r4, r2
  if (RCC_MCOx == RCC_MCO1)
200095a6:	bb10      	cbnz	r0, 200095ee <HAL_RCC_MCOConfig+0x52>
    MCO1_CLK_ENABLE();
200095a8:	4e24      	ldr	r6, [pc, #144]	; (2000963c <HAL_RCC_MCOConfig+0xa0>)
200095aa:	4603      	mov	r3, r0
    GPIO_InitStruct.Pin = MCO1_PIN;
200095ac:	f44f 7880 	mov.w	r8, #256	; 0x100
200095b0:	f04f 0902 	mov.w	r9, #2
    MCO1_CLK_ENABLE();
200095b4:	6b32      	ldr	r2, [r6, #48]	; 0x30
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
200095b6:	a902      	add	r1, sp, #8
200095b8:	4821      	ldr	r0, [pc, #132]	; (20009640 <HAL_RCC_MCOConfig+0xa4>)
    MCO1_CLK_ENABLE();
200095ba:	f042 0201 	orr.w	r2, r2, #1
200095be:	6332      	str	r2, [r6, #48]	; 0x30
200095c0:	6b32      	ldr	r2, [r6, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
200095c2:	9306      	str	r3, [sp, #24]
    MCO1_CLK_ENABLE();
200095c4:	f002 0201 	and.w	r2, r2, #1
200095c8:	9200      	str	r2, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
200095ca:	2200      	movs	r2, #0
    MCO1_CLK_ENABLE();
200095cc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
200095ce:	2303      	movs	r3, #3
200095d0:	e9cd 8902 	strd	r8, r9, [sp, #8]
200095d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
200095d8:	f7fa f8ec 	bl	200037b4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
200095dc:	68b2      	ldr	r2, [r6, #8]
200095de:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000
200095e2:	432a      	orrs	r2, r5
200095e4:	4322      	orrs	r2, r4
200095e6:	60b2      	str	r2, [r6, #8]
}
200095e8:	b008      	add	sp, #32
200095ea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MCO2_CLK_ENABLE();
200095ee:	4e13      	ldr	r6, [pc, #76]	; (2000963c <HAL_RCC_MCOConfig+0xa0>)
    GPIO_InitStruct.Pin = MCO2_PIN;
200095f0:	f44f 7000 	mov.w	r0, #512	; 0x200
200095f4:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
200095f6:	2200      	movs	r2, #0
    MCO2_CLK_ENABLE();
200095f8:	6b33      	ldr	r3, [r6, #48]	; 0x30
    GPIO_InitStruct.Pin = MCO2_PIN;
200095fa:	f04f 0800 	mov.w	r8, #0
200095fe:	f04f 0903 	mov.w	r9, #3
    MCO2_CLK_ENABLE();
20009602:	f043 0304 	orr.w	r3, r3, #4
20009606:	6333      	str	r3, [r6, #48]	; 0x30
20009608:	6b33      	ldr	r3, [r6, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
2000960a:	9206      	str	r2, [sp, #24]
    MCO2_CLK_ENABLE();
2000960c:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
20009610:	e9cd 0102 	strd	r0, r1, [sp, #8]
    MCO2_CLK_ENABLE();
20009614:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
20009616:	a902      	add	r1, sp, #8
20009618:	480a      	ldr	r0, [pc, #40]	; (20009644 <HAL_RCC_MCOConfig+0xa8>)
    MCO2_CLK_ENABLE();
2000961a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
2000961c:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
20009620:	f7fa f8c8 	bl	200037b4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
20009624:	68b3      	ldr	r3, [r6, #8]
20009626:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
2000962a:	ea43 0105 	orr.w	r1, r3, r5
2000962e:	ea41 01c4 	orr.w	r1, r1, r4, lsl #3
20009632:	60b1      	str	r1, [r6, #8]
}
20009634:	b008      	add	sp, #32
20009636:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
2000963a:	bf00      	nop
2000963c:	40023800 	.word	0x40023800
20009640:	40020000 	.word	0x40020000
20009644:	40020800 	.word	0x40020800

20009648 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON);
20009648:	4a02      	ldr	r2, [pc, #8]	; (20009654 <HAL_RCC_EnableCSS+0xc>)
2000964a:	6813      	ldr	r3, [r2, #0]
2000964c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
20009650:	6013      	str	r3, [r2, #0]
}
20009652:	4770      	bx	lr
20009654:	40023800 	.word	0x40023800

20009658 <HAL_RCC_DisableCSS>:
  CLEAR_BIT(RCC->CR, RCC_CR_CSSON);
20009658:	4a02      	ldr	r2, [pc, #8]	; (20009664 <HAL_RCC_DisableCSS+0xc>)
2000965a:	6813      	ldr	r3, [r2, #0]
2000965c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
20009660:	6013      	str	r3, [r2, #0]
}
20009662:	4770      	bx	lr
20009664:	40023800 	.word	0x40023800

20009668 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
20009668:	4916      	ldr	r1, [pc, #88]	; (200096c4 <HAL_RCC_GetSysClockFreq+0x5c>)
{
2000966a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
2000966c:	688b      	ldr	r3, [r1, #8]
2000966e:	f003 030c 	and.w	r3, r3, #12
20009672:	2b04      	cmp	r3, #4
20009674:	d01b      	beq.n	200096ae <HAL_RCC_GetSysClockFreq+0x46>
20009676:	2b08      	cmp	r3, #8
20009678:	d117      	bne.n	200096aa <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000967a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
2000967c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000967e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20009682:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
20009684:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
20009688:	d113      	bne.n	200096b2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000968a:	480f      	ldr	r0, [pc, #60]	; (200096c8 <HAL_RCC_GetSysClockFreq+0x60>)
2000968c:	f3c1 1188 	ubfx	r1, r1, #6, #9
20009690:	fba1 0100 	umull	r0, r1, r1, r0
20009694:	f7f7 f9da 	bl	20000a4c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
20009698:	4b0a      	ldr	r3, [pc, #40]	; (200096c4 <HAL_RCC_GetSysClockFreq+0x5c>)
2000969a:	685b      	ldr	r3, [r3, #4]
2000969c:	f3c3 4301 	ubfx	r3, r3, #16, #2
200096a0:	3301      	adds	r3, #1
200096a2:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
200096a4:	fbb0 f0f3 	udiv	r0, r0, r3
}
200096a8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
200096aa:	4807      	ldr	r0, [pc, #28]	; (200096c8 <HAL_RCC_GetSysClockFreq+0x60>)
}
200096ac:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
200096ae:	4807      	ldr	r0, [pc, #28]	; (200096cc <HAL_RCC_GetSysClockFreq+0x64>)
}
200096b0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
200096b2:	4806      	ldr	r0, [pc, #24]	; (200096cc <HAL_RCC_GetSysClockFreq+0x64>)
200096b4:	f3c1 1188 	ubfx	r1, r1, #6, #9
200096b8:	2300      	movs	r3, #0
200096ba:	fba1 0100 	umull	r0, r1, r1, r0
200096be:	f7f7 f9c5 	bl	20000a4c <__aeabi_uldivmod>
200096c2:	e7e9      	b.n	20009698 <HAL_RCC_GetSysClockFreq+0x30>
200096c4:	40023800 	.word	0x40023800
200096c8:	00f42400 	.word	0x00f42400
200096cc:	017d7840 	.word	0x017d7840

200096d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
200096d0:	4b01      	ldr	r3, [pc, #4]	; (200096d8 <HAL_RCC_GetHCLKFreq+0x8>)
}
200096d2:	6818      	ldr	r0, [r3, #0]
200096d4:	4770      	bx	lr
200096d6:	bf00      	nop
200096d8:	20000218 	.word	0x20000218

200096dc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
200096dc:	4b04      	ldr	r3, [pc, #16]	; (200096f0 <HAL_RCC_GetPCLK1Freq+0x14>)
200096de:	4a05      	ldr	r2, [pc, #20]	; (200096f4 <HAL_RCC_GetPCLK1Freq+0x18>)
200096e0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
200096e2:	4905      	ldr	r1, [pc, #20]	; (200096f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
200096e4:	f3c3 2382 	ubfx	r3, r3, #10, #3
200096e8:	6808      	ldr	r0, [r1, #0]
200096ea:	5cd3      	ldrb	r3, [r2, r3]
}
200096ec:	40d8      	lsrs	r0, r3
200096ee:	4770      	bx	lr
200096f0:	40023800 	.word	0x40023800
200096f4:	2000fa08 	.word	0x2000fa08
200096f8:	20000218 	.word	0x20000218

200096fc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
200096fc:	4b04      	ldr	r3, [pc, #16]	; (20009710 <HAL_RCC_GetPCLK2Freq+0x14>)
200096fe:	4a05      	ldr	r2, [pc, #20]	; (20009714 <HAL_RCC_GetPCLK2Freq+0x18>)
20009700:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
20009702:	4905      	ldr	r1, [pc, #20]	; (20009718 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
20009704:	f3c3 3342 	ubfx	r3, r3, #13, #3
20009708:	6808      	ldr	r0, [r1, #0]
2000970a:	5cd3      	ldrb	r3, [r2, r3]
}
2000970c:	40d8      	lsrs	r0, r3
2000970e:	4770      	bx	lr
20009710:	40023800 	.word	0x40023800
20009714:	2000fa08 	.word	0x2000fa08
20009718:	20000218 	.word	0x20000218

2000971c <HAL_RCC_GetOscConfig>:
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
2000971c:	220f      	movs	r2, #15

  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
2000971e:	4b29      	ldr	r3, [pc, #164]	; (200097c4 <HAL_RCC_GetOscConfig+0xa8>)
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
20009720:	6002      	str	r2, [r0, #0]
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
20009722:	681a      	ldr	r2, [r3, #0]
20009724:	0351      	lsls	r1, r2, #13
20009726:	d53e      	bpl.n	200097a6 <HAL_RCC_GetOscConfig+0x8a>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
20009728:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
2000972c:	6043      	str	r3, [r0, #4]
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
2000972e:	4b25      	ldr	r3, [pc, #148]	; (200097c4 <HAL_RCC_GetOscConfig+0xa8>)
20009730:	681a      	ldr	r2, [r3, #0]
20009732:	f002 0201 	and.w	r2, r2, #1
20009736:	60c2      	str	r2, [r0, #12]
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
20009738:	681a      	ldr	r2, [r3, #0]
2000973a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
2000973e:	6102      	str	r2, [r0, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
20009740:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20009742:	0752      	lsls	r2, r2, #29
20009744:	d537      	bpl.n	200097b6 <HAL_RCC_GetOscConfig+0x9a>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
20009746:	2305      	movs	r3, #5
20009748:	6083      	str	r3, [r0, #8]
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
2000974a:	4b1e      	ldr	r3, [pc, #120]	; (200097c4 <HAL_RCC_GetOscConfig+0xa8>)
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000974c:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
20009750:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20009752:	f002 0201 	and.w	r2, r2, #1
20009756:	6142      	str	r2, [r0, #20]
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
20009758:	681a      	ldr	r2, [r3, #0]
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
2000975a:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
2000975e:	bf14      	ite	ne
20009760:	2202      	movne	r2, #2
20009762:	2201      	moveq	r2, #1
20009764:	6182      	str	r2, [r0, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
20009766:	685a      	ldr	r2, [r3, #4]
20009768:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
2000976c:	61c2      	str	r2, [r0, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
2000976e:	685a      	ldr	r2, [r3, #4]
20009770:	f002 023f 	and.w	r2, r2, #63	; 0x3f
20009774:	6202      	str	r2, [r0, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
20009776:	685a      	ldr	r2, [r3, #4]
20009778:	f3c2 1288 	ubfx	r2, r2, #6, #9
2000977c:	6242      	str	r2, [r0, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1) >> RCC_PLLCFGR_PLLP_Pos);
2000977e:	685a      	ldr	r2, [r3, #4]
20009780:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
20009784:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
20009788:	0bd2      	lsrs	r2, r2, #15
2000978a:	6282      	str	r2, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
2000978c:	685a      	ldr	r2, [r3, #4]
2000978e:	f3c2 6203 	ubfx	r2, r2, #24, #4
20009792:	62c2      	str	r2, [r0, #44]	; 0x2c
#if defined (RCC_PLLCFGR_PLLR)
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
20009794:	685b      	ldr	r3, [r3, #4]
20009796:	fa91 f2a1 	rbit	r2, r1
2000979a:	fab2 f282 	clz	r2, r2
2000979e:	400b      	ands	r3, r1
200097a0:	40d3      	lsrs	r3, r2
200097a2:	6303      	str	r3, [r0, #48]	; 0x30
#endif
}
200097a4:	4770      	bx	lr
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
200097a6:	681b      	ldr	r3, [r3, #0]
200097a8:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
200097ac:	bf18      	it	ne
200097ae:	f44f 3380 	movne.w	r3, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
200097b2:	6043      	str	r3, [r0, #4]
200097b4:	e7bb      	b.n	2000972e <HAL_RCC_GetOscConfig+0x12>
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
200097b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200097b8:	f013 0301 	ands.w	r3, r3, #1
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
200097bc:	bf18      	it	ne
200097be:	2301      	movne	r3, #1
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
200097c0:	6083      	str	r3, [r0, #8]
200097c2:	e7c2      	b.n	2000974a <HAL_RCC_GetOscConfig+0x2e>
200097c4:	40023800 	.word	0x40023800

200097c8 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
200097c8:	4b0e      	ldr	r3, [pc, #56]	; (20009804 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
200097ca:	220f      	movs	r2, #15
200097cc:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
200097ce:	689a      	ldr	r2, [r3, #8]
200097d0:	f002 0203 	and.w	r2, r2, #3
200097d4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
200097d6:	689a      	ldr	r2, [r3, #8]
200097d8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
200097dc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
200097de:	689a      	ldr	r2, [r3, #8]
200097e0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
200097e4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
200097e6:	689b      	ldr	r3, [r3, #8]
200097e8:	08db      	lsrs	r3, r3, #3
{
200097ea:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
200097ec:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
200097f0:	4c05      	ldr	r4, [pc, #20]	; (20009808 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
200097f2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
200097f4:	6823      	ldr	r3, [r4, #0]
}
200097f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
200097fa:	f003 030f 	and.w	r3, r3, #15
200097fe:	600b      	str	r3, [r1, #0]
}
20009800:	4770      	bx	lr
20009802:	bf00      	nop
20009804:	40023800 	.word	0x40023800
20009808:	40023c00 	.word	0x40023c00

2000980c <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
2000980c:	4770      	bx	lr
2000980e:	bf00      	nop

20009810 <HAL_RCC_NMI_IRQHandler>:
{
20009810:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
20009812:	4b05      	ldr	r3, [pc, #20]	; (20009828 <HAL_RCC_NMI_IRQHandler+0x18>)
20009814:	68db      	ldr	r3, [r3, #12]
20009816:	061b      	lsls	r3, r3, #24
20009818:	d400      	bmi.n	2000981c <HAL_RCC_NMI_IRQHandler+0xc>
}
2000981a:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
2000981c:	f7ff fff6 	bl	2000980c <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
20009820:	4b02      	ldr	r3, [pc, #8]	; (2000982c <HAL_RCC_NMI_IRQHandler+0x1c>)
20009822:	2280      	movs	r2, #128	; 0x80
20009824:	701a      	strb	r2, [r3, #0]
}
20009826:	bd08      	pop	{r3, pc}
20009828:	40023800 	.word	0x40023800
2000982c:	4002380e 	.word	0x4002380e

20009830 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
20009830:	6803      	ldr	r3, [r0, #0]
{
20009832:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
20009836:	f013 0601 	ands.w	r6, r3, #1
{
2000983a:	b083      	sub	sp, #12
2000983c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
2000983e:	d00b      	beq.n	20009858 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
20009840:	4abb      	ldr	r2, [pc, #748]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009842:	6891      	ldr	r1, [r2, #8]
20009844:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
20009848:	6091      	str	r1, [r2, #8]
2000984a:	6b40      	ldr	r0, [r0, #52]	; 0x34
2000984c:	6891      	ldr	r1, [r2, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
2000984e:	fab0 f680 	clz	r6, r0
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
20009852:	4301      	orrs	r1, r0
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
20009854:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
20009856:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
20009858:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
2000985c:	d010      	beq.n	20009880 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2000985e:	49b4      	ldr	r1, [pc, #720]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009860:	6be5      	ldr	r5, [r4, #60]	; 0x3c
20009862:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
20009866:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2000986a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
2000986e:	ea42 0205 	orr.w	r2, r2, r5
20009872:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
20009876:	f000 823d 	beq.w	20009cf4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
2000987a:	fab5 f585 	clz	r5, r5
2000987e:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
20009880:	02df      	lsls	r7, r3, #11
20009882:	d510      	bpl.n	200098a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
20009884:	48aa      	ldr	r0, [pc, #680]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009886:	6c21      	ldr	r1, [r4, #64]	; 0x40
20009888:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
2000988c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
20009890:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
20009894:	ea42 0201 	orr.w	r2, r2, r1
20009898:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
2000989c:	f000 822d 	beq.w	20009cfa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
200098a0:	2900      	cmp	r1, #0
200098a2:	bf08      	it	eq
200098a4:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
200098a6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200098aa:	bf18      	it	ne
200098ac:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
200098ae:	0698      	lsls	r0, r3, #26
200098b0:	f100 81da 	bmi.w	20009c68 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
200098b4:	06d8      	lsls	r0, r3, #27
200098b6:	d50c      	bpl.n	200098d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
200098b8:	4a9d      	ldr	r2, [pc, #628]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
200098ba:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
200098be:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
200098c2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
200098c6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
200098ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
200098cc:	4301      	orrs	r1, r0
200098ce:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
200098d2:	0459      	lsls	r1, r3, #17
200098d4:	d508      	bpl.n	200098e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
200098d6:	4996      	ldr	r1, [pc, #600]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
200098d8:	6e60      	ldr	r0, [r4, #100]	; 0x64
200098da:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
200098de:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
200098e2:	4302      	orrs	r2, r0
200098e4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
200098e8:	041a      	lsls	r2, r3, #16
200098ea:	d508      	bpl.n	200098fe <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
200098ec:	4990      	ldr	r1, [pc, #576]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
200098ee:	6ea0      	ldr	r0, [r4, #104]	; 0x68
200098f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
200098f4:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
200098f8:	4302      	orrs	r2, r0
200098fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
200098fe:	03df      	lsls	r7, r3, #15
20009900:	d508      	bpl.n	20009914 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
20009902:	498b      	ldr	r1, [pc, #556]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009904:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
20009906:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
2000990a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
2000990e:	4302      	orrs	r2, r0
20009910:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
20009914:	0398      	lsls	r0, r3, #14
20009916:	d508      	bpl.n	2000992a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
20009918:	4985      	ldr	r1, [pc, #532]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
2000991a:	6f20      	ldr	r0, [r4, #112]	; 0x70
2000991c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
20009920:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
20009924:	4302      	orrs	r2, r0
20009926:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
2000992a:	0659      	lsls	r1, r3, #25
2000992c:	d508      	bpl.n	20009940 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
2000992e:	4980      	ldr	r1, [pc, #512]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009930:	6c60      	ldr	r0, [r4, #68]	; 0x44
20009932:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
20009936:	f022 0203 	bic.w	r2, r2, #3
2000993a:	4302      	orrs	r2, r0
2000993c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
20009940:	061a      	lsls	r2, r3, #24
20009942:	d508      	bpl.n	20009956 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
20009944:	497a      	ldr	r1, [pc, #488]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009946:	6ca0      	ldr	r0, [r4, #72]	; 0x48
20009948:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
2000994c:	f022 020c 	bic.w	r2, r2, #12
20009950:	4302      	orrs	r2, r0
20009952:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
20009956:	05df      	lsls	r7, r3, #23
20009958:	d508      	bpl.n	2000996c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
2000995a:	4975      	ldr	r1, [pc, #468]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
2000995c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
2000995e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
20009962:	f022 0230 	bic.w	r2, r2, #48	; 0x30
20009966:	4302      	orrs	r2, r0
20009968:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
2000996c:	0598      	lsls	r0, r3, #22
2000996e:	d508      	bpl.n	20009982 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
20009970:	496f      	ldr	r1, [pc, #444]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009972:	6d20      	ldr	r0, [r4, #80]	; 0x50
20009974:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
20009978:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
2000997c:	4302      	orrs	r2, r0
2000997e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
20009982:	0559      	lsls	r1, r3, #21
20009984:	d508      	bpl.n	20009998 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
20009986:	496a      	ldr	r1, [pc, #424]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009988:	6d60      	ldr	r0, [r4, #84]	; 0x54
2000998a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
2000998e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
20009992:	4302      	orrs	r2, r0
20009994:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
20009998:	051a      	lsls	r2, r3, #20
2000999a:	d508      	bpl.n	200099ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
2000999c:	4964      	ldr	r1, [pc, #400]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
2000999e:	6da0      	ldr	r0, [r4, #88]	; 0x58
200099a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
200099a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
200099a8:	4302      	orrs	r2, r0
200099aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
200099ae:	04df      	lsls	r7, r3, #19
200099b0:	d508      	bpl.n	200099c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
200099b2:	495f      	ldr	r1, [pc, #380]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
200099b4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
200099b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
200099ba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
200099be:	4302      	orrs	r2, r0
200099c0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
200099c4:	0498      	lsls	r0, r3, #18
200099c6:	d508      	bpl.n	200099da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
200099c8:	4959      	ldr	r1, [pc, #356]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
200099ca:	6e20      	ldr	r0, [r4, #96]	; 0x60
200099cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
200099d0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
200099d4:	4302      	orrs	r2, r0
200099d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
200099da:	0259      	lsls	r1, r3, #9
200099dc:	d508      	bpl.n	200099f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
200099de:	4954      	ldr	r1, [pc, #336]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
200099e0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
200099e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
200099e6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
200099ea:	4302      	orrs	r2, r0
200099ec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
200099f0:	029a      	lsls	r2, r3, #10
200099f2:	d50c      	bpl.n	20009a0e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
200099f4:	494e      	ldr	r1, [pc, #312]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
200099f6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
200099f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
200099fc:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
20009a00:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
20009a04:	bf08      	it	eq
20009a06:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
20009a08:	4302      	orrs	r2, r0
20009a0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
20009a0e:	f013 0f08 	tst.w	r3, #8
20009a12:	bf18      	it	ne
20009a14:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
20009a16:	035f      	lsls	r7, r3, #13
20009a18:	d508      	bpl.n	20009a2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
20009a1a:	4945      	ldr	r1, [pc, #276]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009a1c:	6f60      	ldr	r0, [r4, #116]	; 0x74
20009a1e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
20009a22:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
20009a26:	4302      	orrs	r2, r0
20009a28:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
20009a2c:	0218      	lsls	r0, r3, #8
20009a2e:	d509      	bpl.n	20009a44 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
20009a30:	493f      	ldr	r1, [pc, #252]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009a32:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
20009a36:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
20009a3a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
20009a3e:	4302      	orrs	r2, r0
20009a40:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
20009a44:	0159      	lsls	r1, r3, #5
20009a46:	d509      	bpl.n	20009a5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
20009a48:	4939      	ldr	r1, [pc, #228]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009a4a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
20009a4e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
20009a52:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
20009a56:	4302      	orrs	r2, r0
20009a58:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
20009a5c:	011a      	lsls	r2, r3, #4
20009a5e:	d509      	bpl.n	20009a74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
20009a60:	4933      	ldr	r1, [pc, #204]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009a62:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
20009a66:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
20009a6a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
20009a6e:	4302      	orrs	r2, r0
20009a70:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
20009a74:	00df      	lsls	r7, r3, #3
20009a76:	d46c      	bmi.n	20009b52 <HAL_RCCEx_PeriphCLKConfig+0x322>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
20009a78:	2e01      	cmp	r6, #1
20009a7a:	d001      	beq.n	20009a80 <HAL_RCCEx_PeriphCLKConfig+0x250>
20009a7c:	0198      	lsls	r0, r3, #6
20009a7e:	d562      	bpl.n	20009b46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
20009a80:	4b2b      	ldr	r3, [pc, #172]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009a82:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20009a84:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_DISABLE();
20009a86:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
20009a8a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
20009a8c:	f7f7 fe0c 	bl	200016a8 <HAL_GetTick>
20009a90:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20009a92:	e005      	b.n	20009aa0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20009a94:	f7f7 fe08 	bl	200016a8 <HAL_GetTick>
20009a98:	1b83      	subs	r3, r0, r6
20009a9a:	2b64      	cmp	r3, #100	; 0x64
20009a9c:	f200 80e0 	bhi.w	20009c60 <HAL_RCCEx_PeriphCLKConfig+0x430>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20009aa0:	683b      	ldr	r3, [r7, #0]
20009aa2:	0119      	lsls	r1, r3, #4
20009aa4:	d4f6      	bmi.n	20009a94 <HAL_RCCEx_PeriphCLKConfig+0x264>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
20009aa6:	6823      	ldr	r3, [r4, #0]
20009aa8:	07da      	lsls	r2, r3, #31
20009aaa:	d512      	bpl.n	20009ad2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
20009aac:	6b62      	ldr	r2, [r4, #52]	; 0x34
20009aae:	b982      	cbnz	r2, 20009ad2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
20009ab0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
20009ab4:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
20009ab8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
20009abc:	6860      	ldr	r0, [r4, #4]
20009abe:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
20009ac2:	68a1      	ldr	r1, [r4, #8]
20009ac4:	4332      	orrs	r2, r6
20009ac6:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
20009aca:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
20009ace:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
20009ad2:	031e      	lsls	r6, r3, #12
20009ad4:	d504      	bpl.n	20009ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
20009ad6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
20009ad8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
20009adc:	f000 811e 	beq.w	20009d1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
20009ae0:	02d8      	lsls	r0, r3, #11
20009ae2:	d504      	bpl.n	20009aee <HAL_RCCEx_PeriphCLKConfig+0x2be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
20009ae4:	6c22      	ldr	r2, [r4, #64]	; 0x40
20009ae6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
20009aea:	f000 8117 	beq.w	20009d1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
20009aee:	01d9      	lsls	r1, r3, #7
20009af0:	d511      	bpl.n	20009b16 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
20009af2:	4e0f      	ldr	r6, [pc, #60]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
20009af4:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
20009af6:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20009afa:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
20009afe:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
20009b02:	6921      	ldr	r1, [r4, #16]
20009b04:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
20009b08:	433a      	orrs	r2, r7
20009b0a:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
20009b0e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
20009b12:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
20009b16:	019a      	lsls	r2, r3, #6
20009b18:	f100 80f1 	bmi.w	20009cfe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
20009b1c:	4b04      	ldr	r3, [pc, #16]	; (20009b30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
20009b1e:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20009b20:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_ENABLE();
20009b22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
20009b26:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
20009b28:	f7f7 fdbe 	bl	200016a8 <HAL_GetTick>
20009b2c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20009b2e:	e007      	b.n	20009b40 <HAL_RCCEx_PeriphCLKConfig+0x310>
20009b30:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20009b34:	f7f7 fdb8 	bl	200016a8 <HAL_GetTick>
20009b38:	1b80      	subs	r0, r0, r6
20009b3a:	2864      	cmp	r0, #100	; 0x64
20009b3c:	f200 8090 	bhi.w	20009c60 <HAL_RCCEx_PeriphCLKConfig+0x430>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20009b40:	683b      	ldr	r3, [r7, #0]
20009b42:	011b      	lsls	r3, r3, #4
20009b44:	d5f6      	bpl.n	20009b34 <HAL_RCCEx_PeriphCLKConfig+0x304>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
20009b46:	2d01      	cmp	r5, #1
20009b48:	d00e      	beq.n	20009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
20009b4a:	2000      	movs	r0, #0
}
20009b4c:	b003      	add	sp, #12
20009b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
20009b52:	4993      	ldr	r1, [pc, #588]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
20009b54:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
20009b58:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
20009b5c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
20009b60:	4302      	orrs	r2, r0
20009b62:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
20009b66:	e787      	b.n	20009a78 <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_PLLSAI_DISABLE();
20009b68:	4b8d      	ldr	r3, [pc, #564]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
20009b6a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20009b6c:	461e      	mov	r6, r3
    __HAL_RCC_PLLSAI_DISABLE();
20009b6e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
20009b72:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
20009b74:	f7f7 fd98 	bl	200016a8 <HAL_GetTick>
20009b78:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20009b7a:	e004      	b.n	20009b86 <HAL_RCCEx_PeriphCLKConfig+0x356>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20009b7c:	f7f7 fd94 	bl	200016a8 <HAL_GetTick>
20009b80:	1b40      	subs	r0, r0, r5
20009b82:	2864      	cmp	r0, #100	; 0x64
20009b84:	d86c      	bhi.n	20009c60 <HAL_RCCEx_PeriphCLKConfig+0x430>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20009b86:	6833      	ldr	r3, [r6, #0]
20009b88:	009f      	lsls	r7, r3, #2
20009b8a:	d4f7      	bmi.n	20009b7c <HAL_RCCEx_PeriphCLKConfig+0x34c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
20009b8c:	6823      	ldr	r3, [r4, #0]
20009b8e:	031d      	lsls	r5, r3, #12
20009b90:	f140 80fd 	bpl.w	20009d8e <HAL_RCCEx_PeriphCLKConfig+0x55e>
20009b94:	6be2      	ldr	r2, [r4, #60]	; 0x3c
20009b96:	2a00      	cmp	r2, #0
20009b98:	f040 80f9 	bne.w	20009d8e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
20009b9c:	4980      	ldr	r1, [pc, #512]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
20009b9e:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
20009ba0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
20009ba4:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
20009ba8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
20009bac:	69a0      	ldr	r0, [r4, #24]
20009bae:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
20009bb2:	4332      	orrs	r2, r6
20009bb4:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
20009bb8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
20009bbc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
20009bc0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
20009bc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
20009bc6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
20009bca:	3801      	subs	r0, #1
20009bcc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
20009bd0:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
20009bd4:	0299      	lsls	r1, r3, #10
20009bd6:	d515      	bpl.n	20009c04 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
20009bd8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
20009bda:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
20009bde:	d111      	bne.n	20009c04 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20009be0:	496f      	ldr	r1, [pc, #444]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
20009be2:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20009be4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
20009be8:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
20009bec:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
20009bf0:	6a20      	ldr	r0, [r4, #32]
20009bf2:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
20009bf6:	4332      	orrs	r2, r6
20009bf8:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
20009bfc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
20009c00:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
20009c04:	071a      	lsls	r2, r3, #28
20009c06:	d519      	bpl.n	20009c3c <HAL_RCCEx_PeriphCLKConfig+0x40c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20009c08:	4a65      	ldr	r2, [pc, #404]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
20009c0a:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20009c0c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
20009c10:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
20009c14:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
20009c18:	69e0      	ldr	r0, [r4, #28]
20009c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
20009c1e:	430b      	orrs	r3, r1
20009c20:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
20009c24:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
20009c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
20009c2c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
20009c30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
20009c32:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
20009c36:	430b      	orrs	r3, r1
20009c38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
20009c3c:	4b58      	ldr	r3, [pc, #352]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
20009c3e:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20009c40:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_ENABLE();
20009c42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
20009c46:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
20009c48:	f7f7 fd2e 	bl	200016a8 <HAL_GetTick>
20009c4c:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20009c4e:	682b      	ldr	r3, [r5, #0]
20009c50:	009b      	lsls	r3, r3, #2
20009c52:	f53f af7a 	bmi.w	20009b4a <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20009c56:	f7f7 fd27 	bl	200016a8 <HAL_GetTick>
20009c5a:	1b00      	subs	r0, r0, r4
20009c5c:	2864      	cmp	r0, #100	; 0x64
20009c5e:	d9f6      	bls.n	20009c4e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        return HAL_TIMEOUT;
20009c60:	2003      	movs	r0, #3
}
20009c62:	b003      	add	sp, #12
20009c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
20009c68:	4a4d      	ldr	r2, [pc, #308]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
    PWR->CR1 |= PWR_CR1_DBP;
20009c6a:	4b4e      	ldr	r3, [pc, #312]	; (20009da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
    __HAL_RCC_PWR_CLK_ENABLE();
20009c6c:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
20009c6e:	4698      	mov	r8, r3
    __HAL_RCC_PWR_CLK_ENABLE();
20009c70:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
20009c74:	6411      	str	r1, [r2, #64]	; 0x40
20009c76:	6c12      	ldr	r2, [r2, #64]	; 0x40
20009c78:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
20009c7c:	9201      	str	r2, [sp, #4]
20009c7e:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
20009c80:	681a      	ldr	r2, [r3, #0]
20009c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20009c86:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
20009c88:	f7f7 fd0e 	bl	200016a8 <HAL_GetTick>
20009c8c:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
20009c8e:	e004      	b.n	20009c9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20009c90:	f7f7 fd0a 	bl	200016a8 <HAL_GetTick>
20009c94:	1bc0      	subs	r0, r0, r7
20009c96:	2864      	cmp	r0, #100	; 0x64
20009c98:	d8e2      	bhi.n	20009c60 <HAL_RCCEx_PeriphCLKConfig+0x430>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
20009c9a:	f8d8 3000 	ldr.w	r3, [r8]
20009c9e:	05d9      	lsls	r1, r3, #23
20009ca0:	d5f6      	bpl.n	20009c90 <HAL_RCCEx_PeriphCLKConfig+0x460>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
20009ca2:	4f3f      	ldr	r7, [pc, #252]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
20009ca4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
20009ca6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
20009ca8:	f403 7140 	and.w	r1, r3, #768	; 0x300
20009cac:	f412 7240 	ands.w	r2, r2, #768	; 0x300
20009cb0:	d010      	beq.n	20009cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
20009cb2:	4291      	cmp	r1, r2
20009cb4:	d00e      	beq.n	20009cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
20009cb6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
20009cb8:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
20009cba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
20009cbe:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
20009cc2:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
20009cc4:	6f38      	ldr	r0, [r7, #112]	; 0x70
20009cc6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
20009cca:	6738      	str	r0, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
20009ccc:	673a      	str	r2, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
20009cce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
20009cd0:	07d2      	lsls	r2, r2, #31
20009cd2:	d448      	bmi.n	20009d66 <HAL_RCCEx_PeriphCLKConfig+0x536>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
20009cd4:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
20009cd8:	d03c      	beq.n	20009d54 <HAL_RCCEx_PeriphCLKConfig+0x524>
20009cda:	4931      	ldr	r1, [pc, #196]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
20009cdc:	688a      	ldr	r2, [r1, #8]
20009cde:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
20009ce2:	608a      	str	r2, [r1, #8]
20009ce4:	4a2e      	ldr	r2, [pc, #184]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
20009ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
20009cea:	6f11      	ldr	r1, [r2, #112]	; 0x70
20009cec:	430b      	orrs	r3, r1
20009cee:	6713      	str	r3, [r2, #112]	; 0x70
20009cf0:	6823      	ldr	r3, [r4, #0]
20009cf2:	e5df      	b.n	200098b4 <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
20009cf4:	2500      	movs	r5, #0
      plli2sused = 1;
20009cf6:	2601      	movs	r6, #1
20009cf8:	e5c2      	b.n	20009880 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
20009cfa:	2601      	movs	r6, #1
20009cfc:	e5d3      	b.n	200098a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
20009cfe:	6923      	ldr	r3, [r4, #16]
20009d00:	6862      	ldr	r2, [r4, #4]
20009d02:	041b      	lsls	r3, r3, #16
20009d04:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
20009d08:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
20009d0c:	4a24      	ldr	r2, [pc, #144]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
20009d0e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
20009d12:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
20009d16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
20009d1a:	e6ff      	b.n	20009b1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
20009d1c:	4e20      	ldr	r6, [pc, #128]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
20009d1e:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
20009d20:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20009d24:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
20009d28:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
20009d2c:	68e1      	ldr	r1, [r4, #12]
20009d2e:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
20009d32:	433a      	orrs	r2, r7
20009d34:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
20009d38:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
20009d3c:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
20009d40:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
20009d44:	6a62      	ldr	r2, [r4, #36]	; 0x24
20009d46:	f021 011f 	bic.w	r1, r1, #31
20009d4a:	3a01      	subs	r2, #1
20009d4c:	430a      	orrs	r2, r1
20009d4e:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
20009d52:	e6cc      	b.n	20009aee <HAL_RCCEx_PeriphCLKConfig+0x2be>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
20009d54:	4812      	ldr	r0, [pc, #72]	; (20009da0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
20009d56:	4914      	ldr	r1, [pc, #80]	; (20009da8 <HAL_RCCEx_PeriphCLKConfig+0x578>)
20009d58:	6882      	ldr	r2, [r0, #8]
20009d5a:	4019      	ands	r1, r3
20009d5c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
20009d60:	430a      	orrs	r2, r1
20009d62:	6082      	str	r2, [r0, #8]
20009d64:	e7be      	b.n	20009ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        tickstart = HAL_GetTick();
20009d66:	f7f7 fc9f 	bl	200016a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20009d6a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
20009d6e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20009d70:	e006      	b.n	20009d80 <HAL_RCCEx_PeriphCLKConfig+0x550>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20009d72:	f7f7 fc99 	bl	200016a8 <HAL_GetTick>
20009d76:	eba0 0008 	sub.w	r0, r0, r8
20009d7a:	4548      	cmp	r0, r9
20009d7c:	f63f af70 	bhi.w	20009c60 <HAL_RCCEx_PeriphCLKConfig+0x430>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20009d80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
20009d82:	079b      	lsls	r3, r3, #30
20009d84:	d5f5      	bpl.n	20009d72 <HAL_RCCEx_PeriphCLKConfig+0x542>
20009d86:	6b23      	ldr	r3, [r4, #48]	; 0x30
20009d88:	f403 7140 	and.w	r1, r3, #768	; 0x300
20009d8c:	e7a2      	b.n	20009cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
20009d8e:	02d8      	lsls	r0, r3, #11
20009d90:	f57f af20 	bpl.w	20009bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
20009d94:	6c22      	ldr	r2, [r4, #64]	; 0x40
20009d96:	2a00      	cmp	r2, #0
20009d98:	f47f af1c 	bne.w	20009bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
20009d9c:	e6fe      	b.n	20009b9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
20009d9e:	bf00      	nop
20009da0:	40023800 	.word	0x40023800
20009da4:	40007000 	.word	0x40007000
20009da8:	0ffffcff 	.word	0x0ffffcff

20009dac <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
20009dac:	4b5c      	ldr	r3, [pc, #368]	; (20009f20 <HAL_RCCEx_GetPeriphCLKConfig+0x174>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
20009dae:	4a5d      	ldr	r2, [pc, #372]	; (20009f24 <HAL_RCCEx_GetPeriphCLKConfig+0x178>)
20009db0:	6002      	str	r2, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
20009db2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
20009db6:	f3c2 1288 	ubfx	r2, r2, #6, #9
20009dba:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
20009dbc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
20009dc0:	f3c2 4201 	ubfx	r2, r2, #16, #2
20009dc4:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
20009dc6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
20009dca:	f3c2 6203 	ubfx	r2, r2, #24, #4
20009dce:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20009dd0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
20009dd4:	f3c2 7202 	ubfx	r2, r2, #28, #3
20009dd8:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
20009dda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
20009dde:	f3c2 1288 	ubfx	r2, r2, #6, #9
20009de2:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
20009de4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
20009de8:	f3c2 4201 	ubfx	r2, r2, #16, #2
20009dec:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20009dee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
20009df2:	f3c2 6203 	ubfx	r2, r2, #24, #4
20009df6:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
20009df8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
20009dfc:	f3c2 7202 	ubfx	r2, r2, #28, #3
20009e00:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
20009e02:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
20009e06:	f002 021f 	and.w	r2, r2, #31
20009e0a:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
20009e0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
20009e10:	f3c2 2204 	ubfx	r2, r2, #8, #5
20009e14:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
20009e16:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
20009e1a:	f3c2 4201 	ubfx	r2, r2, #16, #2
20009e1e:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
20009e20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
20009e24:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
20009e28:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
20009e2a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
20009e2e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
20009e32:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
20009e34:	689a      	ldr	r2, [r3, #8]
20009e36:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
20009e3a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
20009e3c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009e40:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
20009e44:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
20009e46:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009e4a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
20009e4e:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
20009e50:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009e54:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
20009e58:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
20009e5a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009e5e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
20009e62:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
20009e64:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009e68:	f002 0203 	and.w	r2, r2, #3
20009e6c:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
20009e6e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009e72:	f002 020c 	and.w	r2, r2, #12
20009e76:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
20009e78:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009e7c:	f002 0230 	and.w	r2, r2, #48	; 0x30
20009e80:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
20009e82:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009e86:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
20009e8a:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
20009e8c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009e90:	f402 7240 	and.w	r2, r2, #768	; 0x300
20009e94:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
20009e96:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009e9a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
20009e9e:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
20009ea0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009ea4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
20009ea8:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
20009eaa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009eae:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
20009eb2:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
20009eb4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009eb8:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
20009ebc:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
20009ebe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009ec2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
20009ec6:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
20009ec8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009ecc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
20009ed0:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
20009ed2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009ed6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
20009eda:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
20009ede:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
20009ee2:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
20009ee6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
20009eea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
20009eee:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
20009ef2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
20009ef6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
20009efa:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
20009efe:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
20009f02:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
20009f04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
20009f06:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
20009f0a:	f402 7240 	and.w	r2, r2, #768	; 0x300
20009f0e:	430a      	orrs	r2, r1
20009f10:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
20009f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
20009f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20009f1a:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
20009f1c:	4770      	bx	lr
20009f1e:	bf00      	nop
20009f20:	40023800 	.word	0x40023800
20009f24:	1cfffff1 	.word	0x1cfffff1

20009f28 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
20009f28:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
20009f2c:	d036      	beq.n	20009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
20009f2e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
20009f32:	d131      	bne.n	20009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
  {
    saiclocksource = RCC->DCKCFGR1;
20009f34:	4a37      	ldr	r2, [pc, #220]	; (2000a014 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
20009f36:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
20009f3a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
20009f3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
20009f42:	d044      	beq.n	20009fce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
20009f44:	d838      	bhi.n	20009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
20009f46:	2b00      	cmp	r3, #0
20009f48:	d043      	beq.n	20009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
20009f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20009f4e:	d123      	bne.n	20009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
20009f50:	6853      	ldr	r3, [r2, #4]
20009f52:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
20009f56:	6853      	ldr	r3, [r2, #4]
20009f58:	bf08      	it	eq
20009f5a:	482f      	ldreq	r0, [pc, #188]	; (2000a018 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
20009f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20009f60:	bf18      	it	ne
20009f62:	482e      	ldrne	r0, [pc, #184]	; (2000a01c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
20009f64:	fbb0 f0f3 	udiv	r0, r0, r3
        }

        /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
20009f68:	4b2a      	ldr	r3, [pc, #168]	; (2000a014 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
20009f6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
20009f6e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
20009f72:	f3c2 6203 	ubfx	r2, r2, #24, #4

        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
20009f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
20009f7a:	f3c1 1188 	ubfx	r1, r1, #6, #9
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
20009f7e:	f003 031f 	and.w	r3, r3, #31
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
20009f82:	fb00 f001 	mul.w	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
20009f86:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
20009f88:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
20009f8c:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
20009f90:	4770      	bx	lr
    switch (saiclocksource)
20009f92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
20009f96:	d012      	beq.n	20009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    default :
      {
        break;
      }
    }
  }
20009f98:	2000      	movs	r0, #0
20009f9a:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
20009f9c:	4a1d      	ldr	r2, [pc, #116]	; (2000a014 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
20009f9e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
20009fa2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (saiclocksource)
20009fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
20009faa:	d010      	beq.n	20009fce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
20009fac:	d8f1      	bhi.n	20009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
20009fae:	b183      	cbz	r3, 20009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
20009fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
20009fb4:	d0cc      	beq.n	20009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
20009fb6:	e7ef      	b.n	20009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
    switch (saiclocksource)
20009fb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
20009fbc:	d1ec      	bne.n	20009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
20009fbe:	6853      	ldr	r3, [r2, #4]
          frequency = HSI_VALUE;
20009fc0:	4816      	ldr	r0, [pc, #88]	; (2000a01c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
20009fc2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
          frequency = HSI_VALUE;
20009fc6:	4b14      	ldr	r3, [pc, #80]	; (2000a018 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
20009fc8:	bf08      	it	eq
20009fca:	4618      	moveq	r0, r3
20009fcc:	4770      	bx	lr
        frequency = EXTERNAL_CLOCK_VALUE;
20009fce:	4814      	ldr	r0, [pc, #80]	; (2000a020 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)

  return frequency;
}
20009fd0:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
20009fd2:	6853      	ldr	r3, [r2, #4]
20009fd4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
20009fd8:	6853      	ldr	r3, [r2, #4]
20009fda:	bf08      	it	eq
20009fdc:	480e      	ldreq	r0, [pc, #56]	; (2000a018 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
20009fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20009fe2:	bf18      	it	ne
20009fe4:	480d      	ldrne	r0, [pc, #52]	; (2000a01c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
20009fe6:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
20009fea:	4b0a      	ldr	r3, [pc, #40]	; (2000a014 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
20009fec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
20009ff0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
20009ff4:	f3c2 6203 	ubfx	r2, r2, #24, #4
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
20009ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
20009ffc:	f3c1 1188 	ubfx	r1, r1, #6, #9
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
2000a000:	f3c3 2304 	ubfx	r3, r3, #8, #5
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
2000a004:	fb00 f001 	mul.w	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
2000a008:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
2000a00a:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
2000a00e:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
2000a012:	4770      	bx	lr
2000a014:	40023800 	.word	0x40023800
2000a018:	00f42400 	.word	0x00f42400
2000a01c:	017d7840 	.word	0x017d7840
2000a020:	00bb8000 	.word	0x00bb8000

2000a024 <HAL_RCCEx_EnablePLLI2S>:
#if defined(RCC_PLLI2SCFGR_PLLI2SP)
  assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SInit->PLLI2SP));
#endif /* RCC_PLLI2SCFGR_PLLI2SP */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
2000a024:	4b1a      	ldr	r3, [pc, #104]	; (2000a090 <HAL_RCCEx_EnablePLLI2S+0x6c>)
2000a026:	681a      	ldr	r2, [r3, #0]
2000a028:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
{
2000a02c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PLLI2S_DISABLE();
2000a02e:	601a      	str	r2, [r3, #0]
{
2000a030:	4606      	mov	r6, r0

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
2000a032:	461c      	mov	r4, r3
  tickstart = HAL_GetTick();
2000a034:	f7f7 fb38 	bl	200016a8 <HAL_GetTick>
2000a038:	4605      	mov	r5, r0
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
2000a03a:	e004      	b.n	2000a046 <HAL_RCCEx_EnablePLLI2S+0x22>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2000a03c:	f7f7 fb34 	bl	200016a8 <HAL_GetTick>
2000a040:	1b43      	subs	r3, r0, r5
2000a042:	2b64      	cmp	r3, #100	; 0x64
2000a044:	d822      	bhi.n	2000a08c <HAL_RCCEx_EnablePLLI2S+0x68>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
2000a046:	6823      	ldr	r3, [r4, #0]
2000a048:	011a      	lsls	r2, r3, #4
2000a04a:	d4f7      	bmi.n	2000a03c <HAL_RCCEx_EnablePLLI2S+0x18>
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
  /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
  /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SP, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
2000a04c:	68f3      	ldr	r3, [r6, #12]
2000a04e:	6830      	ldr	r0, [r6, #0]
2000a050:	041b      	lsls	r3, r3, #16
  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
2000a052:	4d0f      	ldr	r5, [pc, #60]	; (2000a090 <HAL_RCCEx_EnablePLLI2S+0x6c>)
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SP, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
2000a054:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
2000a058:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
2000a05c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2000a060:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
2000a064:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_RCC_PLLI2S_ENABLE();
2000a068:	6823      	ldr	r3, [r4, #0]
2000a06a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
2000a06e:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
2000a070:	f7f7 fb1a 	bl	200016a8 <HAL_GetTick>
2000a074:	4604      	mov	r4, r0
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
2000a076:	e004      	b.n	2000a082 <HAL_RCCEx_EnablePLLI2S+0x5e>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2000a078:	f7f7 fb16 	bl	200016a8 <HAL_GetTick>
2000a07c:	1b00      	subs	r0, r0, r4
2000a07e:	2864      	cmp	r0, #100	; 0x64
2000a080:	d804      	bhi.n	2000a08c <HAL_RCCEx_EnablePLLI2S+0x68>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
2000a082:	682b      	ldr	r3, [r5, #0]
2000a084:	011b      	lsls	r3, r3, #4
2000a086:	d5f7      	bpl.n	2000a078 <HAL_RCCEx_EnablePLLI2S+0x54>
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
    }
  }

 return HAL_OK;
2000a088:	2000      	movs	r0, #0
}
2000a08a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
2000a08c:	2003      	movs	r0, #3
}
2000a08e:	bd70      	pop	{r4, r5, r6, pc}
2000a090:	40023800 	.word	0x40023800

2000a094 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
2000a094:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
2000a096:	4b0b      	ldr	r3, [pc, #44]	; (2000a0c4 <HAL_RCCEx_DisablePLLI2S+0x30>)
2000a098:	681a      	ldr	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
2000a09a:	461d      	mov	r5, r3
  __HAL_RCC_PLLI2S_DISABLE();
2000a09c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
2000a0a0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
2000a0a2:	f7f7 fb01 	bl	200016a8 <HAL_GetTick>
2000a0a6:	4604      	mov	r4, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
2000a0a8:	e004      	b.n	2000a0b4 <HAL_RCCEx_DisablePLLI2S+0x20>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2000a0aa:	f7f7 fafd 	bl	200016a8 <HAL_GetTick>
2000a0ae:	1b00      	subs	r0, r0, r4
2000a0b0:	2864      	cmp	r0, #100	; 0x64
2000a0b2:	d805      	bhi.n	2000a0c0 <HAL_RCCEx_DisablePLLI2S+0x2c>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
2000a0b4:	682b      	ldr	r3, [r5, #0]
2000a0b6:	f013 6300 	ands.w	r3, r3, #134217728	; 0x8000000
2000a0ba:	d1f6      	bne.n	2000a0aa <HAL_RCCEx_DisablePLLI2S+0x16>
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
2000a0bc:	4618      	mov	r0, r3
}
2000a0be:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
2000a0c0:	2003      	movs	r0, #3
}
2000a0c2:	bd38      	pop	{r3, r4, r5, pc}
2000a0c4:	40023800 	.word	0x40023800

2000a0c8 <HAL_RCCEx_EnablePLLSAI>:
#if defined(RCC_PLLSAICFGR_PLLSAIR)
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIInit->PLLSAIR));
#endif /* RCC_PLLSAICFGR_PLLSAIR */

  /* Disable the PLLSAI */
  __HAL_RCC_PLLSAI_DISABLE();
2000a0c8:	4b1a      	ldr	r3, [pc, #104]	; (2000a134 <HAL_RCCEx_EnablePLLSAI+0x6c>)
2000a0ca:	681a      	ldr	r2, [r3, #0]
2000a0cc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
{
2000a0d0:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PLLSAI_DISABLE();
2000a0d2:	601a      	str	r2, [r3, #0]
{
2000a0d4:	4606      	mov	r6, r0

  /* Wait till PLLSAI is disabled */
  tickstart = HAL_GetTick();
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000a0d6:	461c      	mov	r4, r3
  tickstart = HAL_GetTick();
2000a0d8:	f7f7 fae6 	bl	200016a8 <HAL_GetTick>
2000a0dc:	4605      	mov	r5, r0
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000a0de:	e004      	b.n	2000a0ea <HAL_RCCEx_EnablePLLSAI+0x22>
  {
    if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
2000a0e0:	f7f7 fae2 	bl	200016a8 <HAL_GetTick>
2000a0e4:	1b43      	subs	r3, r0, r5
2000a0e6:	2b64      	cmp	r3, #100	; 0x64
2000a0e8:	d822      	bhi.n	2000a130 <HAL_RCCEx_EnablePLLSAI+0x68>
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000a0ea:	6823      	ldr	r3, [r4, #0]
2000a0ec:	009a      	lsls	r2, r3, #2
2000a0ee:	d4f7      	bmi.n	2000a0e0 <HAL_RCCEx_EnablePLLSAI+0x18>
#else
  /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * PLLSAIN */
  /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
  /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
  /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
  __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIP, \
2000a0f0:	68f3      	ldr	r3, [r6, #12]
2000a0f2:	6830      	ldr	r0, [r6, #0]
2000a0f4:	041b      	lsls	r3, r3, #16
  /* Enable the PLLSAI */
  __HAL_RCC_PLLSAI_ENABLE();

  /* Wait till PLLSAI is ready */
  tickstart = HAL_GetTick();
  while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
2000a0f6:	4d0f      	ldr	r5, [pc, #60]	; (2000a134 <HAL_RCCEx_EnablePLLSAI+0x6c>)
  __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIP, \
2000a0f8:	e9d6 1201 	ldrd	r1, r2, [r6, #4]
2000a0fc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
2000a100:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2000a104:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
2000a108:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_RCC_PLLSAI_ENABLE();
2000a10c:	6823      	ldr	r3, [r4, #0]
2000a10e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000a112:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
2000a114:	f7f7 fac8 	bl	200016a8 <HAL_GetTick>
2000a118:	4604      	mov	r4, r0
  while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
2000a11a:	e004      	b.n	2000a126 <HAL_RCCEx_EnablePLLSAI+0x5e>
  {
    if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
2000a11c:	f7f7 fac4 	bl	200016a8 <HAL_GetTick>
2000a120:	1b00      	subs	r0, r0, r4
2000a122:	2864      	cmp	r0, #100	; 0x64
2000a124:	d804      	bhi.n	2000a130 <HAL_RCCEx_EnablePLLSAI+0x68>
  while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
2000a126:	682b      	ldr	r3, [r5, #0]
2000a128:	009b      	lsls	r3, r3, #2
2000a12a:	d5f7      	bpl.n	2000a11c <HAL_RCCEx_EnablePLLSAI+0x54>
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
    }
  }

 return HAL_OK;
2000a12c:	2000      	movs	r0, #0
}
2000a12e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
2000a130:	2003      	movs	r0, #3
}
2000a132:	bd70      	pop	{r4, r5, r6, pc}
2000a134:	40023800 	.word	0x40023800

2000a138 <HAL_RCCEx_DisablePLLSAI>:
/**
  * @brief  Disable PLLSAI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI(void)
{
2000a138:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Disable the PLLSAI */
  __HAL_RCC_PLLSAI_DISABLE();
2000a13a:	4b0b      	ldr	r3, [pc, #44]	; (2000a168 <HAL_RCCEx_DisablePLLSAI+0x30>)
2000a13c:	681a      	ldr	r2, [r3, #0]

  /* Wait till PLLSAI is disabled */
  tickstart = HAL_GetTick();
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000a13e:	461d      	mov	r5, r3
  __HAL_RCC_PLLSAI_DISABLE();
2000a140:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
2000a144:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
2000a146:	f7f7 faaf 	bl	200016a8 <HAL_GetTick>
2000a14a:	4604      	mov	r4, r0
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000a14c:	e004      	b.n	2000a158 <HAL_RCCEx_DisablePLLSAI+0x20>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
2000a14e:	f7f7 faab 	bl	200016a8 <HAL_GetTick>
2000a152:	1b00      	subs	r0, r0, r4
2000a154:	2864      	cmp	r0, #100	; 0x64
2000a156:	d805      	bhi.n	2000a164 <HAL_RCCEx_DisablePLLSAI+0x2c>
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000a158:	682b      	ldr	r3, [r5, #0]
2000a15a:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
2000a15e:	d1f6      	bne.n	2000a14e <HAL_RCCEx_DisablePLLSAI+0x16>
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
2000a160:	4618      	mov	r0, r3
}
2000a162:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
2000a164:	2003      	movs	r0, #3
}
2000a166:	bd38      	pop	{r3, r4, r5, pc}
2000a168:	40023800 	.word	0x40023800

2000a16c <QSPI_WriteEnable>:
 * @brief  This function send a Write Enable and wait it is effective.
 * @param  hqspi: QSPI handle
 * @retval None
 */
static uint8_t QSPI_WriteEnable()
{
2000a16c:	b5f0      	push	{r4, r5, r6, r7, lr}
	QSPI_CommandTypeDef s_command;
	QSPI_AutoPollingTypeDef s_config;

	/* Enable write operations */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a16e:	f44f 7080 	mov.w	r0, #256	; 0x100
{
2000a172:	b095      	sub	sp, #84	; 0x54
	s_command.Instruction = WRITE_ENABLE_CMD;
	s_command.AddressMode = QSPI_ADDRESS_NONE;
2000a174:	2300      	movs	r3, #0
	s_command.Instruction = WRITE_ENABLE_CMD;
2000a176:	2406      	movs	r4, #6
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a178:	900c      	str	r0, [sp, #48]	; 0x30
	s_command.DummyCycles = 0;
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;

	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a17a:	a906      	add	r1, sp, #24
2000a17c:	f241 3288 	movw	r2, #5000	; 0x1388
2000a180:	4817      	ldr	r0, [pc, #92]	; (2000a1e0 <QSPI_WriteEnable+0x74>)
	s_command.Instruction = WRITE_ENABLE_CMD;
2000a182:	9406      	str	r4, [sp, #24]
	s_command.DataMode = QSPI_DATA_NONE;
2000a184:	930f      	str	r3, [sp, #60]	; 0x3c
	s_command.DummyCycles = 0;
2000a186:	930b      	str	r3, [sp, #44]	; 0x2c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a188:	9313      	str	r3, [sp, #76]	; 0x4c
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a18a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a18e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a192:	f7fd ff65 	bl	20008060 <HAL_QSPI_Command>
2000a196:	b110      	cbz	r0, 2000a19e <QSPI_WriteEnable+0x32>
			!= HAL_OK)
	{
		return QSPI_ERROR;
2000a198:	2001      	movs	r0, #1
	{
		return QSPI_ERROR;
	}

	return QSPI_OK;
}
2000a19a:	b015      	add	sp, #84	; 0x54
2000a19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a19e:	2005      	movs	r0, #5
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a1a0:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	s_config.Match = W25Q256JW_FSR_WREN;
2000a1a4:	2202      	movs	r2, #2
2000a1a6:	2302      	movs	r3, #2
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a1a8:	9006      	str	r0, [sp, #24]
	s_command.NbData = 1;
2000a1aa:	2001      	movs	r0, #1
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a1ac:	940f      	str	r4, [sp, #60]	; 0x3c
	s_config.Match = W25Q256JW_FSR_WREN;
2000a1ae:	2610      	movs	r6, #16
2000a1b0:	2701      	movs	r7, #1
2000a1b2:	2400      	movs	r4, #0
2000a1b4:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
	s_command.NbData = 1;
2000a1b8:	9010      	str	r0, [sp, #64]	; 0x40
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a1ba:	a906      	add	r1, sp, #24
2000a1bc:	4808      	ldr	r0, [pc, #32]	; (2000a1e0 <QSPI_WriteEnable+0x74>)
	s_config.Match = W25Q256JW_FSR_WREN;
2000a1be:	e9cd 2300 	strd	r2, r3, [sp]
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a1c2:	f241 3388 	movw	r3, #5000	; 0x1388
2000a1c6:	466a      	mov	r2, sp
	s_config.Match = W25Q256JW_FSR_WREN;
2000a1c8:	e9cd 6702 	strd	r6, r7, [sp, #8]
2000a1cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a1d0:	f7fe faca 	bl	20008768 <HAL_QSPI_AutoPolling>
		return QSPI_ERROR;
2000a1d4:	3800      	subs	r0, #0
2000a1d6:	bf18      	it	ne
2000a1d8:	2001      	movne	r0, #1
}
2000a1da:	b015      	add	sp, #84	; 0x54
2000a1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000a1de:	bf00      	nop
2000a1e0:	20000428 	.word	0x20000428

2000a1e4 <BSP_QSPI_QE>:
{
2000a1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000a1e8:	b0a5      	sub	sp, #148	; 0x94
	uint8_t value = 0;
2000a1ea:	2300      	movs	r3, #0
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a1ec:	f44f 7a80 	mov.w	sl, #256	; 0x100
	s_command.Instruction = READ_STATUS_REG2_CMD;
2000a1f0:	2635      	movs	r6, #53	; 0x35
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a1f2:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	s_command.NbData = 1;
2000a1f6:	2401      	movs	r4, #1
	if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2000a1f8:	a908      	add	r1, sp, #32
2000a1fa:	f241 3288 	movw	r2, #5000	; 0x1388
2000a1fe:	4847      	ldr	r0, [pc, #284]	; (2000a31c <BSP_QSPI_QE+0x138>)
	uint8_t value = 0;
2000a200:	f88d 3007 	strb.w	r3, [sp, #7]
	s_command.DummyCycles = 0;
2000a204:	930d      	str	r3, [sp, #52]	; 0x34
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a206:	9315      	str	r3, [sp, #84]	; 0x54
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a208:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
	s_command.Instruction = READ_STATUS_REG2_CMD;
2000a20c:	9608      	str	r6, [sp, #32]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a20e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a212:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	s_command.NbData = 1;
2000a216:	e9cd 5411 	strd	r5, r4, [sp, #68]	; 0x44
	if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2000a21a:	f7fd ff21 	bl	20008060 <HAL_QSPI_Command>
2000a21e:	b118      	cbz	r0, 2000a228 <BSP_QSPI_QE+0x44>
		return QSPI_ERROR;
2000a220:	2001      	movs	r0, #1
}
2000a222:	b025      	add	sp, #148	; 0x94
2000a224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(HAL_QSPI_Receive(&hqspi, &value, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2000a228:	f241 3288 	movw	r2, #5000	; 0x1388
2000a22c:	483b      	ldr	r0, [pc, #236]	; (2000a31c <BSP_QSPI_QE+0x138>)
2000a22e:	f10d 0107 	add.w	r1, sp, #7
2000a232:	f7fe f85f 	bl	200082f4 <HAL_QSPI_Receive>
2000a236:	4684      	mov	ip, r0
2000a238:	2800      	cmp	r0, #0
2000a23a:	d1f1      	bne.n	2000a220 <BSP_QSPI_QE+0x3c>
	s_command.DummyCycles = 0;
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;

	s_config.Match = 0x00;
2000a23c:	2610      	movs	r6, #16
2000a23e:	2701      	movs	r7, #1
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a240:	f04f 0b05 	mov.w	fp, #5
	s_config.Match = 0x00;
2000a244:	f04f 0800 	mov.w	r8, #0
2000a248:	f04f 0901 	mov.w	r9, #1
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
	s_config.StatusBytesSize = 1;
	s_config.Interval = 0x10;
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;

	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a24c:	aa02      	add	r2, sp, #8
2000a24e:	a916      	add	r1, sp, #88	; 0x58
2000a250:	f241 3388 	movw	r3, #5000	; 0x1388
2000a254:	4831      	ldr	r0, [pc, #196]	; (2000a31c <BSP_QSPI_QE+0x138>)
	s_command.DummyCycles = 0;
2000a256:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a25a:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a25e:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
	s_config.Match = 0x00;
2000a262:	e9cd 6704 	strd	r6, r7, [sp, #16]
2000a266:	2600      	movs	r6, #0
2000a268:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
	s_command.AddressMode = QSPI_ADDRESS_NONE;
2000a26c:	e9cd ac1c 	strd	sl, ip, [sp, #112]	; 0x70
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a270:	e9cd c51e 	strd	ip, r5, [sp, #120]	; 0x78
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a274:	e9cd cc21 	strd	ip, ip, [sp, #132]	; 0x84
	s_config.Match = 0x00;
2000a278:	e9cd 8902 	strd	r8, r9, [sp, #8]
2000a27c:	e9cd 6706 	strd	r6, r7, [sp, #24]
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a280:	f7fe fa72 	bl	20008768 <HAL_QSPI_AutoPolling>
2000a284:	2800      	cmp	r0, #0
2000a286:	d1cb      	bne.n	2000a220 <BSP_QSPI_QE+0x3c>
	value |= 0b00000010;
2000a288:	f89d 3007 	ldrb.w	r3, [sp, #7]
2000a28c:	f043 0302 	orr.w	r3, r3, #2
2000a290:	f88d 3007 	strb.w	r3, [sp, #7]
	if(QSPI_WriteEnable() != QSPI_OK)
2000a294:	f7ff ff6a 	bl	2000a16c <QSPI_WriteEnable>
2000a298:	2800      	cmp	r0, #0
2000a29a:	d1c1      	bne.n	2000a220 <BSP_QSPI_QE+0x3c>
	s_command.Instruction = WRITE_STATUS_REG2_CMD;
2000a29c:	2331      	movs	r3, #49	; 0x31
	s_command.DummyCycles = 0;
2000a29e:	900d      	str	r0, [sp, #52]	; 0x34
	if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2000a2a0:	a908      	add	r1, sp, #32
2000a2a2:	f241 3288 	movw	r2, #5000	; 0x1388
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a2a6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a2aa:	9511      	str	r5, [sp, #68]	; 0x44
	s_command.Instruction = WRITE_STATUS_REG2_CMD;
2000a2ac:	9308      	str	r3, [sp, #32]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a2ae:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
2000a2b2:	e9cd 4012 	strd	r4, r0, [sp, #72]	; 0x48
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a2b6:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
	if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2000a2ba:	4818      	ldr	r0, [pc, #96]	; (2000a31c <BSP_QSPI_QE+0x138>)
2000a2bc:	f7fd fed0 	bl	20008060 <HAL_QSPI_Command>
2000a2c0:	2800      	cmp	r0, #0
2000a2c2:	d1ad      	bne.n	2000a220 <BSP_QSPI_QE+0x3c>
	if(HAL_QSPI_Transmit(&hqspi, &value, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2000a2c4:	f10d 0107 	add.w	r1, sp, #7
2000a2c8:	f241 3288 	movw	r2, #5000	; 0x1388
2000a2cc:	4813      	ldr	r0, [pc, #76]	; (2000a31c <BSP_QSPI_QE+0x138>)
2000a2ce:	f7fd ff93 	bl	200081f8 <HAL_QSPI_Transmit>
2000a2d2:	4604      	mov	r4, r0
2000a2d4:	2800      	cmp	r0, #0
2000a2d6:	d1a3      	bne.n	2000a220 <BSP_QSPI_QE+0x3c>
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a2d8:	951f      	str	r5, [sp, #124]	; 0x7c
	s_config.Match = 0x00;
2000a2da:	2501      	movs	r5, #1
	s_command.DummyCycles = 0;
2000a2dc:	941b      	str	r4, [sp, #108]	; 0x6c
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a2de:	aa02      	add	r2, sp, #8
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a2e0:	9423      	str	r4, [sp, #140]	; 0x8c
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a2e2:	a916      	add	r1, sp, #88	; 0x58
2000a2e4:	f241 3388 	movw	r3, #5000	; 0x1388
2000a2e8:	480c      	ldr	r0, [pc, #48]	; (2000a31c <BSP_QSPI_QE+0x138>)
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a2ea:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a2ee:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a2f2:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a2f6:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
	s_config.Match = 0x00;
2000a2fa:	2410      	movs	r4, #16
2000a2fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
2000a300:	2400      	movs	r4, #0
2000a302:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
2000a306:	e9cd 8902 	strd	r8, r9, [sp, #8]
2000a30a:	e9cd 4506 	strd	r4, r5, [sp, #24]
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a30e:	f7fe fa2b 	bl	20008768 <HAL_QSPI_AutoPolling>
		return QSPI_ERROR;
2000a312:	3800      	subs	r0, #0
2000a314:	bf18      	it	ne
2000a316:	2001      	movne	r0, #1
2000a318:	e783      	b.n	2000a222 <BSP_QSPI_QE+0x3e>
2000a31a:	bf00      	nop
2000a31c:	20000428 	.word	0x20000428

2000a320 <BSP_QSPI_Init>:
{
2000a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000a324:	b0a3      	sub	sp, #140	; 0x8c
	if(QSPI_WriteEnable() != QSPI_OK)
2000a326:	f7ff ff21 	bl	2000a16c <QSPI_WriteEnable>
2000a32a:	b118      	cbz	r0, 2000a334 <BSP_QSPI_Init+0x14>
		return QSPI_NOT_SUPPORTED;
2000a32c:	2004      	movs	r0, #4
}
2000a32e:	b023      	add	sp, #140	; 0x8c
2000a330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_command.Instruction = RESET_ENABLE_CMD;
2000a334:	2366      	movs	r3, #102	; 0x66
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a336:	f44f 7480 	mov.w	r4, #256	; 0x100
	s_command.DataMode = QSPI_DATA_NONE;
2000a33a:	900f      	str	r0, [sp, #60]	; 0x3c
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a33c:	f241 3288 	movw	r2, #5000	; 0x1388
	s_command.DummyCycles = 0;
2000a340:	900b      	str	r0, [sp, #44]	; 0x2c
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a342:	a906      	add	r1, sp, #24
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a344:	9013      	str	r0, [sp, #76]	; 0x4c
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a346:	940c      	str	r4, [sp, #48]	; 0x30
	s_command.Instruction = RESET_ENABLE_CMD;
2000a348:	9306      	str	r3, [sp, #24]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a34a:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a34e:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a352:	4847      	ldr	r0, [pc, #284]	; (2000a470 <BSP_QSPI_Init+0x150>)
2000a354:	f7fd fe84 	bl	20008060 <HAL_QSPI_Command>
2000a358:	4684      	mov	ip, r0
2000a35a:	2800      	cmp	r0, #0
2000a35c:	d1e6      	bne.n	2000a32c <BSP_QSPI_Init+0xc>
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a35e:	2505      	movs	r5, #5
	s_config.Match = 0x00;
2000a360:	f04f 0800 	mov.w	r8, #0
2000a364:	f04f 0901 	mov.w	r9, #1
2000a368:	2610      	movs	r6, #16
2000a36a:	2701      	movs	r7, #1
2000a36c:	f04f 0a00 	mov.w	sl, #0
2000a370:	f44f 0b80 	mov.w	fp, #4194304	; 0x400000
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a374:	9514      	str	r5, [sp, #80]	; 0x50
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a376:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a37a:	466a      	mov	r2, sp
2000a37c:	a914      	add	r1, sp, #80	; 0x50
2000a37e:	f241 3388 	movw	r3, #5000	; 0x1388
2000a382:	483b      	ldr	r0, [pc, #236]	; (2000a470 <BSP_QSPI_Init+0x150>)
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a384:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
	s_command.DummyCycles = 0;
2000a388:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a38c:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a390:	951d      	str	r5, [sp, #116]	; 0x74
	s_command.AddressMode = QSPI_ADDRESS_NONE;
2000a392:	e9cd 4c1a 	strd	r4, ip, [sp, #104]	; 0x68
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a396:	e9cd cc1f 	strd	ip, ip, [sp, #124]	; 0x7c
	s_config.Match = 0x00;
2000a39a:	e9cd 8900 	strd	r8, r9, [sp]
2000a39e:	e9cd 6702 	strd	r6, r7, [sp, #8]
2000a3a2:	e9cd ab04 	strd	sl, fp, [sp, #16]
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a3a6:	f7fe f9df 	bl	20008768 <HAL_QSPI_AutoPolling>
2000a3aa:	2800      	cmp	r0, #0
2000a3ac:	d1be      	bne.n	2000a32c <BSP_QSPI_Init+0xc>
	s_command.Instruction = RESET_MEMORY_CMD;
2000a3ae:	2399      	movs	r3, #153	; 0x99
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a3b0:	f241 3288 	movw	r2, #5000	; 0x1388
2000a3b4:	a906      	add	r1, sp, #24
2000a3b6:	482e      	ldr	r0, [pc, #184]	; (2000a470 <BSP_QSPI_Init+0x150>)
	s_command.Instruction = RESET_MEMORY_CMD;
2000a3b8:	9306      	str	r3, [sp, #24]
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a3ba:	f7fd fe51 	bl	20008060 <HAL_QSPI_Command>
2000a3be:	4684      	mov	ip, r0
2000a3c0:	2800      	cmp	r0, #0
2000a3c2:	d1b3      	bne.n	2000a32c <BSP_QSPI_Init+0xc>
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a3c4:	2505      	movs	r5, #5
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a3c6:	f241 3388 	movw	r3, #5000	; 0x1388
2000a3ca:	466a      	mov	r2, sp
2000a3cc:	a914      	add	r1, sp, #80	; 0x50
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a3ce:	9514      	str	r5, [sp, #80]	; 0x50
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a3d0:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a3d4:	4826      	ldr	r0, [pc, #152]	; (2000a470 <BSP_QSPI_Init+0x150>)
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a3d6:	941a      	str	r4, [sp, #104]	; 0x68
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a3d8:	951d      	str	r5, [sp, #116]	; 0x74
	s_command.DummyCycles = 0;
2000a3da:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a3de:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a3e2:	e9cd cc1b 	strd	ip, ip, [sp, #108]	; 0x6c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a3e6:	e9cd cc1f 	strd	ip, ip, [sp, #124]	; 0x7c
	s_config.Match = 0x00;
2000a3ea:	e9cd 8900 	strd	r8, r9, [sp]
2000a3ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
2000a3f2:	e9cd ab04 	strd	sl, fp, [sp, #16]
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a3f6:	f7fe f9b7 	bl	20008768 <HAL_QSPI_AutoPolling>
2000a3fa:	2800      	cmp	r0, #0
2000a3fc:	d196      	bne.n	2000a32c <BSP_QSPI_Init+0xc>
{
	QSPI_CommandTypeDef s_command;

	/* Initialize the read flag status register command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
	s_command.Instruction = Address_4Byte_Mode_CMD;
2000a3fe:	23b7      	movs	r3, #183	; 0xb7
	s_command.AddressMode = QSPI_ADDRESS_NONE;
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
	s_command.DataMode = QSPI_DATA_NONE;
	s_command.DummyCycles = 0;
2000a400:	900b      	str	r0, [sp, #44]	; 0x2c
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;

	/* Configure the command */
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a402:	a906      	add	r1, sp, #24
2000a404:	f241 3288 	movw	r2, #5000	; 0x1388
	s_command.Instruction = Address_4Byte_Mode_CMD;
2000a408:	9306      	str	r3, [sp, #24]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
2000a40a:	e9cd 400c 	strd	r4, r0, [sp, #48]	; 0x30
	s_command.DataMode = QSPI_DATA_NONE;
2000a40e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
2000a412:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a416:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a41a:	4815      	ldr	r0, [pc, #84]	; (2000a470 <BSP_QSPI_Init+0x150>)
2000a41c:	f7fd fe20 	bl	20008060 <HAL_QSPI_Command>
2000a420:	4684      	mov	ip, r0
2000a422:	b118      	cbz	r0, 2000a42c <BSP_QSPI_Init+0x10c>
		return QSPI_ERROR;
2000a424:	2001      	movs	r0, #1
}
2000a426:	b023      	add	sp, #140	; 0x8c
2000a428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a42c:	941a      	str	r4, [sp, #104]	; 0x68
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a42e:	2405      	movs	r4, #5
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a430:	466a      	mov	r2, sp
2000a432:	a914      	add	r1, sp, #80	; 0x50
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a434:	9414      	str	r4, [sp, #80]	; 0x50
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a436:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a43a:	f241 3388 	movw	r3, #5000	; 0x1388
2000a43e:	480c      	ldr	r0, [pc, #48]	; (2000a470 <BSP_QSPI_Init+0x150>)
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a440:	941d      	str	r4, [sp, #116]	; 0x74
	s_command.DummyCycles = 0;
2000a442:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a446:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a44a:	e9cd cc1b 	strd	ip, ip, [sp, #108]	; 0x6c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a44e:	e9cd cc1f 	strd	ip, ip, [sp, #124]	; 0x7c
	s_config.Match = 0x00;
2000a452:	e9cd 8900 	strd	r8, r9, [sp]
2000a456:	e9cd 6702 	strd	r6, r7, [sp, #8]
2000a45a:	e9cd ab04 	strd	sl, fp, [sp, #16]
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a45e:	f7fe f983 	bl	20008768 <HAL_QSPI_AutoPolling>
		return QSPI_ERROR;
2000a462:	3800      	subs	r0, #0
2000a464:	bf18      	it	ne
2000a466:	2001      	movne	r0, #1
}
2000a468:	b023      	add	sp, #140	; 0x8c
2000a46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000a46e:	bf00      	nop
2000a470:	20000428 	.word	0x20000428

2000a474 <BSP_QSPI_Read>:
{
2000a474:	b5f0      	push	{r4, r5, r6, r7, lr}
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a476:	f44f 7580 	mov.w	r5, #256	; 0x100
{
2000a47a:	b08f      	sub	sp, #60	; 0x3c
2000a47c:	4604      	mov	r4, r0
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
2000a47e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a482:	2300      	movs	r3, #0
	s_command.Instruction = READ_CMD;
2000a484:	2703      	movs	r7, #3
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
2000a486:	f44f 6680 	mov.w	r6, #1024	; 0x400
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a48a:	9506      	str	r5, [sp, #24]
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a48c:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	s_command.Address = ReadAddr;
2000a490:	9101      	str	r1, [sp, #4]
	s_command.NbData = Size;
2000a492:	920a      	str	r2, [sp, #40]	; 0x28
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a494:	4669      	mov	r1, sp
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
2000a496:	9003      	str	r0, [sp, #12]
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a498:	f241 3288 	movw	r2, #5000	; 0x1388
2000a49c:	480c      	ldr	r0, [pc, #48]	; (2000a4d0 <BSP_QSPI_Read+0x5c>)
	s_command.Instruction = READ_CMD;
2000a49e:	9700      	str	r7, [sp, #0]
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
2000a4a0:	9607      	str	r6, [sp, #28]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a4a2:	9308      	str	r3, [sp, #32]
	s_command.DummyCycles = 0;
2000a4a4:	9305      	str	r3, [sp, #20]
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a4a6:	930d      	str	r3, [sp, #52]	; 0x34
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a4a8:	9509      	str	r5, [sp, #36]	; 0x24
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a4aa:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a4ae:	f7fd fdd7 	bl	20008060 <HAL_QSPI_Command>
2000a4b2:	b110      	cbz	r0, 2000a4ba <BSP_QSPI_Read+0x46>
		return QSPI_ERROR;
2000a4b4:	2001      	movs	r0, #1
}
2000a4b6:	b00f      	add	sp, #60	; 0x3c
2000a4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2000a4ba:	4621      	mov	r1, r4
2000a4bc:	f241 3288 	movw	r2, #5000	; 0x1388
2000a4c0:	4803      	ldr	r0, [pc, #12]	; (2000a4d0 <BSP_QSPI_Read+0x5c>)
2000a4c2:	f7fd ff17 	bl	200082f4 <HAL_QSPI_Receive>
		return QSPI_ERROR;
2000a4c6:	3800      	subs	r0, #0
2000a4c8:	bf18      	it	ne
2000a4ca:	2001      	movne	r0, #1
}
2000a4cc:	b00f      	add	sp, #60	; 0x3c
2000a4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000a4d0:	20000428 	.word	0x20000428

2000a4d4 <BSP_QSPI_Write>:
{
2000a4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	current_addr = 0;
2000a4d8:	2300      	movs	r3, #0
{
2000a4da:	b0a3      	sub	sp, #140	; 0x8c
2000a4dc:	4606      	mov	r6, r0
2000a4de:	460d      	mov	r5, r1
		current_addr += W25Q256JW_PAGE_SIZE;
2000a4e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
	while(current_addr <= WriteAddr)
2000a4e4:	429d      	cmp	r5, r3
2000a4e6:	d2fb      	bcs.n	2000a4e0 <BSP_QSPI_Write+0xc>
	current_size = current_addr - WriteAddr;
2000a4e8:	1b5c      	subs	r4, r3, r5
	end_addr = WriteAddr + Size;
2000a4ea:	18af      	adds	r7, r5, r2
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a4ec:	2300      	movs	r3, #0
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a4ee:	f44f 7e80 	mov.w	lr, #256	; 0x100
2000a4f2:	4294      	cmp	r4, r2
	s_command.Instruction = QUAD_INPUT_PAGE_PROG_4Byte_Address_CMD;
2000a4f4:	f04f 0c34 	mov.w	ip, #52	; 0x34
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
2000a4f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
	s_command.AddressSize = QSPI_ADDRESS_32_BITS;
2000a4fc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
2000a500:	bf28      	it	cs
2000a502:	4614      	movcs	r4, r2
	s_command.DataMode = QSPI_DATA_4_LINES;
2000a504:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
		if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a508:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 2000a5cc <BSP_QSPI_Write+0xf8>
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a50c:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
	s_command.Instruction = QUAD_INPUT_PAGE_PROG_4Byte_Address_CMD;
2000a510:	f8cd c018 	str.w	ip, [sp, #24]
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
2000a514:	900d      	str	r0, [sp, #52]	; 0x34
	s_command.AddressSize = QSPI_ADDRESS_32_BITS;
2000a516:	9109      	str	r1, [sp, #36]	; 0x24
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a518:	930e      	str	r3, [sp, #56]	; 0x38
	s_command.DummyCycles = 0;
2000a51a:	930b      	str	r3, [sp, #44]	; 0x2c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a51c:	9313      	str	r3, [sp, #76]	; 0x4c
	s_command.DataMode = QSPI_DATA_4_LINES;
2000a51e:	920f      	str	r2, [sp, #60]	; 0x3c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a520:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
2000a524:	e006      	b.n	2000a534 <BSP_QSPI_Write+0x60>
						(end_addr - current_addr) : W25Q256JW_PAGE_SIZE;
2000a526:	42bb      	cmp	r3, r7
2000a528:	eba7 0405 	sub.w	r4, r7, r5
2000a52c:	bf98      	it	ls
2000a52e:	4654      	movls	r4, sl
	while(current_addr < end_addr);
2000a530:	42af      	cmp	r7, r5
2000a532:	d947      	bls.n	2000a5c4 <BSP_QSPI_Write+0xf0>
		s_command.Address = current_addr;
2000a534:	9507      	str	r5, [sp, #28]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a536:	f44f 7a80 	mov.w	sl, #256	; 0x100
		s_command.NbData = current_size;
2000a53a:	9410      	str	r4, [sp, #64]	; 0x40
		if(QSPI_WriteEnable() != QSPI_OK)
2000a53c:	f7ff fe16 	bl	2000a16c <QSPI_WriteEnable>
2000a540:	4603      	mov	r3, r0
		current_addr += current_size;
2000a542:	4425      	add	r5, r4
		if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a544:	a906      	add	r1, sp, #24
2000a546:	f241 3288 	movw	r2, #5000	; 0x1388
2000a54a:	4820      	ldr	r0, [pc, #128]	; (2000a5cc <BSP_QSPI_Write+0xf8>)
		if(QSPI_WriteEnable() != QSPI_OK)
2000a54c:	bbcb      	cbnz	r3, 2000a5c2 <BSP_QSPI_Write+0xee>
		if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a54e:	f7fd fd87 	bl	20008060 <HAL_QSPI_Command>
2000a552:	4603      	mov	r3, r0
		if(HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a554:	4631      	mov	r1, r6
2000a556:	f241 3288 	movw	r2, #5000	; 0x1388
2000a55a:	4658      	mov	r0, fp
		pData += current_size;
2000a55c:	4426      	add	r6, r4
		if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a55e:	bb83      	cbnz	r3, 2000a5c2 <BSP_QSPI_Write+0xee>
		if(HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a560:	f7fd fe4a 	bl	200081f8 <HAL_QSPI_Transmit>
2000a564:	4604      	mov	r4, r0
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a566:	f04f 0e05 	mov.w	lr, #5
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a56a:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a56e:	f241 3388 	movw	r3, #5000	; 0x1388
2000a572:	466a      	mov	r2, sp
2000a574:	a914      	add	r1, sp, #80	; 0x50
2000a576:	4658      	mov	r0, fp
		if(HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a578:	bb1c      	cbnz	r4, 2000a5c2 <BSP_QSPI_Write+0xee>
	s_config.Match = 0x00;
2000a57a:	f04f 0800 	mov.w	r8, #0
2000a57e:	f04f 0901 	mov.w	r9, #1
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a582:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a586:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a58a:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
	s_command.DummyCycles = 0;
2000a58e:	9419      	str	r4, [sp, #100]	; 0x64
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a590:	9421      	str	r4, [sp, #132]	; 0x84
	s_config.Match = 0x00;
2000a592:	e9cd 8900 	strd	r8, r9, [sp]
2000a596:	f04f 0810 	mov.w	r8, #16
2000a59a:	f04f 0901 	mov.w	r9, #1
2000a59e:	e9cd 8902 	strd	r8, r9, [sp, #8]
2000a5a2:	f04f 0800 	mov.w	r8, #0
2000a5a6:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a5aa:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a5ae:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	s_config.Match = 0x00;
2000a5b2:	e9cd 8904 	strd	r8, r9, [sp, #16]
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a5b6:	f7fe f8d7 	bl	20008768 <HAL_QSPI_AutoPolling>
				((current_addr + W25Q256JW_PAGE_SIZE) > end_addr) ?
2000a5ba:	eb05 030a 	add.w	r3, r5, sl
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a5be:	2800      	cmp	r0, #0
2000a5c0:	d0b1      	beq.n	2000a526 <BSP_QSPI_Write+0x52>
			return QSPI_ERROR;
2000a5c2:	2001      	movs	r0, #1
}
2000a5c4:	b023      	add	sp, #140	; 0x8c
2000a5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000a5ca:	bf00      	nop
2000a5cc:	20000428 	.word	0x20000428

2000a5d0 <BSP_QSPI_Erase_Sector>:
{
2000a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	EraseStartAddress = EraseStartAddress - EraseStartAddress % MEMORY_SECTOR_SIZE;
2000a5d4:	4d31      	ldr	r5, [pc, #196]	; (2000a69c <BSP_QSPI_Erase_Sector+0xcc>)
{
2000a5d6:	b0a3      	sub	sp, #140	; 0x8c
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a5d8:	f44f 7380 	mov.w	r3, #256	; 0x100
{
2000a5dc:	4688      	mov	r8, r1
	EraseStartAddress = EraseStartAddress - EraseStartAddress % MEMORY_SECTOR_SIZE;
2000a5de:	4005      	ands	r5, r0
	s_command.Instruction = BLOCK_ERASE_CMD;
2000a5e0:	24dc      	movs	r4, #220	; 0xdc
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
2000a5e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
	s_command.AddressSize = QSPI_ADDRESS_32_BITS;
2000a5e6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a5ea:	930c      	str	r3, [sp, #48]	; 0x30
	while(EraseEndAddress >= EraseStartAddress)
2000a5ec:	4545      	cmp	r5, r8
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a5ee:	f04f 0300 	mov.w	r3, #0
	s_command.Instruction = BLOCK_ERASE_CMD;
2000a5f2:	9406      	str	r4, [sp, #24]
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
2000a5f4:	910d      	str	r1, [sp, #52]	; 0x34
	s_command.AddressSize = QSPI_ADDRESS_32_BITS;
2000a5f6:	9209      	str	r2, [sp, #36]	; 0x24
	s_command.DummyCycles = 0;
2000a5f8:	930b      	str	r3, [sp, #44]	; 0x2c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a5fa:	9313      	str	r3, [sp, #76]	; 0x4c
	s_command.DataMode = QSPI_DATA_NONE;
2000a5fc:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a600:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	while(EraseEndAddress >= EraseStartAddress)
2000a604:	d845      	bhi.n	2000a692 <BSP_QSPI_Erase_Sector+0xc2>
		if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a606:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2000a6a0 <BSP_QSPI_Erase_Sector+0xd0>
2000a60a:	e001      	b.n	2000a610 <BSP_QSPI_Erase_Sector+0x40>
	while(EraseEndAddress >= EraseStartAddress)
2000a60c:	45a8      	cmp	r8, r5
2000a60e:	d340      	bcc.n	2000a692 <BSP_QSPI_Erase_Sector+0xc2>
		s_command.Address = (EraseStartAddress & 0x0FFFFFFF);
2000a610:	f025 4370 	bic.w	r3, r5, #4026531840	; 0xf0000000
		EraseStartAddress += MEMORY_SECTOR_SIZE;
2000a614:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
		s_command.Address = (EraseStartAddress & 0x0FFFFFFF);
2000a618:	9307      	str	r3, [sp, #28]
		if(QSPI_WriteEnable() != QSPI_OK)
2000a61a:	f7ff fda7 	bl	2000a16c <QSPI_WriteEnable>
2000a61e:	4603      	mov	r3, r0
		if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a620:	f241 3288 	movw	r2, #5000	; 0x1388
2000a624:	a906      	add	r1, sp, #24
2000a626:	481e      	ldr	r0, [pc, #120]	; (2000a6a0 <BSP_QSPI_Erase_Sector+0xd0>)
		if(QSPI_WriteEnable() != QSPI_OK)
2000a628:	bb7b      	cbnz	r3, 2000a68a <BSP_QSPI_Erase_Sector+0xba>
		if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a62a:	f7fd fd19 	bl	20008060 <HAL_QSPI_Command>
2000a62e:	4604      	mov	r4, r0
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a630:	f44f 7a80 	mov.w	sl, #256	; 0x100
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a634:	f04f 0e05 	mov.w	lr, #5
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a638:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	s_config.Match = 0x00;
2000a63c:	2600      	movs	r6, #0
2000a63e:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a642:	f640 33b8 	movw	r3, #3000	; 0xbb8
2000a646:	466a      	mov	r2, sp
2000a648:	a914      	add	r1, sp, #80	; 0x50
2000a64a:	4648      	mov	r0, r9
		if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a64c:	b9ec      	cbnz	r4, 2000a68a <BSP_QSPI_Erase_Sector+0xba>
	s_config.Match = 0x00;
2000a64e:	f04f 0b01 	mov.w	fp, #1
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a652:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
	s_config.Match = 0x00;
2000a656:	f04f 0a00 	mov.w	sl, #0
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a65a:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a65e:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
	s_command.DummyCycles = 0;
2000a662:	9419      	str	r4, [sp, #100]	; 0x64
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a664:	9421      	str	r4, [sp, #132]	; 0x84
	s_config.Match = 0x00;
2000a666:	e9cd ab00 	strd	sl, fp, [sp]
2000a66a:	f04f 0a10 	mov.w	sl, #16
2000a66e:	f04f 0b01 	mov.w	fp, #1
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a672:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a676:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	s_config.Match = 0x00;
2000a67a:	e9cd ab02 	strd	sl, fp, [sp, #8]
2000a67e:	e9cd 6704 	strd	r6, r7, [sp, #16]
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a682:	f7fe f871 	bl	20008768 <HAL_QSPI_AutoPolling>
2000a686:	2800      	cmp	r0, #0
2000a688:	d0c0      	beq.n	2000a60c <BSP_QSPI_Erase_Sector+0x3c>
			return QSPI_ERROR;
2000a68a:	2001      	movs	r0, #1
}
2000a68c:	b023      	add	sp, #140	; 0x8c
2000a68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return QSPI_OK;
2000a692:	2000      	movs	r0, #0
}
2000a694:	b023      	add	sp, #140	; 0x8c
2000a696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000a69a:	bf00      	nop
2000a69c:	ffff0000 	.word	0xffff0000
2000a6a0:	20000428 	.word	0x20000428

2000a6a4 <BSP_QSPI_Erase_Chip>:
{
2000a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s_command.Instruction = CHIP_ERASE_CMD;
2000a6a8:	20c7      	movs	r0, #199	; 0xc7
{
2000a6aa:	b0a3      	sub	sp, #140	; 0x8c
	s_command.AddressMode = QSPI_ADDRESS_NONE;
2000a6ac:	2300      	movs	r3, #0
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a6ae:	f44f 7580 	mov.w	r5, #256	; 0x100
	s_command.Instruction = WRITE_ENABLE_CMD;
2000a6b2:	2406      	movs	r4, #6
	s_command.Instruction = CHIP_ERASE_CMD;
2000a6b4:	9006      	str	r0, [sp, #24]
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a6b6:	a914      	add	r1, sp, #80	; 0x50
2000a6b8:	f241 3288 	movw	r2, #5000	; 0x1388
2000a6bc:	4833      	ldr	r0, [pc, #204]	; (2000a78c <BSP_QSPI_Erase_Chip+0xe8>)
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a6be:	950c      	str	r5, [sp, #48]	; 0x30
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a6c0:	951a      	str	r5, [sp, #104]	; 0x68
	s_command.DataMode = QSPI_DATA_NONE;
2000a6c2:	930f      	str	r3, [sp, #60]	; 0x3c
	s_command.DummyCycles = 0;
2000a6c4:	930b      	str	r3, [sp, #44]	; 0x2c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a6c6:	9313      	str	r3, [sp, #76]	; 0x4c
	s_command.DataMode = QSPI_DATA_NONE;
2000a6c8:	931d      	str	r3, [sp, #116]	; 0x74
	s_command.DummyCycles = 0;
2000a6ca:	9319      	str	r3, [sp, #100]	; 0x64
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a6cc:	9321      	str	r3, [sp, #132]	; 0x84
	s_command.Instruction = WRITE_ENABLE_CMD;
2000a6ce:	9414      	str	r4, [sp, #80]	; 0x50
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a6d0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a6d4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a6d8:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a6dc:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a6e0:	f7fd fcbe 	bl	20008060 <HAL_QSPI_Command>
2000a6e4:	b118      	cbz	r0, 2000a6ee <BSP_QSPI_Erase_Chip+0x4a>
		return QSPI_ERROR;
2000a6e6:	2001      	movs	r0, #1
}
2000a6e8:	b023      	add	sp, #140	; 0x8c
2000a6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_config.Match = W25Q256JW_FSR_WREN;
2000a6ee:	2602      	movs	r6, #2
2000a6f0:	2702      	movs	r7, #2
2000a6f2:	f04f 0810 	mov.w	r8, #16
2000a6f6:	f04f 0901 	mov.w	r9, #1
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a6fa:	f04f 0b05 	mov.w	fp, #5
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a6fe:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
	s_command.NbData = 1;
2000a702:	2401      	movs	r4, #1
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a704:	466a      	mov	r2, sp
2000a706:	f241 3388 	movw	r3, #5000	; 0x1388
2000a70a:	a914      	add	r1, sp, #80	; 0x50
2000a70c:	481f      	ldr	r0, [pc, #124]	; (2000a78c <BSP_QSPI_Erase_Chip+0xe8>)
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a70e:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
	s_config.Match = W25Q256JW_FSR_WREN;
2000a712:	e9cd 6700 	strd	r6, r7, [sp]
2000a716:	2600      	movs	r6, #0
2000a718:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
	s_command.NbData = 1;
2000a71c:	e9cd a41d 	strd	sl, r4, [sp, #116]	; 0x74
	s_config.Match = W25Q256JW_FSR_WREN;
2000a720:	e9cd 8902 	strd	r8, r9, [sp, #8]
2000a724:	e9cd 6704 	strd	r6, r7, [sp, #16]
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a728:	f7fe f81e 	bl	20008768 <HAL_QSPI_AutoPolling>
2000a72c:	2800      	cmp	r0, #0
2000a72e:	d1da      	bne.n	2000a6e6 <BSP_QSPI_Erase_Chip+0x42>
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a730:	f241 3288 	movw	r2, #5000	; 0x1388
2000a734:	a906      	add	r1, sp, #24
2000a736:	4815      	ldr	r0, [pc, #84]	; (2000a78c <BSP_QSPI_Erase_Chip+0xe8>)
2000a738:	f7fd fc92 	bl	20008060 <HAL_QSPI_Command>
2000a73c:	4684      	mov	ip, r0
2000a73e:	bb00      	cbnz	r0, 2000a782 <BSP_QSPI_Erase_Chip+0xde>
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a740:	951a      	str	r5, [sp, #104]	; 0x68
	s_config.Match = 0x00;
2000a742:	2400      	movs	r4, #0
2000a744:	2501      	movs	r5, #1
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a746:	466a      	mov	r2, sp
2000a748:	a914      	add	r1, sp, #80	; 0x50
2000a74a:	4b11      	ldr	r3, [pc, #68]	; (2000a790 <BSP_QSPI_Erase_Chip+0xec>)
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a74c:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a750:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
	s_command.DummyCycles = 0;
2000a754:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a758:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a75c:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a760:	480a      	ldr	r0, [pc, #40]	; (2000a78c <BSP_QSPI_Erase_Chip+0xe8>)
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a762:	e9cd cc1f 	strd	ip, ip, [sp, #124]	; 0x7c
	s_config.Match = 0x00;
2000a766:	e9cd 8902 	strd	r8, r9, [sp, #8]
2000a76a:	e9cd 6704 	strd	r6, r7, [sp, #16]
2000a76e:	e9cd 4500 	strd	r4, r5, [sp]
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a772:	f7fd fff9 	bl	20008768 <HAL_QSPI_AutoPolling>
		return QSPI_ERROR;
2000a776:	3800      	subs	r0, #0
2000a778:	bf18      	it	ne
2000a77a:	2001      	movne	r0, #1
}
2000a77c:	b023      	add	sp, #140	; 0x8c
2000a77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return QSPI_ERROR;
2000a782:	4620      	mov	r0, r4
}
2000a784:	b023      	add	sp, #140	; 0x8c
2000a786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000a78a:	bf00      	nop
2000a78c:	20000428 	.word	0x20000428
2000a790:	0003d090 	.word	0x0003d090

2000a794 <BSP_QSPI_GetStatus>:
{
2000a794:	b530      	push	{r4, r5, lr}
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a796:	f44f 7180 	mov.w	r1, #256	; 0x100
{
2000a79a:	b091      	sub	sp, #68	; 0x44
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a79c:	2005      	movs	r0, #5
	s_command.AddressMode = QSPI_ADDRESS_NONE;
2000a79e:	2300      	movs	r3, #0
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a7a0:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	s_command.NbData = 1;
2000a7a4:	2401      	movs	r4, #1
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a7a6:	9108      	str	r1, [sp, #32]
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a7a8:	f241 3288 	movw	r2, #5000	; 0x1388
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a7ac:	9002      	str	r0, [sp, #8]
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a7ae:	a902      	add	r1, sp, #8
2000a7b0:	480f      	ldr	r0, [pc, #60]	; (2000a7f0 <BSP_QSPI_GetStatus+0x5c>)
	s_command.DummyCycles = 0;
2000a7b2:	9307      	str	r3, [sp, #28]
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a7b4:	930f      	str	r3, [sp, #60]	; 0x3c
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a7b6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a7ba:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	s_command.NbData = 1;
2000a7be:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a7c2:	f7fd fc4d 	bl	20008060 <HAL_QSPI_Command>
2000a7c6:	b110      	cbz	r0, 2000a7ce <BSP_QSPI_GetStatus+0x3a>
		return QSPI_ERROR;
2000a7c8:	2001      	movs	r0, #1
}
2000a7ca:	b011      	add	sp, #68	; 0x44
2000a7cc:	bd30      	pop	{r4, r5, pc}
	if(HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2000a7ce:	f241 3288 	movw	r2, #5000	; 0x1388
2000a7d2:	f10d 0107 	add.w	r1, sp, #7
2000a7d6:	4806      	ldr	r0, [pc, #24]	; (2000a7f0 <BSP_QSPI_GetStatus+0x5c>)
2000a7d8:	f7fd fd8c 	bl	200082f4 <HAL_QSPI_Receive>
2000a7dc:	2800      	cmp	r0, #0
2000a7de:	d1f3      	bne.n	2000a7c8 <BSP_QSPI_GetStatus+0x34>
	if((reg & W25Q256JW_FSR_BUSY) != 0)
2000a7e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
2000a7e4:	f010 0001 	ands.w	r0, r0, #1
		return QSPI_BUSY;
2000a7e8:	bf18      	it	ne
2000a7ea:	2002      	movne	r0, #2
}
2000a7ec:	b011      	add	sp, #68	; 0x44
2000a7ee:	bd30      	pop	{r4, r5, pc}
2000a7f0:	20000428 	.word	0x20000428

2000a7f4 <BSP_QSPI_GetInfo>:
{
2000a7f4:	b470      	push	{r4, r5, r6}
2000a7f6:	4603      	mov	r3, r0
	pInfo->FlashSize = W25Q256JW_FLASH_SIZE;
2000a7f8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
	pInfo->EraseSectorSize = W25Q256JW_SUBSECTOR_SIZE;
2000a7fc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	pInfo->EraseSectorsNumber = (W25Q256JW_FLASH_SIZE / W25Q256JW_SUBSECTOR_SIZE);
2000a800:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	pInfo->ProgPageSize = W25Q256JW_PAGE_SIZE;
2000a804:	f44f 7180 	mov.w	r1, #256	; 0x100
	pInfo->ProgPagesNumber = (W25Q256JW_FLASH_SIZE / W25Q256JW_PAGE_SIZE);
2000a808:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	pInfo->FlashSize = W25Q256JW_FLASH_SIZE;
2000a80c:	6006      	str	r6, [r0, #0]
}
2000a80e:	2000      	movs	r0, #0
	pInfo->EraseSectorsNumber = (W25Q256JW_FLASH_SIZE / W25Q256JW_SUBSECTOR_SIZE);
2000a810:	e9c3 5401 	strd	r5, r4, [r3, #4]
	pInfo->ProgPagesNumber = (W25Q256JW_FLASH_SIZE / W25Q256JW_PAGE_SIZE);
2000a814:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
2000a818:	bc70      	pop	{r4, r5, r6}
2000a81a:	4770      	bx	lr

2000a81c <BSP_QSPI_MemoryMappedMode>:
{
2000a81c:	b570      	push	{r4, r5, r6, lr}
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a81e:	f44f 7580 	mov.w	r5, #256	; 0x100
{
2000a822:	b090      	sub	sp, #64	; 0x40
	s_command.Instruction = QUAD_OUT_FAST_READ_CMD_4Byte_Address;
2000a824:	246c      	movs	r4, #108	; 0x6c
	s_command.DummyCycles = 8;
2000a826:	2608      	movs	r6, #8
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
2000a828:	f44f 6280 	mov.w	r2, #1024	; 0x400
	s_command.AddressSize = QSPI_ADDRESS_32_BITS;
2000a82c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
	s_command.DataMode = QSPI_DATA_4_LINES;
2000a830:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a834:	2300      	movs	r3, #0
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a836:	9508      	str	r5, [sp, #32]
	s_mem_mapped_cfg.TimeOutPeriod = 0;
2000a838:	2500      	movs	r5, #0
	s_command.Instruction = QUAD_OUT_FAST_READ_CMD_4Byte_Address;
2000a83a:	9402      	str	r4, [sp, #8]
	s_mem_mapped_cfg.TimeOutPeriod = 0;
2000a83c:	2400      	movs	r4, #0
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
2000a83e:	9209      	str	r2, [sp, #36]	; 0x24
	if(HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
2000a840:	466a      	mov	r2, sp
	s_command.AddressSize = QSPI_ADDRESS_32_BITS;
2000a842:	9105      	str	r1, [sp, #20]
	if(HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
2000a844:	eb0d 0106 	add.w	r1, sp, r6
	s_command.DataMode = QSPI_DATA_4_LINES;
2000a848:	900b      	str	r0, [sp, #44]	; 0x2c
	if(HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
2000a84a:	4807      	ldr	r0, [pc, #28]	; (2000a868 <BSP_QSPI_MemoryMappedMode+0x4c>)
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a84c:	930a      	str	r3, [sp, #40]	; 0x28
	s_command.DummyCycles = 8;
2000a84e:	9607      	str	r6, [sp, #28]
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a850:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	s_mem_mapped_cfg.TimeOutPeriod = 0;
2000a854:	e9cd 4500 	strd	r4, r5, [sp]
	if(HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
2000a858:	f7fe f866 	bl	20008928 <HAL_QSPI_MemoryMapped>
}
2000a85c:	3800      	subs	r0, #0
2000a85e:	bf18      	it	ne
2000a860:	2001      	movne	r0, #1
2000a862:	b010      	add	sp, #64	; 0x40
2000a864:	bd70      	pop	{r4, r5, r6, pc}
2000a866:	bf00      	nop
2000a868:	20000428 	.word	0x20000428

2000a86c <BSP_QSPI_Enter4ByteAddrMode>:
{
2000a86c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
2000a870:	b0a3      	sub	sp, #140	; 0x8c
	s_command.AddressMode = QSPI_ADDRESS_NONE;
2000a872:	2300      	movs	r3, #0
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a874:	f44f 7480 	mov.w	r4, #256	; 0x100
	s_command.Instruction = Address_4Byte_Mode_CMD;
2000a878:	25b7      	movs	r5, #183	; 0xb7
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a87a:	f241 3288 	movw	r2, #5000	; 0x1388
2000a87e:	a906      	add	r1, sp, #24
2000a880:	481c      	ldr	r0, [pc, #112]	; (2000a8f4 <BSP_QSPI_Enter4ByteAddrMode+0x88>)
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a882:	940c      	str	r4, [sp, #48]	; 0x30
	s_command.Instruction = Address_4Byte_Mode_CMD;
2000a884:	9506      	str	r5, [sp, #24]
	s_command.DataMode = QSPI_DATA_NONE;
2000a886:	930f      	str	r3, [sp, #60]	; 0x3c
	s_command.DummyCycles = 0;
2000a888:	930b      	str	r3, [sp, #44]	; 0x2c
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a88a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
2000a88e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a892:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
	if(HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000a896:	f7fd fbe3 	bl	20008060 <HAL_QSPI_Command>
2000a89a:	b118      	cbz	r0, 2000a8a4 <BSP_QSPI_Enter4ByteAddrMode+0x38>
			!= HAL_OK)
	{
		return QSPI_ERROR;
2000a89c:	2001      	movs	r0, #1
	{
		return QSPI_ERROR;
	}

	return QSPI_OK;
}
2000a89e:	b023      	add	sp, #140	; 0x8c
2000a8a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a8a4:	2205      	movs	r2, #5
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a8a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000a8aa:	941a      	str	r4, [sp, #104]	; 0x68
	s_config.Match = 0x00;
2000a8ac:	f04f 0800 	mov.w	r8, #0
2000a8b0:	f04f 0901 	mov.w	r9, #1
2000a8b4:	2610      	movs	r6, #16
2000a8b6:	2701      	movs	r7, #1
2000a8b8:	2400      	movs	r4, #0
2000a8ba:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
	s_command.DummyCycles = 0;
2000a8be:	9019      	str	r0, [sp, #100]	; 0x64
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000a8c0:	9021      	str	r0, [sp, #132]	; 0x84
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a8c2:	a914      	add	r1, sp, #80	; 0x50
	s_command.Instruction = READ_STATUS_REG1_CMD;
2000a8c4:	9214      	str	r2, [sp, #80]	; 0x50
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a8c6:	466a      	mov	r2, sp
	s_command.DataMode = QSPI_DATA_1_LINE;
2000a8c8:	931d      	str	r3, [sp, #116]	; 0x74
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a8ca:	f241 3388 	movw	r3, #5000	; 0x1388
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000a8ce:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000a8d2:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a8d6:	4807      	ldr	r0, [pc, #28]	; (2000a8f4 <BSP_QSPI_Enter4ByteAddrMode+0x88>)
	s_config.Match = 0x00;
2000a8d8:	e9cd 8900 	strd	r8, r9, [sp]
2000a8dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
2000a8e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
	if(HAL_QSPI_AutoPolling(&QSPIHandle, &s_command, &s_config, Timeout) != HAL_OK)
2000a8e4:	f7fd ff40 	bl	20008768 <HAL_QSPI_AutoPolling>
		return QSPI_ERROR;
2000a8e8:	3800      	subs	r0, #0
2000a8ea:	bf18      	it	ne
2000a8ec:	2001      	movne	r0, #1
}
2000a8ee:	b023      	add	sp, #140	; 0x8c
2000a8f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2000a8f4:	20000428 	.word	0x20000428

2000a8f8 <__errno>:
2000a8f8:	4b01      	ldr	r3, [pc, #4]	; (2000a900 <__errno+0x8>)
2000a8fa:	6818      	ldr	r0, [r3, #0]
2000a8fc:	4770      	bx	lr
2000a8fe:	bf00      	nop
2000a900:	20000224 	.word	0x20000224

2000a904 <exit>:
2000a904:	b508      	push	{r3, lr}
2000a906:	4b07      	ldr	r3, [pc, #28]	; (2000a924 <exit+0x20>)
2000a908:	4604      	mov	r4, r0
2000a90a:	b113      	cbz	r3, 2000a912 <exit+0xe>
2000a90c:	2100      	movs	r1, #0
2000a90e:	f3af 8000 	nop.w
2000a912:	4b05      	ldr	r3, [pc, #20]	; (2000a928 <exit+0x24>)
2000a914:	6818      	ldr	r0, [r3, #0]
2000a916:	6a83      	ldr	r3, [r0, #40]	; 0x28
2000a918:	b103      	cbz	r3, 2000a91c <exit+0x18>
2000a91a:	4798      	blx	r3
2000a91c:	4620      	mov	r0, r4
2000a91e:	f7f6 fbf1 	bl	20001104 <_exit>
2000a922:	bf00      	nop
2000a924:	00000000 	.word	0x00000000
2000a928:	2000fa18 	.word	0x2000fa18

2000a92c <__libc_init_array>:
2000a92c:	b570      	push	{r4, r5, r6, lr}
2000a92e:	4d0d      	ldr	r5, [pc, #52]	; (2000a964 <__libc_init_array+0x38>)
2000a930:	4c0d      	ldr	r4, [pc, #52]	; (2000a968 <__libc_init_array+0x3c>)
2000a932:	1b64      	subs	r4, r4, r5
2000a934:	10a4      	asrs	r4, r4, #2
2000a936:	2600      	movs	r6, #0
2000a938:	42a6      	cmp	r6, r4
2000a93a:	d109      	bne.n	2000a950 <__libc_init_array+0x24>
2000a93c:	4d0b      	ldr	r5, [pc, #44]	; (2000a96c <__libc_init_array+0x40>)
2000a93e:	4c0c      	ldr	r4, [pc, #48]	; (2000a970 <__libc_init_array+0x44>)
2000a940:	f004 ffe8 	bl	2000f914 <_init>
2000a944:	1b64      	subs	r4, r4, r5
2000a946:	10a4      	asrs	r4, r4, #2
2000a948:	2600      	movs	r6, #0
2000a94a:	42a6      	cmp	r6, r4
2000a94c:	d105      	bne.n	2000a95a <__libc_init_array+0x2e>
2000a94e:	bd70      	pop	{r4, r5, r6, pc}
2000a950:	f855 3b04 	ldr.w	r3, [r5], #4
2000a954:	4798      	blx	r3
2000a956:	3601      	adds	r6, #1
2000a958:	e7ee      	b.n	2000a938 <__libc_init_array+0xc>
2000a95a:	f855 3b04 	ldr.w	r3, [r5], #4
2000a95e:	4798      	blx	r3
2000a960:	3601      	adds	r6, #1
2000a962:	e7f2      	b.n	2000a94a <__libc_init_array+0x1e>
2000a964:	20000208 	.word	0x20000208
2000a968:	20000208 	.word	0x20000208
2000a96c:	20000208 	.word	0x20000208
2000a970:	2000020c 	.word	0x2000020c

2000a974 <memset>:
2000a974:	4402      	add	r2, r0
2000a976:	4603      	mov	r3, r0
2000a978:	4293      	cmp	r3, r2
2000a97a:	d100      	bne.n	2000a97e <memset+0xa>
2000a97c:	4770      	bx	lr
2000a97e:	f803 1b01 	strb.w	r1, [r3], #1
2000a982:	e7f9      	b.n	2000a978 <memset+0x4>

2000a984 <__cvt>:
2000a984:	b5f0      	push	{r4, r5, r6, r7, lr}
2000a986:	ed2d 8b02 	vpush	{d8}
2000a98a:	eeb0 8b40 	vmov.f64	d8, d0
2000a98e:	b085      	sub	sp, #20
2000a990:	4617      	mov	r7, r2
2000a992:	9d0d      	ldr	r5, [sp, #52]	; 0x34
2000a994:	9e0c      	ldr	r6, [sp, #48]	; 0x30
2000a996:	ee18 2a90 	vmov	r2, s17
2000a99a:	f025 0520 	bic.w	r5, r5, #32
2000a99e:	2a00      	cmp	r2, #0
2000a9a0:	bfb6      	itet	lt
2000a9a2:	222d      	movlt	r2, #45	; 0x2d
2000a9a4:	2200      	movge	r2, #0
2000a9a6:	eeb1 8b40 	vneglt.f64	d8, d0
2000a9aa:	2d46      	cmp	r5, #70	; 0x46
2000a9ac:	460c      	mov	r4, r1
2000a9ae:	701a      	strb	r2, [r3, #0]
2000a9b0:	d004      	beq.n	2000a9bc <__cvt+0x38>
2000a9b2:	2d45      	cmp	r5, #69	; 0x45
2000a9b4:	d100      	bne.n	2000a9b8 <__cvt+0x34>
2000a9b6:	3401      	adds	r4, #1
2000a9b8:	2102      	movs	r1, #2
2000a9ba:	e000      	b.n	2000a9be <__cvt+0x3a>
2000a9bc:	2103      	movs	r1, #3
2000a9be:	ab03      	add	r3, sp, #12
2000a9c0:	9301      	str	r3, [sp, #4]
2000a9c2:	ab02      	add	r3, sp, #8
2000a9c4:	9300      	str	r3, [sp, #0]
2000a9c6:	4622      	mov	r2, r4
2000a9c8:	4633      	mov	r3, r6
2000a9ca:	eeb0 0b48 	vmov.f64	d0, d8
2000a9ce:	f001 fe23 	bl	2000c618 <_dtoa_r>
2000a9d2:	2d47      	cmp	r5, #71	; 0x47
2000a9d4:	d109      	bne.n	2000a9ea <__cvt+0x66>
2000a9d6:	07fb      	lsls	r3, r7, #31
2000a9d8:	d407      	bmi.n	2000a9ea <__cvt+0x66>
2000a9da:	9b03      	ldr	r3, [sp, #12]
2000a9dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
2000a9de:	1a1b      	subs	r3, r3, r0
2000a9e0:	6013      	str	r3, [r2, #0]
2000a9e2:	b005      	add	sp, #20
2000a9e4:	ecbd 8b02 	vpop	{d8}
2000a9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000a9ea:	2d46      	cmp	r5, #70	; 0x46
2000a9ec:	eb00 0204 	add.w	r2, r0, r4
2000a9f0:	d10c      	bne.n	2000aa0c <__cvt+0x88>
2000a9f2:	7803      	ldrb	r3, [r0, #0]
2000a9f4:	2b30      	cmp	r3, #48	; 0x30
2000a9f6:	d107      	bne.n	2000aa08 <__cvt+0x84>
2000a9f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
2000a9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000aa00:	bf1c      	itt	ne
2000aa02:	f1c4 0401 	rsbne	r4, r4, #1
2000aa06:	6034      	strne	r4, [r6, #0]
2000aa08:	6833      	ldr	r3, [r6, #0]
2000aa0a:	441a      	add	r2, r3
2000aa0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
2000aa10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000aa14:	bf08      	it	eq
2000aa16:	9203      	streq	r2, [sp, #12]
2000aa18:	2130      	movs	r1, #48	; 0x30
2000aa1a:	9b03      	ldr	r3, [sp, #12]
2000aa1c:	4293      	cmp	r3, r2
2000aa1e:	d2dc      	bcs.n	2000a9da <__cvt+0x56>
2000aa20:	1c5c      	adds	r4, r3, #1
2000aa22:	9403      	str	r4, [sp, #12]
2000aa24:	7019      	strb	r1, [r3, #0]
2000aa26:	e7f8      	b.n	2000aa1a <__cvt+0x96>

2000aa28 <__exponent>:
2000aa28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
2000aa2a:	4603      	mov	r3, r0
2000aa2c:	2900      	cmp	r1, #0
2000aa2e:	bfb8      	it	lt
2000aa30:	4249      	neglt	r1, r1
2000aa32:	f803 2b02 	strb.w	r2, [r3], #2
2000aa36:	bfb4      	ite	lt
2000aa38:	222d      	movlt	r2, #45	; 0x2d
2000aa3a:	222b      	movge	r2, #43	; 0x2b
2000aa3c:	2909      	cmp	r1, #9
2000aa3e:	7042      	strb	r2, [r0, #1]
2000aa40:	dd2a      	ble.n	2000aa98 <__exponent+0x70>
2000aa42:	f10d 0407 	add.w	r4, sp, #7
2000aa46:	46a4      	mov	ip, r4
2000aa48:	270a      	movs	r7, #10
2000aa4a:	46a6      	mov	lr, r4
2000aa4c:	460a      	mov	r2, r1
2000aa4e:	fb91 f6f7 	sdiv	r6, r1, r7
2000aa52:	fb07 1516 	mls	r5, r7, r6, r1
2000aa56:	3530      	adds	r5, #48	; 0x30
2000aa58:	2a63      	cmp	r2, #99	; 0x63
2000aa5a:	f104 34ff 	add.w	r4, r4, #4294967295
2000aa5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
2000aa62:	4631      	mov	r1, r6
2000aa64:	dcf1      	bgt.n	2000aa4a <__exponent+0x22>
2000aa66:	3130      	adds	r1, #48	; 0x30
2000aa68:	f1ae 0502 	sub.w	r5, lr, #2
2000aa6c:	f804 1c01 	strb.w	r1, [r4, #-1]
2000aa70:	1c44      	adds	r4, r0, #1
2000aa72:	4629      	mov	r1, r5
2000aa74:	4561      	cmp	r1, ip
2000aa76:	d30a      	bcc.n	2000aa8e <__exponent+0x66>
2000aa78:	f10d 0209 	add.w	r2, sp, #9
2000aa7c:	eba2 020e 	sub.w	r2, r2, lr
2000aa80:	4565      	cmp	r5, ip
2000aa82:	bf88      	it	hi
2000aa84:	2200      	movhi	r2, #0
2000aa86:	4413      	add	r3, r2
2000aa88:	1a18      	subs	r0, r3, r0
2000aa8a:	b003      	add	sp, #12
2000aa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000aa8e:	f811 2b01 	ldrb.w	r2, [r1], #1
2000aa92:	f804 2f01 	strb.w	r2, [r4, #1]!
2000aa96:	e7ed      	b.n	2000aa74 <__exponent+0x4c>
2000aa98:	2330      	movs	r3, #48	; 0x30
2000aa9a:	3130      	adds	r1, #48	; 0x30
2000aa9c:	7083      	strb	r3, [r0, #2]
2000aa9e:	70c1      	strb	r1, [r0, #3]
2000aaa0:	1d03      	adds	r3, r0, #4
2000aaa2:	e7f1      	b.n	2000aa88 <__exponent+0x60>
2000aaa4:	0000      	movs	r0, r0
	...

2000aaa8 <_printf_float>:
2000aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000aaac:	b08b      	sub	sp, #44	; 0x2c
2000aaae:	460c      	mov	r4, r1
2000aab0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
2000aab4:	4616      	mov	r6, r2
2000aab6:	461f      	mov	r7, r3
2000aab8:	4605      	mov	r5, r0
2000aaba:	f002 fed1 	bl	2000d860 <_localeconv_r>
2000aabe:	f8d0 b000 	ldr.w	fp, [r0]
2000aac2:	4658      	mov	r0, fp
2000aac4:	f7f5 fd52 	bl	2000056c <strlen>
2000aac8:	2300      	movs	r3, #0
2000aaca:	9308      	str	r3, [sp, #32]
2000aacc:	f8d8 3000 	ldr.w	r3, [r8]
2000aad0:	f894 9018 	ldrb.w	r9, [r4, #24]
2000aad4:	6822      	ldr	r2, [r4, #0]
2000aad6:	3307      	adds	r3, #7
2000aad8:	f023 0307 	bic.w	r3, r3, #7
2000aadc:	f103 0108 	add.w	r1, r3, #8
2000aae0:	f8c8 1000 	str.w	r1, [r8]
2000aae4:	4682      	mov	sl, r0
2000aae6:	e9d3 0100 	ldrd	r0, r1, [r3]
2000aaea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
2000aaee:	ed9f 7b98 	vldr	d7, [pc, #608]	; 2000ad50 <_printf_float+0x2a8>
2000aaf2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
2000aaf6:	eeb0 6bc0 	vabs.f64	d6, d0
2000aafa:	eeb4 6b47 	vcmp.f64	d6, d7
2000aafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000ab02:	dd24      	ble.n	2000ab4e <_printf_float+0xa6>
2000ab04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2000ab08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000ab0c:	d502      	bpl.n	2000ab14 <_printf_float+0x6c>
2000ab0e:	232d      	movs	r3, #45	; 0x2d
2000ab10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2000ab14:	4b90      	ldr	r3, [pc, #576]	; (2000ad58 <_printf_float+0x2b0>)
2000ab16:	4891      	ldr	r0, [pc, #580]	; (2000ad5c <_printf_float+0x2b4>)
2000ab18:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
2000ab1c:	bf94      	ite	ls
2000ab1e:	4698      	movls	r8, r3
2000ab20:	4680      	movhi	r8, r0
2000ab22:	2303      	movs	r3, #3
2000ab24:	6123      	str	r3, [r4, #16]
2000ab26:	f022 0204 	bic.w	r2, r2, #4
2000ab2a:	2300      	movs	r3, #0
2000ab2c:	6022      	str	r2, [r4, #0]
2000ab2e:	9304      	str	r3, [sp, #16]
2000ab30:	9700      	str	r7, [sp, #0]
2000ab32:	4633      	mov	r3, r6
2000ab34:	aa09      	add	r2, sp, #36	; 0x24
2000ab36:	4621      	mov	r1, r4
2000ab38:	4628      	mov	r0, r5
2000ab3a:	f000 f9d3 	bl	2000aee4 <_printf_common>
2000ab3e:	3001      	adds	r0, #1
2000ab40:	f040 808a 	bne.w	2000ac58 <_printf_float+0x1b0>
2000ab44:	f04f 30ff 	mov.w	r0, #4294967295
2000ab48:	b00b      	add	sp, #44	; 0x2c
2000ab4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000ab4e:	eeb4 0b40 	vcmp.f64	d0, d0
2000ab52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000ab56:	d709      	bvc.n	2000ab6c <_printf_float+0xc4>
2000ab58:	ee10 3a90 	vmov	r3, s1
2000ab5c:	2b00      	cmp	r3, #0
2000ab5e:	bfbc      	itt	lt
2000ab60:	232d      	movlt	r3, #45	; 0x2d
2000ab62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
2000ab66:	487e      	ldr	r0, [pc, #504]	; (2000ad60 <_printf_float+0x2b8>)
2000ab68:	4b7e      	ldr	r3, [pc, #504]	; (2000ad64 <_printf_float+0x2bc>)
2000ab6a:	e7d5      	b.n	2000ab18 <_printf_float+0x70>
2000ab6c:	6863      	ldr	r3, [r4, #4]
2000ab6e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
2000ab72:	9104      	str	r1, [sp, #16]
2000ab74:	1c59      	adds	r1, r3, #1
2000ab76:	d13c      	bne.n	2000abf2 <_printf_float+0x14a>
2000ab78:	2306      	movs	r3, #6
2000ab7a:	6063      	str	r3, [r4, #4]
2000ab7c:	2300      	movs	r3, #0
2000ab7e:	9303      	str	r3, [sp, #12]
2000ab80:	ab08      	add	r3, sp, #32
2000ab82:	e9cd 9301 	strd	r9, r3, [sp, #4]
2000ab86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2000ab8a:	ab07      	add	r3, sp, #28
2000ab8c:	6861      	ldr	r1, [r4, #4]
2000ab8e:	9300      	str	r3, [sp, #0]
2000ab90:	6022      	str	r2, [r4, #0]
2000ab92:	f10d 031b 	add.w	r3, sp, #27
2000ab96:	4628      	mov	r0, r5
2000ab98:	f7ff fef4 	bl	2000a984 <__cvt>
2000ab9c:	9b04      	ldr	r3, [sp, #16]
2000ab9e:	9907      	ldr	r1, [sp, #28]
2000aba0:	2b47      	cmp	r3, #71	; 0x47
2000aba2:	4680      	mov	r8, r0
2000aba4:	d108      	bne.n	2000abb8 <_printf_float+0x110>
2000aba6:	1cc8      	adds	r0, r1, #3
2000aba8:	db02      	blt.n	2000abb0 <_printf_float+0x108>
2000abaa:	6863      	ldr	r3, [r4, #4]
2000abac:	4299      	cmp	r1, r3
2000abae:	dd41      	ble.n	2000ac34 <_printf_float+0x18c>
2000abb0:	f1a9 0902 	sub.w	r9, r9, #2
2000abb4:	fa5f f989 	uxtb.w	r9, r9
2000abb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
2000abbc:	d820      	bhi.n	2000ac00 <_printf_float+0x158>
2000abbe:	3901      	subs	r1, #1
2000abc0:	464a      	mov	r2, r9
2000abc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
2000abc6:	9107      	str	r1, [sp, #28]
2000abc8:	f7ff ff2e 	bl	2000aa28 <__exponent>
2000abcc:	9a08      	ldr	r2, [sp, #32]
2000abce:	9004      	str	r0, [sp, #16]
2000abd0:	1813      	adds	r3, r2, r0
2000abd2:	2a01      	cmp	r2, #1
2000abd4:	6123      	str	r3, [r4, #16]
2000abd6:	dc02      	bgt.n	2000abde <_printf_float+0x136>
2000abd8:	6822      	ldr	r2, [r4, #0]
2000abda:	07d2      	lsls	r2, r2, #31
2000abdc:	d501      	bpl.n	2000abe2 <_printf_float+0x13a>
2000abde:	3301      	adds	r3, #1
2000abe0:	6123      	str	r3, [r4, #16]
2000abe2:	f89d 301b 	ldrb.w	r3, [sp, #27]
2000abe6:	2b00      	cmp	r3, #0
2000abe8:	d0a2      	beq.n	2000ab30 <_printf_float+0x88>
2000abea:	232d      	movs	r3, #45	; 0x2d
2000abec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2000abf0:	e79e      	b.n	2000ab30 <_printf_float+0x88>
2000abf2:	9904      	ldr	r1, [sp, #16]
2000abf4:	2947      	cmp	r1, #71	; 0x47
2000abf6:	d1c1      	bne.n	2000ab7c <_printf_float+0xd4>
2000abf8:	2b00      	cmp	r3, #0
2000abfa:	d1bf      	bne.n	2000ab7c <_printf_float+0xd4>
2000abfc:	2301      	movs	r3, #1
2000abfe:	e7bc      	b.n	2000ab7a <_printf_float+0xd2>
2000ac00:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
2000ac04:	d118      	bne.n	2000ac38 <_printf_float+0x190>
2000ac06:	2900      	cmp	r1, #0
2000ac08:	6863      	ldr	r3, [r4, #4]
2000ac0a:	dd0b      	ble.n	2000ac24 <_printf_float+0x17c>
2000ac0c:	6121      	str	r1, [r4, #16]
2000ac0e:	b913      	cbnz	r3, 2000ac16 <_printf_float+0x16e>
2000ac10:	6822      	ldr	r2, [r4, #0]
2000ac12:	07d0      	lsls	r0, r2, #31
2000ac14:	d502      	bpl.n	2000ac1c <_printf_float+0x174>
2000ac16:	3301      	adds	r3, #1
2000ac18:	440b      	add	r3, r1
2000ac1a:	6123      	str	r3, [r4, #16]
2000ac1c:	2300      	movs	r3, #0
2000ac1e:	65a1      	str	r1, [r4, #88]	; 0x58
2000ac20:	9304      	str	r3, [sp, #16]
2000ac22:	e7de      	b.n	2000abe2 <_printf_float+0x13a>
2000ac24:	b913      	cbnz	r3, 2000ac2c <_printf_float+0x184>
2000ac26:	6822      	ldr	r2, [r4, #0]
2000ac28:	07d2      	lsls	r2, r2, #31
2000ac2a:	d501      	bpl.n	2000ac30 <_printf_float+0x188>
2000ac2c:	3302      	adds	r3, #2
2000ac2e:	e7f4      	b.n	2000ac1a <_printf_float+0x172>
2000ac30:	2301      	movs	r3, #1
2000ac32:	e7f2      	b.n	2000ac1a <_printf_float+0x172>
2000ac34:	f04f 0967 	mov.w	r9, #103	; 0x67
2000ac38:	9b08      	ldr	r3, [sp, #32]
2000ac3a:	4299      	cmp	r1, r3
2000ac3c:	db05      	blt.n	2000ac4a <_printf_float+0x1a2>
2000ac3e:	6823      	ldr	r3, [r4, #0]
2000ac40:	6121      	str	r1, [r4, #16]
2000ac42:	07d8      	lsls	r0, r3, #31
2000ac44:	d5ea      	bpl.n	2000ac1c <_printf_float+0x174>
2000ac46:	1c4b      	adds	r3, r1, #1
2000ac48:	e7e7      	b.n	2000ac1a <_printf_float+0x172>
2000ac4a:	2900      	cmp	r1, #0
2000ac4c:	bfd4      	ite	le
2000ac4e:	f1c1 0202 	rsble	r2, r1, #2
2000ac52:	2201      	movgt	r2, #1
2000ac54:	4413      	add	r3, r2
2000ac56:	e7e0      	b.n	2000ac1a <_printf_float+0x172>
2000ac58:	6823      	ldr	r3, [r4, #0]
2000ac5a:	055a      	lsls	r2, r3, #21
2000ac5c:	d407      	bmi.n	2000ac6e <_printf_float+0x1c6>
2000ac5e:	6923      	ldr	r3, [r4, #16]
2000ac60:	4642      	mov	r2, r8
2000ac62:	4631      	mov	r1, r6
2000ac64:	4628      	mov	r0, r5
2000ac66:	47b8      	blx	r7
2000ac68:	3001      	adds	r0, #1
2000ac6a:	d12a      	bne.n	2000acc2 <_printf_float+0x21a>
2000ac6c:	e76a      	b.n	2000ab44 <_printf_float+0x9c>
2000ac6e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
2000ac72:	f240 80e2 	bls.w	2000ae3a <_printf_float+0x392>
2000ac76:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
2000ac7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
2000ac7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000ac82:	d133      	bne.n	2000acec <_printf_float+0x244>
2000ac84:	4a38      	ldr	r2, [pc, #224]	; (2000ad68 <_printf_float+0x2c0>)
2000ac86:	2301      	movs	r3, #1
2000ac88:	4631      	mov	r1, r6
2000ac8a:	4628      	mov	r0, r5
2000ac8c:	47b8      	blx	r7
2000ac8e:	3001      	adds	r0, #1
2000ac90:	f43f af58 	beq.w	2000ab44 <_printf_float+0x9c>
2000ac94:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
2000ac98:	429a      	cmp	r2, r3
2000ac9a:	db02      	blt.n	2000aca2 <_printf_float+0x1fa>
2000ac9c:	6823      	ldr	r3, [r4, #0]
2000ac9e:	07d8      	lsls	r0, r3, #31
2000aca0:	d50f      	bpl.n	2000acc2 <_printf_float+0x21a>
2000aca2:	4653      	mov	r3, sl
2000aca4:	465a      	mov	r2, fp
2000aca6:	4631      	mov	r1, r6
2000aca8:	4628      	mov	r0, r5
2000acaa:	47b8      	blx	r7
2000acac:	3001      	adds	r0, #1
2000acae:	f43f af49 	beq.w	2000ab44 <_printf_float+0x9c>
2000acb2:	f04f 0800 	mov.w	r8, #0
2000acb6:	f104 091a 	add.w	r9, r4, #26
2000acba:	9b08      	ldr	r3, [sp, #32]
2000acbc:	3b01      	subs	r3, #1
2000acbe:	4543      	cmp	r3, r8
2000acc0:	dc09      	bgt.n	2000acd6 <_printf_float+0x22e>
2000acc2:	6823      	ldr	r3, [r4, #0]
2000acc4:	079b      	lsls	r3, r3, #30
2000acc6:	f100 8108 	bmi.w	2000aeda <_printf_float+0x432>
2000acca:	68e0      	ldr	r0, [r4, #12]
2000accc:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000acce:	4298      	cmp	r0, r3
2000acd0:	bfb8      	it	lt
2000acd2:	4618      	movlt	r0, r3
2000acd4:	e738      	b.n	2000ab48 <_printf_float+0xa0>
2000acd6:	2301      	movs	r3, #1
2000acd8:	464a      	mov	r2, r9
2000acda:	4631      	mov	r1, r6
2000acdc:	4628      	mov	r0, r5
2000acde:	47b8      	blx	r7
2000ace0:	3001      	adds	r0, #1
2000ace2:	f43f af2f 	beq.w	2000ab44 <_printf_float+0x9c>
2000ace6:	f108 0801 	add.w	r8, r8, #1
2000acea:	e7e6      	b.n	2000acba <_printf_float+0x212>
2000acec:	9b07      	ldr	r3, [sp, #28]
2000acee:	2b00      	cmp	r3, #0
2000acf0:	dc3c      	bgt.n	2000ad6c <_printf_float+0x2c4>
2000acf2:	4a1d      	ldr	r2, [pc, #116]	; (2000ad68 <_printf_float+0x2c0>)
2000acf4:	2301      	movs	r3, #1
2000acf6:	4631      	mov	r1, r6
2000acf8:	4628      	mov	r0, r5
2000acfa:	47b8      	blx	r7
2000acfc:	3001      	adds	r0, #1
2000acfe:	f43f af21 	beq.w	2000ab44 <_printf_float+0x9c>
2000ad02:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
2000ad06:	4313      	orrs	r3, r2
2000ad08:	d102      	bne.n	2000ad10 <_printf_float+0x268>
2000ad0a:	6823      	ldr	r3, [r4, #0]
2000ad0c:	07d9      	lsls	r1, r3, #31
2000ad0e:	d5d8      	bpl.n	2000acc2 <_printf_float+0x21a>
2000ad10:	4653      	mov	r3, sl
2000ad12:	465a      	mov	r2, fp
2000ad14:	4631      	mov	r1, r6
2000ad16:	4628      	mov	r0, r5
2000ad18:	47b8      	blx	r7
2000ad1a:	3001      	adds	r0, #1
2000ad1c:	f43f af12 	beq.w	2000ab44 <_printf_float+0x9c>
2000ad20:	f04f 0900 	mov.w	r9, #0
2000ad24:	f104 0a1a 	add.w	sl, r4, #26
2000ad28:	9b07      	ldr	r3, [sp, #28]
2000ad2a:	425b      	negs	r3, r3
2000ad2c:	454b      	cmp	r3, r9
2000ad2e:	dc01      	bgt.n	2000ad34 <_printf_float+0x28c>
2000ad30:	9b08      	ldr	r3, [sp, #32]
2000ad32:	e795      	b.n	2000ac60 <_printf_float+0x1b8>
2000ad34:	2301      	movs	r3, #1
2000ad36:	4652      	mov	r2, sl
2000ad38:	4631      	mov	r1, r6
2000ad3a:	4628      	mov	r0, r5
2000ad3c:	47b8      	blx	r7
2000ad3e:	3001      	adds	r0, #1
2000ad40:	f43f af00 	beq.w	2000ab44 <_printf_float+0x9c>
2000ad44:	f109 0901 	add.w	r9, r9, #1
2000ad48:	e7ee      	b.n	2000ad28 <_printf_float+0x280>
2000ad4a:	bf00      	nop
2000ad4c:	f3af 8000 	nop.w
2000ad50:	ffffffff 	.word	0xffffffff
2000ad54:	7fefffff 	.word	0x7fefffff
2000ad58:	2000fa1c 	.word	0x2000fa1c
2000ad5c:	2000fa20 	.word	0x2000fa20
2000ad60:	2000fa28 	.word	0x2000fa28
2000ad64:	2000fa24 	.word	0x2000fa24
2000ad68:	2000fa2c 	.word	0x2000fa2c
2000ad6c:	9a08      	ldr	r2, [sp, #32]
2000ad6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
2000ad70:	429a      	cmp	r2, r3
2000ad72:	bfa8      	it	ge
2000ad74:	461a      	movge	r2, r3
2000ad76:	2a00      	cmp	r2, #0
2000ad78:	4691      	mov	r9, r2
2000ad7a:	dc38      	bgt.n	2000adee <_printf_float+0x346>
2000ad7c:	2300      	movs	r3, #0
2000ad7e:	9305      	str	r3, [sp, #20]
2000ad80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
2000ad84:	f104 021a 	add.w	r2, r4, #26
2000ad88:	6da3      	ldr	r3, [r4, #88]	; 0x58
2000ad8a:	9905      	ldr	r1, [sp, #20]
2000ad8c:	9304      	str	r3, [sp, #16]
2000ad8e:	eba3 0309 	sub.w	r3, r3, r9
2000ad92:	428b      	cmp	r3, r1
2000ad94:	dc33      	bgt.n	2000adfe <_printf_float+0x356>
2000ad96:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
2000ad9a:	429a      	cmp	r2, r3
2000ad9c:	db3c      	blt.n	2000ae18 <_printf_float+0x370>
2000ad9e:	6823      	ldr	r3, [r4, #0]
2000ada0:	07da      	lsls	r2, r3, #31
2000ada2:	d439      	bmi.n	2000ae18 <_printf_float+0x370>
2000ada4:	9a08      	ldr	r2, [sp, #32]
2000ada6:	9b04      	ldr	r3, [sp, #16]
2000ada8:	9907      	ldr	r1, [sp, #28]
2000adaa:	1ad3      	subs	r3, r2, r3
2000adac:	eba2 0901 	sub.w	r9, r2, r1
2000adb0:	4599      	cmp	r9, r3
2000adb2:	bfa8      	it	ge
2000adb4:	4699      	movge	r9, r3
2000adb6:	f1b9 0f00 	cmp.w	r9, #0
2000adba:	dc35      	bgt.n	2000ae28 <_printf_float+0x380>
2000adbc:	f04f 0800 	mov.w	r8, #0
2000adc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
2000adc4:	f104 0a1a 	add.w	sl, r4, #26
2000adc8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
2000adcc:	1a9b      	subs	r3, r3, r2
2000adce:	eba3 0309 	sub.w	r3, r3, r9
2000add2:	4543      	cmp	r3, r8
2000add4:	f77f af75 	ble.w	2000acc2 <_printf_float+0x21a>
2000add8:	2301      	movs	r3, #1
2000adda:	4652      	mov	r2, sl
2000addc:	4631      	mov	r1, r6
2000adde:	4628      	mov	r0, r5
2000ade0:	47b8      	blx	r7
2000ade2:	3001      	adds	r0, #1
2000ade4:	f43f aeae 	beq.w	2000ab44 <_printf_float+0x9c>
2000ade8:	f108 0801 	add.w	r8, r8, #1
2000adec:	e7ec      	b.n	2000adc8 <_printf_float+0x320>
2000adee:	4613      	mov	r3, r2
2000adf0:	4631      	mov	r1, r6
2000adf2:	4642      	mov	r2, r8
2000adf4:	4628      	mov	r0, r5
2000adf6:	47b8      	blx	r7
2000adf8:	3001      	adds	r0, #1
2000adfa:	d1bf      	bne.n	2000ad7c <_printf_float+0x2d4>
2000adfc:	e6a2      	b.n	2000ab44 <_printf_float+0x9c>
2000adfe:	2301      	movs	r3, #1
2000ae00:	4631      	mov	r1, r6
2000ae02:	4628      	mov	r0, r5
2000ae04:	9204      	str	r2, [sp, #16]
2000ae06:	47b8      	blx	r7
2000ae08:	3001      	adds	r0, #1
2000ae0a:	f43f ae9b 	beq.w	2000ab44 <_printf_float+0x9c>
2000ae0e:	9b05      	ldr	r3, [sp, #20]
2000ae10:	9a04      	ldr	r2, [sp, #16]
2000ae12:	3301      	adds	r3, #1
2000ae14:	9305      	str	r3, [sp, #20]
2000ae16:	e7b7      	b.n	2000ad88 <_printf_float+0x2e0>
2000ae18:	4653      	mov	r3, sl
2000ae1a:	465a      	mov	r2, fp
2000ae1c:	4631      	mov	r1, r6
2000ae1e:	4628      	mov	r0, r5
2000ae20:	47b8      	blx	r7
2000ae22:	3001      	adds	r0, #1
2000ae24:	d1be      	bne.n	2000ada4 <_printf_float+0x2fc>
2000ae26:	e68d      	b.n	2000ab44 <_printf_float+0x9c>
2000ae28:	9a04      	ldr	r2, [sp, #16]
2000ae2a:	464b      	mov	r3, r9
2000ae2c:	4442      	add	r2, r8
2000ae2e:	4631      	mov	r1, r6
2000ae30:	4628      	mov	r0, r5
2000ae32:	47b8      	blx	r7
2000ae34:	3001      	adds	r0, #1
2000ae36:	d1c1      	bne.n	2000adbc <_printf_float+0x314>
2000ae38:	e684      	b.n	2000ab44 <_printf_float+0x9c>
2000ae3a:	9a08      	ldr	r2, [sp, #32]
2000ae3c:	2a01      	cmp	r2, #1
2000ae3e:	dc01      	bgt.n	2000ae44 <_printf_float+0x39c>
2000ae40:	07db      	lsls	r3, r3, #31
2000ae42:	d537      	bpl.n	2000aeb4 <_printf_float+0x40c>
2000ae44:	2301      	movs	r3, #1
2000ae46:	4642      	mov	r2, r8
2000ae48:	4631      	mov	r1, r6
2000ae4a:	4628      	mov	r0, r5
2000ae4c:	47b8      	blx	r7
2000ae4e:	3001      	adds	r0, #1
2000ae50:	f43f ae78 	beq.w	2000ab44 <_printf_float+0x9c>
2000ae54:	4653      	mov	r3, sl
2000ae56:	465a      	mov	r2, fp
2000ae58:	4631      	mov	r1, r6
2000ae5a:	4628      	mov	r0, r5
2000ae5c:	47b8      	blx	r7
2000ae5e:	3001      	adds	r0, #1
2000ae60:	f43f ae70 	beq.w	2000ab44 <_printf_float+0x9c>
2000ae64:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
2000ae68:	eeb5 7b40 	vcmp.f64	d7, #0.0
2000ae6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000ae70:	d01b      	beq.n	2000aeaa <_printf_float+0x402>
2000ae72:	9b08      	ldr	r3, [sp, #32]
2000ae74:	f108 0201 	add.w	r2, r8, #1
2000ae78:	3b01      	subs	r3, #1
2000ae7a:	4631      	mov	r1, r6
2000ae7c:	4628      	mov	r0, r5
2000ae7e:	47b8      	blx	r7
2000ae80:	3001      	adds	r0, #1
2000ae82:	d10e      	bne.n	2000aea2 <_printf_float+0x3fa>
2000ae84:	e65e      	b.n	2000ab44 <_printf_float+0x9c>
2000ae86:	2301      	movs	r3, #1
2000ae88:	464a      	mov	r2, r9
2000ae8a:	4631      	mov	r1, r6
2000ae8c:	4628      	mov	r0, r5
2000ae8e:	47b8      	blx	r7
2000ae90:	3001      	adds	r0, #1
2000ae92:	f43f ae57 	beq.w	2000ab44 <_printf_float+0x9c>
2000ae96:	f108 0801 	add.w	r8, r8, #1
2000ae9a:	9b08      	ldr	r3, [sp, #32]
2000ae9c:	3b01      	subs	r3, #1
2000ae9e:	4543      	cmp	r3, r8
2000aea0:	dcf1      	bgt.n	2000ae86 <_printf_float+0x3de>
2000aea2:	9b04      	ldr	r3, [sp, #16]
2000aea4:	f104 0250 	add.w	r2, r4, #80	; 0x50
2000aea8:	e6db      	b.n	2000ac62 <_printf_float+0x1ba>
2000aeaa:	f04f 0800 	mov.w	r8, #0
2000aeae:	f104 091a 	add.w	r9, r4, #26
2000aeb2:	e7f2      	b.n	2000ae9a <_printf_float+0x3f2>
2000aeb4:	2301      	movs	r3, #1
2000aeb6:	4642      	mov	r2, r8
2000aeb8:	e7df      	b.n	2000ae7a <_printf_float+0x3d2>
2000aeba:	2301      	movs	r3, #1
2000aebc:	464a      	mov	r2, r9
2000aebe:	4631      	mov	r1, r6
2000aec0:	4628      	mov	r0, r5
2000aec2:	47b8      	blx	r7
2000aec4:	3001      	adds	r0, #1
2000aec6:	f43f ae3d 	beq.w	2000ab44 <_printf_float+0x9c>
2000aeca:	f108 0801 	add.w	r8, r8, #1
2000aece:	68e3      	ldr	r3, [r4, #12]
2000aed0:	9909      	ldr	r1, [sp, #36]	; 0x24
2000aed2:	1a5b      	subs	r3, r3, r1
2000aed4:	4543      	cmp	r3, r8
2000aed6:	dcf0      	bgt.n	2000aeba <_printf_float+0x412>
2000aed8:	e6f7      	b.n	2000acca <_printf_float+0x222>
2000aeda:	f04f 0800 	mov.w	r8, #0
2000aede:	f104 0919 	add.w	r9, r4, #25
2000aee2:	e7f4      	b.n	2000aece <_printf_float+0x426>

2000aee4 <_printf_common>:
2000aee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000aee8:	4616      	mov	r6, r2
2000aeea:	4699      	mov	r9, r3
2000aeec:	688a      	ldr	r2, [r1, #8]
2000aeee:	690b      	ldr	r3, [r1, #16]
2000aef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
2000aef4:	4293      	cmp	r3, r2
2000aef6:	bfb8      	it	lt
2000aef8:	4613      	movlt	r3, r2
2000aefa:	6033      	str	r3, [r6, #0]
2000aefc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
2000af00:	4607      	mov	r7, r0
2000af02:	460c      	mov	r4, r1
2000af04:	b10a      	cbz	r2, 2000af0a <_printf_common+0x26>
2000af06:	3301      	adds	r3, #1
2000af08:	6033      	str	r3, [r6, #0]
2000af0a:	6823      	ldr	r3, [r4, #0]
2000af0c:	0699      	lsls	r1, r3, #26
2000af0e:	bf42      	ittt	mi
2000af10:	6833      	ldrmi	r3, [r6, #0]
2000af12:	3302      	addmi	r3, #2
2000af14:	6033      	strmi	r3, [r6, #0]
2000af16:	6825      	ldr	r5, [r4, #0]
2000af18:	f015 0506 	ands.w	r5, r5, #6
2000af1c:	d106      	bne.n	2000af2c <_printf_common+0x48>
2000af1e:	f104 0a19 	add.w	sl, r4, #25
2000af22:	68e3      	ldr	r3, [r4, #12]
2000af24:	6832      	ldr	r2, [r6, #0]
2000af26:	1a9b      	subs	r3, r3, r2
2000af28:	42ab      	cmp	r3, r5
2000af2a:	dc26      	bgt.n	2000af7a <_printf_common+0x96>
2000af2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
2000af30:	1e13      	subs	r3, r2, #0
2000af32:	6822      	ldr	r2, [r4, #0]
2000af34:	bf18      	it	ne
2000af36:	2301      	movne	r3, #1
2000af38:	0692      	lsls	r2, r2, #26
2000af3a:	d42b      	bmi.n	2000af94 <_printf_common+0xb0>
2000af3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
2000af40:	4649      	mov	r1, r9
2000af42:	4638      	mov	r0, r7
2000af44:	47c0      	blx	r8
2000af46:	3001      	adds	r0, #1
2000af48:	d01e      	beq.n	2000af88 <_printf_common+0xa4>
2000af4a:	6823      	ldr	r3, [r4, #0]
2000af4c:	68e5      	ldr	r5, [r4, #12]
2000af4e:	6832      	ldr	r2, [r6, #0]
2000af50:	f003 0306 	and.w	r3, r3, #6
2000af54:	2b04      	cmp	r3, #4
2000af56:	bf08      	it	eq
2000af58:	1aad      	subeq	r5, r5, r2
2000af5a:	68a3      	ldr	r3, [r4, #8]
2000af5c:	6922      	ldr	r2, [r4, #16]
2000af5e:	bf0c      	ite	eq
2000af60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
2000af64:	2500      	movne	r5, #0
2000af66:	4293      	cmp	r3, r2
2000af68:	bfc4      	itt	gt
2000af6a:	1a9b      	subgt	r3, r3, r2
2000af6c:	18ed      	addgt	r5, r5, r3
2000af6e:	2600      	movs	r6, #0
2000af70:	341a      	adds	r4, #26
2000af72:	42b5      	cmp	r5, r6
2000af74:	d11a      	bne.n	2000afac <_printf_common+0xc8>
2000af76:	2000      	movs	r0, #0
2000af78:	e008      	b.n	2000af8c <_printf_common+0xa8>
2000af7a:	2301      	movs	r3, #1
2000af7c:	4652      	mov	r2, sl
2000af7e:	4649      	mov	r1, r9
2000af80:	4638      	mov	r0, r7
2000af82:	47c0      	blx	r8
2000af84:	3001      	adds	r0, #1
2000af86:	d103      	bne.n	2000af90 <_printf_common+0xac>
2000af88:	f04f 30ff 	mov.w	r0, #4294967295
2000af8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000af90:	3501      	adds	r5, #1
2000af92:	e7c6      	b.n	2000af22 <_printf_common+0x3e>
2000af94:	18e1      	adds	r1, r4, r3
2000af96:	1c5a      	adds	r2, r3, #1
2000af98:	2030      	movs	r0, #48	; 0x30
2000af9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
2000af9e:	4422      	add	r2, r4
2000afa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
2000afa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
2000afa8:	3302      	adds	r3, #2
2000afaa:	e7c7      	b.n	2000af3c <_printf_common+0x58>
2000afac:	2301      	movs	r3, #1
2000afae:	4622      	mov	r2, r4
2000afb0:	4649      	mov	r1, r9
2000afb2:	4638      	mov	r0, r7
2000afb4:	47c0      	blx	r8
2000afb6:	3001      	adds	r0, #1
2000afb8:	d0e6      	beq.n	2000af88 <_printf_common+0xa4>
2000afba:	3601      	adds	r6, #1
2000afbc:	e7d9      	b.n	2000af72 <_printf_common+0x8e>
	...

2000afc0 <_printf_i>:
2000afc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
2000afc4:	460c      	mov	r4, r1
2000afc6:	4691      	mov	r9, r2
2000afc8:	7e27      	ldrb	r7, [r4, #24]
2000afca:	990c      	ldr	r1, [sp, #48]	; 0x30
2000afcc:	2f78      	cmp	r7, #120	; 0x78
2000afce:	4680      	mov	r8, r0
2000afd0:	469a      	mov	sl, r3
2000afd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
2000afd6:	d807      	bhi.n	2000afe8 <_printf_i+0x28>
2000afd8:	2f62      	cmp	r7, #98	; 0x62
2000afda:	d80a      	bhi.n	2000aff2 <_printf_i+0x32>
2000afdc:	2f00      	cmp	r7, #0
2000afde:	f000 80d8 	beq.w	2000b192 <_printf_i+0x1d2>
2000afe2:	2f58      	cmp	r7, #88	; 0x58
2000afe4:	f000 80a3 	beq.w	2000b12e <_printf_i+0x16e>
2000afe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
2000afec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
2000aff0:	e03a      	b.n	2000b068 <_printf_i+0xa8>
2000aff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
2000aff6:	2b15      	cmp	r3, #21
2000aff8:	d8f6      	bhi.n	2000afe8 <_printf_i+0x28>
2000affa:	a001      	add	r0, pc, #4	; (adr r0, 2000b000 <_printf_i+0x40>)
2000affc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
2000b000:	2000b059 	.word	0x2000b059
2000b004:	2000b06d 	.word	0x2000b06d
2000b008:	2000afe9 	.word	0x2000afe9
2000b00c:	2000afe9 	.word	0x2000afe9
2000b010:	2000afe9 	.word	0x2000afe9
2000b014:	2000afe9 	.word	0x2000afe9
2000b018:	2000b06d 	.word	0x2000b06d
2000b01c:	2000afe9 	.word	0x2000afe9
2000b020:	2000afe9 	.word	0x2000afe9
2000b024:	2000afe9 	.word	0x2000afe9
2000b028:	2000afe9 	.word	0x2000afe9
2000b02c:	2000b179 	.word	0x2000b179
2000b030:	2000b09d 	.word	0x2000b09d
2000b034:	2000b15b 	.word	0x2000b15b
2000b038:	2000afe9 	.word	0x2000afe9
2000b03c:	2000afe9 	.word	0x2000afe9
2000b040:	2000b19b 	.word	0x2000b19b
2000b044:	2000afe9 	.word	0x2000afe9
2000b048:	2000b09d 	.word	0x2000b09d
2000b04c:	2000afe9 	.word	0x2000afe9
2000b050:	2000afe9 	.word	0x2000afe9
2000b054:	2000b163 	.word	0x2000b163
2000b058:	680b      	ldr	r3, [r1, #0]
2000b05a:	1d1a      	adds	r2, r3, #4
2000b05c:	681b      	ldr	r3, [r3, #0]
2000b05e:	600a      	str	r2, [r1, #0]
2000b060:	f104 0642 	add.w	r6, r4, #66	; 0x42
2000b064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2000b068:	2301      	movs	r3, #1
2000b06a:	e0a3      	b.n	2000b1b4 <_printf_i+0x1f4>
2000b06c:	6825      	ldr	r5, [r4, #0]
2000b06e:	6808      	ldr	r0, [r1, #0]
2000b070:	062e      	lsls	r6, r5, #24
2000b072:	f100 0304 	add.w	r3, r0, #4
2000b076:	d50a      	bpl.n	2000b08e <_printf_i+0xce>
2000b078:	6805      	ldr	r5, [r0, #0]
2000b07a:	600b      	str	r3, [r1, #0]
2000b07c:	2d00      	cmp	r5, #0
2000b07e:	da03      	bge.n	2000b088 <_printf_i+0xc8>
2000b080:	232d      	movs	r3, #45	; 0x2d
2000b082:	426d      	negs	r5, r5
2000b084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2000b088:	485e      	ldr	r0, [pc, #376]	; (2000b204 <_printf_i+0x244>)
2000b08a:	230a      	movs	r3, #10
2000b08c:	e019      	b.n	2000b0c2 <_printf_i+0x102>
2000b08e:	f015 0f40 	tst.w	r5, #64	; 0x40
2000b092:	6805      	ldr	r5, [r0, #0]
2000b094:	600b      	str	r3, [r1, #0]
2000b096:	bf18      	it	ne
2000b098:	b22d      	sxthne	r5, r5
2000b09a:	e7ef      	b.n	2000b07c <_printf_i+0xbc>
2000b09c:	680b      	ldr	r3, [r1, #0]
2000b09e:	6825      	ldr	r5, [r4, #0]
2000b0a0:	1d18      	adds	r0, r3, #4
2000b0a2:	6008      	str	r0, [r1, #0]
2000b0a4:	0628      	lsls	r0, r5, #24
2000b0a6:	d501      	bpl.n	2000b0ac <_printf_i+0xec>
2000b0a8:	681d      	ldr	r5, [r3, #0]
2000b0aa:	e002      	b.n	2000b0b2 <_printf_i+0xf2>
2000b0ac:	0669      	lsls	r1, r5, #25
2000b0ae:	d5fb      	bpl.n	2000b0a8 <_printf_i+0xe8>
2000b0b0:	881d      	ldrh	r5, [r3, #0]
2000b0b2:	4854      	ldr	r0, [pc, #336]	; (2000b204 <_printf_i+0x244>)
2000b0b4:	2f6f      	cmp	r7, #111	; 0x6f
2000b0b6:	bf0c      	ite	eq
2000b0b8:	2308      	moveq	r3, #8
2000b0ba:	230a      	movne	r3, #10
2000b0bc:	2100      	movs	r1, #0
2000b0be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
2000b0c2:	6866      	ldr	r6, [r4, #4]
2000b0c4:	60a6      	str	r6, [r4, #8]
2000b0c6:	2e00      	cmp	r6, #0
2000b0c8:	bfa2      	ittt	ge
2000b0ca:	6821      	ldrge	r1, [r4, #0]
2000b0cc:	f021 0104 	bicge.w	r1, r1, #4
2000b0d0:	6021      	strge	r1, [r4, #0]
2000b0d2:	b90d      	cbnz	r5, 2000b0d8 <_printf_i+0x118>
2000b0d4:	2e00      	cmp	r6, #0
2000b0d6:	d04d      	beq.n	2000b174 <_printf_i+0x1b4>
2000b0d8:	4616      	mov	r6, r2
2000b0da:	fbb5 f1f3 	udiv	r1, r5, r3
2000b0de:	fb03 5711 	mls	r7, r3, r1, r5
2000b0e2:	5dc7      	ldrb	r7, [r0, r7]
2000b0e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
2000b0e8:	462f      	mov	r7, r5
2000b0ea:	42bb      	cmp	r3, r7
2000b0ec:	460d      	mov	r5, r1
2000b0ee:	d9f4      	bls.n	2000b0da <_printf_i+0x11a>
2000b0f0:	2b08      	cmp	r3, #8
2000b0f2:	d10b      	bne.n	2000b10c <_printf_i+0x14c>
2000b0f4:	6823      	ldr	r3, [r4, #0]
2000b0f6:	07df      	lsls	r7, r3, #31
2000b0f8:	d508      	bpl.n	2000b10c <_printf_i+0x14c>
2000b0fa:	6923      	ldr	r3, [r4, #16]
2000b0fc:	6861      	ldr	r1, [r4, #4]
2000b0fe:	4299      	cmp	r1, r3
2000b100:	bfde      	ittt	le
2000b102:	2330      	movle	r3, #48	; 0x30
2000b104:	f806 3c01 	strble.w	r3, [r6, #-1]
2000b108:	f106 36ff 	addle.w	r6, r6, #4294967295
2000b10c:	1b92      	subs	r2, r2, r6
2000b10e:	6122      	str	r2, [r4, #16]
2000b110:	f8cd a000 	str.w	sl, [sp]
2000b114:	464b      	mov	r3, r9
2000b116:	aa03      	add	r2, sp, #12
2000b118:	4621      	mov	r1, r4
2000b11a:	4640      	mov	r0, r8
2000b11c:	f7ff fee2 	bl	2000aee4 <_printf_common>
2000b120:	3001      	adds	r0, #1
2000b122:	d14c      	bne.n	2000b1be <_printf_i+0x1fe>
2000b124:	f04f 30ff 	mov.w	r0, #4294967295
2000b128:	b004      	add	sp, #16
2000b12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000b12e:	4835      	ldr	r0, [pc, #212]	; (2000b204 <_printf_i+0x244>)
2000b130:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
2000b134:	6823      	ldr	r3, [r4, #0]
2000b136:	680e      	ldr	r6, [r1, #0]
2000b138:	061f      	lsls	r7, r3, #24
2000b13a:	f856 5b04 	ldr.w	r5, [r6], #4
2000b13e:	600e      	str	r6, [r1, #0]
2000b140:	d514      	bpl.n	2000b16c <_printf_i+0x1ac>
2000b142:	07d9      	lsls	r1, r3, #31
2000b144:	bf44      	itt	mi
2000b146:	f043 0320 	orrmi.w	r3, r3, #32
2000b14a:	6023      	strmi	r3, [r4, #0]
2000b14c:	b91d      	cbnz	r5, 2000b156 <_printf_i+0x196>
2000b14e:	6823      	ldr	r3, [r4, #0]
2000b150:	f023 0320 	bic.w	r3, r3, #32
2000b154:	6023      	str	r3, [r4, #0]
2000b156:	2310      	movs	r3, #16
2000b158:	e7b0      	b.n	2000b0bc <_printf_i+0xfc>
2000b15a:	6823      	ldr	r3, [r4, #0]
2000b15c:	f043 0320 	orr.w	r3, r3, #32
2000b160:	6023      	str	r3, [r4, #0]
2000b162:	2378      	movs	r3, #120	; 0x78
2000b164:	4828      	ldr	r0, [pc, #160]	; (2000b208 <_printf_i+0x248>)
2000b166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
2000b16a:	e7e3      	b.n	2000b134 <_printf_i+0x174>
2000b16c:	065e      	lsls	r6, r3, #25
2000b16e:	bf48      	it	mi
2000b170:	b2ad      	uxthmi	r5, r5
2000b172:	e7e6      	b.n	2000b142 <_printf_i+0x182>
2000b174:	4616      	mov	r6, r2
2000b176:	e7bb      	b.n	2000b0f0 <_printf_i+0x130>
2000b178:	680b      	ldr	r3, [r1, #0]
2000b17a:	6826      	ldr	r6, [r4, #0]
2000b17c:	6960      	ldr	r0, [r4, #20]
2000b17e:	1d1d      	adds	r5, r3, #4
2000b180:	600d      	str	r5, [r1, #0]
2000b182:	0635      	lsls	r5, r6, #24
2000b184:	681b      	ldr	r3, [r3, #0]
2000b186:	d501      	bpl.n	2000b18c <_printf_i+0x1cc>
2000b188:	6018      	str	r0, [r3, #0]
2000b18a:	e002      	b.n	2000b192 <_printf_i+0x1d2>
2000b18c:	0671      	lsls	r1, r6, #25
2000b18e:	d5fb      	bpl.n	2000b188 <_printf_i+0x1c8>
2000b190:	8018      	strh	r0, [r3, #0]
2000b192:	2300      	movs	r3, #0
2000b194:	6123      	str	r3, [r4, #16]
2000b196:	4616      	mov	r6, r2
2000b198:	e7ba      	b.n	2000b110 <_printf_i+0x150>
2000b19a:	680b      	ldr	r3, [r1, #0]
2000b19c:	1d1a      	adds	r2, r3, #4
2000b19e:	600a      	str	r2, [r1, #0]
2000b1a0:	681e      	ldr	r6, [r3, #0]
2000b1a2:	6862      	ldr	r2, [r4, #4]
2000b1a4:	2100      	movs	r1, #0
2000b1a6:	4630      	mov	r0, r6
2000b1a8:	f7f5 f9ea 	bl	20000580 <memchr>
2000b1ac:	b108      	cbz	r0, 2000b1b2 <_printf_i+0x1f2>
2000b1ae:	1b80      	subs	r0, r0, r6
2000b1b0:	6060      	str	r0, [r4, #4]
2000b1b2:	6863      	ldr	r3, [r4, #4]
2000b1b4:	6123      	str	r3, [r4, #16]
2000b1b6:	2300      	movs	r3, #0
2000b1b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2000b1bc:	e7a8      	b.n	2000b110 <_printf_i+0x150>
2000b1be:	6923      	ldr	r3, [r4, #16]
2000b1c0:	4632      	mov	r2, r6
2000b1c2:	4649      	mov	r1, r9
2000b1c4:	4640      	mov	r0, r8
2000b1c6:	47d0      	blx	sl
2000b1c8:	3001      	adds	r0, #1
2000b1ca:	d0ab      	beq.n	2000b124 <_printf_i+0x164>
2000b1cc:	6823      	ldr	r3, [r4, #0]
2000b1ce:	079b      	lsls	r3, r3, #30
2000b1d0:	d413      	bmi.n	2000b1fa <_printf_i+0x23a>
2000b1d2:	68e0      	ldr	r0, [r4, #12]
2000b1d4:	9b03      	ldr	r3, [sp, #12]
2000b1d6:	4298      	cmp	r0, r3
2000b1d8:	bfb8      	it	lt
2000b1da:	4618      	movlt	r0, r3
2000b1dc:	e7a4      	b.n	2000b128 <_printf_i+0x168>
2000b1de:	2301      	movs	r3, #1
2000b1e0:	4632      	mov	r2, r6
2000b1e2:	4649      	mov	r1, r9
2000b1e4:	4640      	mov	r0, r8
2000b1e6:	47d0      	blx	sl
2000b1e8:	3001      	adds	r0, #1
2000b1ea:	d09b      	beq.n	2000b124 <_printf_i+0x164>
2000b1ec:	3501      	adds	r5, #1
2000b1ee:	68e3      	ldr	r3, [r4, #12]
2000b1f0:	9903      	ldr	r1, [sp, #12]
2000b1f2:	1a5b      	subs	r3, r3, r1
2000b1f4:	42ab      	cmp	r3, r5
2000b1f6:	dcf2      	bgt.n	2000b1de <_printf_i+0x21e>
2000b1f8:	e7eb      	b.n	2000b1d2 <_printf_i+0x212>
2000b1fa:	2500      	movs	r5, #0
2000b1fc:	f104 0619 	add.w	r6, r4, #25
2000b200:	e7f5      	b.n	2000b1ee <_printf_i+0x22e>
2000b202:	bf00      	nop
2000b204:	2000fa2e 	.word	0x2000fa2e
2000b208:	2000fa3f 	.word	0x2000fa3f

2000b20c <_scanf_float>:
2000b20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000b210:	b087      	sub	sp, #28
2000b212:	4617      	mov	r7, r2
2000b214:	9303      	str	r3, [sp, #12]
2000b216:	688b      	ldr	r3, [r1, #8]
2000b218:	1e5a      	subs	r2, r3, #1
2000b21a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
2000b21e:	bf83      	ittte	hi
2000b220:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
2000b224:	195b      	addhi	r3, r3, r5
2000b226:	9302      	strhi	r3, [sp, #8]
2000b228:	2300      	movls	r3, #0
2000b22a:	bf86      	itte	hi
2000b22c:	f240 135d 	movwhi	r3, #349	; 0x15d
2000b230:	608b      	strhi	r3, [r1, #8]
2000b232:	9302      	strls	r3, [sp, #8]
2000b234:	680b      	ldr	r3, [r1, #0]
2000b236:	468b      	mov	fp, r1
2000b238:	2500      	movs	r5, #0
2000b23a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
2000b23e:	f84b 3b1c 	str.w	r3, [fp], #28
2000b242:	e9cd 5504 	strd	r5, r5, [sp, #16]
2000b246:	4680      	mov	r8, r0
2000b248:	460c      	mov	r4, r1
2000b24a:	465e      	mov	r6, fp
2000b24c:	46aa      	mov	sl, r5
2000b24e:	46a9      	mov	r9, r5
2000b250:	9501      	str	r5, [sp, #4]
2000b252:	68a2      	ldr	r2, [r4, #8]
2000b254:	b152      	cbz	r2, 2000b26c <_scanf_float+0x60>
2000b256:	683b      	ldr	r3, [r7, #0]
2000b258:	781b      	ldrb	r3, [r3, #0]
2000b25a:	2b4e      	cmp	r3, #78	; 0x4e
2000b25c:	d864      	bhi.n	2000b328 <_scanf_float+0x11c>
2000b25e:	2b40      	cmp	r3, #64	; 0x40
2000b260:	d83c      	bhi.n	2000b2dc <_scanf_float+0xd0>
2000b262:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
2000b266:	b2c8      	uxtb	r0, r1
2000b268:	280e      	cmp	r0, #14
2000b26a:	d93a      	bls.n	2000b2e2 <_scanf_float+0xd6>
2000b26c:	f1b9 0f00 	cmp.w	r9, #0
2000b270:	d003      	beq.n	2000b27a <_scanf_float+0x6e>
2000b272:	6823      	ldr	r3, [r4, #0]
2000b274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2000b278:	6023      	str	r3, [r4, #0]
2000b27a:	f10a 3aff 	add.w	sl, sl, #4294967295
2000b27e:	f1ba 0f01 	cmp.w	sl, #1
2000b282:	f200 8113 	bhi.w	2000b4ac <_scanf_float+0x2a0>
2000b286:	455e      	cmp	r6, fp
2000b288:	f200 8105 	bhi.w	2000b496 <_scanf_float+0x28a>
2000b28c:	2501      	movs	r5, #1
2000b28e:	4628      	mov	r0, r5
2000b290:	b007      	add	sp, #28
2000b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000b296:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
2000b29a:	2a0d      	cmp	r2, #13
2000b29c:	d8e6      	bhi.n	2000b26c <_scanf_float+0x60>
2000b29e:	a101      	add	r1, pc, #4	; (adr r1, 2000b2a4 <_scanf_float+0x98>)
2000b2a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
2000b2a4:	2000b3e3 	.word	0x2000b3e3
2000b2a8:	2000b26d 	.word	0x2000b26d
2000b2ac:	2000b26d 	.word	0x2000b26d
2000b2b0:	2000b26d 	.word	0x2000b26d
2000b2b4:	2000b443 	.word	0x2000b443
2000b2b8:	2000b41b 	.word	0x2000b41b
2000b2bc:	2000b26d 	.word	0x2000b26d
2000b2c0:	2000b26d 	.word	0x2000b26d
2000b2c4:	2000b3f1 	.word	0x2000b3f1
2000b2c8:	2000b26d 	.word	0x2000b26d
2000b2cc:	2000b26d 	.word	0x2000b26d
2000b2d0:	2000b26d 	.word	0x2000b26d
2000b2d4:	2000b26d 	.word	0x2000b26d
2000b2d8:	2000b3a9 	.word	0x2000b3a9
2000b2dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
2000b2e0:	e7db      	b.n	2000b29a <_scanf_float+0x8e>
2000b2e2:	290e      	cmp	r1, #14
2000b2e4:	d8c2      	bhi.n	2000b26c <_scanf_float+0x60>
2000b2e6:	a001      	add	r0, pc, #4	; (adr r0, 2000b2ec <_scanf_float+0xe0>)
2000b2e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
2000b2ec:	2000b39b 	.word	0x2000b39b
2000b2f0:	2000b26d 	.word	0x2000b26d
2000b2f4:	2000b39b 	.word	0x2000b39b
2000b2f8:	2000b42f 	.word	0x2000b42f
2000b2fc:	2000b26d 	.word	0x2000b26d
2000b300:	2000b349 	.word	0x2000b349
2000b304:	2000b385 	.word	0x2000b385
2000b308:	2000b385 	.word	0x2000b385
2000b30c:	2000b385 	.word	0x2000b385
2000b310:	2000b385 	.word	0x2000b385
2000b314:	2000b385 	.word	0x2000b385
2000b318:	2000b385 	.word	0x2000b385
2000b31c:	2000b385 	.word	0x2000b385
2000b320:	2000b385 	.word	0x2000b385
2000b324:	2000b385 	.word	0x2000b385
2000b328:	2b6e      	cmp	r3, #110	; 0x6e
2000b32a:	d809      	bhi.n	2000b340 <_scanf_float+0x134>
2000b32c:	2b60      	cmp	r3, #96	; 0x60
2000b32e:	d8b2      	bhi.n	2000b296 <_scanf_float+0x8a>
2000b330:	2b54      	cmp	r3, #84	; 0x54
2000b332:	d077      	beq.n	2000b424 <_scanf_float+0x218>
2000b334:	2b59      	cmp	r3, #89	; 0x59
2000b336:	d199      	bne.n	2000b26c <_scanf_float+0x60>
2000b338:	2d07      	cmp	r5, #7
2000b33a:	d197      	bne.n	2000b26c <_scanf_float+0x60>
2000b33c:	2508      	movs	r5, #8
2000b33e:	e029      	b.n	2000b394 <_scanf_float+0x188>
2000b340:	2b74      	cmp	r3, #116	; 0x74
2000b342:	d06f      	beq.n	2000b424 <_scanf_float+0x218>
2000b344:	2b79      	cmp	r3, #121	; 0x79
2000b346:	e7f6      	b.n	2000b336 <_scanf_float+0x12a>
2000b348:	6821      	ldr	r1, [r4, #0]
2000b34a:	05c8      	lsls	r0, r1, #23
2000b34c:	d51a      	bpl.n	2000b384 <_scanf_float+0x178>
2000b34e:	9b02      	ldr	r3, [sp, #8]
2000b350:	f021 0180 	bic.w	r1, r1, #128	; 0x80
2000b354:	6021      	str	r1, [r4, #0]
2000b356:	f109 0901 	add.w	r9, r9, #1
2000b35a:	b11b      	cbz	r3, 2000b364 <_scanf_float+0x158>
2000b35c:	3b01      	subs	r3, #1
2000b35e:	3201      	adds	r2, #1
2000b360:	9302      	str	r3, [sp, #8]
2000b362:	60a2      	str	r2, [r4, #8]
2000b364:	68a3      	ldr	r3, [r4, #8]
2000b366:	3b01      	subs	r3, #1
2000b368:	60a3      	str	r3, [r4, #8]
2000b36a:	6923      	ldr	r3, [r4, #16]
2000b36c:	3301      	adds	r3, #1
2000b36e:	6123      	str	r3, [r4, #16]
2000b370:	687b      	ldr	r3, [r7, #4]
2000b372:	3b01      	subs	r3, #1
2000b374:	2b00      	cmp	r3, #0
2000b376:	607b      	str	r3, [r7, #4]
2000b378:	f340 8084 	ble.w	2000b484 <_scanf_float+0x278>
2000b37c:	683b      	ldr	r3, [r7, #0]
2000b37e:	3301      	adds	r3, #1
2000b380:	603b      	str	r3, [r7, #0]
2000b382:	e766      	b.n	2000b252 <_scanf_float+0x46>
2000b384:	eb1a 0f05 	cmn.w	sl, r5
2000b388:	f47f af70 	bne.w	2000b26c <_scanf_float+0x60>
2000b38c:	6822      	ldr	r2, [r4, #0]
2000b38e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
2000b392:	6022      	str	r2, [r4, #0]
2000b394:	f806 3b01 	strb.w	r3, [r6], #1
2000b398:	e7e4      	b.n	2000b364 <_scanf_float+0x158>
2000b39a:	6822      	ldr	r2, [r4, #0]
2000b39c:	0610      	lsls	r0, r2, #24
2000b39e:	f57f af65 	bpl.w	2000b26c <_scanf_float+0x60>
2000b3a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2000b3a6:	e7f4      	b.n	2000b392 <_scanf_float+0x186>
2000b3a8:	f1ba 0f00 	cmp.w	sl, #0
2000b3ac:	d10e      	bne.n	2000b3cc <_scanf_float+0x1c0>
2000b3ae:	f1b9 0f00 	cmp.w	r9, #0
2000b3b2:	d10e      	bne.n	2000b3d2 <_scanf_float+0x1c6>
2000b3b4:	6822      	ldr	r2, [r4, #0]
2000b3b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
2000b3ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
2000b3be:	d108      	bne.n	2000b3d2 <_scanf_float+0x1c6>
2000b3c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
2000b3c4:	6022      	str	r2, [r4, #0]
2000b3c6:	f04f 0a01 	mov.w	sl, #1
2000b3ca:	e7e3      	b.n	2000b394 <_scanf_float+0x188>
2000b3cc:	f1ba 0f02 	cmp.w	sl, #2
2000b3d0:	d055      	beq.n	2000b47e <_scanf_float+0x272>
2000b3d2:	2d01      	cmp	r5, #1
2000b3d4:	d002      	beq.n	2000b3dc <_scanf_float+0x1d0>
2000b3d6:	2d04      	cmp	r5, #4
2000b3d8:	f47f af48 	bne.w	2000b26c <_scanf_float+0x60>
2000b3dc:	3501      	adds	r5, #1
2000b3de:	b2ed      	uxtb	r5, r5
2000b3e0:	e7d8      	b.n	2000b394 <_scanf_float+0x188>
2000b3e2:	f1ba 0f01 	cmp.w	sl, #1
2000b3e6:	f47f af41 	bne.w	2000b26c <_scanf_float+0x60>
2000b3ea:	f04f 0a02 	mov.w	sl, #2
2000b3ee:	e7d1      	b.n	2000b394 <_scanf_float+0x188>
2000b3f0:	b97d      	cbnz	r5, 2000b412 <_scanf_float+0x206>
2000b3f2:	f1b9 0f00 	cmp.w	r9, #0
2000b3f6:	f47f af3c 	bne.w	2000b272 <_scanf_float+0x66>
2000b3fa:	6822      	ldr	r2, [r4, #0]
2000b3fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
2000b400:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
2000b404:	f47f af39 	bne.w	2000b27a <_scanf_float+0x6e>
2000b408:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
2000b40c:	6022      	str	r2, [r4, #0]
2000b40e:	2501      	movs	r5, #1
2000b410:	e7c0      	b.n	2000b394 <_scanf_float+0x188>
2000b412:	2d03      	cmp	r5, #3
2000b414:	d0e2      	beq.n	2000b3dc <_scanf_float+0x1d0>
2000b416:	2d05      	cmp	r5, #5
2000b418:	e7de      	b.n	2000b3d8 <_scanf_float+0x1cc>
2000b41a:	2d02      	cmp	r5, #2
2000b41c:	f47f af26 	bne.w	2000b26c <_scanf_float+0x60>
2000b420:	2503      	movs	r5, #3
2000b422:	e7b7      	b.n	2000b394 <_scanf_float+0x188>
2000b424:	2d06      	cmp	r5, #6
2000b426:	f47f af21 	bne.w	2000b26c <_scanf_float+0x60>
2000b42a:	2507      	movs	r5, #7
2000b42c:	e7b2      	b.n	2000b394 <_scanf_float+0x188>
2000b42e:	6822      	ldr	r2, [r4, #0]
2000b430:	0591      	lsls	r1, r2, #22
2000b432:	f57f af1b 	bpl.w	2000b26c <_scanf_float+0x60>
2000b436:	f422 7220 	bic.w	r2, r2, #640	; 0x280
2000b43a:	6022      	str	r2, [r4, #0]
2000b43c:	f8cd 9004 	str.w	r9, [sp, #4]
2000b440:	e7a8      	b.n	2000b394 <_scanf_float+0x188>
2000b442:	6822      	ldr	r2, [r4, #0]
2000b444:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
2000b448:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
2000b44c:	d006      	beq.n	2000b45c <_scanf_float+0x250>
2000b44e:	0550      	lsls	r0, r2, #21
2000b450:	f57f af0c 	bpl.w	2000b26c <_scanf_float+0x60>
2000b454:	f1b9 0f00 	cmp.w	r9, #0
2000b458:	f43f af0f 	beq.w	2000b27a <_scanf_float+0x6e>
2000b45c:	0591      	lsls	r1, r2, #22
2000b45e:	bf58      	it	pl
2000b460:	9901      	ldrpl	r1, [sp, #4]
2000b462:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
2000b466:	bf58      	it	pl
2000b468:	eba9 0101 	subpl.w	r1, r9, r1
2000b46c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
2000b470:	bf58      	it	pl
2000b472:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
2000b476:	6022      	str	r2, [r4, #0]
2000b478:	f04f 0900 	mov.w	r9, #0
2000b47c:	e78a      	b.n	2000b394 <_scanf_float+0x188>
2000b47e:	f04f 0a03 	mov.w	sl, #3
2000b482:	e787      	b.n	2000b394 <_scanf_float+0x188>
2000b484:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
2000b488:	4639      	mov	r1, r7
2000b48a:	4640      	mov	r0, r8
2000b48c:	4798      	blx	r3
2000b48e:	2800      	cmp	r0, #0
2000b490:	f43f aedf 	beq.w	2000b252 <_scanf_float+0x46>
2000b494:	e6ea      	b.n	2000b26c <_scanf_float+0x60>
2000b496:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
2000b49a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
2000b49e:	463a      	mov	r2, r7
2000b4a0:	4640      	mov	r0, r8
2000b4a2:	4798      	blx	r3
2000b4a4:	6923      	ldr	r3, [r4, #16]
2000b4a6:	3b01      	subs	r3, #1
2000b4a8:	6123      	str	r3, [r4, #16]
2000b4aa:	e6ec      	b.n	2000b286 <_scanf_float+0x7a>
2000b4ac:	1e6b      	subs	r3, r5, #1
2000b4ae:	2b06      	cmp	r3, #6
2000b4b0:	d825      	bhi.n	2000b4fe <_scanf_float+0x2f2>
2000b4b2:	2d02      	cmp	r5, #2
2000b4b4:	d836      	bhi.n	2000b524 <_scanf_float+0x318>
2000b4b6:	455e      	cmp	r6, fp
2000b4b8:	f67f aee8 	bls.w	2000b28c <_scanf_float+0x80>
2000b4bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
2000b4c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
2000b4c4:	463a      	mov	r2, r7
2000b4c6:	4640      	mov	r0, r8
2000b4c8:	4798      	blx	r3
2000b4ca:	6923      	ldr	r3, [r4, #16]
2000b4cc:	3b01      	subs	r3, #1
2000b4ce:	6123      	str	r3, [r4, #16]
2000b4d0:	e7f1      	b.n	2000b4b6 <_scanf_float+0x2aa>
2000b4d2:	9802      	ldr	r0, [sp, #8]
2000b4d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
2000b4d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
2000b4dc:	9002      	str	r0, [sp, #8]
2000b4de:	463a      	mov	r2, r7
2000b4e0:	4640      	mov	r0, r8
2000b4e2:	4798      	blx	r3
2000b4e4:	6923      	ldr	r3, [r4, #16]
2000b4e6:	3b01      	subs	r3, #1
2000b4e8:	6123      	str	r3, [r4, #16]
2000b4ea:	f10a 3aff 	add.w	sl, sl, #4294967295
2000b4ee:	fa5f fa8a 	uxtb.w	sl, sl
2000b4f2:	f1ba 0f02 	cmp.w	sl, #2
2000b4f6:	d1ec      	bne.n	2000b4d2 <_scanf_float+0x2c6>
2000b4f8:	3d03      	subs	r5, #3
2000b4fa:	b2ed      	uxtb	r5, r5
2000b4fc:	1b76      	subs	r6, r6, r5
2000b4fe:	6823      	ldr	r3, [r4, #0]
2000b500:	05da      	lsls	r2, r3, #23
2000b502:	d52f      	bpl.n	2000b564 <_scanf_float+0x358>
2000b504:	055b      	lsls	r3, r3, #21
2000b506:	d510      	bpl.n	2000b52a <_scanf_float+0x31e>
2000b508:	455e      	cmp	r6, fp
2000b50a:	f67f aebf 	bls.w	2000b28c <_scanf_float+0x80>
2000b50e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
2000b512:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
2000b516:	463a      	mov	r2, r7
2000b518:	4640      	mov	r0, r8
2000b51a:	4798      	blx	r3
2000b51c:	6923      	ldr	r3, [r4, #16]
2000b51e:	3b01      	subs	r3, #1
2000b520:	6123      	str	r3, [r4, #16]
2000b522:	e7f1      	b.n	2000b508 <_scanf_float+0x2fc>
2000b524:	46aa      	mov	sl, r5
2000b526:	9602      	str	r6, [sp, #8]
2000b528:	e7df      	b.n	2000b4ea <_scanf_float+0x2de>
2000b52a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
2000b52e:	6923      	ldr	r3, [r4, #16]
2000b530:	2965      	cmp	r1, #101	; 0x65
2000b532:	f103 33ff 	add.w	r3, r3, #4294967295
2000b536:	f106 35ff 	add.w	r5, r6, #4294967295
2000b53a:	6123      	str	r3, [r4, #16]
2000b53c:	d00c      	beq.n	2000b558 <_scanf_float+0x34c>
2000b53e:	2945      	cmp	r1, #69	; 0x45
2000b540:	d00a      	beq.n	2000b558 <_scanf_float+0x34c>
2000b542:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
2000b546:	463a      	mov	r2, r7
2000b548:	4640      	mov	r0, r8
2000b54a:	4798      	blx	r3
2000b54c:	6923      	ldr	r3, [r4, #16]
2000b54e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
2000b552:	3b01      	subs	r3, #1
2000b554:	1eb5      	subs	r5, r6, #2
2000b556:	6123      	str	r3, [r4, #16]
2000b558:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
2000b55c:	463a      	mov	r2, r7
2000b55e:	4640      	mov	r0, r8
2000b560:	4798      	blx	r3
2000b562:	462e      	mov	r6, r5
2000b564:	6825      	ldr	r5, [r4, #0]
2000b566:	f015 0510 	ands.w	r5, r5, #16
2000b56a:	d14d      	bne.n	2000b608 <_scanf_float+0x3fc>
2000b56c:	7035      	strb	r5, [r6, #0]
2000b56e:	6823      	ldr	r3, [r4, #0]
2000b570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
2000b574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2000b578:	d11a      	bne.n	2000b5b0 <_scanf_float+0x3a4>
2000b57a:	9b01      	ldr	r3, [sp, #4]
2000b57c:	454b      	cmp	r3, r9
2000b57e:	eba3 0209 	sub.w	r2, r3, r9
2000b582:	d122      	bne.n	2000b5ca <_scanf_float+0x3be>
2000b584:	2200      	movs	r2, #0
2000b586:	4659      	mov	r1, fp
2000b588:	4640      	mov	r0, r8
2000b58a:	f000 fe77 	bl	2000c27c <_strtod_r>
2000b58e:	9b03      	ldr	r3, [sp, #12]
2000b590:	6821      	ldr	r1, [r4, #0]
2000b592:	681b      	ldr	r3, [r3, #0]
2000b594:	f011 0f02 	tst.w	r1, #2
2000b598:	f103 0204 	add.w	r2, r3, #4
2000b59c:	d020      	beq.n	2000b5e0 <_scanf_float+0x3d4>
2000b59e:	9903      	ldr	r1, [sp, #12]
2000b5a0:	600a      	str	r2, [r1, #0]
2000b5a2:	681b      	ldr	r3, [r3, #0]
2000b5a4:	ed83 0b00 	vstr	d0, [r3]
2000b5a8:	68e3      	ldr	r3, [r4, #12]
2000b5aa:	3301      	adds	r3, #1
2000b5ac:	60e3      	str	r3, [r4, #12]
2000b5ae:	e66e      	b.n	2000b28e <_scanf_float+0x82>
2000b5b0:	9b04      	ldr	r3, [sp, #16]
2000b5b2:	2b00      	cmp	r3, #0
2000b5b4:	d0e6      	beq.n	2000b584 <_scanf_float+0x378>
2000b5b6:	9905      	ldr	r1, [sp, #20]
2000b5b8:	230a      	movs	r3, #10
2000b5ba:	462a      	mov	r2, r5
2000b5bc:	3101      	adds	r1, #1
2000b5be:	4640      	mov	r0, r8
2000b5c0:	f000 ff86 	bl	2000c4d0 <_strtol_r>
2000b5c4:	9b04      	ldr	r3, [sp, #16]
2000b5c6:	9e05      	ldr	r6, [sp, #20]
2000b5c8:	1ac2      	subs	r2, r0, r3
2000b5ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
2000b5ce:	429e      	cmp	r6, r3
2000b5d0:	bf28      	it	cs
2000b5d2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
2000b5d6:	490d      	ldr	r1, [pc, #52]	; (2000b60c <_scanf_float+0x400>)
2000b5d8:	4630      	mov	r0, r6
2000b5da:	f000 f83d 	bl	2000b658 <siprintf>
2000b5de:	e7d1      	b.n	2000b584 <_scanf_float+0x378>
2000b5e0:	f011 0f04 	tst.w	r1, #4
2000b5e4:	9903      	ldr	r1, [sp, #12]
2000b5e6:	600a      	str	r2, [r1, #0]
2000b5e8:	d1db      	bne.n	2000b5a2 <_scanf_float+0x396>
2000b5ea:	eeb4 0b40 	vcmp.f64	d0, d0
2000b5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000b5f2:	681e      	ldr	r6, [r3, #0]
2000b5f4:	d705      	bvc.n	2000b602 <_scanf_float+0x3f6>
2000b5f6:	4806      	ldr	r0, [pc, #24]	; (2000b610 <_scanf_float+0x404>)
2000b5f8:	f000 f80c 	bl	2000b614 <nanf>
2000b5fc:	ed86 0a00 	vstr	s0, [r6]
2000b600:	e7d2      	b.n	2000b5a8 <_scanf_float+0x39c>
2000b602:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2000b606:	e7f9      	b.n	2000b5fc <_scanf_float+0x3f0>
2000b608:	2500      	movs	r5, #0
2000b60a:	e640      	b.n	2000b28e <_scanf_float+0x82>
2000b60c:	2000fa50 	.word	0x2000fa50
2000b610:	2000fe90 	.word	0x2000fe90

2000b614 <nanf>:
2000b614:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2000b61c <nanf+0x8>
2000b618:	4770      	bx	lr
2000b61a:	bf00      	nop
2000b61c:	7fc00000 	.word	0x7fc00000

2000b620 <_siprintf_r>:
2000b620:	b40c      	push	{r2, r3}
2000b622:	b500      	push	{lr}
2000b624:	b09d      	sub	sp, #116	; 0x74
2000b626:	ab1e      	add	r3, sp, #120	; 0x78
2000b628:	9102      	str	r1, [sp, #8]
2000b62a:	9106      	str	r1, [sp, #24]
2000b62c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
2000b630:	9107      	str	r1, [sp, #28]
2000b632:	9104      	str	r1, [sp, #16]
2000b634:	4907      	ldr	r1, [pc, #28]	; (2000b654 <_siprintf_r+0x34>)
2000b636:	f853 2b04 	ldr.w	r2, [r3], #4
2000b63a:	9105      	str	r1, [sp, #20]
2000b63c:	a902      	add	r1, sp, #8
2000b63e:	9301      	str	r3, [sp, #4]
2000b640:	f002 ffb0 	bl	2000e5a4 <_svfiprintf_r>
2000b644:	9b02      	ldr	r3, [sp, #8]
2000b646:	2200      	movs	r2, #0
2000b648:	701a      	strb	r2, [r3, #0]
2000b64a:	b01d      	add	sp, #116	; 0x74
2000b64c:	f85d eb04 	ldr.w	lr, [sp], #4
2000b650:	b002      	add	sp, #8
2000b652:	4770      	bx	lr
2000b654:	ffff0208 	.word	0xffff0208

2000b658 <siprintf>:
2000b658:	b40e      	push	{r1, r2, r3}
2000b65a:	b500      	push	{lr}
2000b65c:	b09c      	sub	sp, #112	; 0x70
2000b65e:	ab1d      	add	r3, sp, #116	; 0x74
2000b660:	9002      	str	r0, [sp, #8]
2000b662:	9006      	str	r0, [sp, #24]
2000b664:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
2000b668:	4809      	ldr	r0, [pc, #36]	; (2000b690 <siprintf+0x38>)
2000b66a:	9107      	str	r1, [sp, #28]
2000b66c:	9104      	str	r1, [sp, #16]
2000b66e:	4909      	ldr	r1, [pc, #36]	; (2000b694 <siprintf+0x3c>)
2000b670:	f853 2b04 	ldr.w	r2, [r3], #4
2000b674:	9105      	str	r1, [sp, #20]
2000b676:	6800      	ldr	r0, [r0, #0]
2000b678:	9301      	str	r3, [sp, #4]
2000b67a:	a902      	add	r1, sp, #8
2000b67c:	f002 ff92 	bl	2000e5a4 <_svfiprintf_r>
2000b680:	9b02      	ldr	r3, [sp, #8]
2000b682:	2200      	movs	r2, #0
2000b684:	701a      	strb	r2, [r3, #0]
2000b686:	b01c      	add	sp, #112	; 0x70
2000b688:	f85d eb04 	ldr.w	lr, [sp], #4
2000b68c:	b003      	add	sp, #12
2000b68e:	4770      	bx	lr
2000b690:	20000224 	.word	0x20000224
2000b694:	ffff0208 	.word	0xffff0208

2000b698 <sulp>:
2000b698:	b570      	push	{r4, r5, r6, lr}
2000b69a:	4604      	mov	r4, r0
2000b69c:	460d      	mov	r5, r1
2000b69e:	4616      	mov	r6, r2
2000b6a0:	ec45 4b10 	vmov	d0, r4, r5
2000b6a4:	f002 fc8a 	bl	2000dfbc <__ulp>
2000b6a8:	b17e      	cbz	r6, 2000b6ca <sulp+0x32>
2000b6aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
2000b6ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
2000b6b2:	2b00      	cmp	r3, #0
2000b6b4:	dd09      	ble.n	2000b6ca <sulp+0x32>
2000b6b6:	051b      	lsls	r3, r3, #20
2000b6b8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
2000b6bc:	2000      	movs	r0, #0
2000b6be:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
2000b6c2:	ec41 0b17 	vmov	d7, r0, r1
2000b6c6:	ee20 0b07 	vmul.f64	d0, d0, d7
2000b6ca:	bd70      	pop	{r4, r5, r6, pc}
2000b6cc:	0000      	movs	r0, r0
	...

2000b6d0 <_strtod_l>:
2000b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000b6d4:	ed2d 8b0c 	vpush	{d8-d13}
2000b6d8:	b09d      	sub	sp, #116	; 0x74
2000b6da:	461f      	mov	r7, r3
2000b6dc:	2300      	movs	r3, #0
2000b6de:	9318      	str	r3, [sp, #96]	; 0x60
2000b6e0:	4ba6      	ldr	r3, [pc, #664]	; (2000b97c <_strtod_l+0x2ac>)
2000b6e2:	9213      	str	r2, [sp, #76]	; 0x4c
2000b6e4:	681b      	ldr	r3, [r3, #0]
2000b6e6:	9308      	str	r3, [sp, #32]
2000b6e8:	4604      	mov	r4, r0
2000b6ea:	4618      	mov	r0, r3
2000b6ec:	468a      	mov	sl, r1
2000b6ee:	f7f4 ff3d 	bl	2000056c <strlen>
2000b6f2:	f04f 0800 	mov.w	r8, #0
2000b6f6:	4605      	mov	r5, r0
2000b6f8:	f04f 0900 	mov.w	r9, #0
2000b6fc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
2000b700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
2000b702:	781a      	ldrb	r2, [r3, #0]
2000b704:	2a2b      	cmp	r2, #43	; 0x2b
2000b706:	d04d      	beq.n	2000b7a4 <_strtod_l+0xd4>
2000b708:	d83a      	bhi.n	2000b780 <_strtod_l+0xb0>
2000b70a:	2a0d      	cmp	r2, #13
2000b70c:	d833      	bhi.n	2000b776 <_strtod_l+0xa6>
2000b70e:	2a08      	cmp	r2, #8
2000b710:	d833      	bhi.n	2000b77a <_strtod_l+0xaa>
2000b712:	2a00      	cmp	r2, #0
2000b714:	d03d      	beq.n	2000b792 <_strtod_l+0xc2>
2000b716:	2300      	movs	r3, #0
2000b718:	930b      	str	r3, [sp, #44]	; 0x2c
2000b71a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
2000b71c:	7833      	ldrb	r3, [r6, #0]
2000b71e:	2b30      	cmp	r3, #48	; 0x30
2000b720:	f040 80b6 	bne.w	2000b890 <_strtod_l+0x1c0>
2000b724:	7873      	ldrb	r3, [r6, #1]
2000b726:	f003 03df 	and.w	r3, r3, #223	; 0xdf
2000b72a:	2b58      	cmp	r3, #88	; 0x58
2000b72c:	d16d      	bne.n	2000b80a <_strtod_l+0x13a>
2000b72e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2000b730:	9301      	str	r3, [sp, #4]
2000b732:	ab18      	add	r3, sp, #96	; 0x60
2000b734:	9702      	str	r7, [sp, #8]
2000b736:	9300      	str	r3, [sp, #0]
2000b738:	4a91      	ldr	r2, [pc, #580]	; (2000b980 <_strtod_l+0x2b0>)
2000b73a:	ab19      	add	r3, sp, #100	; 0x64
2000b73c:	a917      	add	r1, sp, #92	; 0x5c
2000b73e:	4620      	mov	r0, r4
2000b740:	f001 fd54 	bl	2000d1ec <__gethex>
2000b744:	f010 0507 	ands.w	r5, r0, #7
2000b748:	4607      	mov	r7, r0
2000b74a:	d005      	beq.n	2000b758 <_strtod_l+0x88>
2000b74c:	2d06      	cmp	r5, #6
2000b74e:	d12b      	bne.n	2000b7a8 <_strtod_l+0xd8>
2000b750:	3601      	adds	r6, #1
2000b752:	2300      	movs	r3, #0
2000b754:	9617      	str	r6, [sp, #92]	; 0x5c
2000b756:	930b      	str	r3, [sp, #44]	; 0x2c
2000b758:	9b13      	ldr	r3, [sp, #76]	; 0x4c
2000b75a:	2b00      	cmp	r3, #0
2000b75c:	f040 856e 	bne.w	2000c23c <_strtod_l+0xb6c>
2000b760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2000b762:	b1e3      	cbz	r3, 2000b79e <_strtod_l+0xce>
2000b764:	ec49 8b17 	vmov	d7, r8, r9
2000b768:	eeb1 0b47 	vneg.f64	d0, d7
2000b76c:	b01d      	add	sp, #116	; 0x74
2000b76e:	ecbd 8b0c 	vpop	{d8-d13}
2000b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000b776:	2a20      	cmp	r2, #32
2000b778:	d1cd      	bne.n	2000b716 <_strtod_l+0x46>
2000b77a:	3301      	adds	r3, #1
2000b77c:	9317      	str	r3, [sp, #92]	; 0x5c
2000b77e:	e7bf      	b.n	2000b700 <_strtod_l+0x30>
2000b780:	2a2d      	cmp	r2, #45	; 0x2d
2000b782:	d1c8      	bne.n	2000b716 <_strtod_l+0x46>
2000b784:	2201      	movs	r2, #1
2000b786:	920b      	str	r2, [sp, #44]	; 0x2c
2000b788:	1c5a      	adds	r2, r3, #1
2000b78a:	9217      	str	r2, [sp, #92]	; 0x5c
2000b78c:	785b      	ldrb	r3, [r3, #1]
2000b78e:	2b00      	cmp	r3, #0
2000b790:	d1c3      	bne.n	2000b71a <_strtod_l+0x4a>
2000b792:	9b13      	ldr	r3, [sp, #76]	; 0x4c
2000b794:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
2000b798:	2b00      	cmp	r3, #0
2000b79a:	f040 854d 	bne.w	2000c238 <_strtod_l+0xb68>
2000b79e:	ec49 8b10 	vmov	d0, r8, r9
2000b7a2:	e7e3      	b.n	2000b76c <_strtod_l+0x9c>
2000b7a4:	2200      	movs	r2, #0
2000b7a6:	e7ee      	b.n	2000b786 <_strtod_l+0xb6>
2000b7a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
2000b7aa:	b13a      	cbz	r2, 2000b7bc <_strtod_l+0xec>
2000b7ac:	2135      	movs	r1, #53	; 0x35
2000b7ae:	a81a      	add	r0, sp, #104	; 0x68
2000b7b0:	f002 fd24 	bl	2000e1fc <__copybits>
2000b7b4:	9918      	ldr	r1, [sp, #96]	; 0x60
2000b7b6:	4620      	mov	r0, r4
2000b7b8:	f002 f8d4 	bl	2000d964 <_Bfree>
2000b7bc:	3d01      	subs	r5, #1
2000b7be:	2d05      	cmp	r5, #5
2000b7c0:	d807      	bhi.n	2000b7d2 <_strtod_l+0x102>
2000b7c2:	e8df f005 	tbb	[pc, r5]
2000b7c6:	0b0e      	.short	0x0b0e
2000b7c8:	030e1d18 	.word	0x030e1d18
2000b7cc:	f04f 0900 	mov.w	r9, #0
2000b7d0:	46c8      	mov	r8, r9
2000b7d2:	073b      	lsls	r3, r7, #28
2000b7d4:	d5c0      	bpl.n	2000b758 <_strtod_l+0x88>
2000b7d6:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
2000b7da:	e7bd      	b.n	2000b758 <_strtod_l+0x88>
2000b7dc:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
2000b7e0:	e7f7      	b.n	2000b7d2 <_strtod_l+0x102>
2000b7e2:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
2000b7e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
2000b7e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
2000b7ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
2000b7f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
2000b7f4:	e7ed      	b.n	2000b7d2 <_strtod_l+0x102>
2000b7f6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 2000b984 <_strtod_l+0x2b4>
2000b7fa:	f04f 0800 	mov.w	r8, #0
2000b7fe:	e7e8      	b.n	2000b7d2 <_strtod_l+0x102>
2000b800:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
2000b804:	f04f 38ff 	mov.w	r8, #4294967295
2000b808:	e7e3      	b.n	2000b7d2 <_strtod_l+0x102>
2000b80a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
2000b80c:	1c5a      	adds	r2, r3, #1
2000b80e:	9217      	str	r2, [sp, #92]	; 0x5c
2000b810:	785b      	ldrb	r3, [r3, #1]
2000b812:	2b30      	cmp	r3, #48	; 0x30
2000b814:	d0f9      	beq.n	2000b80a <_strtod_l+0x13a>
2000b816:	2b00      	cmp	r3, #0
2000b818:	d09e      	beq.n	2000b758 <_strtod_l+0x88>
2000b81a:	2301      	movs	r3, #1
2000b81c:	9306      	str	r3, [sp, #24]
2000b81e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
2000b820:	930c      	str	r3, [sp, #48]	; 0x30
2000b822:	2300      	movs	r3, #0
2000b824:	9304      	str	r3, [sp, #16]
2000b826:	930a      	str	r3, [sp, #40]	; 0x28
2000b828:	461e      	mov	r6, r3
2000b82a:	220a      	movs	r2, #10
2000b82c:	9817      	ldr	r0, [sp, #92]	; 0x5c
2000b82e:	f890 b000 	ldrb.w	fp, [r0]
2000b832:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
2000b836:	b2d9      	uxtb	r1, r3
2000b838:	2909      	cmp	r1, #9
2000b83a:	d92b      	bls.n	2000b894 <_strtod_l+0x1c4>
2000b83c:	9908      	ldr	r1, [sp, #32]
2000b83e:	462a      	mov	r2, r5
2000b840:	f002 ffca 	bl	2000e7d8 <strncmp>
2000b844:	2800      	cmp	r0, #0
2000b846:	d035      	beq.n	2000b8b4 <_strtod_l+0x1e4>
2000b848:	2000      	movs	r0, #0
2000b84a:	465a      	mov	r2, fp
2000b84c:	4633      	mov	r3, r6
2000b84e:	4683      	mov	fp, r0
2000b850:	4601      	mov	r1, r0
2000b852:	2a65      	cmp	r2, #101	; 0x65
2000b854:	d001      	beq.n	2000b85a <_strtod_l+0x18a>
2000b856:	2a45      	cmp	r2, #69	; 0x45
2000b858:	d118      	bne.n	2000b88c <_strtod_l+0x1bc>
2000b85a:	b91b      	cbnz	r3, 2000b864 <_strtod_l+0x194>
2000b85c:	9b06      	ldr	r3, [sp, #24]
2000b85e:	4303      	orrs	r3, r0
2000b860:	d097      	beq.n	2000b792 <_strtod_l+0xc2>
2000b862:	2300      	movs	r3, #0
2000b864:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
2000b868:	f10a 0201 	add.w	r2, sl, #1
2000b86c:	9217      	str	r2, [sp, #92]	; 0x5c
2000b86e:	f89a 2001 	ldrb.w	r2, [sl, #1]
2000b872:	2a2b      	cmp	r2, #43	; 0x2b
2000b874:	d077      	beq.n	2000b966 <_strtod_l+0x296>
2000b876:	2a2d      	cmp	r2, #45	; 0x2d
2000b878:	d07d      	beq.n	2000b976 <_strtod_l+0x2a6>
2000b87a:	f04f 0e00 	mov.w	lr, #0
2000b87e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
2000b882:	2d09      	cmp	r5, #9
2000b884:	f240 8084 	bls.w	2000b990 <_strtod_l+0x2c0>
2000b888:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
2000b88c:	2500      	movs	r5, #0
2000b88e:	e09f      	b.n	2000b9d0 <_strtod_l+0x300>
2000b890:	2300      	movs	r3, #0
2000b892:	e7c3      	b.n	2000b81c <_strtod_l+0x14c>
2000b894:	2e08      	cmp	r6, #8
2000b896:	bfd5      	itete	le
2000b898:	990a      	ldrle	r1, [sp, #40]	; 0x28
2000b89a:	9904      	ldrgt	r1, [sp, #16]
2000b89c:	fb02 3301 	mlale	r3, r2, r1, r3
2000b8a0:	fb02 3301 	mlagt	r3, r2, r1, r3
2000b8a4:	f100 0001 	add.w	r0, r0, #1
2000b8a8:	bfd4      	ite	le
2000b8aa:	930a      	strle	r3, [sp, #40]	; 0x28
2000b8ac:	9304      	strgt	r3, [sp, #16]
2000b8ae:	3601      	adds	r6, #1
2000b8b0:	9017      	str	r0, [sp, #92]	; 0x5c
2000b8b2:	e7bb      	b.n	2000b82c <_strtod_l+0x15c>
2000b8b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
2000b8b6:	195a      	adds	r2, r3, r5
2000b8b8:	9217      	str	r2, [sp, #92]	; 0x5c
2000b8ba:	5d5a      	ldrb	r2, [r3, r5]
2000b8bc:	b3ae      	cbz	r6, 2000b92a <_strtod_l+0x25a>
2000b8be:	4683      	mov	fp, r0
2000b8c0:	4633      	mov	r3, r6
2000b8c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
2000b8c6:	2909      	cmp	r1, #9
2000b8c8:	d912      	bls.n	2000b8f0 <_strtod_l+0x220>
2000b8ca:	2101      	movs	r1, #1
2000b8cc:	e7c1      	b.n	2000b852 <_strtod_l+0x182>
2000b8ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
2000b8d0:	1c5a      	adds	r2, r3, #1
2000b8d2:	9217      	str	r2, [sp, #92]	; 0x5c
2000b8d4:	785a      	ldrb	r2, [r3, #1]
2000b8d6:	3001      	adds	r0, #1
2000b8d8:	2a30      	cmp	r2, #48	; 0x30
2000b8da:	d0f8      	beq.n	2000b8ce <_strtod_l+0x1fe>
2000b8dc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
2000b8e0:	2b08      	cmp	r3, #8
2000b8e2:	f200 84b0 	bhi.w	2000c246 <_strtod_l+0xb76>
2000b8e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
2000b8e8:	930c      	str	r3, [sp, #48]	; 0x30
2000b8ea:	4683      	mov	fp, r0
2000b8ec:	2000      	movs	r0, #0
2000b8ee:	4603      	mov	r3, r0
2000b8f0:	3a30      	subs	r2, #48	; 0x30
2000b8f2:	f100 0101 	add.w	r1, r0, #1
2000b8f6:	d012      	beq.n	2000b91e <_strtod_l+0x24e>
2000b8f8:	448b      	add	fp, r1
2000b8fa:	eb00 0c03 	add.w	ip, r0, r3
2000b8fe:	4619      	mov	r1, r3
2000b900:	250a      	movs	r5, #10
2000b902:	4561      	cmp	r1, ip
2000b904:	d113      	bne.n	2000b92e <_strtod_l+0x25e>
2000b906:	1819      	adds	r1, r3, r0
2000b908:	2908      	cmp	r1, #8
2000b90a:	f103 0301 	add.w	r3, r3, #1
2000b90e:	4403      	add	r3, r0
2000b910:	dc1d      	bgt.n	2000b94e <_strtod_l+0x27e>
2000b912:	980a      	ldr	r0, [sp, #40]	; 0x28
2000b914:	210a      	movs	r1, #10
2000b916:	fb01 2200 	mla	r2, r1, r0, r2
2000b91a:	920a      	str	r2, [sp, #40]	; 0x28
2000b91c:	2100      	movs	r1, #0
2000b91e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
2000b920:	1c50      	adds	r0, r2, #1
2000b922:	9017      	str	r0, [sp, #92]	; 0x5c
2000b924:	7852      	ldrb	r2, [r2, #1]
2000b926:	4608      	mov	r0, r1
2000b928:	e7cb      	b.n	2000b8c2 <_strtod_l+0x1f2>
2000b92a:	4630      	mov	r0, r6
2000b92c:	e7d4      	b.n	2000b8d8 <_strtod_l+0x208>
2000b92e:	2908      	cmp	r1, #8
2000b930:	dc04      	bgt.n	2000b93c <_strtod_l+0x26c>
2000b932:	9f0a      	ldr	r7, [sp, #40]	; 0x28
2000b934:	436f      	muls	r7, r5
2000b936:	970a      	str	r7, [sp, #40]	; 0x28
2000b938:	3101      	adds	r1, #1
2000b93a:	e7e2      	b.n	2000b902 <_strtod_l+0x232>
2000b93c:	f101 0e01 	add.w	lr, r1, #1
2000b940:	f1be 0f10 	cmp.w	lr, #16
2000b944:	bfde      	ittt	le
2000b946:	9f04      	ldrle	r7, [sp, #16]
2000b948:	436f      	mulle	r7, r5
2000b94a:	9704      	strle	r7, [sp, #16]
2000b94c:	e7f4      	b.n	2000b938 <_strtod_l+0x268>
2000b94e:	2b10      	cmp	r3, #16
2000b950:	bfdf      	itttt	le
2000b952:	9804      	ldrle	r0, [sp, #16]
2000b954:	210a      	movle	r1, #10
2000b956:	fb01 2200 	mlale	r2, r1, r0, r2
2000b95a:	9204      	strle	r2, [sp, #16]
2000b95c:	e7de      	b.n	2000b91c <_strtod_l+0x24c>
2000b95e:	f04f 0b00 	mov.w	fp, #0
2000b962:	2101      	movs	r1, #1
2000b964:	e77a      	b.n	2000b85c <_strtod_l+0x18c>
2000b966:	f04f 0e00 	mov.w	lr, #0
2000b96a:	f10a 0202 	add.w	r2, sl, #2
2000b96e:	9217      	str	r2, [sp, #92]	; 0x5c
2000b970:	f89a 2002 	ldrb.w	r2, [sl, #2]
2000b974:	e783      	b.n	2000b87e <_strtod_l+0x1ae>
2000b976:	f04f 0e01 	mov.w	lr, #1
2000b97a:	e7f6      	b.n	2000b96a <_strtod_l+0x29a>
2000b97c:	2000fca8 	.word	0x2000fca8
2000b980:	2000fa58 	.word	0x2000fa58
2000b984:	7ff00000 	.word	0x7ff00000
2000b988:	9a17      	ldr	r2, [sp, #92]	; 0x5c
2000b98a:	1c55      	adds	r5, r2, #1
2000b98c:	9517      	str	r5, [sp, #92]	; 0x5c
2000b98e:	7852      	ldrb	r2, [r2, #1]
2000b990:	2a30      	cmp	r2, #48	; 0x30
2000b992:	d0f9      	beq.n	2000b988 <_strtod_l+0x2b8>
2000b994:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
2000b998:	2d08      	cmp	r5, #8
2000b99a:	f63f af77 	bhi.w	2000b88c <_strtod_l+0x1bc>
2000b99e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
2000b9a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
2000b9a4:	9208      	str	r2, [sp, #32]
2000b9a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
2000b9a8:	1c55      	adds	r5, r2, #1
2000b9aa:	9517      	str	r5, [sp, #92]	; 0x5c
2000b9ac:	7852      	ldrb	r2, [r2, #1]
2000b9ae:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
2000b9b2:	2f09      	cmp	r7, #9
2000b9b4:	d937      	bls.n	2000ba26 <_strtod_l+0x356>
2000b9b6:	9f08      	ldr	r7, [sp, #32]
2000b9b8:	1bed      	subs	r5, r5, r7
2000b9ba:	2d08      	cmp	r5, #8
2000b9bc:	f644 651f 	movw	r5, #19999	; 0x4e1f
2000b9c0:	dc02      	bgt.n	2000b9c8 <_strtod_l+0x2f8>
2000b9c2:	4565      	cmp	r5, ip
2000b9c4:	bfa8      	it	ge
2000b9c6:	4665      	movge	r5, ip
2000b9c8:	f1be 0f00 	cmp.w	lr, #0
2000b9cc:	d000      	beq.n	2000b9d0 <_strtod_l+0x300>
2000b9ce:	426d      	negs	r5, r5
2000b9d0:	2b00      	cmp	r3, #0
2000b9d2:	d14f      	bne.n	2000ba74 <_strtod_l+0x3a4>
2000b9d4:	9b06      	ldr	r3, [sp, #24]
2000b9d6:	4303      	orrs	r3, r0
2000b9d8:	f47f aebe 	bne.w	2000b758 <_strtod_l+0x88>
2000b9dc:	2900      	cmp	r1, #0
2000b9de:	f47f aed8 	bne.w	2000b792 <_strtod_l+0xc2>
2000b9e2:	2a69      	cmp	r2, #105	; 0x69
2000b9e4:	d027      	beq.n	2000ba36 <_strtod_l+0x366>
2000b9e6:	dc24      	bgt.n	2000ba32 <_strtod_l+0x362>
2000b9e8:	2a49      	cmp	r2, #73	; 0x49
2000b9ea:	d024      	beq.n	2000ba36 <_strtod_l+0x366>
2000b9ec:	2a4e      	cmp	r2, #78	; 0x4e
2000b9ee:	f47f aed0 	bne.w	2000b792 <_strtod_l+0xc2>
2000b9f2:	499b      	ldr	r1, [pc, #620]	; (2000bc60 <_strtod_l+0x590>)
2000b9f4:	a817      	add	r0, sp, #92	; 0x5c
2000b9f6:	f001 fe51 	bl	2000d69c <__match>
2000b9fa:	2800      	cmp	r0, #0
2000b9fc:	f43f aec9 	beq.w	2000b792 <_strtod_l+0xc2>
2000ba00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
2000ba02:	781b      	ldrb	r3, [r3, #0]
2000ba04:	2b28      	cmp	r3, #40	; 0x28
2000ba06:	d12d      	bne.n	2000ba64 <_strtod_l+0x394>
2000ba08:	4996      	ldr	r1, [pc, #600]	; (2000bc64 <_strtod_l+0x594>)
2000ba0a:	aa1a      	add	r2, sp, #104	; 0x68
2000ba0c:	a817      	add	r0, sp, #92	; 0x5c
2000ba0e:	f001 fe59 	bl	2000d6c4 <__hexnan>
2000ba12:	2805      	cmp	r0, #5
2000ba14:	d126      	bne.n	2000ba64 <_strtod_l+0x394>
2000ba16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
2000ba18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
2000ba1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
2000ba20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
2000ba24:	e698      	b.n	2000b758 <_strtod_l+0x88>
2000ba26:	250a      	movs	r5, #10
2000ba28:	fb05 250c 	mla	r5, r5, ip, r2
2000ba2c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
2000ba30:	e7b9      	b.n	2000b9a6 <_strtod_l+0x2d6>
2000ba32:	2a6e      	cmp	r2, #110	; 0x6e
2000ba34:	e7db      	b.n	2000b9ee <_strtod_l+0x31e>
2000ba36:	498c      	ldr	r1, [pc, #560]	; (2000bc68 <_strtod_l+0x598>)
2000ba38:	a817      	add	r0, sp, #92	; 0x5c
2000ba3a:	f001 fe2f 	bl	2000d69c <__match>
2000ba3e:	2800      	cmp	r0, #0
2000ba40:	f43f aea7 	beq.w	2000b792 <_strtod_l+0xc2>
2000ba44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
2000ba46:	4989      	ldr	r1, [pc, #548]	; (2000bc6c <_strtod_l+0x59c>)
2000ba48:	3b01      	subs	r3, #1
2000ba4a:	a817      	add	r0, sp, #92	; 0x5c
2000ba4c:	9317      	str	r3, [sp, #92]	; 0x5c
2000ba4e:	f001 fe25 	bl	2000d69c <__match>
2000ba52:	b910      	cbnz	r0, 2000ba5a <_strtod_l+0x38a>
2000ba54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
2000ba56:	3301      	adds	r3, #1
2000ba58:	9317      	str	r3, [sp, #92]	; 0x5c
2000ba5a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 2000bc80 <_strtod_l+0x5b0>
2000ba5e:	f04f 0800 	mov.w	r8, #0
2000ba62:	e679      	b.n	2000b758 <_strtod_l+0x88>
2000ba64:	4882      	ldr	r0, [pc, #520]	; (2000bc70 <_strtod_l+0x5a0>)
2000ba66:	f002 fe9f 	bl	2000e7a8 <nan>
2000ba6a:	ed8d 0b04 	vstr	d0, [sp, #16]
2000ba6e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
2000ba72:	e671      	b.n	2000b758 <_strtod_l+0x88>
2000ba74:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
2000ba78:	eeb8 7b67 	vcvt.f64.u32	d7, s15
2000ba7c:	eba5 020b 	sub.w	r2, r5, fp
2000ba80:	2e00      	cmp	r6, #0
2000ba82:	bf08      	it	eq
2000ba84:	461e      	moveq	r6, r3
2000ba86:	2b10      	cmp	r3, #16
2000ba88:	ed8d 7b08 	vstr	d7, [sp, #32]
2000ba8c:	9206      	str	r2, [sp, #24]
2000ba8e:	461a      	mov	r2, r3
2000ba90:	bfa8      	it	ge
2000ba92:	2210      	movge	r2, #16
2000ba94:	2b09      	cmp	r3, #9
2000ba96:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
2000ba9a:	dd0e      	ble.n	2000baba <_strtod_l+0x3ea>
2000ba9c:	4975      	ldr	r1, [pc, #468]	; (2000bc74 <_strtod_l+0x5a4>)
2000ba9e:	eddd 7a04 	vldr	s15, [sp, #16]
2000baa2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
2000baa6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
2000baaa:	ed9d 5b08 	vldr	d5, [sp, #32]
2000baae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
2000bab2:	eea5 7b06 	vfma.f64	d7, d5, d6
2000bab6:	ec59 8b17 	vmov	r8, r9, d7
2000baba:	2b0f      	cmp	r3, #15
2000babc:	dc37      	bgt.n	2000bb2e <_strtod_l+0x45e>
2000babe:	9906      	ldr	r1, [sp, #24]
2000bac0:	2900      	cmp	r1, #0
2000bac2:	f43f ae49 	beq.w	2000b758 <_strtod_l+0x88>
2000bac6:	dd23      	ble.n	2000bb10 <_strtod_l+0x440>
2000bac8:	2916      	cmp	r1, #22
2000baca:	dc0b      	bgt.n	2000bae4 <_strtod_l+0x414>
2000bacc:	4b69      	ldr	r3, [pc, #420]	; (2000bc74 <_strtod_l+0x5a4>)
2000bace:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
2000bad2:	ed93 7b00 	vldr	d7, [r3]
2000bad6:	ec49 8b16 	vmov	d6, r8, r9
2000bada:	ee27 7b06 	vmul.f64	d7, d7, d6
2000bade:	ec59 8b17 	vmov	r8, r9, d7
2000bae2:	e639      	b.n	2000b758 <_strtod_l+0x88>
2000bae4:	9806      	ldr	r0, [sp, #24]
2000bae6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
2000baea:	4281      	cmp	r1, r0
2000baec:	db1f      	blt.n	2000bb2e <_strtod_l+0x45e>
2000baee:	4a61      	ldr	r2, [pc, #388]	; (2000bc74 <_strtod_l+0x5a4>)
2000baf0:	f1c3 030f 	rsb	r3, r3, #15
2000baf4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
2000baf8:	ed91 7b00 	vldr	d7, [r1]
2000bafc:	ec49 8b16 	vmov	d6, r8, r9
2000bb00:	1ac3      	subs	r3, r0, r3
2000bb02:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
2000bb06:	ee27 7b06 	vmul.f64	d7, d7, d6
2000bb0a:	ed92 6b00 	vldr	d6, [r2]
2000bb0e:	e7e4      	b.n	2000bada <_strtod_l+0x40a>
2000bb10:	9906      	ldr	r1, [sp, #24]
2000bb12:	3116      	adds	r1, #22
2000bb14:	db0b      	blt.n	2000bb2e <_strtod_l+0x45e>
2000bb16:	4b57      	ldr	r3, [pc, #348]	; (2000bc74 <_strtod_l+0x5a4>)
2000bb18:	ebab 0505 	sub.w	r5, fp, r5
2000bb1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
2000bb20:	ed95 7b00 	vldr	d7, [r5]
2000bb24:	ec49 8b16 	vmov	d6, r8, r9
2000bb28:	ee86 7b07 	vdiv.f64	d7, d6, d7
2000bb2c:	e7d7      	b.n	2000bade <_strtod_l+0x40e>
2000bb2e:	9906      	ldr	r1, [sp, #24]
2000bb30:	1a9a      	subs	r2, r3, r2
2000bb32:	440a      	add	r2, r1
2000bb34:	2a00      	cmp	r2, #0
2000bb36:	dd74      	ble.n	2000bc22 <_strtod_l+0x552>
2000bb38:	f012 000f 	ands.w	r0, r2, #15
2000bb3c:	d00a      	beq.n	2000bb54 <_strtod_l+0x484>
2000bb3e:	494d      	ldr	r1, [pc, #308]	; (2000bc74 <_strtod_l+0x5a4>)
2000bb40:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
2000bb44:	ed91 7b00 	vldr	d7, [r1]
2000bb48:	ec49 8b16 	vmov	d6, r8, r9
2000bb4c:	ee27 7b06 	vmul.f64	d7, d7, d6
2000bb50:	ec59 8b17 	vmov	r8, r9, d7
2000bb54:	f032 020f 	bics.w	r2, r2, #15
2000bb58:	d04f      	beq.n	2000bbfa <_strtod_l+0x52a>
2000bb5a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
2000bb5e:	dd22      	ble.n	2000bba6 <_strtod_l+0x4d6>
2000bb60:	2500      	movs	r5, #0
2000bb62:	462e      	mov	r6, r5
2000bb64:	950a      	str	r5, [sp, #40]	; 0x28
2000bb66:	462f      	mov	r7, r5
2000bb68:	2322      	movs	r3, #34	; 0x22
2000bb6a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 2000bc80 <_strtod_l+0x5b0>
2000bb6e:	6023      	str	r3, [r4, #0]
2000bb70:	f04f 0800 	mov.w	r8, #0
2000bb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000bb76:	2b00      	cmp	r3, #0
2000bb78:	f43f adee 	beq.w	2000b758 <_strtod_l+0x88>
2000bb7c:	9918      	ldr	r1, [sp, #96]	; 0x60
2000bb7e:	4620      	mov	r0, r4
2000bb80:	f001 fef0 	bl	2000d964 <_Bfree>
2000bb84:	4639      	mov	r1, r7
2000bb86:	4620      	mov	r0, r4
2000bb88:	f001 feec 	bl	2000d964 <_Bfree>
2000bb8c:	4631      	mov	r1, r6
2000bb8e:	4620      	mov	r0, r4
2000bb90:	f001 fee8 	bl	2000d964 <_Bfree>
2000bb94:	990a      	ldr	r1, [sp, #40]	; 0x28
2000bb96:	4620      	mov	r0, r4
2000bb98:	f001 fee4 	bl	2000d964 <_Bfree>
2000bb9c:	4629      	mov	r1, r5
2000bb9e:	4620      	mov	r0, r4
2000bba0:	f001 fee0 	bl	2000d964 <_Bfree>
2000bba4:	e5d8      	b.n	2000b758 <_strtod_l+0x88>
2000bba6:	e9cd 8904 	strd	r8, r9, [sp, #16]
2000bbaa:	2000      	movs	r0, #0
2000bbac:	4f32      	ldr	r7, [pc, #200]	; (2000bc78 <_strtod_l+0x5a8>)
2000bbae:	1112      	asrs	r2, r2, #4
2000bbb0:	4601      	mov	r1, r0
2000bbb2:	2a01      	cmp	r2, #1
2000bbb4:	dc24      	bgt.n	2000bc00 <_strtod_l+0x530>
2000bbb6:	b108      	cbz	r0, 2000bbbc <_strtod_l+0x4ec>
2000bbb8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
2000bbbc:	4a2e      	ldr	r2, [pc, #184]	; (2000bc78 <_strtod_l+0x5a8>)
2000bbbe:	482f      	ldr	r0, [pc, #188]	; (2000bc7c <_strtod_l+0x5ac>)
2000bbc0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
2000bbc4:	ed91 7b00 	vldr	d7, [r1]
2000bbc8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
2000bbcc:	ec49 8b16 	vmov	d6, r8, r9
2000bbd0:	ee27 7b06 	vmul.f64	d7, d7, d6
2000bbd4:	ed8d 7b04 	vstr	d7, [sp, #16]
2000bbd8:	9905      	ldr	r1, [sp, #20]
2000bbda:	4a29      	ldr	r2, [pc, #164]	; (2000bc80 <_strtod_l+0x5b0>)
2000bbdc:	400a      	ands	r2, r1
2000bbde:	4282      	cmp	r2, r0
2000bbe0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
2000bbe4:	d8bc      	bhi.n	2000bb60 <_strtod_l+0x490>
2000bbe6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
2000bbea:	4282      	cmp	r2, r0
2000bbec:	bf86      	itte	hi
2000bbee:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 2000bc84 <_strtod_l+0x5b4>
2000bbf2:	f04f 38ff 	movhi.w	r8, #4294967295
2000bbf6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
2000bbfa:	2200      	movs	r2, #0
2000bbfc:	9204      	str	r2, [sp, #16]
2000bbfe:	e07f      	b.n	2000bd00 <_strtod_l+0x630>
2000bc00:	f012 0f01 	tst.w	r2, #1
2000bc04:	d00a      	beq.n	2000bc1c <_strtod_l+0x54c>
2000bc06:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
2000bc0a:	ed90 7b00 	vldr	d7, [r0]
2000bc0e:	ed9d 6b04 	vldr	d6, [sp, #16]
2000bc12:	ee26 7b07 	vmul.f64	d7, d6, d7
2000bc16:	ed8d 7b04 	vstr	d7, [sp, #16]
2000bc1a:	2001      	movs	r0, #1
2000bc1c:	3101      	adds	r1, #1
2000bc1e:	1052      	asrs	r2, r2, #1
2000bc20:	e7c7      	b.n	2000bbb2 <_strtod_l+0x4e2>
2000bc22:	d0ea      	beq.n	2000bbfa <_strtod_l+0x52a>
2000bc24:	4252      	negs	r2, r2
2000bc26:	f012 000f 	ands.w	r0, r2, #15
2000bc2a:	d00a      	beq.n	2000bc42 <_strtod_l+0x572>
2000bc2c:	4911      	ldr	r1, [pc, #68]	; (2000bc74 <_strtod_l+0x5a4>)
2000bc2e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
2000bc32:	ed91 7b00 	vldr	d7, [r1]
2000bc36:	ec49 8b16 	vmov	d6, r8, r9
2000bc3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
2000bc3e:	ec59 8b17 	vmov	r8, r9, d7
2000bc42:	1112      	asrs	r2, r2, #4
2000bc44:	d0d9      	beq.n	2000bbfa <_strtod_l+0x52a>
2000bc46:	2a1f      	cmp	r2, #31
2000bc48:	dd1e      	ble.n	2000bc88 <_strtod_l+0x5b8>
2000bc4a:	2500      	movs	r5, #0
2000bc4c:	462e      	mov	r6, r5
2000bc4e:	950a      	str	r5, [sp, #40]	; 0x28
2000bc50:	462f      	mov	r7, r5
2000bc52:	2322      	movs	r3, #34	; 0x22
2000bc54:	f04f 0800 	mov.w	r8, #0
2000bc58:	f04f 0900 	mov.w	r9, #0
2000bc5c:	6023      	str	r3, [r4, #0]
2000bc5e:	e789      	b.n	2000bb74 <_strtod_l+0x4a4>
2000bc60:	2000fa29 	.word	0x2000fa29
2000bc64:	2000fa6c 	.word	0x2000fa6c
2000bc68:	2000fa21 	.word	0x2000fa21
2000bc6c:	2000fbac 	.word	0x2000fbac
2000bc70:	2000fe90 	.word	0x2000fe90
2000bc74:	2000fd48 	.word	0x2000fd48
2000bc78:	2000fd20 	.word	0x2000fd20
2000bc7c:	7ca00000 	.word	0x7ca00000
2000bc80:	7ff00000 	.word	0x7ff00000
2000bc84:	7fefffff 	.word	0x7fefffff
2000bc88:	f012 0110 	ands.w	r1, r2, #16
2000bc8c:	bf18      	it	ne
2000bc8e:	216a      	movne	r1, #106	; 0x6a
2000bc90:	e9cd 8908 	strd	r8, r9, [sp, #32]
2000bc94:	9104      	str	r1, [sp, #16]
2000bc96:	49c0      	ldr	r1, [pc, #768]	; (2000bf98 <_strtod_l+0x8c8>)
2000bc98:	2000      	movs	r0, #0
2000bc9a:	07d7      	lsls	r7, r2, #31
2000bc9c:	d508      	bpl.n	2000bcb0 <_strtod_l+0x5e0>
2000bc9e:	ed9d 6b08 	vldr	d6, [sp, #32]
2000bca2:	ed91 7b00 	vldr	d7, [r1]
2000bca6:	ee26 7b07 	vmul.f64	d7, d6, d7
2000bcaa:	ed8d 7b08 	vstr	d7, [sp, #32]
2000bcae:	2001      	movs	r0, #1
2000bcb0:	1052      	asrs	r2, r2, #1
2000bcb2:	f101 0108 	add.w	r1, r1, #8
2000bcb6:	d1f0      	bne.n	2000bc9a <_strtod_l+0x5ca>
2000bcb8:	b108      	cbz	r0, 2000bcbe <_strtod_l+0x5ee>
2000bcba:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
2000bcbe:	9a04      	ldr	r2, [sp, #16]
2000bcc0:	b1ba      	cbz	r2, 2000bcf2 <_strtod_l+0x622>
2000bcc2:	f3c9 520a 	ubfx	r2, r9, #20, #11
2000bcc6:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
2000bcca:	2a00      	cmp	r2, #0
2000bccc:	4649      	mov	r1, r9
2000bcce:	dd10      	ble.n	2000bcf2 <_strtod_l+0x622>
2000bcd0:	2a1f      	cmp	r2, #31
2000bcd2:	f340 8132 	ble.w	2000bf3a <_strtod_l+0x86a>
2000bcd6:	2a34      	cmp	r2, #52	; 0x34
2000bcd8:	bfde      	ittt	le
2000bcda:	3a20      	suble	r2, #32
2000bcdc:	f04f 30ff 	movle.w	r0, #4294967295
2000bce0:	fa00 f202 	lslle.w	r2, r0, r2
2000bce4:	f04f 0800 	mov.w	r8, #0
2000bce8:	bfcc      	ite	gt
2000bcea:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
2000bcee:	ea02 0901 	andle.w	r9, r2, r1
2000bcf2:	ec49 8b17 	vmov	d7, r8, r9
2000bcf6:	eeb5 7b40 	vcmp.f64	d7, #0.0
2000bcfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000bcfe:	d0a4      	beq.n	2000bc4a <_strtod_l+0x57a>
2000bd00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
2000bd02:	9200      	str	r2, [sp, #0]
2000bd04:	990c      	ldr	r1, [sp, #48]	; 0x30
2000bd06:	4632      	mov	r2, r6
2000bd08:	4620      	mov	r0, r4
2000bd0a:	f001 fe97 	bl	2000da3c <__s2b>
2000bd0e:	900a      	str	r0, [sp, #40]	; 0x28
2000bd10:	2800      	cmp	r0, #0
2000bd12:	f43f af25 	beq.w	2000bb60 <_strtod_l+0x490>
2000bd16:	9b06      	ldr	r3, [sp, #24]
2000bd18:	ebab 0505 	sub.w	r5, fp, r5
2000bd1c:	2b00      	cmp	r3, #0
2000bd1e:	bfb4      	ite	lt
2000bd20:	462b      	movlt	r3, r5
2000bd22:	2300      	movge	r3, #0
2000bd24:	930c      	str	r3, [sp, #48]	; 0x30
2000bd26:	9b06      	ldr	r3, [sp, #24]
2000bd28:	ed9f 9b95 	vldr	d9, [pc, #596]	; 2000bf80 <_strtod_l+0x8b0>
2000bd2c:	ed9f ab96 	vldr	d10, [pc, #600]	; 2000bf88 <_strtod_l+0x8b8>
2000bd30:	ed9f bb97 	vldr	d11, [pc, #604]	; 2000bf90 <_strtod_l+0x8c0>
2000bd34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
2000bd38:	2500      	movs	r5, #0
2000bd3a:	9312      	str	r3, [sp, #72]	; 0x48
2000bd3c:	462e      	mov	r6, r5
2000bd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000bd40:	4620      	mov	r0, r4
2000bd42:	6859      	ldr	r1, [r3, #4]
2000bd44:	f001 fdce 	bl	2000d8e4 <_Balloc>
2000bd48:	4607      	mov	r7, r0
2000bd4a:	2800      	cmp	r0, #0
2000bd4c:	f43f af0c 	beq.w	2000bb68 <_strtod_l+0x498>
2000bd50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000bd52:	691a      	ldr	r2, [r3, #16]
2000bd54:	3202      	adds	r2, #2
2000bd56:	f103 010c 	add.w	r1, r3, #12
2000bd5a:	0092      	lsls	r2, r2, #2
2000bd5c:	300c      	adds	r0, #12
2000bd5e:	f001 fdb3 	bl	2000d8c8 <memcpy>
2000bd62:	ec49 8b10 	vmov	d0, r8, r9
2000bd66:	aa1a      	add	r2, sp, #104	; 0x68
2000bd68:	a919      	add	r1, sp, #100	; 0x64
2000bd6a:	4620      	mov	r0, r4
2000bd6c:	e9cd 8908 	strd	r8, r9, [sp, #32]
2000bd70:	f002 f9a0 	bl	2000e0b4 <__d2b>
2000bd74:	9018      	str	r0, [sp, #96]	; 0x60
2000bd76:	2800      	cmp	r0, #0
2000bd78:	f43f aef6 	beq.w	2000bb68 <_strtod_l+0x498>
2000bd7c:	2101      	movs	r1, #1
2000bd7e:	4620      	mov	r0, r4
2000bd80:	f001 fef6 	bl	2000db70 <__i2b>
2000bd84:	4606      	mov	r6, r0
2000bd86:	2800      	cmp	r0, #0
2000bd88:	f43f aeee 	beq.w	2000bb68 <_strtod_l+0x498>
2000bd8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
2000bd8e:	991a      	ldr	r1, [sp, #104]	; 0x68
2000bd90:	2b00      	cmp	r3, #0
2000bd92:	bfab      	itete	ge
2000bd94:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
2000bd96:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
2000bd98:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
2000bd9c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
2000bda0:	bfac      	ite	ge
2000bda2:	eb03 0b02 	addge.w	fp, r3, r2
2000bda6:	eba2 0a03 	sublt.w	sl, r2, r3
2000bdaa:	9a04      	ldr	r2, [sp, #16]
2000bdac:	1a9b      	subs	r3, r3, r2
2000bdae:	440b      	add	r3, r1
2000bdb0:	4a7a      	ldr	r2, [pc, #488]	; (2000bf9c <_strtod_l+0x8cc>)
2000bdb2:	3b01      	subs	r3, #1
2000bdb4:	4293      	cmp	r3, r2
2000bdb6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
2000bdba:	f280 80d1 	bge.w	2000bf60 <_strtod_l+0x890>
2000bdbe:	1ad2      	subs	r2, r2, r3
2000bdc0:	2a1f      	cmp	r2, #31
2000bdc2:	eba1 0102 	sub.w	r1, r1, r2
2000bdc6:	f04f 0001 	mov.w	r0, #1
2000bdca:	f300 80bd 	bgt.w	2000bf48 <_strtod_l+0x878>
2000bdce:	fa00 f302 	lsl.w	r3, r0, r2
2000bdd2:	930e      	str	r3, [sp, #56]	; 0x38
2000bdd4:	2300      	movs	r3, #0
2000bdd6:	930d      	str	r3, [sp, #52]	; 0x34
2000bdd8:	eb0b 0301 	add.w	r3, fp, r1
2000bddc:	9a04      	ldr	r2, [sp, #16]
2000bdde:	459b      	cmp	fp, r3
2000bde0:	448a      	add	sl, r1
2000bde2:	4492      	add	sl, r2
2000bde4:	465a      	mov	r2, fp
2000bde6:	bfa8      	it	ge
2000bde8:	461a      	movge	r2, r3
2000bdea:	4552      	cmp	r2, sl
2000bdec:	bfa8      	it	ge
2000bdee:	4652      	movge	r2, sl
2000bdf0:	2a00      	cmp	r2, #0
2000bdf2:	bfc2      	ittt	gt
2000bdf4:	1a9b      	subgt	r3, r3, r2
2000bdf6:	ebaa 0a02 	subgt.w	sl, sl, r2
2000bdfa:	ebab 0b02 	subgt.w	fp, fp, r2
2000bdfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
2000be00:	2a00      	cmp	r2, #0
2000be02:	dd18      	ble.n	2000be36 <_strtod_l+0x766>
2000be04:	4631      	mov	r1, r6
2000be06:	4620      	mov	r0, r4
2000be08:	9315      	str	r3, [sp, #84]	; 0x54
2000be0a:	f001 ff6d 	bl	2000dce8 <__pow5mult>
2000be0e:	4606      	mov	r6, r0
2000be10:	2800      	cmp	r0, #0
2000be12:	f43f aea9 	beq.w	2000bb68 <_strtod_l+0x498>
2000be16:	4601      	mov	r1, r0
2000be18:	9a18      	ldr	r2, [sp, #96]	; 0x60
2000be1a:	4620      	mov	r0, r4
2000be1c:	f001 febe 	bl	2000db9c <__multiply>
2000be20:	9014      	str	r0, [sp, #80]	; 0x50
2000be22:	2800      	cmp	r0, #0
2000be24:	f43f aea0 	beq.w	2000bb68 <_strtod_l+0x498>
2000be28:	9918      	ldr	r1, [sp, #96]	; 0x60
2000be2a:	4620      	mov	r0, r4
2000be2c:	f001 fd9a 	bl	2000d964 <_Bfree>
2000be30:	9a14      	ldr	r2, [sp, #80]	; 0x50
2000be32:	9b15      	ldr	r3, [sp, #84]	; 0x54
2000be34:	9218      	str	r2, [sp, #96]	; 0x60
2000be36:	2b00      	cmp	r3, #0
2000be38:	f300 8097 	bgt.w	2000bf6a <_strtod_l+0x89a>
2000be3c:	9b06      	ldr	r3, [sp, #24]
2000be3e:	2b00      	cmp	r3, #0
2000be40:	dd08      	ble.n	2000be54 <_strtod_l+0x784>
2000be42:	4639      	mov	r1, r7
2000be44:	9a12      	ldr	r2, [sp, #72]	; 0x48
2000be46:	4620      	mov	r0, r4
2000be48:	f001 ff4e 	bl	2000dce8 <__pow5mult>
2000be4c:	4607      	mov	r7, r0
2000be4e:	2800      	cmp	r0, #0
2000be50:	f43f ae8a 	beq.w	2000bb68 <_strtod_l+0x498>
2000be54:	f1ba 0f00 	cmp.w	sl, #0
2000be58:	dd08      	ble.n	2000be6c <_strtod_l+0x79c>
2000be5a:	4639      	mov	r1, r7
2000be5c:	4652      	mov	r2, sl
2000be5e:	4620      	mov	r0, r4
2000be60:	f001 ff9c 	bl	2000dd9c <__lshift>
2000be64:	4607      	mov	r7, r0
2000be66:	2800      	cmp	r0, #0
2000be68:	f43f ae7e 	beq.w	2000bb68 <_strtod_l+0x498>
2000be6c:	f1bb 0f00 	cmp.w	fp, #0
2000be70:	dd08      	ble.n	2000be84 <_strtod_l+0x7b4>
2000be72:	4631      	mov	r1, r6
2000be74:	465a      	mov	r2, fp
2000be76:	4620      	mov	r0, r4
2000be78:	f001 ff90 	bl	2000dd9c <__lshift>
2000be7c:	4606      	mov	r6, r0
2000be7e:	2800      	cmp	r0, #0
2000be80:	f43f ae72 	beq.w	2000bb68 <_strtod_l+0x498>
2000be84:	9918      	ldr	r1, [sp, #96]	; 0x60
2000be86:	463a      	mov	r2, r7
2000be88:	4620      	mov	r0, r4
2000be8a:	f002 f80f 	bl	2000deac <__mdiff>
2000be8e:	4605      	mov	r5, r0
2000be90:	2800      	cmp	r0, #0
2000be92:	f43f ae69 	beq.w	2000bb68 <_strtod_l+0x498>
2000be96:	2300      	movs	r3, #0
2000be98:	f8d0 a00c 	ldr.w	sl, [r0, #12]
2000be9c:	60c3      	str	r3, [r0, #12]
2000be9e:	4631      	mov	r1, r6
2000bea0:	f001 ffe8 	bl	2000de74 <__mcmp>
2000bea4:	2800      	cmp	r0, #0
2000bea6:	da7f      	bge.n	2000bfa8 <_strtod_l+0x8d8>
2000bea8:	ea5a 0308 	orrs.w	r3, sl, r8
2000beac:	f040 80a5 	bne.w	2000bffa <_strtod_l+0x92a>
2000beb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
2000beb4:	2b00      	cmp	r3, #0
2000beb6:	f040 80a0 	bne.w	2000bffa <_strtod_l+0x92a>
2000beba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
2000bebe:	0d1b      	lsrs	r3, r3, #20
2000bec0:	051b      	lsls	r3, r3, #20
2000bec2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
2000bec6:	f240 8098 	bls.w	2000bffa <_strtod_l+0x92a>
2000beca:	696b      	ldr	r3, [r5, #20]
2000becc:	b91b      	cbnz	r3, 2000bed6 <_strtod_l+0x806>
2000bece:	692b      	ldr	r3, [r5, #16]
2000bed0:	2b01      	cmp	r3, #1
2000bed2:	f340 8092 	ble.w	2000bffa <_strtod_l+0x92a>
2000bed6:	4629      	mov	r1, r5
2000bed8:	2201      	movs	r2, #1
2000beda:	4620      	mov	r0, r4
2000bedc:	f001 ff5e 	bl	2000dd9c <__lshift>
2000bee0:	4631      	mov	r1, r6
2000bee2:	4605      	mov	r5, r0
2000bee4:	f001 ffc6 	bl	2000de74 <__mcmp>
2000bee8:	2800      	cmp	r0, #0
2000beea:	f340 8086 	ble.w	2000bffa <_strtod_l+0x92a>
2000beee:	9904      	ldr	r1, [sp, #16]
2000bef0:	4a2b      	ldr	r2, [pc, #172]	; (2000bfa0 <_strtod_l+0x8d0>)
2000bef2:	464b      	mov	r3, r9
2000bef4:	2900      	cmp	r1, #0
2000bef6:	f000 80a1 	beq.w	2000c03c <_strtod_l+0x96c>
2000befa:	ea02 0109 	and.w	r1, r2, r9
2000befe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
2000bf02:	f300 809b 	bgt.w	2000c03c <_strtod_l+0x96c>
2000bf06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
2000bf0a:	f77f aea2 	ble.w	2000bc52 <_strtod_l+0x582>
2000bf0e:	4a25      	ldr	r2, [pc, #148]	; (2000bfa4 <_strtod_l+0x8d4>)
2000bf10:	2300      	movs	r3, #0
2000bf12:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
2000bf16:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
2000bf1a:	ec49 8b17 	vmov	d7, r8, r9
2000bf1e:	ee27 7b06 	vmul.f64	d7, d7, d6
2000bf22:	ed8d 7b04 	vstr	d7, [sp, #16]
2000bf26:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
2000bf2a:	4313      	orrs	r3, r2
2000bf2c:	bf08      	it	eq
2000bf2e:	2322      	moveq	r3, #34	; 0x22
2000bf30:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
2000bf34:	bf08      	it	eq
2000bf36:	6023      	streq	r3, [r4, #0]
2000bf38:	e620      	b.n	2000bb7c <_strtod_l+0x4ac>
2000bf3a:	f04f 31ff 	mov.w	r1, #4294967295
2000bf3e:	fa01 f202 	lsl.w	r2, r1, r2
2000bf42:	ea02 0808 	and.w	r8, r2, r8
2000bf46:	e6d4      	b.n	2000bcf2 <_strtod_l+0x622>
2000bf48:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
2000bf4c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
2000bf50:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
2000bf54:	33e2      	adds	r3, #226	; 0xe2
2000bf56:	fa00 f303 	lsl.w	r3, r0, r3
2000bf5a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
2000bf5e:	e73b      	b.n	2000bdd8 <_strtod_l+0x708>
2000bf60:	2000      	movs	r0, #0
2000bf62:	2301      	movs	r3, #1
2000bf64:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
2000bf68:	e736      	b.n	2000bdd8 <_strtod_l+0x708>
2000bf6a:	9918      	ldr	r1, [sp, #96]	; 0x60
2000bf6c:	461a      	mov	r2, r3
2000bf6e:	4620      	mov	r0, r4
2000bf70:	f001 ff14 	bl	2000dd9c <__lshift>
2000bf74:	9018      	str	r0, [sp, #96]	; 0x60
2000bf76:	2800      	cmp	r0, #0
2000bf78:	f47f af60 	bne.w	2000be3c <_strtod_l+0x76c>
2000bf7c:	e5f4      	b.n	2000bb68 <_strtod_l+0x498>
2000bf7e:	bf00      	nop
2000bf80:	94a03595 	.word	0x94a03595
2000bf84:	3fcfffff 	.word	0x3fcfffff
2000bf88:	94a03595 	.word	0x94a03595
2000bf8c:	3fdfffff 	.word	0x3fdfffff
2000bf90:	35afe535 	.word	0x35afe535
2000bf94:	3fe00000 	.word	0x3fe00000
2000bf98:	2000fa80 	.word	0x2000fa80
2000bf9c:	fffffc02 	.word	0xfffffc02
2000bfa0:	7ff00000 	.word	0x7ff00000
2000bfa4:	39500000 	.word	0x39500000
2000bfa8:	46cb      	mov	fp, r9
2000bfaa:	d165      	bne.n	2000c078 <_strtod_l+0x9a8>
2000bfac:	f3c9 0313 	ubfx	r3, r9, #0, #20
2000bfb0:	f1ba 0f00 	cmp.w	sl, #0
2000bfb4:	d02a      	beq.n	2000c00c <_strtod_l+0x93c>
2000bfb6:	4aaa      	ldr	r2, [pc, #680]	; (2000c260 <_strtod_l+0xb90>)
2000bfb8:	4293      	cmp	r3, r2
2000bfba:	d12b      	bne.n	2000c014 <_strtod_l+0x944>
2000bfbc:	9b04      	ldr	r3, [sp, #16]
2000bfbe:	4641      	mov	r1, r8
2000bfc0:	b1fb      	cbz	r3, 2000c002 <_strtod_l+0x932>
2000bfc2:	4aa8      	ldr	r2, [pc, #672]	; (2000c264 <_strtod_l+0xb94>)
2000bfc4:	ea09 0202 	and.w	r2, r9, r2
2000bfc8:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
2000bfcc:	f04f 30ff 	mov.w	r0, #4294967295
2000bfd0:	d81a      	bhi.n	2000c008 <_strtod_l+0x938>
2000bfd2:	0d12      	lsrs	r2, r2, #20
2000bfd4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
2000bfd8:	fa00 f303 	lsl.w	r3, r0, r3
2000bfdc:	4299      	cmp	r1, r3
2000bfde:	d119      	bne.n	2000c014 <_strtod_l+0x944>
2000bfe0:	4ba1      	ldr	r3, [pc, #644]	; (2000c268 <_strtod_l+0xb98>)
2000bfe2:	459b      	cmp	fp, r3
2000bfe4:	d102      	bne.n	2000bfec <_strtod_l+0x91c>
2000bfe6:	3101      	adds	r1, #1
2000bfe8:	f43f adbe 	beq.w	2000bb68 <_strtod_l+0x498>
2000bfec:	4b9d      	ldr	r3, [pc, #628]	; (2000c264 <_strtod_l+0xb94>)
2000bfee:	ea0b 0303 	and.w	r3, fp, r3
2000bff2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
2000bff6:	f04f 0800 	mov.w	r8, #0
2000bffa:	9b04      	ldr	r3, [sp, #16]
2000bffc:	2b00      	cmp	r3, #0
2000bffe:	d186      	bne.n	2000bf0e <_strtod_l+0x83e>
2000c000:	e5bc      	b.n	2000bb7c <_strtod_l+0x4ac>
2000c002:	f04f 33ff 	mov.w	r3, #4294967295
2000c006:	e7e9      	b.n	2000bfdc <_strtod_l+0x90c>
2000c008:	4603      	mov	r3, r0
2000c00a:	e7e7      	b.n	2000bfdc <_strtod_l+0x90c>
2000c00c:	ea53 0308 	orrs.w	r3, r3, r8
2000c010:	f43f af6d 	beq.w	2000beee <_strtod_l+0x81e>
2000c014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
2000c016:	b1db      	cbz	r3, 2000c050 <_strtod_l+0x980>
2000c018:	ea13 0f0b 	tst.w	r3, fp
2000c01c:	d0ed      	beq.n	2000bffa <_strtod_l+0x92a>
2000c01e:	9a04      	ldr	r2, [sp, #16]
2000c020:	4640      	mov	r0, r8
2000c022:	4649      	mov	r1, r9
2000c024:	f1ba 0f00 	cmp.w	sl, #0
2000c028:	d016      	beq.n	2000c058 <_strtod_l+0x988>
2000c02a:	f7ff fb35 	bl	2000b698 <sulp>
2000c02e:	ed9d 7b08 	vldr	d7, [sp, #32]
2000c032:	ee37 7b00 	vadd.f64	d7, d7, d0
2000c036:	ec59 8b17 	vmov	r8, r9, d7
2000c03a:	e7de      	b.n	2000bffa <_strtod_l+0x92a>
2000c03c:	4013      	ands	r3, r2
2000c03e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
2000c042:	ea6f 5913 	mvn.w	r9, r3, lsr #20
2000c046:	ea6f 5909 	mvn.w	r9, r9, lsl #20
2000c04a:	f04f 38ff 	mov.w	r8, #4294967295
2000c04e:	e7d4      	b.n	2000bffa <_strtod_l+0x92a>
2000c050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
2000c052:	ea13 0f08 	tst.w	r3, r8
2000c056:	e7e1      	b.n	2000c01c <_strtod_l+0x94c>
2000c058:	f7ff fb1e 	bl	2000b698 <sulp>
2000c05c:	ed9d 7b08 	vldr	d7, [sp, #32]
2000c060:	ee37 7b40 	vsub.f64	d7, d7, d0
2000c064:	ed8d 7b06 	vstr	d7, [sp, #24]
2000c068:	eeb5 7b40 	vcmp.f64	d7, #0.0
2000c06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c070:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
2000c074:	d1c1      	bne.n	2000bffa <_strtod_l+0x92a>
2000c076:	e5ec      	b.n	2000bc52 <_strtod_l+0x582>
2000c078:	4631      	mov	r1, r6
2000c07a:	4628      	mov	r0, r5
2000c07c:	f002 f876 	bl	2000e16c <__ratio>
2000c080:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
2000c084:	eeb4 0bc7 	vcmpe.f64	d0, d7
2000c088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c08c:	d867      	bhi.n	2000c15e <_strtod_l+0xa8e>
2000c08e:	f1ba 0f00 	cmp.w	sl, #0
2000c092:	d044      	beq.n	2000c11e <_strtod_l+0xa4e>
2000c094:	4b75      	ldr	r3, [pc, #468]	; (2000c26c <_strtod_l+0xb9c>)
2000c096:	2200      	movs	r2, #0
2000c098:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
2000c09c:	4971      	ldr	r1, [pc, #452]	; (2000c264 <_strtod_l+0xb94>)
2000c09e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 2000c278 <_strtod_l+0xba8>
2000c0a2:	ea0b 0001 	and.w	r0, fp, r1
2000c0a6:	4560      	cmp	r0, ip
2000c0a8:	900d      	str	r0, [sp, #52]	; 0x34
2000c0aa:	f040 808b 	bne.w	2000c1c4 <_strtod_l+0xaf4>
2000c0ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
2000c0b2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
2000c0b6:	ec49 8b10 	vmov	d0, r8, r9
2000c0ba:	ec43 2b1c 	vmov	d12, r2, r3
2000c0be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
2000c0c2:	f001 ff7b 	bl	2000dfbc <__ulp>
2000c0c6:	ec49 8b1d 	vmov	d13, r8, r9
2000c0ca:	eeac db00 	vfma.f64	d13, d12, d0
2000c0ce:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
2000c0d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
2000c0d4:	4963      	ldr	r1, [pc, #396]	; (2000c264 <_strtod_l+0xb94>)
2000c0d6:	4a66      	ldr	r2, [pc, #408]	; (2000c270 <_strtod_l+0xba0>)
2000c0d8:	4019      	ands	r1, r3
2000c0da:	4291      	cmp	r1, r2
2000c0dc:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
2000c0e0:	d947      	bls.n	2000c172 <_strtod_l+0xaa2>
2000c0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000c0e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
2000c0e8:	4293      	cmp	r3, r2
2000c0ea:	d103      	bne.n	2000c0f4 <_strtod_l+0xa24>
2000c0ec:	9b08      	ldr	r3, [sp, #32]
2000c0ee:	3301      	adds	r3, #1
2000c0f0:	f43f ad3a 	beq.w	2000bb68 <_strtod_l+0x498>
2000c0f4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 2000c268 <_strtod_l+0xb98>
2000c0f8:	f04f 38ff 	mov.w	r8, #4294967295
2000c0fc:	9918      	ldr	r1, [sp, #96]	; 0x60
2000c0fe:	4620      	mov	r0, r4
2000c100:	f001 fc30 	bl	2000d964 <_Bfree>
2000c104:	4639      	mov	r1, r7
2000c106:	4620      	mov	r0, r4
2000c108:	f001 fc2c 	bl	2000d964 <_Bfree>
2000c10c:	4631      	mov	r1, r6
2000c10e:	4620      	mov	r0, r4
2000c110:	f001 fc28 	bl	2000d964 <_Bfree>
2000c114:	4629      	mov	r1, r5
2000c116:	4620      	mov	r0, r4
2000c118:	f001 fc24 	bl	2000d964 <_Bfree>
2000c11c:	e60f      	b.n	2000bd3e <_strtod_l+0x66e>
2000c11e:	f1b8 0f00 	cmp.w	r8, #0
2000c122:	d112      	bne.n	2000c14a <_strtod_l+0xa7a>
2000c124:	f3c9 0313 	ubfx	r3, r9, #0, #20
2000c128:	b9b3      	cbnz	r3, 2000c158 <_strtod_l+0xa88>
2000c12a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
2000c12e:	eeb4 0bc7 	vcmpe.f64	d0, d7
2000c132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c136:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
2000c13a:	d401      	bmi.n	2000c140 <_strtod_l+0xa70>
2000c13c:	ee20 8b08 	vmul.f64	d8, d0, d8
2000c140:	eeb1 7b48 	vneg.f64	d7, d8
2000c144:	ec53 2b17 	vmov	r2, r3, d7
2000c148:	e7a8      	b.n	2000c09c <_strtod_l+0x9cc>
2000c14a:	f1b8 0f01 	cmp.w	r8, #1
2000c14e:	d103      	bne.n	2000c158 <_strtod_l+0xa88>
2000c150:	f1b9 0f00 	cmp.w	r9, #0
2000c154:	f43f ad7d 	beq.w	2000bc52 <_strtod_l+0x582>
2000c158:	4b46      	ldr	r3, [pc, #280]	; (2000c274 <_strtod_l+0xba4>)
2000c15a:	2200      	movs	r2, #0
2000c15c:	e79c      	b.n	2000c098 <_strtod_l+0x9c8>
2000c15e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
2000c162:	ee20 8b08 	vmul.f64	d8, d0, d8
2000c166:	f1ba 0f00 	cmp.w	sl, #0
2000c16a:	d0e9      	beq.n	2000c140 <_strtod_l+0xa70>
2000c16c:	ec53 2b18 	vmov	r2, r3, d8
2000c170:	e794      	b.n	2000c09c <_strtod_l+0x9cc>
2000c172:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
2000c176:	9b04      	ldr	r3, [sp, #16]
2000c178:	2b00      	cmp	r3, #0
2000c17a:	d1bf      	bne.n	2000c0fc <_strtod_l+0xa2c>
2000c17c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
2000c180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
2000c182:	0d1b      	lsrs	r3, r3, #20
2000c184:	051b      	lsls	r3, r3, #20
2000c186:	429a      	cmp	r2, r3
2000c188:	d1b8      	bne.n	2000c0fc <_strtod_l+0xa2c>
2000c18a:	ec51 0b18 	vmov	r0, r1, d8
2000c18e:	f7f4 fc75 	bl	20000a7c <__aeabi_d2lz>
2000c192:	f7f4 fbdd 	bl	20000950 <__aeabi_l2d>
2000c196:	f3c9 0313 	ubfx	r3, r9, #0, #20
2000c19a:	ec41 0b17 	vmov	d7, r0, r1
2000c19e:	ea43 0308 	orr.w	r3, r3, r8
2000c1a2:	ea53 030a 	orrs.w	r3, r3, sl
2000c1a6:	ee38 8b47 	vsub.f64	d8, d8, d7
2000c1aa:	d03e      	beq.n	2000c22a <_strtod_l+0xb5a>
2000c1ac:	eeb4 8bca 	vcmpe.f64	d8, d10
2000c1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c1b4:	f53f ace2 	bmi.w	2000bb7c <_strtod_l+0x4ac>
2000c1b8:	eeb4 8bcb 	vcmpe.f64	d8, d11
2000c1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c1c0:	dd9c      	ble.n	2000c0fc <_strtod_l+0xa2c>
2000c1c2:	e4db      	b.n	2000bb7c <_strtod_l+0x4ac>
2000c1c4:	9904      	ldr	r1, [sp, #16]
2000c1c6:	b301      	cbz	r1, 2000c20a <_strtod_l+0xb3a>
2000c1c8:	990d      	ldr	r1, [sp, #52]	; 0x34
2000c1ca:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
2000c1ce:	d81c      	bhi.n	2000c20a <_strtod_l+0xb3a>
2000c1d0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 2000c258 <_strtod_l+0xb88>
2000c1d4:	eeb4 8bc7 	vcmpe.f64	d8, d7
2000c1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c1dc:	d811      	bhi.n	2000c202 <_strtod_l+0xb32>
2000c1de:	eebc 8bc8 	vcvt.u32.f64	s16, d8
2000c1e2:	ee18 3a10 	vmov	r3, s16
2000c1e6:	2b01      	cmp	r3, #1
2000c1e8:	bf38      	it	cc
2000c1ea:	2301      	movcc	r3, #1
2000c1ec:	ee08 3a10 	vmov	s16, r3
2000c1f0:	eeb8 8b48 	vcvt.f64.u32	d8, s16
2000c1f4:	f1ba 0f00 	cmp.w	sl, #0
2000c1f8:	d114      	bne.n	2000c224 <_strtod_l+0xb54>
2000c1fa:	eeb1 7b48 	vneg.f64	d7, d8
2000c1fe:	ec53 2b17 	vmov	r2, r3, d7
2000c202:	980d      	ldr	r0, [sp, #52]	; 0x34
2000c204:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
2000c208:	1a0b      	subs	r3, r1, r0
2000c20a:	ed9d 0b08 	vldr	d0, [sp, #32]
2000c20e:	ec43 2b1c 	vmov	d12, r2, r3
2000c212:	f001 fed3 	bl	2000dfbc <__ulp>
2000c216:	ed9d 7b08 	vldr	d7, [sp, #32]
2000c21a:	eeac 7b00 	vfma.f64	d7, d12, d0
2000c21e:	ec59 8b17 	vmov	r8, r9, d7
2000c222:	e7a8      	b.n	2000c176 <_strtod_l+0xaa6>
2000c224:	ec53 2b18 	vmov	r2, r3, d8
2000c228:	e7eb      	b.n	2000c202 <_strtod_l+0xb32>
2000c22a:	eeb4 8bc9 	vcmpe.f64	d8, d9
2000c22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c232:	f57f af63 	bpl.w	2000c0fc <_strtod_l+0xa2c>
2000c236:	e4a1      	b.n	2000bb7c <_strtod_l+0x4ac>
2000c238:	2300      	movs	r3, #0
2000c23a:	930b      	str	r3, [sp, #44]	; 0x2c
2000c23c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
2000c23e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
2000c240:	6013      	str	r3, [r2, #0]
2000c242:	f7ff ba8d 	b.w	2000b760 <_strtod_l+0x90>
2000c246:	2a65      	cmp	r2, #101	; 0x65
2000c248:	f43f ab89 	beq.w	2000b95e <_strtod_l+0x28e>
2000c24c:	2a45      	cmp	r2, #69	; 0x45
2000c24e:	f43f ab86 	beq.w	2000b95e <_strtod_l+0x28e>
2000c252:	2101      	movs	r1, #1
2000c254:	f7ff bbbe 	b.w	2000b9d4 <_strtod_l+0x304>
2000c258:	ffc00000 	.word	0xffc00000
2000c25c:	41dfffff 	.word	0x41dfffff
2000c260:	000fffff 	.word	0x000fffff
2000c264:	7ff00000 	.word	0x7ff00000
2000c268:	7fefffff 	.word	0x7fefffff
2000c26c:	3ff00000 	.word	0x3ff00000
2000c270:	7c9fffff 	.word	0x7c9fffff
2000c274:	bff00000 	.word	0xbff00000
2000c278:	7fe00000 	.word	0x7fe00000

2000c27c <_strtod_r>:
2000c27c:	4b01      	ldr	r3, [pc, #4]	; (2000c284 <_strtod_r+0x8>)
2000c27e:	f7ff ba27 	b.w	2000b6d0 <_strtod_l>
2000c282:	bf00      	nop
2000c284:	2000028c 	.word	0x2000028c

2000c288 <strtod_l>:
2000c288:	4613      	mov	r3, r2
2000c28a:	460a      	mov	r2, r1
2000c28c:	4601      	mov	r1, r0
2000c28e:	4802      	ldr	r0, [pc, #8]	; (2000c298 <strtod_l+0x10>)
2000c290:	6800      	ldr	r0, [r0, #0]
2000c292:	f7ff ba1d 	b.w	2000b6d0 <_strtod_l>
2000c296:	bf00      	nop
2000c298:	20000224 	.word	0x20000224

2000c29c <strtod>:
2000c29c:	460a      	mov	r2, r1
2000c29e:	4601      	mov	r1, r0
2000c2a0:	4802      	ldr	r0, [pc, #8]	; (2000c2ac <strtod+0x10>)
2000c2a2:	4b03      	ldr	r3, [pc, #12]	; (2000c2b0 <strtod+0x14>)
2000c2a4:	6800      	ldr	r0, [r0, #0]
2000c2a6:	f7ff ba13 	b.w	2000b6d0 <_strtod_l>
2000c2aa:	bf00      	nop
2000c2ac:	20000224 	.word	0x20000224
2000c2b0:	2000028c 	.word	0x2000028c
2000c2b4:	00000000 	.word	0x00000000

2000c2b8 <strtof_l>:
2000c2b8:	b510      	push	{r4, lr}
2000c2ba:	4c1d      	ldr	r4, [pc, #116]	; (2000c330 <strtof_l+0x78>)
2000c2bc:	4613      	mov	r3, r2
2000c2be:	460a      	mov	r2, r1
2000c2c0:	4601      	mov	r1, r0
2000c2c2:	6820      	ldr	r0, [r4, #0]
2000c2c4:	f7ff fa04 	bl	2000b6d0 <_strtod_l>
2000c2c8:	eeb4 0b40 	vcmp.f64	d0, d0
2000c2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c2d0:	eeb0 7b40 	vmov.f64	d7, d0
2000c2d4:	d70d      	bvc.n	2000c2f2 <strtof_l+0x3a>
2000c2d6:	ee17 3a90 	vmov	r3, s15
2000c2da:	2b00      	cmp	r3, #0
2000c2dc:	4815      	ldr	r0, [pc, #84]	; (2000c334 <strtof_l+0x7c>)
2000c2de:	da04      	bge.n	2000c2ea <strtof_l+0x32>
2000c2e0:	f7ff f998 	bl	2000b614 <nanf>
2000c2e4:	eeb1 0a40 	vneg.f32	s0, s0
2000c2e8:	bd10      	pop	{r4, pc}
2000c2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2000c2ee:	f7ff b991 	b.w	2000b614 <nanf>
2000c2f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2000c2f6:	eddf 6a10 	vldr	s13, [pc, #64]	; 2000c338 <strtof_l+0x80>
2000c2fa:	eeb0 6ac0 	vabs.f32	s12, s0
2000c2fe:	eeb4 6a66 	vcmp.f32	s12, s13
2000c302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c306:	ddef      	ble.n	2000c2e8 <strtof_l+0x30>
2000c308:	eeb0 7bc7 	vabs.f64	d7, d7
2000c30c:	ed9f 6b06 	vldr	d6, [pc, #24]	; 2000c328 <strtof_l+0x70>
2000c310:	eeb4 7b46 	vcmp.f64	d7, d6
2000c314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c318:	bfde      	ittt	le
2000c31a:	6823      	ldrle	r3, [r4, #0]
2000c31c:	2222      	movle	r2, #34	; 0x22
2000c31e:	601a      	strle	r2, [r3, #0]
2000c320:	e7e2      	b.n	2000c2e8 <strtof_l+0x30>
2000c322:	bf00      	nop
2000c324:	f3af 8000 	nop.w
2000c328:	ffffffff 	.word	0xffffffff
2000c32c:	7fefffff 	.word	0x7fefffff
2000c330:	20000224 	.word	0x20000224
2000c334:	2000fe90 	.word	0x2000fe90
2000c338:	7f7fffff 	.word	0x7f7fffff
2000c33c:	00000000 	.word	0x00000000

2000c340 <strtof>:
2000c340:	b510      	push	{r4, lr}
2000c342:	4c1d      	ldr	r4, [pc, #116]	; (2000c3b8 <strtof+0x78>)
2000c344:	4b1d      	ldr	r3, [pc, #116]	; (2000c3bc <strtof+0x7c>)
2000c346:	460a      	mov	r2, r1
2000c348:	4601      	mov	r1, r0
2000c34a:	6820      	ldr	r0, [r4, #0]
2000c34c:	f7ff f9c0 	bl	2000b6d0 <_strtod_l>
2000c350:	eeb4 0b40 	vcmp.f64	d0, d0
2000c354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c358:	eeb0 7b40 	vmov.f64	d7, d0
2000c35c:	d70d      	bvc.n	2000c37a <strtof+0x3a>
2000c35e:	ee17 3a90 	vmov	r3, s15
2000c362:	2b00      	cmp	r3, #0
2000c364:	4816      	ldr	r0, [pc, #88]	; (2000c3c0 <strtof+0x80>)
2000c366:	da04      	bge.n	2000c372 <strtof+0x32>
2000c368:	f7ff f954 	bl	2000b614 <nanf>
2000c36c:	eeb1 0a40 	vneg.f32	s0, s0
2000c370:	bd10      	pop	{r4, pc}
2000c372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2000c376:	f7ff b94d 	b.w	2000b614 <nanf>
2000c37a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2000c37e:	eddf 6a11 	vldr	s13, [pc, #68]	; 2000c3c4 <strtof+0x84>
2000c382:	eeb0 6ac0 	vabs.f32	s12, s0
2000c386:	eeb4 6a66 	vcmp.f32	s12, s13
2000c38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c38e:	ddef      	ble.n	2000c370 <strtof+0x30>
2000c390:	eeb0 7bc7 	vabs.f64	d7, d7
2000c394:	ed9f 6b06 	vldr	d6, [pc, #24]	; 2000c3b0 <strtof+0x70>
2000c398:	eeb4 7b46 	vcmp.f64	d7, d6
2000c39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c3a0:	bfde      	ittt	le
2000c3a2:	6823      	ldrle	r3, [r4, #0]
2000c3a4:	2222      	movle	r2, #34	; 0x22
2000c3a6:	601a      	strle	r2, [r3, #0]
2000c3a8:	e7e2      	b.n	2000c370 <strtof+0x30>
2000c3aa:	bf00      	nop
2000c3ac:	f3af 8000 	nop.w
2000c3b0:	ffffffff 	.word	0xffffffff
2000c3b4:	7fefffff 	.word	0x7fefffff
2000c3b8:	20000224 	.word	0x20000224
2000c3bc:	2000028c 	.word	0x2000028c
2000c3c0:	2000fe90 	.word	0x2000fe90
2000c3c4:	7f7fffff 	.word	0x7f7fffff

2000c3c8 <_strtol_l.isra.0>:
2000c3c8:	2b01      	cmp	r3, #1
2000c3ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000c3ce:	d001      	beq.n	2000c3d4 <_strtol_l.isra.0+0xc>
2000c3d0:	2b24      	cmp	r3, #36	; 0x24
2000c3d2:	d906      	bls.n	2000c3e2 <_strtol_l.isra.0+0x1a>
2000c3d4:	f7fe fa90 	bl	2000a8f8 <__errno>
2000c3d8:	2316      	movs	r3, #22
2000c3da:	6003      	str	r3, [r0, #0]
2000c3dc:	2000      	movs	r0, #0
2000c3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000c3e2:	4f3a      	ldr	r7, [pc, #232]	; (2000c4cc <_strtol_l.isra.0+0x104>)
2000c3e4:	468e      	mov	lr, r1
2000c3e6:	4676      	mov	r6, lr
2000c3e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
2000c3ec:	5de5      	ldrb	r5, [r4, r7]
2000c3ee:	f015 0508 	ands.w	r5, r5, #8
2000c3f2:	d1f8      	bne.n	2000c3e6 <_strtol_l.isra.0+0x1e>
2000c3f4:	2c2d      	cmp	r4, #45	; 0x2d
2000c3f6:	d134      	bne.n	2000c462 <_strtol_l.isra.0+0x9a>
2000c3f8:	f89e 4000 	ldrb.w	r4, [lr]
2000c3fc:	f04f 0801 	mov.w	r8, #1
2000c400:	f106 0e02 	add.w	lr, r6, #2
2000c404:	2b00      	cmp	r3, #0
2000c406:	d05c      	beq.n	2000c4c2 <_strtol_l.isra.0+0xfa>
2000c408:	2b10      	cmp	r3, #16
2000c40a:	d10c      	bne.n	2000c426 <_strtol_l.isra.0+0x5e>
2000c40c:	2c30      	cmp	r4, #48	; 0x30
2000c40e:	d10a      	bne.n	2000c426 <_strtol_l.isra.0+0x5e>
2000c410:	f89e 4000 	ldrb.w	r4, [lr]
2000c414:	f004 04df 	and.w	r4, r4, #223	; 0xdf
2000c418:	2c58      	cmp	r4, #88	; 0x58
2000c41a:	d14d      	bne.n	2000c4b8 <_strtol_l.isra.0+0xf0>
2000c41c:	f89e 4001 	ldrb.w	r4, [lr, #1]
2000c420:	2310      	movs	r3, #16
2000c422:	f10e 0e02 	add.w	lr, lr, #2
2000c426:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
2000c42a:	f10c 3cff 	add.w	ip, ip, #4294967295
2000c42e:	2600      	movs	r6, #0
2000c430:	fbbc f9f3 	udiv	r9, ip, r3
2000c434:	4635      	mov	r5, r6
2000c436:	fb03 ca19 	mls	sl, r3, r9, ip
2000c43a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
2000c43e:	2f09      	cmp	r7, #9
2000c440:	d818      	bhi.n	2000c474 <_strtol_l.isra.0+0xac>
2000c442:	463c      	mov	r4, r7
2000c444:	42a3      	cmp	r3, r4
2000c446:	dd24      	ble.n	2000c492 <_strtol_l.isra.0+0xca>
2000c448:	2e00      	cmp	r6, #0
2000c44a:	db1f      	blt.n	2000c48c <_strtol_l.isra.0+0xc4>
2000c44c:	45a9      	cmp	r9, r5
2000c44e:	d31d      	bcc.n	2000c48c <_strtol_l.isra.0+0xc4>
2000c450:	d101      	bne.n	2000c456 <_strtol_l.isra.0+0x8e>
2000c452:	45a2      	cmp	sl, r4
2000c454:	db1a      	blt.n	2000c48c <_strtol_l.isra.0+0xc4>
2000c456:	fb05 4503 	mla	r5, r5, r3, r4
2000c45a:	2601      	movs	r6, #1
2000c45c:	f81e 4b01 	ldrb.w	r4, [lr], #1
2000c460:	e7eb      	b.n	2000c43a <_strtol_l.isra.0+0x72>
2000c462:	2c2b      	cmp	r4, #43	; 0x2b
2000c464:	bf08      	it	eq
2000c466:	f89e 4000 	ldrbeq.w	r4, [lr]
2000c46a:	46a8      	mov	r8, r5
2000c46c:	bf08      	it	eq
2000c46e:	f106 0e02 	addeq.w	lr, r6, #2
2000c472:	e7c7      	b.n	2000c404 <_strtol_l.isra.0+0x3c>
2000c474:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
2000c478:	2f19      	cmp	r7, #25
2000c47a:	d801      	bhi.n	2000c480 <_strtol_l.isra.0+0xb8>
2000c47c:	3c37      	subs	r4, #55	; 0x37
2000c47e:	e7e1      	b.n	2000c444 <_strtol_l.isra.0+0x7c>
2000c480:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
2000c484:	2f19      	cmp	r7, #25
2000c486:	d804      	bhi.n	2000c492 <_strtol_l.isra.0+0xca>
2000c488:	3c57      	subs	r4, #87	; 0x57
2000c48a:	e7db      	b.n	2000c444 <_strtol_l.isra.0+0x7c>
2000c48c:	f04f 36ff 	mov.w	r6, #4294967295
2000c490:	e7e4      	b.n	2000c45c <_strtol_l.isra.0+0x94>
2000c492:	2e00      	cmp	r6, #0
2000c494:	da05      	bge.n	2000c4a2 <_strtol_l.isra.0+0xda>
2000c496:	2322      	movs	r3, #34	; 0x22
2000c498:	6003      	str	r3, [r0, #0]
2000c49a:	4665      	mov	r5, ip
2000c49c:	b942      	cbnz	r2, 2000c4b0 <_strtol_l.isra.0+0xe8>
2000c49e:	4628      	mov	r0, r5
2000c4a0:	e79d      	b.n	2000c3de <_strtol_l.isra.0+0x16>
2000c4a2:	f1b8 0f00 	cmp.w	r8, #0
2000c4a6:	d000      	beq.n	2000c4aa <_strtol_l.isra.0+0xe2>
2000c4a8:	426d      	negs	r5, r5
2000c4aa:	2a00      	cmp	r2, #0
2000c4ac:	d0f7      	beq.n	2000c49e <_strtol_l.isra.0+0xd6>
2000c4ae:	b10e      	cbz	r6, 2000c4b4 <_strtol_l.isra.0+0xec>
2000c4b0:	f10e 31ff 	add.w	r1, lr, #4294967295
2000c4b4:	6011      	str	r1, [r2, #0]
2000c4b6:	e7f2      	b.n	2000c49e <_strtol_l.isra.0+0xd6>
2000c4b8:	2430      	movs	r4, #48	; 0x30
2000c4ba:	2b00      	cmp	r3, #0
2000c4bc:	d1b3      	bne.n	2000c426 <_strtol_l.isra.0+0x5e>
2000c4be:	2308      	movs	r3, #8
2000c4c0:	e7b1      	b.n	2000c426 <_strtol_l.isra.0+0x5e>
2000c4c2:	2c30      	cmp	r4, #48	; 0x30
2000c4c4:	d0a4      	beq.n	2000c410 <_strtol_l.isra.0+0x48>
2000c4c6:	230a      	movs	r3, #10
2000c4c8:	e7ad      	b.n	2000c426 <_strtol_l.isra.0+0x5e>
2000c4ca:	bf00      	nop
2000c4cc:	2000faa9 	.word	0x2000faa9

2000c4d0 <_strtol_r>:
2000c4d0:	f7ff bf7a 	b.w	2000c3c8 <_strtol_l.isra.0>

2000c4d4 <strtol_l>:
2000c4d4:	4613      	mov	r3, r2
2000c4d6:	460a      	mov	r2, r1
2000c4d8:	4601      	mov	r1, r0
2000c4da:	4802      	ldr	r0, [pc, #8]	; (2000c4e4 <strtol_l+0x10>)
2000c4dc:	6800      	ldr	r0, [r0, #0]
2000c4de:	f7ff bf73 	b.w	2000c3c8 <_strtol_l.isra.0>
2000c4e2:	bf00      	nop
2000c4e4:	20000224 	.word	0x20000224

2000c4e8 <strtol>:
2000c4e8:	4613      	mov	r3, r2
2000c4ea:	460a      	mov	r2, r1
2000c4ec:	4601      	mov	r1, r0
2000c4ee:	4802      	ldr	r0, [pc, #8]	; (2000c4f8 <strtol+0x10>)
2000c4f0:	6800      	ldr	r0, [r0, #0]
2000c4f2:	f7ff bf69 	b.w	2000c3c8 <_strtol_l.isra.0>
2000c4f6:	bf00      	nop
2000c4f8:	20000224 	.word	0x20000224

2000c4fc <quorem>:
2000c4fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000c500:	6903      	ldr	r3, [r0, #16]
2000c502:	690c      	ldr	r4, [r1, #16]
2000c504:	42a3      	cmp	r3, r4
2000c506:	4607      	mov	r7, r0
2000c508:	f2c0 8081 	blt.w	2000c60e <quorem+0x112>
2000c50c:	3c01      	subs	r4, #1
2000c50e:	f101 0814 	add.w	r8, r1, #20
2000c512:	f100 0514 	add.w	r5, r0, #20
2000c516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
2000c51a:	9301      	str	r3, [sp, #4]
2000c51c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
2000c520:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
2000c524:	3301      	adds	r3, #1
2000c526:	429a      	cmp	r2, r3
2000c528:	ea4f 0b84 	mov.w	fp, r4, lsl #2
2000c52c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
2000c530:	fbb2 f6f3 	udiv	r6, r2, r3
2000c534:	d331      	bcc.n	2000c59a <quorem+0x9e>
2000c536:	f04f 0e00 	mov.w	lr, #0
2000c53a:	4640      	mov	r0, r8
2000c53c:	46ac      	mov	ip, r5
2000c53e:	46f2      	mov	sl, lr
2000c540:	f850 2b04 	ldr.w	r2, [r0], #4
2000c544:	b293      	uxth	r3, r2
2000c546:	fb06 e303 	mla	r3, r6, r3, lr
2000c54a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
2000c54e:	b29b      	uxth	r3, r3
2000c550:	ebaa 0303 	sub.w	r3, sl, r3
2000c554:	0c12      	lsrs	r2, r2, #16
2000c556:	f8dc a000 	ldr.w	sl, [ip]
2000c55a:	fb06 e202 	mla	r2, r6, r2, lr
2000c55e:	fa13 f38a 	uxtah	r3, r3, sl
2000c562:	ea4f 4e12 	mov.w	lr, r2, lsr #16
2000c566:	fa1f fa82 	uxth.w	sl, r2
2000c56a:	f8dc 2000 	ldr.w	r2, [ip]
2000c56e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
2000c572:	eb02 4223 	add.w	r2, r2, r3, asr #16
2000c576:	b29b      	uxth	r3, r3
2000c578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
2000c57c:	4581      	cmp	r9, r0
2000c57e:	f84c 3b04 	str.w	r3, [ip], #4
2000c582:	ea4f 4a22 	mov.w	sl, r2, asr #16
2000c586:	d2db      	bcs.n	2000c540 <quorem+0x44>
2000c588:	f855 300b 	ldr.w	r3, [r5, fp]
2000c58c:	b92b      	cbnz	r3, 2000c59a <quorem+0x9e>
2000c58e:	9b01      	ldr	r3, [sp, #4]
2000c590:	3b04      	subs	r3, #4
2000c592:	429d      	cmp	r5, r3
2000c594:	461a      	mov	r2, r3
2000c596:	d32e      	bcc.n	2000c5f6 <quorem+0xfa>
2000c598:	613c      	str	r4, [r7, #16]
2000c59a:	4638      	mov	r0, r7
2000c59c:	f001 fc6a 	bl	2000de74 <__mcmp>
2000c5a0:	2800      	cmp	r0, #0
2000c5a2:	db24      	blt.n	2000c5ee <quorem+0xf2>
2000c5a4:	3601      	adds	r6, #1
2000c5a6:	4628      	mov	r0, r5
2000c5a8:	f04f 0c00 	mov.w	ip, #0
2000c5ac:	f858 2b04 	ldr.w	r2, [r8], #4
2000c5b0:	f8d0 e000 	ldr.w	lr, [r0]
2000c5b4:	b293      	uxth	r3, r2
2000c5b6:	ebac 0303 	sub.w	r3, ip, r3
2000c5ba:	0c12      	lsrs	r2, r2, #16
2000c5bc:	fa13 f38e 	uxtah	r3, r3, lr
2000c5c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
2000c5c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
2000c5c8:	b29b      	uxth	r3, r3
2000c5ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
2000c5ce:	45c1      	cmp	r9, r8
2000c5d0:	f840 3b04 	str.w	r3, [r0], #4
2000c5d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
2000c5d8:	d2e8      	bcs.n	2000c5ac <quorem+0xb0>
2000c5da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
2000c5de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
2000c5e2:	b922      	cbnz	r2, 2000c5ee <quorem+0xf2>
2000c5e4:	3b04      	subs	r3, #4
2000c5e6:	429d      	cmp	r5, r3
2000c5e8:	461a      	mov	r2, r3
2000c5ea:	d30a      	bcc.n	2000c602 <quorem+0x106>
2000c5ec:	613c      	str	r4, [r7, #16]
2000c5ee:	4630      	mov	r0, r6
2000c5f0:	b003      	add	sp, #12
2000c5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000c5f6:	6812      	ldr	r2, [r2, #0]
2000c5f8:	3b04      	subs	r3, #4
2000c5fa:	2a00      	cmp	r2, #0
2000c5fc:	d1cc      	bne.n	2000c598 <quorem+0x9c>
2000c5fe:	3c01      	subs	r4, #1
2000c600:	e7c7      	b.n	2000c592 <quorem+0x96>
2000c602:	6812      	ldr	r2, [r2, #0]
2000c604:	3b04      	subs	r3, #4
2000c606:	2a00      	cmp	r2, #0
2000c608:	d1f0      	bne.n	2000c5ec <quorem+0xf0>
2000c60a:	3c01      	subs	r4, #1
2000c60c:	e7eb      	b.n	2000c5e6 <quorem+0xea>
2000c60e:	2000      	movs	r0, #0
2000c610:	e7ee      	b.n	2000c5f0 <quorem+0xf4>
2000c612:	0000      	movs	r0, r0
2000c614:	0000      	movs	r0, r0
	...

2000c618 <_dtoa_r>:
2000c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000c61c:	ec59 8b10 	vmov	r8, r9, d0
2000c620:	b095      	sub	sp, #84	; 0x54
2000c622:	6a45      	ldr	r5, [r0, #36]	; 0x24
2000c624:	9c1e      	ldr	r4, [sp, #120]	; 0x78
2000c626:	9107      	str	r1, [sp, #28]
2000c628:	e9cd 8902 	strd	r8, r9, [sp, #8]
2000c62c:	4606      	mov	r6, r0
2000c62e:	9209      	str	r2, [sp, #36]	; 0x24
2000c630:	9310      	str	r3, [sp, #64]	; 0x40
2000c632:	b975      	cbnz	r5, 2000c652 <_dtoa_r+0x3a>
2000c634:	2010      	movs	r0, #16
2000c636:	f001 f91b 	bl	2000d870 <malloc>
2000c63a:	4602      	mov	r2, r0
2000c63c:	6270      	str	r0, [r6, #36]	; 0x24
2000c63e:	b920      	cbnz	r0, 2000c64a <_dtoa_r+0x32>
2000c640:	4bab      	ldr	r3, [pc, #684]	; (2000c8f0 <_dtoa_r+0x2d8>)
2000c642:	21ea      	movs	r1, #234	; 0xea
2000c644:	48ab      	ldr	r0, [pc, #684]	; (2000c8f4 <_dtoa_r+0x2dc>)
2000c646:	f002 f8f1 	bl	2000e82c <__assert_func>
2000c64a:	e9c0 5501 	strd	r5, r5, [r0, #4]
2000c64e:	6005      	str	r5, [r0, #0]
2000c650:	60c5      	str	r5, [r0, #12]
2000c652:	6a73      	ldr	r3, [r6, #36]	; 0x24
2000c654:	6819      	ldr	r1, [r3, #0]
2000c656:	b151      	cbz	r1, 2000c66e <_dtoa_r+0x56>
2000c658:	685a      	ldr	r2, [r3, #4]
2000c65a:	604a      	str	r2, [r1, #4]
2000c65c:	2301      	movs	r3, #1
2000c65e:	4093      	lsls	r3, r2
2000c660:	608b      	str	r3, [r1, #8]
2000c662:	4630      	mov	r0, r6
2000c664:	f001 f97e 	bl	2000d964 <_Bfree>
2000c668:	6a73      	ldr	r3, [r6, #36]	; 0x24
2000c66a:	2200      	movs	r2, #0
2000c66c:	601a      	str	r2, [r3, #0]
2000c66e:	f1b9 0300 	subs.w	r3, r9, #0
2000c672:	bfbb      	ittet	lt
2000c674:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
2000c678:	9303      	strlt	r3, [sp, #12]
2000c67a:	2300      	movge	r3, #0
2000c67c:	2201      	movlt	r2, #1
2000c67e:	bfac      	ite	ge
2000c680:	6023      	strge	r3, [r4, #0]
2000c682:	6022      	strlt	r2, [r4, #0]
2000c684:	4b9c      	ldr	r3, [pc, #624]	; (2000c8f8 <_dtoa_r+0x2e0>)
2000c686:	9c03      	ldr	r4, [sp, #12]
2000c688:	43a3      	bics	r3, r4
2000c68a:	d11a      	bne.n	2000c6c2 <_dtoa_r+0xaa>
2000c68c:	9a10      	ldr	r2, [sp, #64]	; 0x40
2000c68e:	f242 730f 	movw	r3, #9999	; 0x270f
2000c692:	6013      	str	r3, [r2, #0]
2000c694:	f3c4 0313 	ubfx	r3, r4, #0, #20
2000c698:	ea53 0308 	orrs.w	r3, r3, r8
2000c69c:	f000 8512 	beq.w	2000d0c4 <_dtoa_r+0xaac>
2000c6a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
2000c6a2:	b953      	cbnz	r3, 2000c6ba <_dtoa_r+0xa2>
2000c6a4:	4b95      	ldr	r3, [pc, #596]	; (2000c8fc <_dtoa_r+0x2e4>)
2000c6a6:	e01f      	b.n	2000c6e8 <_dtoa_r+0xd0>
2000c6a8:	4b95      	ldr	r3, [pc, #596]	; (2000c900 <_dtoa_r+0x2e8>)
2000c6aa:	9300      	str	r3, [sp, #0]
2000c6ac:	3308      	adds	r3, #8
2000c6ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
2000c6b0:	6013      	str	r3, [r2, #0]
2000c6b2:	9800      	ldr	r0, [sp, #0]
2000c6b4:	b015      	add	sp, #84	; 0x54
2000c6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000c6ba:	4b90      	ldr	r3, [pc, #576]	; (2000c8fc <_dtoa_r+0x2e4>)
2000c6bc:	9300      	str	r3, [sp, #0]
2000c6be:	3303      	adds	r3, #3
2000c6c0:	e7f5      	b.n	2000c6ae <_dtoa_r+0x96>
2000c6c2:	ed9d 7b02 	vldr	d7, [sp, #8]
2000c6c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
2000c6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c6ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
2000c6d2:	d10b      	bne.n	2000c6ec <_dtoa_r+0xd4>
2000c6d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
2000c6d6:	2301      	movs	r3, #1
2000c6d8:	6013      	str	r3, [r2, #0]
2000c6da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
2000c6dc:	2b00      	cmp	r3, #0
2000c6de:	f000 84ee 	beq.w	2000d0be <_dtoa_r+0xaa6>
2000c6e2:	4888      	ldr	r0, [pc, #544]	; (2000c904 <_dtoa_r+0x2ec>)
2000c6e4:	6018      	str	r0, [r3, #0]
2000c6e6:	1e43      	subs	r3, r0, #1
2000c6e8:	9300      	str	r3, [sp, #0]
2000c6ea:	e7e2      	b.n	2000c6b2 <_dtoa_r+0x9a>
2000c6ec:	a913      	add	r1, sp, #76	; 0x4c
2000c6ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
2000c6f2:	aa12      	add	r2, sp, #72	; 0x48
2000c6f4:	4630      	mov	r0, r6
2000c6f6:	f001 fcdd 	bl	2000e0b4 <__d2b>
2000c6fa:	f3c4 510a 	ubfx	r1, r4, #20, #11
2000c6fe:	4605      	mov	r5, r0
2000c700:	9812      	ldr	r0, [sp, #72]	; 0x48
2000c702:	2900      	cmp	r1, #0
2000c704:	d047      	beq.n	2000c796 <_dtoa_r+0x17e>
2000c706:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
2000c708:	f3c4 0413 	ubfx	r4, r4, #0, #20
2000c70c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
2000c710:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
2000c714:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
2000c718:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
2000c71c:	2400      	movs	r4, #0
2000c71e:	ec43 2b16 	vmov	d6, r2, r3
2000c722:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
2000c726:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 2000c8d8 <_dtoa_r+0x2c0>
2000c72a:	ee36 7b47 	vsub.f64	d7, d6, d7
2000c72e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 2000c8e0 <_dtoa_r+0x2c8>
2000c732:	eea7 6b05 	vfma.f64	d6, d7, d5
2000c736:	eeb0 7b46 	vmov.f64	d7, d6
2000c73a:	ee06 1a90 	vmov	s13, r1
2000c73e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
2000c742:	ed9f 6b69 	vldr	d6, [pc, #420]	; 2000c8e8 <_dtoa_r+0x2d0>
2000c746:	eea5 7b06 	vfma.f64	d7, d5, d6
2000c74a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
2000c74e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
2000c752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c756:	ee16 ba90 	vmov	fp, s13
2000c75a:	9411      	str	r4, [sp, #68]	; 0x44
2000c75c:	d508      	bpl.n	2000c770 <_dtoa_r+0x158>
2000c75e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
2000c762:	eeb4 6b47 	vcmp.f64	d6, d7
2000c766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c76a:	bf18      	it	ne
2000c76c:	f10b 3bff 	addne.w	fp, fp, #4294967295
2000c770:	f1bb 0f16 	cmp.w	fp, #22
2000c774:	d832      	bhi.n	2000c7dc <_dtoa_r+0x1c4>
2000c776:	4b64      	ldr	r3, [pc, #400]	; (2000c908 <_dtoa_r+0x2f0>)
2000c778:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
2000c77c:	ed93 7b00 	vldr	d7, [r3]
2000c780:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
2000c784:	eeb4 6bc7 	vcmpe.f64	d6, d7
2000c788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c78c:	d501      	bpl.n	2000c792 <_dtoa_r+0x17a>
2000c78e:	f10b 3bff 	add.w	fp, fp, #4294967295
2000c792:	2300      	movs	r3, #0
2000c794:	e023      	b.n	2000c7de <_dtoa_r+0x1c6>
2000c796:	9913      	ldr	r1, [sp, #76]	; 0x4c
2000c798:	4401      	add	r1, r0
2000c79a:	f201 4332 	addw	r3, r1, #1074	; 0x432
2000c79e:	2b20      	cmp	r3, #32
2000c7a0:	bfc3      	ittte	gt
2000c7a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
2000c7a6:	fa04 f303 	lslgt.w	r3, r4, r3
2000c7aa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
2000c7ae:	f1c3 0320 	rsble	r3, r3, #32
2000c7b2:	bfc6      	itte	gt
2000c7b4:	fa28 f804 	lsrgt.w	r8, r8, r4
2000c7b8:	ea43 0308 	orrgt.w	r3, r3, r8
2000c7bc:	fa08 f303 	lslle.w	r3, r8, r3
2000c7c0:	ee07 3a90 	vmov	s15, r3
2000c7c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
2000c7c8:	3901      	subs	r1, #1
2000c7ca:	ed8d 7b00 	vstr	d7, [sp]
2000c7ce:	9c01      	ldr	r4, [sp, #4]
2000c7d0:	e9dd 2300 	ldrd	r2, r3, [sp]
2000c7d4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
2000c7d8:	2401      	movs	r4, #1
2000c7da:	e7a0      	b.n	2000c71e <_dtoa_r+0x106>
2000c7dc:	2301      	movs	r3, #1
2000c7de:	930f      	str	r3, [sp, #60]	; 0x3c
2000c7e0:	1a43      	subs	r3, r0, r1
2000c7e2:	1e5a      	subs	r2, r3, #1
2000c7e4:	bf45      	ittet	mi
2000c7e6:	f1c3 0301 	rsbmi	r3, r3, #1
2000c7ea:	9305      	strmi	r3, [sp, #20]
2000c7ec:	2300      	movpl	r3, #0
2000c7ee:	2300      	movmi	r3, #0
2000c7f0:	9206      	str	r2, [sp, #24]
2000c7f2:	bf54      	ite	pl
2000c7f4:	9305      	strpl	r3, [sp, #20]
2000c7f6:	9306      	strmi	r3, [sp, #24]
2000c7f8:	f1bb 0f00 	cmp.w	fp, #0
2000c7fc:	db18      	blt.n	2000c830 <_dtoa_r+0x218>
2000c7fe:	9b06      	ldr	r3, [sp, #24]
2000c800:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
2000c804:	445b      	add	r3, fp
2000c806:	9306      	str	r3, [sp, #24]
2000c808:	2300      	movs	r3, #0
2000c80a:	9a07      	ldr	r2, [sp, #28]
2000c80c:	2a09      	cmp	r2, #9
2000c80e:	d849      	bhi.n	2000c8a4 <_dtoa_r+0x28c>
2000c810:	2a05      	cmp	r2, #5
2000c812:	bfc4      	itt	gt
2000c814:	3a04      	subgt	r2, #4
2000c816:	9207      	strgt	r2, [sp, #28]
2000c818:	9a07      	ldr	r2, [sp, #28]
2000c81a:	f1a2 0202 	sub.w	r2, r2, #2
2000c81e:	bfcc      	ite	gt
2000c820:	2400      	movgt	r4, #0
2000c822:	2401      	movle	r4, #1
2000c824:	2a03      	cmp	r2, #3
2000c826:	d848      	bhi.n	2000c8ba <_dtoa_r+0x2a2>
2000c828:	e8df f002 	tbb	[pc, r2]
2000c82c:	3a2c2e0b 	.word	0x3a2c2e0b
2000c830:	9b05      	ldr	r3, [sp, #20]
2000c832:	2200      	movs	r2, #0
2000c834:	eba3 030b 	sub.w	r3, r3, fp
2000c838:	9305      	str	r3, [sp, #20]
2000c83a:	920e      	str	r2, [sp, #56]	; 0x38
2000c83c:	f1cb 0300 	rsb	r3, fp, #0
2000c840:	e7e3      	b.n	2000c80a <_dtoa_r+0x1f2>
2000c842:	2200      	movs	r2, #0
2000c844:	9208      	str	r2, [sp, #32]
2000c846:	9a09      	ldr	r2, [sp, #36]	; 0x24
2000c848:	2a00      	cmp	r2, #0
2000c84a:	dc39      	bgt.n	2000c8c0 <_dtoa_r+0x2a8>
2000c84c:	f04f 0a01 	mov.w	sl, #1
2000c850:	46d1      	mov	r9, sl
2000c852:	4652      	mov	r2, sl
2000c854:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
2000c858:	6a77      	ldr	r7, [r6, #36]	; 0x24
2000c85a:	2100      	movs	r1, #0
2000c85c:	6079      	str	r1, [r7, #4]
2000c85e:	2004      	movs	r0, #4
2000c860:	f100 0c14 	add.w	ip, r0, #20
2000c864:	4594      	cmp	ip, r2
2000c866:	6879      	ldr	r1, [r7, #4]
2000c868:	d92f      	bls.n	2000c8ca <_dtoa_r+0x2b2>
2000c86a:	4630      	mov	r0, r6
2000c86c:	930c      	str	r3, [sp, #48]	; 0x30
2000c86e:	f001 f839 	bl	2000d8e4 <_Balloc>
2000c872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2000c874:	9000      	str	r0, [sp, #0]
2000c876:	4602      	mov	r2, r0
2000c878:	2800      	cmp	r0, #0
2000c87a:	d149      	bne.n	2000c910 <_dtoa_r+0x2f8>
2000c87c:	4b23      	ldr	r3, [pc, #140]	; (2000c90c <_dtoa_r+0x2f4>)
2000c87e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
2000c882:	e6df      	b.n	2000c644 <_dtoa_r+0x2c>
2000c884:	2201      	movs	r2, #1
2000c886:	e7dd      	b.n	2000c844 <_dtoa_r+0x22c>
2000c888:	2200      	movs	r2, #0
2000c88a:	9208      	str	r2, [sp, #32]
2000c88c:	9a09      	ldr	r2, [sp, #36]	; 0x24
2000c88e:	eb0b 0a02 	add.w	sl, fp, r2
2000c892:	f10a 0901 	add.w	r9, sl, #1
2000c896:	464a      	mov	r2, r9
2000c898:	2a01      	cmp	r2, #1
2000c89a:	bfb8      	it	lt
2000c89c:	2201      	movlt	r2, #1
2000c89e:	e7db      	b.n	2000c858 <_dtoa_r+0x240>
2000c8a0:	2201      	movs	r2, #1
2000c8a2:	e7f2      	b.n	2000c88a <_dtoa_r+0x272>
2000c8a4:	2401      	movs	r4, #1
2000c8a6:	2200      	movs	r2, #0
2000c8a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
2000c8ac:	f04f 3aff 	mov.w	sl, #4294967295
2000c8b0:	2100      	movs	r1, #0
2000c8b2:	46d1      	mov	r9, sl
2000c8b4:	2212      	movs	r2, #18
2000c8b6:	9109      	str	r1, [sp, #36]	; 0x24
2000c8b8:	e7ce      	b.n	2000c858 <_dtoa_r+0x240>
2000c8ba:	2201      	movs	r2, #1
2000c8bc:	9208      	str	r2, [sp, #32]
2000c8be:	e7f5      	b.n	2000c8ac <_dtoa_r+0x294>
2000c8c0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
2000c8c4:	46d1      	mov	r9, sl
2000c8c6:	4652      	mov	r2, sl
2000c8c8:	e7c6      	b.n	2000c858 <_dtoa_r+0x240>
2000c8ca:	3101      	adds	r1, #1
2000c8cc:	6079      	str	r1, [r7, #4]
2000c8ce:	0040      	lsls	r0, r0, #1
2000c8d0:	e7c6      	b.n	2000c860 <_dtoa_r+0x248>
2000c8d2:	bf00      	nop
2000c8d4:	f3af 8000 	nop.w
2000c8d8:	636f4361 	.word	0x636f4361
2000c8dc:	3fd287a7 	.word	0x3fd287a7
2000c8e0:	8b60c8b3 	.word	0x8b60c8b3
2000c8e4:	3fc68a28 	.word	0x3fc68a28
2000c8e8:	509f79fb 	.word	0x509f79fb
2000c8ec:	3fd34413 	.word	0x3fd34413
2000c8f0:	2000fbb6 	.word	0x2000fbb6
2000c8f4:	2000fbcd 	.word	0x2000fbcd
2000c8f8:	7ff00000 	.word	0x7ff00000
2000c8fc:	2000fbb2 	.word	0x2000fbb2
2000c900:	2000fba9 	.word	0x2000fba9
2000c904:	2000fa2d 	.word	0x2000fa2d
2000c908:	2000fd48 	.word	0x2000fd48
2000c90c:	2000fc2c 	.word	0x2000fc2c
2000c910:	6a72      	ldr	r2, [r6, #36]	; 0x24
2000c912:	9900      	ldr	r1, [sp, #0]
2000c914:	6011      	str	r1, [r2, #0]
2000c916:	f1b9 0f0e 	cmp.w	r9, #14
2000c91a:	d872      	bhi.n	2000ca02 <_dtoa_r+0x3ea>
2000c91c:	2c00      	cmp	r4, #0
2000c91e:	d070      	beq.n	2000ca02 <_dtoa_r+0x3ea>
2000c920:	f1bb 0f00 	cmp.w	fp, #0
2000c924:	f340 80a6 	ble.w	2000ca74 <_dtoa_r+0x45c>
2000c928:	49ca      	ldr	r1, [pc, #808]	; (2000cc54 <_dtoa_r+0x63c>)
2000c92a:	f00b 020f 	and.w	r2, fp, #15
2000c92e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
2000c932:	f41b 7f80 	tst.w	fp, #256	; 0x100
2000c936:	ed92 7b00 	vldr	d7, [r2]
2000c93a:	ea4f 112b 	mov.w	r1, fp, asr #4
2000c93e:	f000 808d 	beq.w	2000ca5c <_dtoa_r+0x444>
2000c942:	4ac5      	ldr	r2, [pc, #788]	; (2000cc58 <_dtoa_r+0x640>)
2000c944:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
2000c948:	ed92 6b08 	vldr	d6, [r2, #32]
2000c94c:	ee85 6b06 	vdiv.f64	d6, d5, d6
2000c950:	ed8d 6b02 	vstr	d6, [sp, #8]
2000c954:	f001 010f 	and.w	r1, r1, #15
2000c958:	2203      	movs	r2, #3
2000c95a:	48bf      	ldr	r0, [pc, #764]	; (2000cc58 <_dtoa_r+0x640>)
2000c95c:	2900      	cmp	r1, #0
2000c95e:	d17f      	bne.n	2000ca60 <_dtoa_r+0x448>
2000c960:	ed9d 6b02 	vldr	d6, [sp, #8]
2000c964:	ee86 7b07 	vdiv.f64	d7, d6, d7
2000c968:	ed8d 7b02 	vstr	d7, [sp, #8]
2000c96c:	990f      	ldr	r1, [sp, #60]	; 0x3c
2000c96e:	2900      	cmp	r1, #0
2000c970:	f000 80b2 	beq.w	2000cad8 <_dtoa_r+0x4c0>
2000c974:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2000c978:	ed9d 7b02 	vldr	d7, [sp, #8]
2000c97c:	eeb4 7bc6 	vcmpe.f64	d7, d6
2000c980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c984:	f140 80a8 	bpl.w	2000cad8 <_dtoa_r+0x4c0>
2000c988:	f1b9 0f00 	cmp.w	r9, #0
2000c98c:	f000 80a4 	beq.w	2000cad8 <_dtoa_r+0x4c0>
2000c990:	f1ba 0f00 	cmp.w	sl, #0
2000c994:	dd31      	ble.n	2000c9fa <_dtoa_r+0x3e2>
2000c996:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
2000c99a:	ee27 7b06 	vmul.f64	d7, d7, d6
2000c99e:	ed8d 7b02 	vstr	d7, [sp, #8]
2000c9a2:	f10b 37ff 	add.w	r7, fp, #4294967295
2000c9a6:	3201      	adds	r2, #1
2000c9a8:	4650      	mov	r0, sl
2000c9aa:	ed9d 6b02 	vldr	d6, [sp, #8]
2000c9ae:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
2000c9b2:	ee07 2a90 	vmov	s15, r2
2000c9b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2000c9ba:	eea7 5b06 	vfma.f64	d5, d7, d6
2000c9be:	ed8d 5b02 	vstr	d5, [sp, #8]
2000c9c2:	9c03      	ldr	r4, [sp, #12]
2000c9c4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
2000c9c8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
2000c9cc:	2800      	cmp	r0, #0
2000c9ce:	f040 8086 	bne.w	2000cade <_dtoa_r+0x4c6>
2000c9d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
2000c9d6:	ee36 6b47 	vsub.f64	d6, d6, d7
2000c9da:	ec42 1b17 	vmov	d7, r1, r2
2000c9de:	eeb4 6bc7 	vcmpe.f64	d6, d7
2000c9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c9e6:	f300 8272 	bgt.w	2000cece <_dtoa_r+0x8b6>
2000c9ea:	eeb1 7b47 	vneg.f64	d7, d7
2000c9ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
2000c9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000c9f6:	f100 8267 	bmi.w	2000cec8 <_dtoa_r+0x8b0>
2000c9fa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
2000c9fe:	e9cd 1202 	strd	r1, r2, [sp, #8]
2000ca02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
2000ca04:	2a00      	cmp	r2, #0
2000ca06:	f2c0 8129 	blt.w	2000cc5c <_dtoa_r+0x644>
2000ca0a:	f1bb 0f0e 	cmp.w	fp, #14
2000ca0e:	f300 8125 	bgt.w	2000cc5c <_dtoa_r+0x644>
2000ca12:	4b90      	ldr	r3, [pc, #576]	; (2000cc54 <_dtoa_r+0x63c>)
2000ca14:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
2000ca18:	ed93 6b00 	vldr	d6, [r3]
2000ca1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000ca1e:	2b00      	cmp	r3, #0
2000ca20:	f280 80c3 	bge.w	2000cbaa <_dtoa_r+0x592>
2000ca24:	f1b9 0f00 	cmp.w	r9, #0
2000ca28:	f300 80bf 	bgt.w	2000cbaa <_dtoa_r+0x592>
2000ca2c:	f040 824c 	bne.w	2000cec8 <_dtoa_r+0x8b0>
2000ca30:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
2000ca34:	ee26 6b07 	vmul.f64	d6, d6, d7
2000ca38:	ed9d 7b02 	vldr	d7, [sp, #8]
2000ca3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
2000ca40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000ca44:	464c      	mov	r4, r9
2000ca46:	464f      	mov	r7, r9
2000ca48:	f280 8222 	bge.w	2000ce90 <_dtoa_r+0x878>
2000ca4c:	f8dd 8000 	ldr.w	r8, [sp]
2000ca50:	2331      	movs	r3, #49	; 0x31
2000ca52:	f808 3b01 	strb.w	r3, [r8], #1
2000ca56:	f10b 0b01 	add.w	fp, fp, #1
2000ca5a:	e21e      	b.n	2000ce9a <_dtoa_r+0x882>
2000ca5c:	2202      	movs	r2, #2
2000ca5e:	e77c      	b.n	2000c95a <_dtoa_r+0x342>
2000ca60:	07cc      	lsls	r4, r1, #31
2000ca62:	d504      	bpl.n	2000ca6e <_dtoa_r+0x456>
2000ca64:	ed90 6b00 	vldr	d6, [r0]
2000ca68:	3201      	adds	r2, #1
2000ca6a:	ee27 7b06 	vmul.f64	d7, d7, d6
2000ca6e:	1049      	asrs	r1, r1, #1
2000ca70:	3008      	adds	r0, #8
2000ca72:	e773      	b.n	2000c95c <_dtoa_r+0x344>
2000ca74:	d02e      	beq.n	2000cad4 <_dtoa_r+0x4bc>
2000ca76:	f1cb 0100 	rsb	r1, fp, #0
2000ca7a:	4a76      	ldr	r2, [pc, #472]	; (2000cc54 <_dtoa_r+0x63c>)
2000ca7c:	f001 000f 	and.w	r0, r1, #15
2000ca80:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
2000ca84:	ed92 7b00 	vldr	d7, [r2]
2000ca88:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
2000ca8c:	ee26 7b07 	vmul.f64	d7, d6, d7
2000ca90:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
2000ca94:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
2000ca98:	e9cd 7802 	strd	r7, r8, [sp, #8]
2000ca9c:	486e      	ldr	r0, [pc, #440]	; (2000cc58 <_dtoa_r+0x640>)
2000ca9e:	1109      	asrs	r1, r1, #4
2000caa0:	2400      	movs	r4, #0
2000caa2:	2202      	movs	r2, #2
2000caa4:	b939      	cbnz	r1, 2000cab6 <_dtoa_r+0x49e>
2000caa6:	2c00      	cmp	r4, #0
2000caa8:	f43f af60 	beq.w	2000c96c <_dtoa_r+0x354>
2000caac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
2000cab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
2000cab4:	e75a      	b.n	2000c96c <_dtoa_r+0x354>
2000cab6:	07cf      	lsls	r7, r1, #31
2000cab8:	d509      	bpl.n	2000cace <_dtoa_r+0x4b6>
2000caba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
2000cabe:	ed90 7b00 	vldr	d7, [r0]
2000cac2:	ee26 7b07 	vmul.f64	d7, d6, d7
2000cac6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
2000caca:	3201      	adds	r2, #1
2000cacc:	2401      	movs	r4, #1
2000cace:	1049      	asrs	r1, r1, #1
2000cad0:	3008      	adds	r0, #8
2000cad2:	e7e7      	b.n	2000caa4 <_dtoa_r+0x48c>
2000cad4:	2202      	movs	r2, #2
2000cad6:	e749      	b.n	2000c96c <_dtoa_r+0x354>
2000cad8:	465f      	mov	r7, fp
2000cada:	4648      	mov	r0, r9
2000cadc:	e765      	b.n	2000c9aa <_dtoa_r+0x392>
2000cade:	ec42 1b17 	vmov	d7, r1, r2
2000cae2:	4a5c      	ldr	r2, [pc, #368]	; (2000cc54 <_dtoa_r+0x63c>)
2000cae4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
2000cae8:	ed12 4b02 	vldr	d4, [r2, #-8]
2000caec:	9a00      	ldr	r2, [sp, #0]
2000caee:	1814      	adds	r4, r2, r0
2000caf0:	9a08      	ldr	r2, [sp, #32]
2000caf2:	b352      	cbz	r2, 2000cb4a <_dtoa_r+0x532>
2000caf4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
2000caf8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
2000cafc:	f8dd 8000 	ldr.w	r8, [sp]
2000cb00:	ee83 5b04 	vdiv.f64	d5, d3, d4
2000cb04:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
2000cb08:	ee35 7b47 	vsub.f64	d7, d5, d7
2000cb0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
2000cb10:	ee14 2a90 	vmov	r2, s9
2000cb14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
2000cb18:	3230      	adds	r2, #48	; 0x30
2000cb1a:	ee36 6b45 	vsub.f64	d6, d6, d5
2000cb1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
2000cb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000cb26:	f808 2b01 	strb.w	r2, [r8], #1
2000cb2a:	d439      	bmi.n	2000cba0 <_dtoa_r+0x588>
2000cb2c:	ee32 5b46 	vsub.f64	d5, d2, d6
2000cb30:	eeb4 5bc7 	vcmpe.f64	d5, d7
2000cb34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000cb38:	d472      	bmi.n	2000cc20 <_dtoa_r+0x608>
2000cb3a:	45a0      	cmp	r8, r4
2000cb3c:	f43f af5d 	beq.w	2000c9fa <_dtoa_r+0x3e2>
2000cb40:	ee27 7b03 	vmul.f64	d7, d7, d3
2000cb44:	ee26 6b03 	vmul.f64	d6, d6, d3
2000cb48:	e7e0      	b.n	2000cb0c <_dtoa_r+0x4f4>
2000cb4a:	f8dd 8000 	ldr.w	r8, [sp]
2000cb4e:	ee27 7b04 	vmul.f64	d7, d7, d4
2000cb52:	4621      	mov	r1, r4
2000cb54:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
2000cb58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
2000cb5c:	ee14 2a90 	vmov	r2, s9
2000cb60:	3230      	adds	r2, #48	; 0x30
2000cb62:	f808 2b01 	strb.w	r2, [r8], #1
2000cb66:	45a0      	cmp	r8, r4
2000cb68:	eeb8 5be4 	vcvt.f64.s32	d5, s9
2000cb6c:	ee36 6b45 	vsub.f64	d6, d6, d5
2000cb70:	d118      	bne.n	2000cba4 <_dtoa_r+0x58c>
2000cb72:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
2000cb76:	ee37 4b05 	vadd.f64	d4, d7, d5
2000cb7a:	eeb4 6bc4 	vcmpe.f64	d6, d4
2000cb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000cb82:	dc4d      	bgt.n	2000cc20 <_dtoa_r+0x608>
2000cb84:	ee35 7b47 	vsub.f64	d7, d5, d7
2000cb88:	eeb4 6bc7 	vcmpe.f64	d6, d7
2000cb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000cb90:	f57f af33 	bpl.w	2000c9fa <_dtoa_r+0x3e2>
2000cb94:	4688      	mov	r8, r1
2000cb96:	3901      	subs	r1, #1
2000cb98:	f818 3c01 	ldrb.w	r3, [r8, #-1]
2000cb9c:	2b30      	cmp	r3, #48	; 0x30
2000cb9e:	d0f9      	beq.n	2000cb94 <_dtoa_r+0x57c>
2000cba0:	46bb      	mov	fp, r7
2000cba2:	e02a      	b.n	2000cbfa <_dtoa_r+0x5e2>
2000cba4:	ee26 6b03 	vmul.f64	d6, d6, d3
2000cba8:	e7d6      	b.n	2000cb58 <_dtoa_r+0x540>
2000cbaa:	ed9d 7b02 	vldr	d7, [sp, #8]
2000cbae:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
2000cbb2:	f8dd 8000 	ldr.w	r8, [sp]
2000cbb6:	ee87 5b06 	vdiv.f64	d5, d7, d6
2000cbba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
2000cbbe:	ee15 3a10 	vmov	r3, s10
2000cbc2:	3330      	adds	r3, #48	; 0x30
2000cbc4:	f808 3b01 	strb.w	r3, [r8], #1
2000cbc8:	9b00      	ldr	r3, [sp, #0]
2000cbca:	eba8 0303 	sub.w	r3, r8, r3
2000cbce:	4599      	cmp	r9, r3
2000cbd0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
2000cbd4:	eea3 7b46 	vfms.f64	d7, d3, d6
2000cbd8:	d133      	bne.n	2000cc42 <_dtoa_r+0x62a>
2000cbda:	ee37 7b07 	vadd.f64	d7, d7, d7
2000cbde:	eeb4 7bc6 	vcmpe.f64	d7, d6
2000cbe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000cbe6:	dc1a      	bgt.n	2000cc1e <_dtoa_r+0x606>
2000cbe8:	eeb4 7b46 	vcmp.f64	d7, d6
2000cbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000cbf0:	d103      	bne.n	2000cbfa <_dtoa_r+0x5e2>
2000cbf2:	ee15 3a10 	vmov	r3, s10
2000cbf6:	07d9      	lsls	r1, r3, #31
2000cbf8:	d411      	bmi.n	2000cc1e <_dtoa_r+0x606>
2000cbfa:	4629      	mov	r1, r5
2000cbfc:	4630      	mov	r0, r6
2000cbfe:	f000 feb1 	bl	2000d964 <_Bfree>
2000cc02:	2300      	movs	r3, #0
2000cc04:	9a10      	ldr	r2, [sp, #64]	; 0x40
2000cc06:	f888 3000 	strb.w	r3, [r8]
2000cc0a:	f10b 0301 	add.w	r3, fp, #1
2000cc0e:	6013      	str	r3, [r2, #0]
2000cc10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
2000cc12:	2b00      	cmp	r3, #0
2000cc14:	f43f ad4d 	beq.w	2000c6b2 <_dtoa_r+0x9a>
2000cc18:	f8c3 8000 	str.w	r8, [r3]
2000cc1c:	e549      	b.n	2000c6b2 <_dtoa_r+0x9a>
2000cc1e:	465f      	mov	r7, fp
2000cc20:	4643      	mov	r3, r8
2000cc22:	4698      	mov	r8, r3
2000cc24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
2000cc28:	2a39      	cmp	r2, #57	; 0x39
2000cc2a:	d106      	bne.n	2000cc3a <_dtoa_r+0x622>
2000cc2c:	9a00      	ldr	r2, [sp, #0]
2000cc2e:	429a      	cmp	r2, r3
2000cc30:	d1f7      	bne.n	2000cc22 <_dtoa_r+0x60a>
2000cc32:	9900      	ldr	r1, [sp, #0]
2000cc34:	2230      	movs	r2, #48	; 0x30
2000cc36:	3701      	adds	r7, #1
2000cc38:	700a      	strb	r2, [r1, #0]
2000cc3a:	781a      	ldrb	r2, [r3, #0]
2000cc3c:	3201      	adds	r2, #1
2000cc3e:	701a      	strb	r2, [r3, #0]
2000cc40:	e7ae      	b.n	2000cba0 <_dtoa_r+0x588>
2000cc42:	ee27 7b04 	vmul.f64	d7, d7, d4
2000cc46:	eeb5 7b40 	vcmp.f64	d7, #0.0
2000cc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000cc4e:	d1b2      	bne.n	2000cbb6 <_dtoa_r+0x59e>
2000cc50:	e7d3      	b.n	2000cbfa <_dtoa_r+0x5e2>
2000cc52:	bf00      	nop
2000cc54:	2000fd48 	.word	0x2000fd48
2000cc58:	2000fd20 	.word	0x2000fd20
2000cc5c:	9908      	ldr	r1, [sp, #32]
2000cc5e:	2900      	cmp	r1, #0
2000cc60:	f000 80d1 	beq.w	2000ce06 <_dtoa_r+0x7ee>
2000cc64:	9907      	ldr	r1, [sp, #28]
2000cc66:	2901      	cmp	r1, #1
2000cc68:	f300 80b4 	bgt.w	2000cdd4 <_dtoa_r+0x7bc>
2000cc6c:	9911      	ldr	r1, [sp, #68]	; 0x44
2000cc6e:	2900      	cmp	r1, #0
2000cc70:	f000 80ac 	beq.w	2000cdcc <_dtoa_r+0x7b4>
2000cc74:	f202 4233 	addw	r2, r2, #1075	; 0x433
2000cc78:	f8dd 8014 	ldr.w	r8, [sp, #20]
2000cc7c:	461c      	mov	r4, r3
2000cc7e:	930a      	str	r3, [sp, #40]	; 0x28
2000cc80:	9b05      	ldr	r3, [sp, #20]
2000cc82:	4413      	add	r3, r2
2000cc84:	9305      	str	r3, [sp, #20]
2000cc86:	9b06      	ldr	r3, [sp, #24]
2000cc88:	2101      	movs	r1, #1
2000cc8a:	4413      	add	r3, r2
2000cc8c:	4630      	mov	r0, r6
2000cc8e:	9306      	str	r3, [sp, #24]
2000cc90:	f000 ff6e 	bl	2000db70 <__i2b>
2000cc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000cc96:	4607      	mov	r7, r0
2000cc98:	f1b8 0f00 	cmp.w	r8, #0
2000cc9c:	dd0d      	ble.n	2000ccba <_dtoa_r+0x6a2>
2000cc9e:	9a06      	ldr	r2, [sp, #24]
2000cca0:	2a00      	cmp	r2, #0
2000cca2:	dd0a      	ble.n	2000ccba <_dtoa_r+0x6a2>
2000cca4:	4542      	cmp	r2, r8
2000cca6:	9905      	ldr	r1, [sp, #20]
2000cca8:	bfa8      	it	ge
2000ccaa:	4642      	movge	r2, r8
2000ccac:	1a89      	subs	r1, r1, r2
2000ccae:	9105      	str	r1, [sp, #20]
2000ccb0:	9906      	ldr	r1, [sp, #24]
2000ccb2:	eba8 0802 	sub.w	r8, r8, r2
2000ccb6:	1a8a      	subs	r2, r1, r2
2000ccb8:	9206      	str	r2, [sp, #24]
2000ccba:	b303      	cbz	r3, 2000ccfe <_dtoa_r+0x6e6>
2000ccbc:	9a08      	ldr	r2, [sp, #32]
2000ccbe:	2a00      	cmp	r2, #0
2000ccc0:	f000 80a6 	beq.w	2000ce10 <_dtoa_r+0x7f8>
2000ccc4:	2c00      	cmp	r4, #0
2000ccc6:	dd13      	ble.n	2000ccf0 <_dtoa_r+0x6d8>
2000ccc8:	4639      	mov	r1, r7
2000ccca:	4622      	mov	r2, r4
2000cccc:	4630      	mov	r0, r6
2000ccce:	930c      	str	r3, [sp, #48]	; 0x30
2000ccd0:	f001 f80a 	bl	2000dce8 <__pow5mult>
2000ccd4:	462a      	mov	r2, r5
2000ccd6:	4601      	mov	r1, r0
2000ccd8:	4607      	mov	r7, r0
2000ccda:	4630      	mov	r0, r6
2000ccdc:	f000 ff5e 	bl	2000db9c <__multiply>
2000cce0:	4629      	mov	r1, r5
2000cce2:	900a      	str	r0, [sp, #40]	; 0x28
2000cce4:	4630      	mov	r0, r6
2000cce6:	f000 fe3d 	bl	2000d964 <_Bfree>
2000ccea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
2000ccec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2000ccee:	4615      	mov	r5, r2
2000ccf0:	1b1a      	subs	r2, r3, r4
2000ccf2:	d004      	beq.n	2000ccfe <_dtoa_r+0x6e6>
2000ccf4:	4629      	mov	r1, r5
2000ccf6:	4630      	mov	r0, r6
2000ccf8:	f000 fff6 	bl	2000dce8 <__pow5mult>
2000ccfc:	4605      	mov	r5, r0
2000ccfe:	2101      	movs	r1, #1
2000cd00:	4630      	mov	r0, r6
2000cd02:	f000 ff35 	bl	2000db70 <__i2b>
2000cd06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
2000cd08:	2b00      	cmp	r3, #0
2000cd0a:	4604      	mov	r4, r0
2000cd0c:	f340 8082 	ble.w	2000ce14 <_dtoa_r+0x7fc>
2000cd10:	461a      	mov	r2, r3
2000cd12:	4601      	mov	r1, r0
2000cd14:	4630      	mov	r0, r6
2000cd16:	f000 ffe7 	bl	2000dce8 <__pow5mult>
2000cd1a:	9b07      	ldr	r3, [sp, #28]
2000cd1c:	2b01      	cmp	r3, #1
2000cd1e:	4604      	mov	r4, r0
2000cd20:	dd7b      	ble.n	2000ce1a <_dtoa_r+0x802>
2000cd22:	2300      	movs	r3, #0
2000cd24:	930a      	str	r3, [sp, #40]	; 0x28
2000cd26:	6922      	ldr	r2, [r4, #16]
2000cd28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
2000cd2c:	6910      	ldr	r0, [r2, #16]
2000cd2e:	f000 fecf 	bl	2000dad0 <__hi0bits>
2000cd32:	f1c0 0020 	rsb	r0, r0, #32
2000cd36:	9b06      	ldr	r3, [sp, #24]
2000cd38:	4418      	add	r0, r3
2000cd3a:	f010 001f 	ands.w	r0, r0, #31
2000cd3e:	f000 808d 	beq.w	2000ce5c <_dtoa_r+0x844>
2000cd42:	f1c0 0220 	rsb	r2, r0, #32
2000cd46:	2a04      	cmp	r2, #4
2000cd48:	f340 8086 	ble.w	2000ce58 <_dtoa_r+0x840>
2000cd4c:	f1c0 001c 	rsb	r0, r0, #28
2000cd50:	9b05      	ldr	r3, [sp, #20]
2000cd52:	4403      	add	r3, r0
2000cd54:	9305      	str	r3, [sp, #20]
2000cd56:	9b06      	ldr	r3, [sp, #24]
2000cd58:	4403      	add	r3, r0
2000cd5a:	4480      	add	r8, r0
2000cd5c:	9306      	str	r3, [sp, #24]
2000cd5e:	9b05      	ldr	r3, [sp, #20]
2000cd60:	2b00      	cmp	r3, #0
2000cd62:	dd05      	ble.n	2000cd70 <_dtoa_r+0x758>
2000cd64:	4629      	mov	r1, r5
2000cd66:	461a      	mov	r2, r3
2000cd68:	4630      	mov	r0, r6
2000cd6a:	f001 f817 	bl	2000dd9c <__lshift>
2000cd6e:	4605      	mov	r5, r0
2000cd70:	9b06      	ldr	r3, [sp, #24]
2000cd72:	2b00      	cmp	r3, #0
2000cd74:	dd05      	ble.n	2000cd82 <_dtoa_r+0x76a>
2000cd76:	4621      	mov	r1, r4
2000cd78:	461a      	mov	r2, r3
2000cd7a:	4630      	mov	r0, r6
2000cd7c:	f001 f80e 	bl	2000dd9c <__lshift>
2000cd80:	4604      	mov	r4, r0
2000cd82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
2000cd84:	2b00      	cmp	r3, #0
2000cd86:	d06b      	beq.n	2000ce60 <_dtoa_r+0x848>
2000cd88:	4621      	mov	r1, r4
2000cd8a:	4628      	mov	r0, r5
2000cd8c:	f001 f872 	bl	2000de74 <__mcmp>
2000cd90:	2800      	cmp	r0, #0
2000cd92:	da65      	bge.n	2000ce60 <_dtoa_r+0x848>
2000cd94:	2300      	movs	r3, #0
2000cd96:	4629      	mov	r1, r5
2000cd98:	220a      	movs	r2, #10
2000cd9a:	4630      	mov	r0, r6
2000cd9c:	f000 fe04 	bl	2000d9a8 <__multadd>
2000cda0:	9b08      	ldr	r3, [sp, #32]
2000cda2:	f10b 3bff 	add.w	fp, fp, #4294967295
2000cda6:	4605      	mov	r5, r0
2000cda8:	2b00      	cmp	r3, #0
2000cdaa:	f000 8192 	beq.w	2000d0d2 <_dtoa_r+0xaba>
2000cdae:	4639      	mov	r1, r7
2000cdb0:	2300      	movs	r3, #0
2000cdb2:	220a      	movs	r2, #10
2000cdb4:	4630      	mov	r0, r6
2000cdb6:	f000 fdf7 	bl	2000d9a8 <__multadd>
2000cdba:	f1ba 0f00 	cmp.w	sl, #0
2000cdbe:	4607      	mov	r7, r0
2000cdc0:	f300 808e 	bgt.w	2000cee0 <_dtoa_r+0x8c8>
2000cdc4:	9b07      	ldr	r3, [sp, #28]
2000cdc6:	2b02      	cmp	r3, #2
2000cdc8:	dc51      	bgt.n	2000ce6e <_dtoa_r+0x856>
2000cdca:	e089      	b.n	2000cee0 <_dtoa_r+0x8c8>
2000cdcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
2000cdce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
2000cdd2:	e751      	b.n	2000cc78 <_dtoa_r+0x660>
2000cdd4:	f109 34ff 	add.w	r4, r9, #4294967295
2000cdd8:	42a3      	cmp	r3, r4
2000cdda:	bfbf      	itttt	lt
2000cddc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
2000cdde:	1ae3      	sublt	r3, r4, r3
2000cde0:	18d2      	addlt	r2, r2, r3
2000cde2:	4613      	movlt	r3, r2
2000cde4:	bfb7      	itett	lt
2000cde6:	930e      	strlt	r3, [sp, #56]	; 0x38
2000cde8:	1b1c      	subge	r4, r3, r4
2000cdea:	4623      	movlt	r3, r4
2000cdec:	2400      	movlt	r4, #0
2000cdee:	f1b9 0f00 	cmp.w	r9, #0
2000cdf2:	bfb5      	itete	lt
2000cdf4:	9a05      	ldrlt	r2, [sp, #20]
2000cdf6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
2000cdfa:	eba2 0809 	sublt.w	r8, r2, r9
2000cdfe:	464a      	movge	r2, r9
2000ce00:	bfb8      	it	lt
2000ce02:	2200      	movlt	r2, #0
2000ce04:	e73b      	b.n	2000cc7e <_dtoa_r+0x666>
2000ce06:	f8dd 8014 	ldr.w	r8, [sp, #20]
2000ce0a:	9f08      	ldr	r7, [sp, #32]
2000ce0c:	461c      	mov	r4, r3
2000ce0e:	e743      	b.n	2000cc98 <_dtoa_r+0x680>
2000ce10:	461a      	mov	r2, r3
2000ce12:	e76f      	b.n	2000ccf4 <_dtoa_r+0x6dc>
2000ce14:	9b07      	ldr	r3, [sp, #28]
2000ce16:	2b01      	cmp	r3, #1
2000ce18:	dc18      	bgt.n	2000ce4c <_dtoa_r+0x834>
2000ce1a:	9b02      	ldr	r3, [sp, #8]
2000ce1c:	b9b3      	cbnz	r3, 2000ce4c <_dtoa_r+0x834>
2000ce1e:	9b03      	ldr	r3, [sp, #12]
2000ce20:	f3c3 0213 	ubfx	r2, r3, #0, #20
2000ce24:	b9a2      	cbnz	r2, 2000ce50 <_dtoa_r+0x838>
2000ce26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2000ce2a:	0d12      	lsrs	r2, r2, #20
2000ce2c:	0512      	lsls	r2, r2, #20
2000ce2e:	b18a      	cbz	r2, 2000ce54 <_dtoa_r+0x83c>
2000ce30:	9b05      	ldr	r3, [sp, #20]
2000ce32:	3301      	adds	r3, #1
2000ce34:	9305      	str	r3, [sp, #20]
2000ce36:	9b06      	ldr	r3, [sp, #24]
2000ce38:	3301      	adds	r3, #1
2000ce3a:	9306      	str	r3, [sp, #24]
2000ce3c:	2301      	movs	r3, #1
2000ce3e:	930a      	str	r3, [sp, #40]	; 0x28
2000ce40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
2000ce42:	2b00      	cmp	r3, #0
2000ce44:	f47f af6f 	bne.w	2000cd26 <_dtoa_r+0x70e>
2000ce48:	2001      	movs	r0, #1
2000ce4a:	e774      	b.n	2000cd36 <_dtoa_r+0x71e>
2000ce4c:	2300      	movs	r3, #0
2000ce4e:	e7f6      	b.n	2000ce3e <_dtoa_r+0x826>
2000ce50:	9b02      	ldr	r3, [sp, #8]
2000ce52:	e7f4      	b.n	2000ce3e <_dtoa_r+0x826>
2000ce54:	920a      	str	r2, [sp, #40]	; 0x28
2000ce56:	e7f3      	b.n	2000ce40 <_dtoa_r+0x828>
2000ce58:	d081      	beq.n	2000cd5e <_dtoa_r+0x746>
2000ce5a:	4610      	mov	r0, r2
2000ce5c:	301c      	adds	r0, #28
2000ce5e:	e777      	b.n	2000cd50 <_dtoa_r+0x738>
2000ce60:	f1b9 0f00 	cmp.w	r9, #0
2000ce64:	dc37      	bgt.n	2000ced6 <_dtoa_r+0x8be>
2000ce66:	9b07      	ldr	r3, [sp, #28]
2000ce68:	2b02      	cmp	r3, #2
2000ce6a:	dd34      	ble.n	2000ced6 <_dtoa_r+0x8be>
2000ce6c:	46ca      	mov	sl, r9
2000ce6e:	f1ba 0f00 	cmp.w	sl, #0
2000ce72:	d10d      	bne.n	2000ce90 <_dtoa_r+0x878>
2000ce74:	4621      	mov	r1, r4
2000ce76:	4653      	mov	r3, sl
2000ce78:	2205      	movs	r2, #5
2000ce7a:	4630      	mov	r0, r6
2000ce7c:	f000 fd94 	bl	2000d9a8 <__multadd>
2000ce80:	4601      	mov	r1, r0
2000ce82:	4604      	mov	r4, r0
2000ce84:	4628      	mov	r0, r5
2000ce86:	f000 fff5 	bl	2000de74 <__mcmp>
2000ce8a:	2800      	cmp	r0, #0
2000ce8c:	f73f adde 	bgt.w	2000ca4c <_dtoa_r+0x434>
2000ce90:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000ce92:	f8dd 8000 	ldr.w	r8, [sp]
2000ce96:	ea6f 0b03 	mvn.w	fp, r3
2000ce9a:	f04f 0900 	mov.w	r9, #0
2000ce9e:	4621      	mov	r1, r4
2000cea0:	4630      	mov	r0, r6
2000cea2:	f000 fd5f 	bl	2000d964 <_Bfree>
2000cea6:	2f00      	cmp	r7, #0
2000cea8:	f43f aea7 	beq.w	2000cbfa <_dtoa_r+0x5e2>
2000ceac:	f1b9 0f00 	cmp.w	r9, #0
2000ceb0:	d005      	beq.n	2000cebe <_dtoa_r+0x8a6>
2000ceb2:	45b9      	cmp	r9, r7
2000ceb4:	d003      	beq.n	2000cebe <_dtoa_r+0x8a6>
2000ceb6:	4649      	mov	r1, r9
2000ceb8:	4630      	mov	r0, r6
2000ceba:	f000 fd53 	bl	2000d964 <_Bfree>
2000cebe:	4639      	mov	r1, r7
2000cec0:	4630      	mov	r0, r6
2000cec2:	f000 fd4f 	bl	2000d964 <_Bfree>
2000cec6:	e698      	b.n	2000cbfa <_dtoa_r+0x5e2>
2000cec8:	2400      	movs	r4, #0
2000ceca:	4627      	mov	r7, r4
2000cecc:	e7e0      	b.n	2000ce90 <_dtoa_r+0x878>
2000cece:	46bb      	mov	fp, r7
2000ced0:	4604      	mov	r4, r0
2000ced2:	4607      	mov	r7, r0
2000ced4:	e5ba      	b.n	2000ca4c <_dtoa_r+0x434>
2000ced6:	9b08      	ldr	r3, [sp, #32]
2000ced8:	46ca      	mov	sl, r9
2000ceda:	2b00      	cmp	r3, #0
2000cedc:	f000 8100 	beq.w	2000d0e0 <_dtoa_r+0xac8>
2000cee0:	f1b8 0f00 	cmp.w	r8, #0
2000cee4:	dd05      	ble.n	2000cef2 <_dtoa_r+0x8da>
2000cee6:	4639      	mov	r1, r7
2000cee8:	4642      	mov	r2, r8
2000ceea:	4630      	mov	r0, r6
2000ceec:	f000 ff56 	bl	2000dd9c <__lshift>
2000cef0:	4607      	mov	r7, r0
2000cef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000cef4:	2b00      	cmp	r3, #0
2000cef6:	d05d      	beq.n	2000cfb4 <_dtoa_r+0x99c>
2000cef8:	6879      	ldr	r1, [r7, #4]
2000cefa:	4630      	mov	r0, r6
2000cefc:	f000 fcf2 	bl	2000d8e4 <_Balloc>
2000cf00:	4680      	mov	r8, r0
2000cf02:	b928      	cbnz	r0, 2000cf10 <_dtoa_r+0x8f8>
2000cf04:	4b82      	ldr	r3, [pc, #520]	; (2000d110 <_dtoa_r+0xaf8>)
2000cf06:	4602      	mov	r2, r0
2000cf08:	f240 21ea 	movw	r1, #746	; 0x2ea
2000cf0c:	f7ff bb9a 	b.w	2000c644 <_dtoa_r+0x2c>
2000cf10:	693a      	ldr	r2, [r7, #16]
2000cf12:	3202      	adds	r2, #2
2000cf14:	0092      	lsls	r2, r2, #2
2000cf16:	f107 010c 	add.w	r1, r7, #12
2000cf1a:	300c      	adds	r0, #12
2000cf1c:	f000 fcd4 	bl	2000d8c8 <memcpy>
2000cf20:	2201      	movs	r2, #1
2000cf22:	4641      	mov	r1, r8
2000cf24:	4630      	mov	r0, r6
2000cf26:	f000 ff39 	bl	2000dd9c <__lshift>
2000cf2a:	9b00      	ldr	r3, [sp, #0]
2000cf2c:	3301      	adds	r3, #1
2000cf2e:	9305      	str	r3, [sp, #20]
2000cf30:	9b00      	ldr	r3, [sp, #0]
2000cf32:	4453      	add	r3, sl
2000cf34:	9309      	str	r3, [sp, #36]	; 0x24
2000cf36:	9b02      	ldr	r3, [sp, #8]
2000cf38:	f003 0301 	and.w	r3, r3, #1
2000cf3c:	46b9      	mov	r9, r7
2000cf3e:	9308      	str	r3, [sp, #32]
2000cf40:	4607      	mov	r7, r0
2000cf42:	9b05      	ldr	r3, [sp, #20]
2000cf44:	4621      	mov	r1, r4
2000cf46:	3b01      	subs	r3, #1
2000cf48:	4628      	mov	r0, r5
2000cf4a:	9302      	str	r3, [sp, #8]
2000cf4c:	f7ff fad6 	bl	2000c4fc <quorem>
2000cf50:	4603      	mov	r3, r0
2000cf52:	3330      	adds	r3, #48	; 0x30
2000cf54:	9006      	str	r0, [sp, #24]
2000cf56:	4649      	mov	r1, r9
2000cf58:	4628      	mov	r0, r5
2000cf5a:	930a      	str	r3, [sp, #40]	; 0x28
2000cf5c:	f000 ff8a 	bl	2000de74 <__mcmp>
2000cf60:	463a      	mov	r2, r7
2000cf62:	4682      	mov	sl, r0
2000cf64:	4621      	mov	r1, r4
2000cf66:	4630      	mov	r0, r6
2000cf68:	f000 ffa0 	bl	2000deac <__mdiff>
2000cf6c:	68c2      	ldr	r2, [r0, #12]
2000cf6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000cf70:	4680      	mov	r8, r0
2000cf72:	bb0a      	cbnz	r2, 2000cfb8 <_dtoa_r+0x9a0>
2000cf74:	4601      	mov	r1, r0
2000cf76:	4628      	mov	r0, r5
2000cf78:	f000 ff7c 	bl	2000de74 <__mcmp>
2000cf7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000cf7e:	4602      	mov	r2, r0
2000cf80:	4641      	mov	r1, r8
2000cf82:	4630      	mov	r0, r6
2000cf84:	920e      	str	r2, [sp, #56]	; 0x38
2000cf86:	930a      	str	r3, [sp, #40]	; 0x28
2000cf88:	f000 fcec 	bl	2000d964 <_Bfree>
2000cf8c:	9b07      	ldr	r3, [sp, #28]
2000cf8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
2000cf90:	f8dd 8014 	ldr.w	r8, [sp, #20]
2000cf94:	ea43 0102 	orr.w	r1, r3, r2
2000cf98:	9b08      	ldr	r3, [sp, #32]
2000cf9a:	430b      	orrs	r3, r1
2000cf9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000cf9e:	d10d      	bne.n	2000cfbc <_dtoa_r+0x9a4>
2000cfa0:	2b39      	cmp	r3, #57	; 0x39
2000cfa2:	d029      	beq.n	2000cff8 <_dtoa_r+0x9e0>
2000cfa4:	f1ba 0f00 	cmp.w	sl, #0
2000cfa8:	dd01      	ble.n	2000cfae <_dtoa_r+0x996>
2000cfaa:	9b06      	ldr	r3, [sp, #24]
2000cfac:	3331      	adds	r3, #49	; 0x31
2000cfae:	9a02      	ldr	r2, [sp, #8]
2000cfb0:	7013      	strb	r3, [r2, #0]
2000cfb2:	e774      	b.n	2000ce9e <_dtoa_r+0x886>
2000cfb4:	4638      	mov	r0, r7
2000cfb6:	e7b8      	b.n	2000cf2a <_dtoa_r+0x912>
2000cfb8:	2201      	movs	r2, #1
2000cfba:	e7e1      	b.n	2000cf80 <_dtoa_r+0x968>
2000cfbc:	f1ba 0f00 	cmp.w	sl, #0
2000cfc0:	db06      	blt.n	2000cfd0 <_dtoa_r+0x9b8>
2000cfc2:	9907      	ldr	r1, [sp, #28]
2000cfc4:	ea41 0a0a 	orr.w	sl, r1, sl
2000cfc8:	9908      	ldr	r1, [sp, #32]
2000cfca:	ea5a 0101 	orrs.w	r1, sl, r1
2000cfce:	d120      	bne.n	2000d012 <_dtoa_r+0x9fa>
2000cfd0:	2a00      	cmp	r2, #0
2000cfd2:	ddec      	ble.n	2000cfae <_dtoa_r+0x996>
2000cfd4:	4629      	mov	r1, r5
2000cfd6:	2201      	movs	r2, #1
2000cfd8:	4630      	mov	r0, r6
2000cfda:	9305      	str	r3, [sp, #20]
2000cfdc:	f000 fede 	bl	2000dd9c <__lshift>
2000cfe0:	4621      	mov	r1, r4
2000cfe2:	4605      	mov	r5, r0
2000cfe4:	f000 ff46 	bl	2000de74 <__mcmp>
2000cfe8:	2800      	cmp	r0, #0
2000cfea:	9b05      	ldr	r3, [sp, #20]
2000cfec:	dc02      	bgt.n	2000cff4 <_dtoa_r+0x9dc>
2000cfee:	d1de      	bne.n	2000cfae <_dtoa_r+0x996>
2000cff0:	07da      	lsls	r2, r3, #31
2000cff2:	d5dc      	bpl.n	2000cfae <_dtoa_r+0x996>
2000cff4:	2b39      	cmp	r3, #57	; 0x39
2000cff6:	d1d8      	bne.n	2000cfaa <_dtoa_r+0x992>
2000cff8:	9a02      	ldr	r2, [sp, #8]
2000cffa:	2339      	movs	r3, #57	; 0x39
2000cffc:	7013      	strb	r3, [r2, #0]
2000cffe:	4643      	mov	r3, r8
2000d000:	4698      	mov	r8, r3
2000d002:	3b01      	subs	r3, #1
2000d004:	f818 2c01 	ldrb.w	r2, [r8, #-1]
2000d008:	2a39      	cmp	r2, #57	; 0x39
2000d00a:	d051      	beq.n	2000d0b0 <_dtoa_r+0xa98>
2000d00c:	3201      	adds	r2, #1
2000d00e:	701a      	strb	r2, [r3, #0]
2000d010:	e745      	b.n	2000ce9e <_dtoa_r+0x886>
2000d012:	2a00      	cmp	r2, #0
2000d014:	dd03      	ble.n	2000d01e <_dtoa_r+0xa06>
2000d016:	2b39      	cmp	r3, #57	; 0x39
2000d018:	d0ee      	beq.n	2000cff8 <_dtoa_r+0x9e0>
2000d01a:	3301      	adds	r3, #1
2000d01c:	e7c7      	b.n	2000cfae <_dtoa_r+0x996>
2000d01e:	9a05      	ldr	r2, [sp, #20]
2000d020:	9909      	ldr	r1, [sp, #36]	; 0x24
2000d022:	f802 3c01 	strb.w	r3, [r2, #-1]
2000d026:	428a      	cmp	r2, r1
2000d028:	d02b      	beq.n	2000d082 <_dtoa_r+0xa6a>
2000d02a:	4629      	mov	r1, r5
2000d02c:	2300      	movs	r3, #0
2000d02e:	220a      	movs	r2, #10
2000d030:	4630      	mov	r0, r6
2000d032:	f000 fcb9 	bl	2000d9a8 <__multadd>
2000d036:	45b9      	cmp	r9, r7
2000d038:	4605      	mov	r5, r0
2000d03a:	f04f 0300 	mov.w	r3, #0
2000d03e:	f04f 020a 	mov.w	r2, #10
2000d042:	4649      	mov	r1, r9
2000d044:	4630      	mov	r0, r6
2000d046:	d107      	bne.n	2000d058 <_dtoa_r+0xa40>
2000d048:	f000 fcae 	bl	2000d9a8 <__multadd>
2000d04c:	4681      	mov	r9, r0
2000d04e:	4607      	mov	r7, r0
2000d050:	9b05      	ldr	r3, [sp, #20]
2000d052:	3301      	adds	r3, #1
2000d054:	9305      	str	r3, [sp, #20]
2000d056:	e774      	b.n	2000cf42 <_dtoa_r+0x92a>
2000d058:	f000 fca6 	bl	2000d9a8 <__multadd>
2000d05c:	4639      	mov	r1, r7
2000d05e:	4681      	mov	r9, r0
2000d060:	2300      	movs	r3, #0
2000d062:	220a      	movs	r2, #10
2000d064:	4630      	mov	r0, r6
2000d066:	f000 fc9f 	bl	2000d9a8 <__multadd>
2000d06a:	4607      	mov	r7, r0
2000d06c:	e7f0      	b.n	2000d050 <_dtoa_r+0xa38>
2000d06e:	f1ba 0f00 	cmp.w	sl, #0
2000d072:	9a00      	ldr	r2, [sp, #0]
2000d074:	bfcc      	ite	gt
2000d076:	46d0      	movgt	r8, sl
2000d078:	f04f 0801 	movle.w	r8, #1
2000d07c:	4490      	add	r8, r2
2000d07e:	f04f 0900 	mov.w	r9, #0
2000d082:	4629      	mov	r1, r5
2000d084:	2201      	movs	r2, #1
2000d086:	4630      	mov	r0, r6
2000d088:	9302      	str	r3, [sp, #8]
2000d08a:	f000 fe87 	bl	2000dd9c <__lshift>
2000d08e:	4621      	mov	r1, r4
2000d090:	4605      	mov	r5, r0
2000d092:	f000 feef 	bl	2000de74 <__mcmp>
2000d096:	2800      	cmp	r0, #0
2000d098:	dcb1      	bgt.n	2000cffe <_dtoa_r+0x9e6>
2000d09a:	d102      	bne.n	2000d0a2 <_dtoa_r+0xa8a>
2000d09c:	9b02      	ldr	r3, [sp, #8]
2000d09e:	07db      	lsls	r3, r3, #31
2000d0a0:	d4ad      	bmi.n	2000cffe <_dtoa_r+0x9e6>
2000d0a2:	4643      	mov	r3, r8
2000d0a4:	4698      	mov	r8, r3
2000d0a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
2000d0aa:	2a30      	cmp	r2, #48	; 0x30
2000d0ac:	d0fa      	beq.n	2000d0a4 <_dtoa_r+0xa8c>
2000d0ae:	e6f6      	b.n	2000ce9e <_dtoa_r+0x886>
2000d0b0:	9a00      	ldr	r2, [sp, #0]
2000d0b2:	429a      	cmp	r2, r3
2000d0b4:	d1a4      	bne.n	2000d000 <_dtoa_r+0x9e8>
2000d0b6:	f10b 0b01 	add.w	fp, fp, #1
2000d0ba:	2331      	movs	r3, #49	; 0x31
2000d0bc:	e778      	b.n	2000cfb0 <_dtoa_r+0x998>
2000d0be:	4b15      	ldr	r3, [pc, #84]	; (2000d114 <_dtoa_r+0xafc>)
2000d0c0:	f7ff bb12 	b.w	2000c6e8 <_dtoa_r+0xd0>
2000d0c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
2000d0c6:	2b00      	cmp	r3, #0
2000d0c8:	f47f aaee 	bne.w	2000c6a8 <_dtoa_r+0x90>
2000d0cc:	4b12      	ldr	r3, [pc, #72]	; (2000d118 <_dtoa_r+0xb00>)
2000d0ce:	f7ff bb0b 	b.w	2000c6e8 <_dtoa_r+0xd0>
2000d0d2:	f1ba 0f00 	cmp.w	sl, #0
2000d0d6:	dc03      	bgt.n	2000d0e0 <_dtoa_r+0xac8>
2000d0d8:	9b07      	ldr	r3, [sp, #28]
2000d0da:	2b02      	cmp	r3, #2
2000d0dc:	f73f aec7 	bgt.w	2000ce6e <_dtoa_r+0x856>
2000d0e0:	f8dd 8000 	ldr.w	r8, [sp]
2000d0e4:	4621      	mov	r1, r4
2000d0e6:	4628      	mov	r0, r5
2000d0e8:	f7ff fa08 	bl	2000c4fc <quorem>
2000d0ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
2000d0f0:	f808 3b01 	strb.w	r3, [r8], #1
2000d0f4:	9a00      	ldr	r2, [sp, #0]
2000d0f6:	eba8 0202 	sub.w	r2, r8, r2
2000d0fa:	4592      	cmp	sl, r2
2000d0fc:	ddb7      	ble.n	2000d06e <_dtoa_r+0xa56>
2000d0fe:	4629      	mov	r1, r5
2000d100:	2300      	movs	r3, #0
2000d102:	220a      	movs	r2, #10
2000d104:	4630      	mov	r0, r6
2000d106:	f000 fc4f 	bl	2000d9a8 <__multadd>
2000d10a:	4605      	mov	r5, r0
2000d10c:	e7ea      	b.n	2000d0e4 <_dtoa_r+0xacc>
2000d10e:	bf00      	nop
2000d110:	2000fc2c 	.word	0x2000fc2c
2000d114:	2000fa2c 	.word	0x2000fa2c
2000d118:	2000fba9 	.word	0x2000fba9

2000d11c <rshift>:
2000d11c:	6903      	ldr	r3, [r0, #16]
2000d11e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
2000d122:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
2000d126:	ea4f 1261 	mov.w	r2, r1, asr #5
2000d12a:	f100 0414 	add.w	r4, r0, #20
2000d12e:	dd45      	ble.n	2000d1bc <rshift+0xa0>
2000d130:	f011 011f 	ands.w	r1, r1, #31
2000d134:	eb04 0683 	add.w	r6, r4, r3, lsl #2
2000d138:	eb04 0582 	add.w	r5, r4, r2, lsl #2
2000d13c:	d10c      	bne.n	2000d158 <rshift+0x3c>
2000d13e:	f100 0710 	add.w	r7, r0, #16
2000d142:	4629      	mov	r1, r5
2000d144:	42b1      	cmp	r1, r6
2000d146:	d334      	bcc.n	2000d1b2 <rshift+0x96>
2000d148:	1a9b      	subs	r3, r3, r2
2000d14a:	009b      	lsls	r3, r3, #2
2000d14c:	1eea      	subs	r2, r5, #3
2000d14e:	4296      	cmp	r6, r2
2000d150:	bf38      	it	cc
2000d152:	2300      	movcc	r3, #0
2000d154:	4423      	add	r3, r4
2000d156:	e015      	b.n	2000d184 <rshift+0x68>
2000d158:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
2000d15c:	f1c1 0820 	rsb	r8, r1, #32
2000d160:	40cf      	lsrs	r7, r1
2000d162:	f105 0e04 	add.w	lr, r5, #4
2000d166:	46a1      	mov	r9, r4
2000d168:	4576      	cmp	r6, lr
2000d16a:	46f4      	mov	ip, lr
2000d16c:	d815      	bhi.n	2000d19a <rshift+0x7e>
2000d16e:	1a9b      	subs	r3, r3, r2
2000d170:	009a      	lsls	r2, r3, #2
2000d172:	3a04      	subs	r2, #4
2000d174:	3501      	adds	r5, #1
2000d176:	42ae      	cmp	r6, r5
2000d178:	bf38      	it	cc
2000d17a:	2200      	movcc	r2, #0
2000d17c:	18a3      	adds	r3, r4, r2
2000d17e:	50a7      	str	r7, [r4, r2]
2000d180:	b107      	cbz	r7, 2000d184 <rshift+0x68>
2000d182:	3304      	adds	r3, #4
2000d184:	1b1a      	subs	r2, r3, r4
2000d186:	42a3      	cmp	r3, r4
2000d188:	ea4f 02a2 	mov.w	r2, r2, asr #2
2000d18c:	bf08      	it	eq
2000d18e:	2300      	moveq	r3, #0
2000d190:	6102      	str	r2, [r0, #16]
2000d192:	bf08      	it	eq
2000d194:	6143      	streq	r3, [r0, #20]
2000d196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2000d19a:	f8dc c000 	ldr.w	ip, [ip]
2000d19e:	fa0c fc08 	lsl.w	ip, ip, r8
2000d1a2:	ea4c 0707 	orr.w	r7, ip, r7
2000d1a6:	f849 7b04 	str.w	r7, [r9], #4
2000d1aa:	f85e 7b04 	ldr.w	r7, [lr], #4
2000d1ae:	40cf      	lsrs	r7, r1
2000d1b0:	e7da      	b.n	2000d168 <rshift+0x4c>
2000d1b2:	f851 cb04 	ldr.w	ip, [r1], #4
2000d1b6:	f847 cf04 	str.w	ip, [r7, #4]!
2000d1ba:	e7c3      	b.n	2000d144 <rshift+0x28>
2000d1bc:	4623      	mov	r3, r4
2000d1be:	e7e1      	b.n	2000d184 <rshift+0x68>

2000d1c0 <__hexdig_fun>:
2000d1c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
2000d1c4:	2b09      	cmp	r3, #9
2000d1c6:	d802      	bhi.n	2000d1ce <__hexdig_fun+0xe>
2000d1c8:	3820      	subs	r0, #32
2000d1ca:	b2c0      	uxtb	r0, r0
2000d1cc:	4770      	bx	lr
2000d1ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
2000d1d2:	2b05      	cmp	r3, #5
2000d1d4:	d801      	bhi.n	2000d1da <__hexdig_fun+0x1a>
2000d1d6:	3847      	subs	r0, #71	; 0x47
2000d1d8:	e7f7      	b.n	2000d1ca <__hexdig_fun+0xa>
2000d1da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
2000d1de:	2b05      	cmp	r3, #5
2000d1e0:	d801      	bhi.n	2000d1e6 <__hexdig_fun+0x26>
2000d1e2:	3827      	subs	r0, #39	; 0x27
2000d1e4:	e7f1      	b.n	2000d1ca <__hexdig_fun+0xa>
2000d1e6:	2000      	movs	r0, #0
2000d1e8:	4770      	bx	lr
	...

2000d1ec <__gethex>:
2000d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000d1f0:	ed2d 8b02 	vpush	{d8}
2000d1f4:	b089      	sub	sp, #36	; 0x24
2000d1f6:	ee08 0a10 	vmov	s16, r0
2000d1fa:	9304      	str	r3, [sp, #16]
2000d1fc:	4bbc      	ldr	r3, [pc, #752]	; (2000d4f0 <__gethex+0x304>)
2000d1fe:	681b      	ldr	r3, [r3, #0]
2000d200:	9301      	str	r3, [sp, #4]
2000d202:	4618      	mov	r0, r3
2000d204:	468b      	mov	fp, r1
2000d206:	4690      	mov	r8, r2
2000d208:	f7f3 f9b0 	bl	2000056c <strlen>
2000d20c:	9b01      	ldr	r3, [sp, #4]
2000d20e:	f8db 2000 	ldr.w	r2, [fp]
2000d212:	4403      	add	r3, r0
2000d214:	4682      	mov	sl, r0
2000d216:	f813 3c01 	ldrb.w	r3, [r3, #-1]
2000d21a:	9305      	str	r3, [sp, #20]
2000d21c:	1c93      	adds	r3, r2, #2
2000d21e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
2000d222:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
2000d226:	32fe      	adds	r2, #254	; 0xfe
2000d228:	18d1      	adds	r1, r2, r3
2000d22a:	461f      	mov	r7, r3
2000d22c:	f813 0b01 	ldrb.w	r0, [r3], #1
2000d230:	9100      	str	r1, [sp, #0]
2000d232:	2830      	cmp	r0, #48	; 0x30
2000d234:	d0f8      	beq.n	2000d228 <__gethex+0x3c>
2000d236:	f7ff ffc3 	bl	2000d1c0 <__hexdig_fun>
2000d23a:	4604      	mov	r4, r0
2000d23c:	2800      	cmp	r0, #0
2000d23e:	d13a      	bne.n	2000d2b6 <__gethex+0xca>
2000d240:	9901      	ldr	r1, [sp, #4]
2000d242:	4652      	mov	r2, sl
2000d244:	4638      	mov	r0, r7
2000d246:	f001 fac7 	bl	2000e7d8 <strncmp>
2000d24a:	4605      	mov	r5, r0
2000d24c:	2800      	cmp	r0, #0
2000d24e:	d168      	bne.n	2000d322 <__gethex+0x136>
2000d250:	f817 000a 	ldrb.w	r0, [r7, sl]
2000d254:	eb07 060a 	add.w	r6, r7, sl
2000d258:	f7ff ffb2 	bl	2000d1c0 <__hexdig_fun>
2000d25c:	2800      	cmp	r0, #0
2000d25e:	d062      	beq.n	2000d326 <__gethex+0x13a>
2000d260:	4633      	mov	r3, r6
2000d262:	7818      	ldrb	r0, [r3, #0]
2000d264:	2830      	cmp	r0, #48	; 0x30
2000d266:	461f      	mov	r7, r3
2000d268:	f103 0301 	add.w	r3, r3, #1
2000d26c:	d0f9      	beq.n	2000d262 <__gethex+0x76>
2000d26e:	f7ff ffa7 	bl	2000d1c0 <__hexdig_fun>
2000d272:	2301      	movs	r3, #1
2000d274:	fab0 f480 	clz	r4, r0
2000d278:	0964      	lsrs	r4, r4, #5
2000d27a:	4635      	mov	r5, r6
2000d27c:	9300      	str	r3, [sp, #0]
2000d27e:	463a      	mov	r2, r7
2000d280:	4616      	mov	r6, r2
2000d282:	3201      	adds	r2, #1
2000d284:	7830      	ldrb	r0, [r6, #0]
2000d286:	f7ff ff9b 	bl	2000d1c0 <__hexdig_fun>
2000d28a:	2800      	cmp	r0, #0
2000d28c:	d1f8      	bne.n	2000d280 <__gethex+0x94>
2000d28e:	9901      	ldr	r1, [sp, #4]
2000d290:	4652      	mov	r2, sl
2000d292:	4630      	mov	r0, r6
2000d294:	f001 faa0 	bl	2000e7d8 <strncmp>
2000d298:	b980      	cbnz	r0, 2000d2bc <__gethex+0xd0>
2000d29a:	b94d      	cbnz	r5, 2000d2b0 <__gethex+0xc4>
2000d29c:	eb06 050a 	add.w	r5, r6, sl
2000d2a0:	462a      	mov	r2, r5
2000d2a2:	4616      	mov	r6, r2
2000d2a4:	3201      	adds	r2, #1
2000d2a6:	7830      	ldrb	r0, [r6, #0]
2000d2a8:	f7ff ff8a 	bl	2000d1c0 <__hexdig_fun>
2000d2ac:	2800      	cmp	r0, #0
2000d2ae:	d1f8      	bne.n	2000d2a2 <__gethex+0xb6>
2000d2b0:	1bad      	subs	r5, r5, r6
2000d2b2:	00ad      	lsls	r5, r5, #2
2000d2b4:	e004      	b.n	2000d2c0 <__gethex+0xd4>
2000d2b6:	2400      	movs	r4, #0
2000d2b8:	4625      	mov	r5, r4
2000d2ba:	e7e0      	b.n	2000d27e <__gethex+0x92>
2000d2bc:	2d00      	cmp	r5, #0
2000d2be:	d1f7      	bne.n	2000d2b0 <__gethex+0xc4>
2000d2c0:	7833      	ldrb	r3, [r6, #0]
2000d2c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
2000d2c6:	2b50      	cmp	r3, #80	; 0x50
2000d2c8:	d13b      	bne.n	2000d342 <__gethex+0x156>
2000d2ca:	7873      	ldrb	r3, [r6, #1]
2000d2cc:	2b2b      	cmp	r3, #43	; 0x2b
2000d2ce:	d02c      	beq.n	2000d32a <__gethex+0x13e>
2000d2d0:	2b2d      	cmp	r3, #45	; 0x2d
2000d2d2:	d02e      	beq.n	2000d332 <__gethex+0x146>
2000d2d4:	1c71      	adds	r1, r6, #1
2000d2d6:	f04f 0900 	mov.w	r9, #0
2000d2da:	7808      	ldrb	r0, [r1, #0]
2000d2dc:	f7ff ff70 	bl	2000d1c0 <__hexdig_fun>
2000d2e0:	1e43      	subs	r3, r0, #1
2000d2e2:	b2db      	uxtb	r3, r3
2000d2e4:	2b18      	cmp	r3, #24
2000d2e6:	d82c      	bhi.n	2000d342 <__gethex+0x156>
2000d2e8:	f1a0 0210 	sub.w	r2, r0, #16
2000d2ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
2000d2f0:	f7ff ff66 	bl	2000d1c0 <__hexdig_fun>
2000d2f4:	1e43      	subs	r3, r0, #1
2000d2f6:	b2db      	uxtb	r3, r3
2000d2f8:	2b18      	cmp	r3, #24
2000d2fa:	d91d      	bls.n	2000d338 <__gethex+0x14c>
2000d2fc:	f1b9 0f00 	cmp.w	r9, #0
2000d300:	d000      	beq.n	2000d304 <__gethex+0x118>
2000d302:	4252      	negs	r2, r2
2000d304:	4415      	add	r5, r2
2000d306:	f8cb 1000 	str.w	r1, [fp]
2000d30a:	b1e4      	cbz	r4, 2000d346 <__gethex+0x15a>
2000d30c:	9b00      	ldr	r3, [sp, #0]
2000d30e:	2b00      	cmp	r3, #0
2000d310:	bf14      	ite	ne
2000d312:	2700      	movne	r7, #0
2000d314:	2706      	moveq	r7, #6
2000d316:	4638      	mov	r0, r7
2000d318:	b009      	add	sp, #36	; 0x24
2000d31a:	ecbd 8b02 	vpop	{d8}
2000d31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000d322:	463e      	mov	r6, r7
2000d324:	4625      	mov	r5, r4
2000d326:	2401      	movs	r4, #1
2000d328:	e7ca      	b.n	2000d2c0 <__gethex+0xd4>
2000d32a:	f04f 0900 	mov.w	r9, #0
2000d32e:	1cb1      	adds	r1, r6, #2
2000d330:	e7d3      	b.n	2000d2da <__gethex+0xee>
2000d332:	f04f 0901 	mov.w	r9, #1
2000d336:	e7fa      	b.n	2000d32e <__gethex+0x142>
2000d338:	230a      	movs	r3, #10
2000d33a:	fb03 0202 	mla	r2, r3, r2, r0
2000d33e:	3a10      	subs	r2, #16
2000d340:	e7d4      	b.n	2000d2ec <__gethex+0x100>
2000d342:	4631      	mov	r1, r6
2000d344:	e7df      	b.n	2000d306 <__gethex+0x11a>
2000d346:	1bf3      	subs	r3, r6, r7
2000d348:	3b01      	subs	r3, #1
2000d34a:	4621      	mov	r1, r4
2000d34c:	2b07      	cmp	r3, #7
2000d34e:	dc0b      	bgt.n	2000d368 <__gethex+0x17c>
2000d350:	ee18 0a10 	vmov	r0, s16
2000d354:	f000 fac6 	bl	2000d8e4 <_Balloc>
2000d358:	4604      	mov	r4, r0
2000d35a:	b940      	cbnz	r0, 2000d36e <__gethex+0x182>
2000d35c:	4b65      	ldr	r3, [pc, #404]	; (2000d4f4 <__gethex+0x308>)
2000d35e:	4602      	mov	r2, r0
2000d360:	21de      	movs	r1, #222	; 0xde
2000d362:	4865      	ldr	r0, [pc, #404]	; (2000d4f8 <__gethex+0x30c>)
2000d364:	f001 fa62 	bl	2000e82c <__assert_func>
2000d368:	3101      	adds	r1, #1
2000d36a:	105b      	asrs	r3, r3, #1
2000d36c:	e7ee      	b.n	2000d34c <__gethex+0x160>
2000d36e:	f100 0914 	add.w	r9, r0, #20
2000d372:	f04f 0b00 	mov.w	fp, #0
2000d376:	f1ca 0301 	rsb	r3, sl, #1
2000d37a:	f8cd 9008 	str.w	r9, [sp, #8]
2000d37e:	f8cd b000 	str.w	fp, [sp]
2000d382:	9306      	str	r3, [sp, #24]
2000d384:	42b7      	cmp	r7, r6
2000d386:	d340      	bcc.n	2000d40a <__gethex+0x21e>
2000d388:	9802      	ldr	r0, [sp, #8]
2000d38a:	9b00      	ldr	r3, [sp, #0]
2000d38c:	f840 3b04 	str.w	r3, [r0], #4
2000d390:	eba0 0009 	sub.w	r0, r0, r9
2000d394:	1080      	asrs	r0, r0, #2
2000d396:	0146      	lsls	r6, r0, #5
2000d398:	6120      	str	r0, [r4, #16]
2000d39a:	4618      	mov	r0, r3
2000d39c:	f000 fb98 	bl	2000dad0 <__hi0bits>
2000d3a0:	1a30      	subs	r0, r6, r0
2000d3a2:	f8d8 6000 	ldr.w	r6, [r8]
2000d3a6:	42b0      	cmp	r0, r6
2000d3a8:	dd63      	ble.n	2000d472 <__gethex+0x286>
2000d3aa:	1b87      	subs	r7, r0, r6
2000d3ac:	4639      	mov	r1, r7
2000d3ae:	4620      	mov	r0, r4
2000d3b0:	f000 ff47 	bl	2000e242 <__any_on>
2000d3b4:	4682      	mov	sl, r0
2000d3b6:	b1a8      	cbz	r0, 2000d3e4 <__gethex+0x1f8>
2000d3b8:	1e7b      	subs	r3, r7, #1
2000d3ba:	1159      	asrs	r1, r3, #5
2000d3bc:	f003 021f 	and.w	r2, r3, #31
2000d3c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
2000d3c4:	f04f 0a01 	mov.w	sl, #1
2000d3c8:	fa0a f202 	lsl.w	r2, sl, r2
2000d3cc:	420a      	tst	r2, r1
2000d3ce:	d009      	beq.n	2000d3e4 <__gethex+0x1f8>
2000d3d0:	4553      	cmp	r3, sl
2000d3d2:	dd05      	ble.n	2000d3e0 <__gethex+0x1f4>
2000d3d4:	1eb9      	subs	r1, r7, #2
2000d3d6:	4620      	mov	r0, r4
2000d3d8:	f000 ff33 	bl	2000e242 <__any_on>
2000d3dc:	2800      	cmp	r0, #0
2000d3de:	d145      	bne.n	2000d46c <__gethex+0x280>
2000d3e0:	f04f 0a02 	mov.w	sl, #2
2000d3e4:	4639      	mov	r1, r7
2000d3e6:	4620      	mov	r0, r4
2000d3e8:	f7ff fe98 	bl	2000d11c <rshift>
2000d3ec:	443d      	add	r5, r7
2000d3ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
2000d3f2:	42ab      	cmp	r3, r5
2000d3f4:	da4c      	bge.n	2000d490 <__gethex+0x2a4>
2000d3f6:	ee18 0a10 	vmov	r0, s16
2000d3fa:	4621      	mov	r1, r4
2000d3fc:	f000 fab2 	bl	2000d964 <_Bfree>
2000d400:	9a14      	ldr	r2, [sp, #80]	; 0x50
2000d402:	2300      	movs	r3, #0
2000d404:	6013      	str	r3, [r2, #0]
2000d406:	27a3      	movs	r7, #163	; 0xa3
2000d408:	e785      	b.n	2000d316 <__gethex+0x12a>
2000d40a:	1e73      	subs	r3, r6, #1
2000d40c:	9a05      	ldr	r2, [sp, #20]
2000d40e:	9303      	str	r3, [sp, #12]
2000d410:	f816 3c01 	ldrb.w	r3, [r6, #-1]
2000d414:	4293      	cmp	r3, r2
2000d416:	d019      	beq.n	2000d44c <__gethex+0x260>
2000d418:	f1bb 0f20 	cmp.w	fp, #32
2000d41c:	d107      	bne.n	2000d42e <__gethex+0x242>
2000d41e:	9b02      	ldr	r3, [sp, #8]
2000d420:	9a00      	ldr	r2, [sp, #0]
2000d422:	f843 2b04 	str.w	r2, [r3], #4
2000d426:	9302      	str	r3, [sp, #8]
2000d428:	2300      	movs	r3, #0
2000d42a:	9300      	str	r3, [sp, #0]
2000d42c:	469b      	mov	fp, r3
2000d42e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
2000d432:	f7ff fec5 	bl	2000d1c0 <__hexdig_fun>
2000d436:	9b00      	ldr	r3, [sp, #0]
2000d438:	f000 000f 	and.w	r0, r0, #15
2000d43c:	fa00 f00b 	lsl.w	r0, r0, fp
2000d440:	4303      	orrs	r3, r0
2000d442:	9300      	str	r3, [sp, #0]
2000d444:	f10b 0b04 	add.w	fp, fp, #4
2000d448:	9b03      	ldr	r3, [sp, #12]
2000d44a:	e00d      	b.n	2000d468 <__gethex+0x27c>
2000d44c:	9b03      	ldr	r3, [sp, #12]
2000d44e:	9a06      	ldr	r2, [sp, #24]
2000d450:	4413      	add	r3, r2
2000d452:	42bb      	cmp	r3, r7
2000d454:	d3e0      	bcc.n	2000d418 <__gethex+0x22c>
2000d456:	4618      	mov	r0, r3
2000d458:	9901      	ldr	r1, [sp, #4]
2000d45a:	9307      	str	r3, [sp, #28]
2000d45c:	4652      	mov	r2, sl
2000d45e:	f001 f9bb 	bl	2000e7d8 <strncmp>
2000d462:	9b07      	ldr	r3, [sp, #28]
2000d464:	2800      	cmp	r0, #0
2000d466:	d1d7      	bne.n	2000d418 <__gethex+0x22c>
2000d468:	461e      	mov	r6, r3
2000d46a:	e78b      	b.n	2000d384 <__gethex+0x198>
2000d46c:	f04f 0a03 	mov.w	sl, #3
2000d470:	e7b8      	b.n	2000d3e4 <__gethex+0x1f8>
2000d472:	da0a      	bge.n	2000d48a <__gethex+0x29e>
2000d474:	1a37      	subs	r7, r6, r0
2000d476:	4621      	mov	r1, r4
2000d478:	ee18 0a10 	vmov	r0, s16
2000d47c:	463a      	mov	r2, r7
2000d47e:	f000 fc8d 	bl	2000dd9c <__lshift>
2000d482:	1bed      	subs	r5, r5, r7
2000d484:	4604      	mov	r4, r0
2000d486:	f100 0914 	add.w	r9, r0, #20
2000d48a:	f04f 0a00 	mov.w	sl, #0
2000d48e:	e7ae      	b.n	2000d3ee <__gethex+0x202>
2000d490:	f8d8 0004 	ldr.w	r0, [r8, #4]
2000d494:	42a8      	cmp	r0, r5
2000d496:	dd72      	ble.n	2000d57e <__gethex+0x392>
2000d498:	1b45      	subs	r5, r0, r5
2000d49a:	42ae      	cmp	r6, r5
2000d49c:	dc36      	bgt.n	2000d50c <__gethex+0x320>
2000d49e:	f8d8 300c 	ldr.w	r3, [r8, #12]
2000d4a2:	2b02      	cmp	r3, #2
2000d4a4:	d02a      	beq.n	2000d4fc <__gethex+0x310>
2000d4a6:	2b03      	cmp	r3, #3
2000d4a8:	d02c      	beq.n	2000d504 <__gethex+0x318>
2000d4aa:	2b01      	cmp	r3, #1
2000d4ac:	d115      	bne.n	2000d4da <__gethex+0x2ee>
2000d4ae:	42ae      	cmp	r6, r5
2000d4b0:	d113      	bne.n	2000d4da <__gethex+0x2ee>
2000d4b2:	2e01      	cmp	r6, #1
2000d4b4:	d10b      	bne.n	2000d4ce <__gethex+0x2e2>
2000d4b6:	9a04      	ldr	r2, [sp, #16]
2000d4b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
2000d4bc:	6013      	str	r3, [r2, #0]
2000d4be:	2301      	movs	r3, #1
2000d4c0:	6123      	str	r3, [r4, #16]
2000d4c2:	f8c9 3000 	str.w	r3, [r9]
2000d4c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
2000d4c8:	2762      	movs	r7, #98	; 0x62
2000d4ca:	601c      	str	r4, [r3, #0]
2000d4cc:	e723      	b.n	2000d316 <__gethex+0x12a>
2000d4ce:	1e71      	subs	r1, r6, #1
2000d4d0:	4620      	mov	r0, r4
2000d4d2:	f000 feb6 	bl	2000e242 <__any_on>
2000d4d6:	2800      	cmp	r0, #0
2000d4d8:	d1ed      	bne.n	2000d4b6 <__gethex+0x2ca>
2000d4da:	ee18 0a10 	vmov	r0, s16
2000d4de:	4621      	mov	r1, r4
2000d4e0:	f000 fa40 	bl	2000d964 <_Bfree>
2000d4e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
2000d4e6:	2300      	movs	r3, #0
2000d4e8:	6013      	str	r3, [r2, #0]
2000d4ea:	2750      	movs	r7, #80	; 0x50
2000d4ec:	e713      	b.n	2000d316 <__gethex+0x12a>
2000d4ee:	bf00      	nop
2000d4f0:	2000fca8 	.word	0x2000fca8
2000d4f4:	2000fc2c 	.word	0x2000fc2c
2000d4f8:	2000fc3d 	.word	0x2000fc3d
2000d4fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
2000d4fe:	2b00      	cmp	r3, #0
2000d500:	d1eb      	bne.n	2000d4da <__gethex+0x2ee>
2000d502:	e7d8      	b.n	2000d4b6 <__gethex+0x2ca>
2000d504:	9b15      	ldr	r3, [sp, #84]	; 0x54
2000d506:	2b00      	cmp	r3, #0
2000d508:	d1d5      	bne.n	2000d4b6 <__gethex+0x2ca>
2000d50a:	e7e6      	b.n	2000d4da <__gethex+0x2ee>
2000d50c:	1e6f      	subs	r7, r5, #1
2000d50e:	f1ba 0f00 	cmp.w	sl, #0
2000d512:	d131      	bne.n	2000d578 <__gethex+0x38c>
2000d514:	b127      	cbz	r7, 2000d520 <__gethex+0x334>
2000d516:	4639      	mov	r1, r7
2000d518:	4620      	mov	r0, r4
2000d51a:	f000 fe92 	bl	2000e242 <__any_on>
2000d51e:	4682      	mov	sl, r0
2000d520:	117b      	asrs	r3, r7, #5
2000d522:	2101      	movs	r1, #1
2000d524:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
2000d528:	f007 071f 	and.w	r7, r7, #31
2000d52c:	fa01 f707 	lsl.w	r7, r1, r7
2000d530:	421f      	tst	r7, r3
2000d532:	4629      	mov	r1, r5
2000d534:	4620      	mov	r0, r4
2000d536:	bf18      	it	ne
2000d538:	f04a 0a02 	orrne.w	sl, sl, #2
2000d53c:	1b76      	subs	r6, r6, r5
2000d53e:	f7ff fded 	bl	2000d11c <rshift>
2000d542:	f8d8 5004 	ldr.w	r5, [r8, #4]
2000d546:	2702      	movs	r7, #2
2000d548:	f1ba 0f00 	cmp.w	sl, #0
2000d54c:	d048      	beq.n	2000d5e0 <__gethex+0x3f4>
2000d54e:	f8d8 300c 	ldr.w	r3, [r8, #12]
2000d552:	2b02      	cmp	r3, #2
2000d554:	d015      	beq.n	2000d582 <__gethex+0x396>
2000d556:	2b03      	cmp	r3, #3
2000d558:	d017      	beq.n	2000d58a <__gethex+0x39e>
2000d55a:	2b01      	cmp	r3, #1
2000d55c:	d109      	bne.n	2000d572 <__gethex+0x386>
2000d55e:	f01a 0f02 	tst.w	sl, #2
2000d562:	d006      	beq.n	2000d572 <__gethex+0x386>
2000d564:	f8d9 0000 	ldr.w	r0, [r9]
2000d568:	ea4a 0a00 	orr.w	sl, sl, r0
2000d56c:	f01a 0f01 	tst.w	sl, #1
2000d570:	d10e      	bne.n	2000d590 <__gethex+0x3a4>
2000d572:	f047 0710 	orr.w	r7, r7, #16
2000d576:	e033      	b.n	2000d5e0 <__gethex+0x3f4>
2000d578:	f04f 0a01 	mov.w	sl, #1
2000d57c:	e7d0      	b.n	2000d520 <__gethex+0x334>
2000d57e:	2701      	movs	r7, #1
2000d580:	e7e2      	b.n	2000d548 <__gethex+0x35c>
2000d582:	9b15      	ldr	r3, [sp, #84]	; 0x54
2000d584:	f1c3 0301 	rsb	r3, r3, #1
2000d588:	9315      	str	r3, [sp, #84]	; 0x54
2000d58a:	9b15      	ldr	r3, [sp, #84]	; 0x54
2000d58c:	2b00      	cmp	r3, #0
2000d58e:	d0f0      	beq.n	2000d572 <__gethex+0x386>
2000d590:	f8d4 b010 	ldr.w	fp, [r4, #16]
2000d594:	f104 0314 	add.w	r3, r4, #20
2000d598:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
2000d59c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
2000d5a0:	f04f 0c00 	mov.w	ip, #0
2000d5a4:	4618      	mov	r0, r3
2000d5a6:	f853 2b04 	ldr.w	r2, [r3], #4
2000d5aa:	f1b2 3fff 	cmp.w	r2, #4294967295
2000d5ae:	d01c      	beq.n	2000d5ea <__gethex+0x3fe>
2000d5b0:	3201      	adds	r2, #1
2000d5b2:	6002      	str	r2, [r0, #0]
2000d5b4:	2f02      	cmp	r7, #2
2000d5b6:	f104 0314 	add.w	r3, r4, #20
2000d5ba:	d13f      	bne.n	2000d63c <__gethex+0x450>
2000d5bc:	f8d8 2000 	ldr.w	r2, [r8]
2000d5c0:	3a01      	subs	r2, #1
2000d5c2:	42b2      	cmp	r2, r6
2000d5c4:	d10a      	bne.n	2000d5dc <__gethex+0x3f0>
2000d5c6:	1171      	asrs	r1, r6, #5
2000d5c8:	2201      	movs	r2, #1
2000d5ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
2000d5ce:	f006 061f 	and.w	r6, r6, #31
2000d5d2:	fa02 f606 	lsl.w	r6, r2, r6
2000d5d6:	421e      	tst	r6, r3
2000d5d8:	bf18      	it	ne
2000d5da:	4617      	movne	r7, r2
2000d5dc:	f047 0720 	orr.w	r7, r7, #32
2000d5e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
2000d5e2:	601c      	str	r4, [r3, #0]
2000d5e4:	9b04      	ldr	r3, [sp, #16]
2000d5e6:	601d      	str	r5, [r3, #0]
2000d5e8:	e695      	b.n	2000d316 <__gethex+0x12a>
2000d5ea:	4299      	cmp	r1, r3
2000d5ec:	f843 cc04 	str.w	ip, [r3, #-4]
2000d5f0:	d8d8      	bhi.n	2000d5a4 <__gethex+0x3b8>
2000d5f2:	68a3      	ldr	r3, [r4, #8]
2000d5f4:	459b      	cmp	fp, r3
2000d5f6:	db19      	blt.n	2000d62c <__gethex+0x440>
2000d5f8:	6861      	ldr	r1, [r4, #4]
2000d5fa:	ee18 0a10 	vmov	r0, s16
2000d5fe:	3101      	adds	r1, #1
2000d600:	f000 f970 	bl	2000d8e4 <_Balloc>
2000d604:	4681      	mov	r9, r0
2000d606:	b918      	cbnz	r0, 2000d610 <__gethex+0x424>
2000d608:	4b1a      	ldr	r3, [pc, #104]	; (2000d674 <__gethex+0x488>)
2000d60a:	4602      	mov	r2, r0
2000d60c:	2184      	movs	r1, #132	; 0x84
2000d60e:	e6a8      	b.n	2000d362 <__gethex+0x176>
2000d610:	6922      	ldr	r2, [r4, #16]
2000d612:	3202      	adds	r2, #2
2000d614:	f104 010c 	add.w	r1, r4, #12
2000d618:	0092      	lsls	r2, r2, #2
2000d61a:	300c      	adds	r0, #12
2000d61c:	f000 f954 	bl	2000d8c8 <memcpy>
2000d620:	4621      	mov	r1, r4
2000d622:	ee18 0a10 	vmov	r0, s16
2000d626:	f000 f99d 	bl	2000d964 <_Bfree>
2000d62a:	464c      	mov	r4, r9
2000d62c:	6923      	ldr	r3, [r4, #16]
2000d62e:	1c5a      	adds	r2, r3, #1
2000d630:	eb04 0383 	add.w	r3, r4, r3, lsl #2
2000d634:	6122      	str	r2, [r4, #16]
2000d636:	2201      	movs	r2, #1
2000d638:	615a      	str	r2, [r3, #20]
2000d63a:	e7bb      	b.n	2000d5b4 <__gethex+0x3c8>
2000d63c:	6922      	ldr	r2, [r4, #16]
2000d63e:	455a      	cmp	r2, fp
2000d640:	dd0b      	ble.n	2000d65a <__gethex+0x46e>
2000d642:	2101      	movs	r1, #1
2000d644:	4620      	mov	r0, r4
2000d646:	f7ff fd69 	bl	2000d11c <rshift>
2000d64a:	f8d8 3008 	ldr.w	r3, [r8, #8]
2000d64e:	3501      	adds	r5, #1
2000d650:	42ab      	cmp	r3, r5
2000d652:	f6ff aed0 	blt.w	2000d3f6 <__gethex+0x20a>
2000d656:	2701      	movs	r7, #1
2000d658:	e7c0      	b.n	2000d5dc <__gethex+0x3f0>
2000d65a:	f016 061f 	ands.w	r6, r6, #31
2000d65e:	d0fa      	beq.n	2000d656 <__gethex+0x46a>
2000d660:	449a      	add	sl, r3
2000d662:	f1c6 0620 	rsb	r6, r6, #32
2000d666:	f85a 0c04 	ldr.w	r0, [sl, #-4]
2000d66a:	f000 fa31 	bl	2000dad0 <__hi0bits>
2000d66e:	42b0      	cmp	r0, r6
2000d670:	dbe7      	blt.n	2000d642 <__gethex+0x456>
2000d672:	e7f0      	b.n	2000d656 <__gethex+0x46a>
2000d674:	2000fc2c 	.word	0x2000fc2c

2000d678 <L_shift>:
2000d678:	f1c2 0208 	rsb	r2, r2, #8
2000d67c:	0092      	lsls	r2, r2, #2
2000d67e:	b570      	push	{r4, r5, r6, lr}
2000d680:	f1c2 0620 	rsb	r6, r2, #32
2000d684:	6843      	ldr	r3, [r0, #4]
2000d686:	6804      	ldr	r4, [r0, #0]
2000d688:	fa03 f506 	lsl.w	r5, r3, r6
2000d68c:	432c      	orrs	r4, r5
2000d68e:	40d3      	lsrs	r3, r2
2000d690:	6004      	str	r4, [r0, #0]
2000d692:	f840 3f04 	str.w	r3, [r0, #4]!
2000d696:	4288      	cmp	r0, r1
2000d698:	d3f4      	bcc.n	2000d684 <L_shift+0xc>
2000d69a:	bd70      	pop	{r4, r5, r6, pc}

2000d69c <__match>:
2000d69c:	b530      	push	{r4, r5, lr}
2000d69e:	6803      	ldr	r3, [r0, #0]
2000d6a0:	3301      	adds	r3, #1
2000d6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
2000d6a6:	b914      	cbnz	r4, 2000d6ae <__match+0x12>
2000d6a8:	6003      	str	r3, [r0, #0]
2000d6aa:	2001      	movs	r0, #1
2000d6ac:	bd30      	pop	{r4, r5, pc}
2000d6ae:	f813 2b01 	ldrb.w	r2, [r3], #1
2000d6b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
2000d6b6:	2d19      	cmp	r5, #25
2000d6b8:	bf98      	it	ls
2000d6ba:	3220      	addls	r2, #32
2000d6bc:	42a2      	cmp	r2, r4
2000d6be:	d0f0      	beq.n	2000d6a2 <__match+0x6>
2000d6c0:	2000      	movs	r0, #0
2000d6c2:	e7f3      	b.n	2000d6ac <__match+0x10>

2000d6c4 <__hexnan>:
2000d6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000d6c8:	680b      	ldr	r3, [r1, #0]
2000d6ca:	6801      	ldr	r1, [r0, #0]
2000d6cc:	115e      	asrs	r6, r3, #5
2000d6ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
2000d6d2:	f013 031f 	ands.w	r3, r3, #31
2000d6d6:	b087      	sub	sp, #28
2000d6d8:	bf18      	it	ne
2000d6da:	3604      	addne	r6, #4
2000d6dc:	2500      	movs	r5, #0
2000d6de:	1f37      	subs	r7, r6, #4
2000d6e0:	4682      	mov	sl, r0
2000d6e2:	4690      	mov	r8, r2
2000d6e4:	9301      	str	r3, [sp, #4]
2000d6e6:	f846 5c04 	str.w	r5, [r6, #-4]
2000d6ea:	46b9      	mov	r9, r7
2000d6ec:	463c      	mov	r4, r7
2000d6ee:	9502      	str	r5, [sp, #8]
2000d6f0:	46ab      	mov	fp, r5
2000d6f2:	784a      	ldrb	r2, [r1, #1]
2000d6f4:	1c4b      	adds	r3, r1, #1
2000d6f6:	9303      	str	r3, [sp, #12]
2000d6f8:	b342      	cbz	r2, 2000d74c <__hexnan+0x88>
2000d6fa:	4610      	mov	r0, r2
2000d6fc:	9105      	str	r1, [sp, #20]
2000d6fe:	9204      	str	r2, [sp, #16]
2000d700:	f7ff fd5e 	bl	2000d1c0 <__hexdig_fun>
2000d704:	2800      	cmp	r0, #0
2000d706:	d14f      	bne.n	2000d7a8 <__hexnan+0xe4>
2000d708:	9a04      	ldr	r2, [sp, #16]
2000d70a:	9905      	ldr	r1, [sp, #20]
2000d70c:	2a20      	cmp	r2, #32
2000d70e:	d818      	bhi.n	2000d742 <__hexnan+0x7e>
2000d710:	9b02      	ldr	r3, [sp, #8]
2000d712:	459b      	cmp	fp, r3
2000d714:	dd13      	ble.n	2000d73e <__hexnan+0x7a>
2000d716:	454c      	cmp	r4, r9
2000d718:	d206      	bcs.n	2000d728 <__hexnan+0x64>
2000d71a:	2d07      	cmp	r5, #7
2000d71c:	dc04      	bgt.n	2000d728 <__hexnan+0x64>
2000d71e:	462a      	mov	r2, r5
2000d720:	4649      	mov	r1, r9
2000d722:	4620      	mov	r0, r4
2000d724:	f7ff ffa8 	bl	2000d678 <L_shift>
2000d728:	4544      	cmp	r4, r8
2000d72a:	d950      	bls.n	2000d7ce <__hexnan+0x10a>
2000d72c:	2300      	movs	r3, #0
2000d72e:	f1a4 0904 	sub.w	r9, r4, #4
2000d732:	f844 3c04 	str.w	r3, [r4, #-4]
2000d736:	f8cd b008 	str.w	fp, [sp, #8]
2000d73a:	464c      	mov	r4, r9
2000d73c:	461d      	mov	r5, r3
2000d73e:	9903      	ldr	r1, [sp, #12]
2000d740:	e7d7      	b.n	2000d6f2 <__hexnan+0x2e>
2000d742:	2a29      	cmp	r2, #41	; 0x29
2000d744:	d156      	bne.n	2000d7f4 <__hexnan+0x130>
2000d746:	3102      	adds	r1, #2
2000d748:	f8ca 1000 	str.w	r1, [sl]
2000d74c:	f1bb 0f00 	cmp.w	fp, #0
2000d750:	d050      	beq.n	2000d7f4 <__hexnan+0x130>
2000d752:	454c      	cmp	r4, r9
2000d754:	d206      	bcs.n	2000d764 <__hexnan+0xa0>
2000d756:	2d07      	cmp	r5, #7
2000d758:	dc04      	bgt.n	2000d764 <__hexnan+0xa0>
2000d75a:	462a      	mov	r2, r5
2000d75c:	4649      	mov	r1, r9
2000d75e:	4620      	mov	r0, r4
2000d760:	f7ff ff8a 	bl	2000d678 <L_shift>
2000d764:	4544      	cmp	r4, r8
2000d766:	d934      	bls.n	2000d7d2 <__hexnan+0x10e>
2000d768:	f1a8 0204 	sub.w	r2, r8, #4
2000d76c:	4623      	mov	r3, r4
2000d76e:	f853 1b04 	ldr.w	r1, [r3], #4
2000d772:	f842 1f04 	str.w	r1, [r2, #4]!
2000d776:	429f      	cmp	r7, r3
2000d778:	d2f9      	bcs.n	2000d76e <__hexnan+0xaa>
2000d77a:	1b3b      	subs	r3, r7, r4
2000d77c:	f023 0303 	bic.w	r3, r3, #3
2000d780:	3304      	adds	r3, #4
2000d782:	3401      	adds	r4, #1
2000d784:	3e03      	subs	r6, #3
2000d786:	42b4      	cmp	r4, r6
2000d788:	bf88      	it	hi
2000d78a:	2304      	movhi	r3, #4
2000d78c:	4443      	add	r3, r8
2000d78e:	2200      	movs	r2, #0
2000d790:	f843 2b04 	str.w	r2, [r3], #4
2000d794:	429f      	cmp	r7, r3
2000d796:	d2fb      	bcs.n	2000d790 <__hexnan+0xcc>
2000d798:	683b      	ldr	r3, [r7, #0]
2000d79a:	b91b      	cbnz	r3, 2000d7a4 <__hexnan+0xe0>
2000d79c:	4547      	cmp	r7, r8
2000d79e:	d127      	bne.n	2000d7f0 <__hexnan+0x12c>
2000d7a0:	2301      	movs	r3, #1
2000d7a2:	603b      	str	r3, [r7, #0]
2000d7a4:	2005      	movs	r0, #5
2000d7a6:	e026      	b.n	2000d7f6 <__hexnan+0x132>
2000d7a8:	3501      	adds	r5, #1
2000d7aa:	2d08      	cmp	r5, #8
2000d7ac:	f10b 0b01 	add.w	fp, fp, #1
2000d7b0:	dd06      	ble.n	2000d7c0 <__hexnan+0xfc>
2000d7b2:	4544      	cmp	r4, r8
2000d7b4:	d9c3      	bls.n	2000d73e <__hexnan+0x7a>
2000d7b6:	2300      	movs	r3, #0
2000d7b8:	f844 3c04 	str.w	r3, [r4, #-4]
2000d7bc:	2501      	movs	r5, #1
2000d7be:	3c04      	subs	r4, #4
2000d7c0:	6822      	ldr	r2, [r4, #0]
2000d7c2:	f000 000f 	and.w	r0, r0, #15
2000d7c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
2000d7ca:	6022      	str	r2, [r4, #0]
2000d7cc:	e7b7      	b.n	2000d73e <__hexnan+0x7a>
2000d7ce:	2508      	movs	r5, #8
2000d7d0:	e7b5      	b.n	2000d73e <__hexnan+0x7a>
2000d7d2:	9b01      	ldr	r3, [sp, #4]
2000d7d4:	2b00      	cmp	r3, #0
2000d7d6:	d0df      	beq.n	2000d798 <__hexnan+0xd4>
2000d7d8:	f04f 32ff 	mov.w	r2, #4294967295
2000d7dc:	f1c3 0320 	rsb	r3, r3, #32
2000d7e0:	fa22 f303 	lsr.w	r3, r2, r3
2000d7e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
2000d7e8:	401a      	ands	r2, r3
2000d7ea:	f846 2c04 	str.w	r2, [r6, #-4]
2000d7ee:	e7d3      	b.n	2000d798 <__hexnan+0xd4>
2000d7f0:	3f04      	subs	r7, #4
2000d7f2:	e7d1      	b.n	2000d798 <__hexnan+0xd4>
2000d7f4:	2004      	movs	r0, #4
2000d7f6:	b007      	add	sp, #28
2000d7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

2000d7fc <__numeric_load_locale>:
2000d7fc:	2000      	movs	r0, #0
2000d7fe:	4770      	bx	lr

2000d800 <_setlocale_r>:
2000d800:	b510      	push	{r4, lr}
2000d802:	4614      	mov	r4, r2
2000d804:	b90a      	cbnz	r2, 2000d80a <_setlocale_r+0xa>
2000d806:	480b      	ldr	r0, [pc, #44]	; (2000d834 <_setlocale_r+0x34>)
2000d808:	bd10      	pop	{r4, pc}
2000d80a:	490b      	ldr	r1, [pc, #44]	; (2000d838 <_setlocale_r+0x38>)
2000d80c:	4610      	mov	r0, r2
2000d80e:	f7f2 ff07 	bl	20000620 <strcmp>
2000d812:	2800      	cmp	r0, #0
2000d814:	d0f7      	beq.n	2000d806 <_setlocale_r+0x6>
2000d816:	4907      	ldr	r1, [pc, #28]	; (2000d834 <_setlocale_r+0x34>)
2000d818:	4620      	mov	r0, r4
2000d81a:	f7f2 ff01 	bl	20000620 <strcmp>
2000d81e:	2800      	cmp	r0, #0
2000d820:	d0f1      	beq.n	2000d806 <_setlocale_r+0x6>
2000d822:	4906      	ldr	r1, [pc, #24]	; (2000d83c <_setlocale_r+0x3c>)
2000d824:	4620      	mov	r0, r4
2000d826:	f7f2 fefb 	bl	20000620 <strcmp>
2000d82a:	2800      	cmp	r0, #0
2000d82c:	d0eb      	beq.n	2000d806 <_setlocale_r+0x6>
2000d82e:	2000      	movs	r0, #0
2000d830:	e7ea      	b.n	2000d808 <_setlocale_r+0x8>
2000d832:	bf00      	nop
2000d834:	2000fcb4 	.word	0x2000fcb4
2000d838:	2000fcb6 	.word	0x2000fcb6
2000d83c:	2000fe90 	.word	0x2000fe90

2000d840 <__locale_mb_cur_max>:
2000d840:	4b01      	ldr	r3, [pc, #4]	; (2000d848 <__locale_mb_cur_max+0x8>)
2000d842:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
2000d846:	4770      	bx	lr
2000d848:	2000028c 	.word	0x2000028c

2000d84c <setlocale>:
2000d84c:	4b02      	ldr	r3, [pc, #8]	; (2000d858 <setlocale+0xc>)
2000d84e:	460a      	mov	r2, r1
2000d850:	4601      	mov	r1, r0
2000d852:	6818      	ldr	r0, [r3, #0]
2000d854:	f7ff bfd4 	b.w	2000d800 <_setlocale_r>
2000d858:	20000224 	.word	0x20000224

2000d85c <__localeconv_l>:
2000d85c:	30f0      	adds	r0, #240	; 0xf0
2000d85e:	4770      	bx	lr

2000d860 <_localeconv_r>:
2000d860:	4800      	ldr	r0, [pc, #0]	; (2000d864 <_localeconv_r+0x4>)
2000d862:	4770      	bx	lr
2000d864:	2000037c 	.word	0x2000037c

2000d868 <localeconv>:
2000d868:	4800      	ldr	r0, [pc, #0]	; (2000d86c <localeconv+0x4>)
2000d86a:	4770      	bx	lr
2000d86c:	2000037c 	.word	0x2000037c

2000d870 <malloc>:
2000d870:	4b02      	ldr	r3, [pc, #8]	; (2000d87c <malloc+0xc>)
2000d872:	4601      	mov	r1, r0
2000d874:	6818      	ldr	r0, [r3, #0]
2000d876:	f000 bd65 	b.w	2000e344 <_malloc_r>
2000d87a:	bf00      	nop
2000d87c:	20000224 	.word	0x20000224

2000d880 <free>:
2000d880:	4b02      	ldr	r3, [pc, #8]	; (2000d88c <free+0xc>)
2000d882:	4601      	mov	r1, r0
2000d884:	6818      	ldr	r0, [r3, #0]
2000d886:	f000 bd0d 	b.w	2000e2a4 <_free_r>
2000d88a:	bf00      	nop
2000d88c:	20000224 	.word	0x20000224

2000d890 <_mbtowc_r>:
2000d890:	b410      	push	{r4}
2000d892:	4c03      	ldr	r4, [pc, #12]	; (2000d8a0 <_mbtowc_r+0x10>)
2000d894:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
2000d898:	46a4      	mov	ip, r4
2000d89a:	f85d 4b04 	ldr.w	r4, [sp], #4
2000d89e:	4760      	bx	ip
2000d8a0:	2000028c 	.word	0x2000028c

2000d8a4 <__ascii_mbtowc>:
2000d8a4:	b082      	sub	sp, #8
2000d8a6:	b901      	cbnz	r1, 2000d8aa <__ascii_mbtowc+0x6>
2000d8a8:	a901      	add	r1, sp, #4
2000d8aa:	b142      	cbz	r2, 2000d8be <__ascii_mbtowc+0x1a>
2000d8ac:	b14b      	cbz	r3, 2000d8c2 <__ascii_mbtowc+0x1e>
2000d8ae:	7813      	ldrb	r3, [r2, #0]
2000d8b0:	600b      	str	r3, [r1, #0]
2000d8b2:	7812      	ldrb	r2, [r2, #0]
2000d8b4:	1e10      	subs	r0, r2, #0
2000d8b6:	bf18      	it	ne
2000d8b8:	2001      	movne	r0, #1
2000d8ba:	b002      	add	sp, #8
2000d8bc:	4770      	bx	lr
2000d8be:	4610      	mov	r0, r2
2000d8c0:	e7fb      	b.n	2000d8ba <__ascii_mbtowc+0x16>
2000d8c2:	f06f 0001 	mvn.w	r0, #1
2000d8c6:	e7f8      	b.n	2000d8ba <__ascii_mbtowc+0x16>

2000d8c8 <memcpy>:
2000d8c8:	440a      	add	r2, r1
2000d8ca:	4291      	cmp	r1, r2
2000d8cc:	f100 33ff 	add.w	r3, r0, #4294967295
2000d8d0:	d100      	bne.n	2000d8d4 <memcpy+0xc>
2000d8d2:	4770      	bx	lr
2000d8d4:	b510      	push	{r4, lr}
2000d8d6:	f811 4b01 	ldrb.w	r4, [r1], #1
2000d8da:	f803 4f01 	strb.w	r4, [r3, #1]!
2000d8de:	4291      	cmp	r1, r2
2000d8e0:	d1f9      	bne.n	2000d8d6 <memcpy+0xe>
2000d8e2:	bd10      	pop	{r4, pc}

2000d8e4 <_Balloc>:
2000d8e4:	b570      	push	{r4, r5, r6, lr}
2000d8e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
2000d8e8:	4604      	mov	r4, r0
2000d8ea:	460d      	mov	r5, r1
2000d8ec:	b976      	cbnz	r6, 2000d90c <_Balloc+0x28>
2000d8ee:	2010      	movs	r0, #16
2000d8f0:	f7ff ffbe 	bl	2000d870 <malloc>
2000d8f4:	4602      	mov	r2, r0
2000d8f6:	6260      	str	r0, [r4, #36]	; 0x24
2000d8f8:	b920      	cbnz	r0, 2000d904 <_Balloc+0x20>
2000d8fa:	4b18      	ldr	r3, [pc, #96]	; (2000d95c <_Balloc+0x78>)
2000d8fc:	4818      	ldr	r0, [pc, #96]	; (2000d960 <_Balloc+0x7c>)
2000d8fe:	2166      	movs	r1, #102	; 0x66
2000d900:	f000 ff94 	bl	2000e82c <__assert_func>
2000d904:	e9c0 6601 	strd	r6, r6, [r0, #4]
2000d908:	6006      	str	r6, [r0, #0]
2000d90a:	60c6      	str	r6, [r0, #12]
2000d90c:	6a66      	ldr	r6, [r4, #36]	; 0x24
2000d90e:	68f3      	ldr	r3, [r6, #12]
2000d910:	b183      	cbz	r3, 2000d934 <_Balloc+0x50>
2000d912:	6a63      	ldr	r3, [r4, #36]	; 0x24
2000d914:	68db      	ldr	r3, [r3, #12]
2000d916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
2000d91a:	b9b8      	cbnz	r0, 2000d94c <_Balloc+0x68>
2000d91c:	2101      	movs	r1, #1
2000d91e:	fa01 f605 	lsl.w	r6, r1, r5
2000d922:	1d72      	adds	r2, r6, #5
2000d924:	0092      	lsls	r2, r2, #2
2000d926:	4620      	mov	r0, r4
2000d928:	f000 fcac 	bl	2000e284 <_calloc_r>
2000d92c:	b160      	cbz	r0, 2000d948 <_Balloc+0x64>
2000d92e:	e9c0 5601 	strd	r5, r6, [r0, #4]
2000d932:	e00e      	b.n	2000d952 <_Balloc+0x6e>
2000d934:	2221      	movs	r2, #33	; 0x21
2000d936:	2104      	movs	r1, #4
2000d938:	4620      	mov	r0, r4
2000d93a:	f000 fca3 	bl	2000e284 <_calloc_r>
2000d93e:	6a63      	ldr	r3, [r4, #36]	; 0x24
2000d940:	60f0      	str	r0, [r6, #12]
2000d942:	68db      	ldr	r3, [r3, #12]
2000d944:	2b00      	cmp	r3, #0
2000d946:	d1e4      	bne.n	2000d912 <_Balloc+0x2e>
2000d948:	2000      	movs	r0, #0
2000d94a:	bd70      	pop	{r4, r5, r6, pc}
2000d94c:	6802      	ldr	r2, [r0, #0]
2000d94e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
2000d952:	2300      	movs	r3, #0
2000d954:	e9c0 3303 	strd	r3, r3, [r0, #12]
2000d958:	e7f7      	b.n	2000d94a <_Balloc+0x66>
2000d95a:	bf00      	nop
2000d95c:	2000fbb6 	.word	0x2000fbb6
2000d960:	2000fcbc 	.word	0x2000fcbc

2000d964 <_Bfree>:
2000d964:	b570      	push	{r4, r5, r6, lr}
2000d966:	6a46      	ldr	r6, [r0, #36]	; 0x24
2000d968:	4605      	mov	r5, r0
2000d96a:	460c      	mov	r4, r1
2000d96c:	b976      	cbnz	r6, 2000d98c <_Bfree+0x28>
2000d96e:	2010      	movs	r0, #16
2000d970:	f7ff ff7e 	bl	2000d870 <malloc>
2000d974:	4602      	mov	r2, r0
2000d976:	6268      	str	r0, [r5, #36]	; 0x24
2000d978:	b920      	cbnz	r0, 2000d984 <_Bfree+0x20>
2000d97a:	4b09      	ldr	r3, [pc, #36]	; (2000d9a0 <_Bfree+0x3c>)
2000d97c:	4809      	ldr	r0, [pc, #36]	; (2000d9a4 <_Bfree+0x40>)
2000d97e:	218a      	movs	r1, #138	; 0x8a
2000d980:	f000 ff54 	bl	2000e82c <__assert_func>
2000d984:	e9c0 6601 	strd	r6, r6, [r0, #4]
2000d988:	6006      	str	r6, [r0, #0]
2000d98a:	60c6      	str	r6, [r0, #12]
2000d98c:	b13c      	cbz	r4, 2000d99e <_Bfree+0x3a>
2000d98e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
2000d990:	6862      	ldr	r2, [r4, #4]
2000d992:	68db      	ldr	r3, [r3, #12]
2000d994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
2000d998:	6021      	str	r1, [r4, #0]
2000d99a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
2000d99e:	bd70      	pop	{r4, r5, r6, pc}
2000d9a0:	2000fbb6 	.word	0x2000fbb6
2000d9a4:	2000fcbc 	.word	0x2000fcbc

2000d9a8 <__multadd>:
2000d9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000d9ac:	690e      	ldr	r6, [r1, #16]
2000d9ae:	4607      	mov	r7, r0
2000d9b0:	4698      	mov	r8, r3
2000d9b2:	460c      	mov	r4, r1
2000d9b4:	f101 0014 	add.w	r0, r1, #20
2000d9b8:	2300      	movs	r3, #0
2000d9ba:	6805      	ldr	r5, [r0, #0]
2000d9bc:	b2a9      	uxth	r1, r5
2000d9be:	fb02 8101 	mla	r1, r2, r1, r8
2000d9c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
2000d9c6:	0c2d      	lsrs	r5, r5, #16
2000d9c8:	fb02 c505 	mla	r5, r2, r5, ip
2000d9cc:	b289      	uxth	r1, r1
2000d9ce:	3301      	adds	r3, #1
2000d9d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
2000d9d4:	429e      	cmp	r6, r3
2000d9d6:	f840 1b04 	str.w	r1, [r0], #4
2000d9da:	ea4f 4815 	mov.w	r8, r5, lsr #16
2000d9de:	dcec      	bgt.n	2000d9ba <__multadd+0x12>
2000d9e0:	f1b8 0f00 	cmp.w	r8, #0
2000d9e4:	d022      	beq.n	2000da2c <__multadd+0x84>
2000d9e6:	68a3      	ldr	r3, [r4, #8]
2000d9e8:	42b3      	cmp	r3, r6
2000d9ea:	dc19      	bgt.n	2000da20 <__multadd+0x78>
2000d9ec:	6861      	ldr	r1, [r4, #4]
2000d9ee:	4638      	mov	r0, r7
2000d9f0:	3101      	adds	r1, #1
2000d9f2:	f7ff ff77 	bl	2000d8e4 <_Balloc>
2000d9f6:	4605      	mov	r5, r0
2000d9f8:	b928      	cbnz	r0, 2000da06 <__multadd+0x5e>
2000d9fa:	4602      	mov	r2, r0
2000d9fc:	4b0d      	ldr	r3, [pc, #52]	; (2000da34 <__multadd+0x8c>)
2000d9fe:	480e      	ldr	r0, [pc, #56]	; (2000da38 <__multadd+0x90>)
2000da00:	21b5      	movs	r1, #181	; 0xb5
2000da02:	f000 ff13 	bl	2000e82c <__assert_func>
2000da06:	6922      	ldr	r2, [r4, #16]
2000da08:	3202      	adds	r2, #2
2000da0a:	f104 010c 	add.w	r1, r4, #12
2000da0e:	0092      	lsls	r2, r2, #2
2000da10:	300c      	adds	r0, #12
2000da12:	f7ff ff59 	bl	2000d8c8 <memcpy>
2000da16:	4621      	mov	r1, r4
2000da18:	4638      	mov	r0, r7
2000da1a:	f7ff ffa3 	bl	2000d964 <_Bfree>
2000da1e:	462c      	mov	r4, r5
2000da20:	eb04 0386 	add.w	r3, r4, r6, lsl #2
2000da24:	3601      	adds	r6, #1
2000da26:	f8c3 8014 	str.w	r8, [r3, #20]
2000da2a:	6126      	str	r6, [r4, #16]
2000da2c:	4620      	mov	r0, r4
2000da2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2000da32:	bf00      	nop
2000da34:	2000fc2c 	.word	0x2000fc2c
2000da38:	2000fcbc 	.word	0x2000fcbc

2000da3c <__s2b>:
2000da3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000da40:	460c      	mov	r4, r1
2000da42:	4615      	mov	r5, r2
2000da44:	461f      	mov	r7, r3
2000da46:	2209      	movs	r2, #9
2000da48:	3308      	adds	r3, #8
2000da4a:	4606      	mov	r6, r0
2000da4c:	fb93 f3f2 	sdiv	r3, r3, r2
2000da50:	2100      	movs	r1, #0
2000da52:	2201      	movs	r2, #1
2000da54:	429a      	cmp	r2, r3
2000da56:	db09      	blt.n	2000da6c <__s2b+0x30>
2000da58:	4630      	mov	r0, r6
2000da5a:	f7ff ff43 	bl	2000d8e4 <_Balloc>
2000da5e:	b940      	cbnz	r0, 2000da72 <__s2b+0x36>
2000da60:	4602      	mov	r2, r0
2000da62:	4b19      	ldr	r3, [pc, #100]	; (2000dac8 <__s2b+0x8c>)
2000da64:	4819      	ldr	r0, [pc, #100]	; (2000dacc <__s2b+0x90>)
2000da66:	21ce      	movs	r1, #206	; 0xce
2000da68:	f000 fee0 	bl	2000e82c <__assert_func>
2000da6c:	0052      	lsls	r2, r2, #1
2000da6e:	3101      	adds	r1, #1
2000da70:	e7f0      	b.n	2000da54 <__s2b+0x18>
2000da72:	9b08      	ldr	r3, [sp, #32]
2000da74:	6143      	str	r3, [r0, #20]
2000da76:	2d09      	cmp	r5, #9
2000da78:	f04f 0301 	mov.w	r3, #1
2000da7c:	6103      	str	r3, [r0, #16]
2000da7e:	dd16      	ble.n	2000daae <__s2b+0x72>
2000da80:	f104 0909 	add.w	r9, r4, #9
2000da84:	46c8      	mov	r8, r9
2000da86:	442c      	add	r4, r5
2000da88:	f818 3b01 	ldrb.w	r3, [r8], #1
2000da8c:	4601      	mov	r1, r0
2000da8e:	3b30      	subs	r3, #48	; 0x30
2000da90:	220a      	movs	r2, #10
2000da92:	4630      	mov	r0, r6
2000da94:	f7ff ff88 	bl	2000d9a8 <__multadd>
2000da98:	45a0      	cmp	r8, r4
2000da9a:	d1f5      	bne.n	2000da88 <__s2b+0x4c>
2000da9c:	f1a5 0408 	sub.w	r4, r5, #8
2000daa0:	444c      	add	r4, r9
2000daa2:	1b2d      	subs	r5, r5, r4
2000daa4:	1963      	adds	r3, r4, r5
2000daa6:	42bb      	cmp	r3, r7
2000daa8:	db04      	blt.n	2000dab4 <__s2b+0x78>
2000daaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000daae:	340a      	adds	r4, #10
2000dab0:	2509      	movs	r5, #9
2000dab2:	e7f6      	b.n	2000daa2 <__s2b+0x66>
2000dab4:	f814 3b01 	ldrb.w	r3, [r4], #1
2000dab8:	4601      	mov	r1, r0
2000daba:	3b30      	subs	r3, #48	; 0x30
2000dabc:	220a      	movs	r2, #10
2000dabe:	4630      	mov	r0, r6
2000dac0:	f7ff ff72 	bl	2000d9a8 <__multadd>
2000dac4:	e7ee      	b.n	2000daa4 <__s2b+0x68>
2000dac6:	bf00      	nop
2000dac8:	2000fc2c 	.word	0x2000fc2c
2000dacc:	2000fcbc 	.word	0x2000fcbc

2000dad0 <__hi0bits>:
2000dad0:	0c03      	lsrs	r3, r0, #16
2000dad2:	041b      	lsls	r3, r3, #16
2000dad4:	b9d3      	cbnz	r3, 2000db0c <__hi0bits+0x3c>
2000dad6:	0400      	lsls	r0, r0, #16
2000dad8:	2310      	movs	r3, #16
2000dada:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
2000dade:	bf04      	itt	eq
2000dae0:	0200      	lsleq	r0, r0, #8
2000dae2:	3308      	addeq	r3, #8
2000dae4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
2000dae8:	bf04      	itt	eq
2000daea:	0100      	lsleq	r0, r0, #4
2000daec:	3304      	addeq	r3, #4
2000daee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
2000daf2:	bf04      	itt	eq
2000daf4:	0080      	lsleq	r0, r0, #2
2000daf6:	3302      	addeq	r3, #2
2000daf8:	2800      	cmp	r0, #0
2000dafa:	db05      	blt.n	2000db08 <__hi0bits+0x38>
2000dafc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
2000db00:	f103 0301 	add.w	r3, r3, #1
2000db04:	bf08      	it	eq
2000db06:	2320      	moveq	r3, #32
2000db08:	4618      	mov	r0, r3
2000db0a:	4770      	bx	lr
2000db0c:	2300      	movs	r3, #0
2000db0e:	e7e4      	b.n	2000dada <__hi0bits+0xa>

2000db10 <__lo0bits>:
2000db10:	6803      	ldr	r3, [r0, #0]
2000db12:	f013 0207 	ands.w	r2, r3, #7
2000db16:	4601      	mov	r1, r0
2000db18:	d00b      	beq.n	2000db32 <__lo0bits+0x22>
2000db1a:	07da      	lsls	r2, r3, #31
2000db1c:	d424      	bmi.n	2000db68 <__lo0bits+0x58>
2000db1e:	0798      	lsls	r0, r3, #30
2000db20:	bf49      	itett	mi
2000db22:	085b      	lsrmi	r3, r3, #1
2000db24:	089b      	lsrpl	r3, r3, #2
2000db26:	2001      	movmi	r0, #1
2000db28:	600b      	strmi	r3, [r1, #0]
2000db2a:	bf5c      	itt	pl
2000db2c:	600b      	strpl	r3, [r1, #0]
2000db2e:	2002      	movpl	r0, #2
2000db30:	4770      	bx	lr
2000db32:	b298      	uxth	r0, r3
2000db34:	b9b0      	cbnz	r0, 2000db64 <__lo0bits+0x54>
2000db36:	0c1b      	lsrs	r3, r3, #16
2000db38:	2010      	movs	r0, #16
2000db3a:	f013 0fff 	tst.w	r3, #255	; 0xff
2000db3e:	bf04      	itt	eq
2000db40:	0a1b      	lsreq	r3, r3, #8
2000db42:	3008      	addeq	r0, #8
2000db44:	071a      	lsls	r2, r3, #28
2000db46:	bf04      	itt	eq
2000db48:	091b      	lsreq	r3, r3, #4
2000db4a:	3004      	addeq	r0, #4
2000db4c:	079a      	lsls	r2, r3, #30
2000db4e:	bf04      	itt	eq
2000db50:	089b      	lsreq	r3, r3, #2
2000db52:	3002      	addeq	r0, #2
2000db54:	07da      	lsls	r2, r3, #31
2000db56:	d403      	bmi.n	2000db60 <__lo0bits+0x50>
2000db58:	085b      	lsrs	r3, r3, #1
2000db5a:	f100 0001 	add.w	r0, r0, #1
2000db5e:	d005      	beq.n	2000db6c <__lo0bits+0x5c>
2000db60:	600b      	str	r3, [r1, #0]
2000db62:	4770      	bx	lr
2000db64:	4610      	mov	r0, r2
2000db66:	e7e8      	b.n	2000db3a <__lo0bits+0x2a>
2000db68:	2000      	movs	r0, #0
2000db6a:	4770      	bx	lr
2000db6c:	2020      	movs	r0, #32
2000db6e:	4770      	bx	lr

2000db70 <__i2b>:
2000db70:	b510      	push	{r4, lr}
2000db72:	460c      	mov	r4, r1
2000db74:	2101      	movs	r1, #1
2000db76:	f7ff feb5 	bl	2000d8e4 <_Balloc>
2000db7a:	4602      	mov	r2, r0
2000db7c:	b928      	cbnz	r0, 2000db8a <__i2b+0x1a>
2000db7e:	4b05      	ldr	r3, [pc, #20]	; (2000db94 <__i2b+0x24>)
2000db80:	4805      	ldr	r0, [pc, #20]	; (2000db98 <__i2b+0x28>)
2000db82:	f44f 71a0 	mov.w	r1, #320	; 0x140
2000db86:	f000 fe51 	bl	2000e82c <__assert_func>
2000db8a:	2301      	movs	r3, #1
2000db8c:	6144      	str	r4, [r0, #20]
2000db8e:	6103      	str	r3, [r0, #16]
2000db90:	bd10      	pop	{r4, pc}
2000db92:	bf00      	nop
2000db94:	2000fc2c 	.word	0x2000fc2c
2000db98:	2000fcbc 	.word	0x2000fcbc

2000db9c <__multiply>:
2000db9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000dba0:	4614      	mov	r4, r2
2000dba2:	690a      	ldr	r2, [r1, #16]
2000dba4:	6923      	ldr	r3, [r4, #16]
2000dba6:	429a      	cmp	r2, r3
2000dba8:	bfb8      	it	lt
2000dbaa:	460b      	movlt	r3, r1
2000dbac:	460d      	mov	r5, r1
2000dbae:	bfbc      	itt	lt
2000dbb0:	4625      	movlt	r5, r4
2000dbb2:	461c      	movlt	r4, r3
2000dbb4:	f8d5 a010 	ldr.w	sl, [r5, #16]
2000dbb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
2000dbbc:	68ab      	ldr	r3, [r5, #8]
2000dbbe:	6869      	ldr	r1, [r5, #4]
2000dbc0:	eb0a 0709 	add.w	r7, sl, r9
2000dbc4:	42bb      	cmp	r3, r7
2000dbc6:	b085      	sub	sp, #20
2000dbc8:	bfb8      	it	lt
2000dbca:	3101      	addlt	r1, #1
2000dbcc:	f7ff fe8a 	bl	2000d8e4 <_Balloc>
2000dbd0:	b930      	cbnz	r0, 2000dbe0 <__multiply+0x44>
2000dbd2:	4602      	mov	r2, r0
2000dbd4:	4b42      	ldr	r3, [pc, #264]	; (2000dce0 <__multiply+0x144>)
2000dbd6:	4843      	ldr	r0, [pc, #268]	; (2000dce4 <__multiply+0x148>)
2000dbd8:	f240 115d 	movw	r1, #349	; 0x15d
2000dbdc:	f000 fe26 	bl	2000e82c <__assert_func>
2000dbe0:	f100 0614 	add.w	r6, r0, #20
2000dbe4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
2000dbe8:	4633      	mov	r3, r6
2000dbea:	2200      	movs	r2, #0
2000dbec:	4543      	cmp	r3, r8
2000dbee:	d31e      	bcc.n	2000dc2e <__multiply+0x92>
2000dbf0:	f105 0c14 	add.w	ip, r5, #20
2000dbf4:	f104 0314 	add.w	r3, r4, #20
2000dbf8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
2000dbfc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
2000dc00:	9202      	str	r2, [sp, #8]
2000dc02:	ebac 0205 	sub.w	r2, ip, r5
2000dc06:	3a15      	subs	r2, #21
2000dc08:	f022 0203 	bic.w	r2, r2, #3
2000dc0c:	3204      	adds	r2, #4
2000dc0e:	f105 0115 	add.w	r1, r5, #21
2000dc12:	458c      	cmp	ip, r1
2000dc14:	bf38      	it	cc
2000dc16:	2204      	movcc	r2, #4
2000dc18:	9201      	str	r2, [sp, #4]
2000dc1a:	9a02      	ldr	r2, [sp, #8]
2000dc1c:	9303      	str	r3, [sp, #12]
2000dc1e:	429a      	cmp	r2, r3
2000dc20:	d808      	bhi.n	2000dc34 <__multiply+0x98>
2000dc22:	2f00      	cmp	r7, #0
2000dc24:	dc55      	bgt.n	2000dcd2 <__multiply+0x136>
2000dc26:	6107      	str	r7, [r0, #16]
2000dc28:	b005      	add	sp, #20
2000dc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000dc2e:	f843 2b04 	str.w	r2, [r3], #4
2000dc32:	e7db      	b.n	2000dbec <__multiply+0x50>
2000dc34:	f8b3 a000 	ldrh.w	sl, [r3]
2000dc38:	f1ba 0f00 	cmp.w	sl, #0
2000dc3c:	d020      	beq.n	2000dc80 <__multiply+0xe4>
2000dc3e:	f105 0e14 	add.w	lr, r5, #20
2000dc42:	46b1      	mov	r9, r6
2000dc44:	2200      	movs	r2, #0
2000dc46:	f85e 4b04 	ldr.w	r4, [lr], #4
2000dc4a:	f8d9 b000 	ldr.w	fp, [r9]
2000dc4e:	b2a1      	uxth	r1, r4
2000dc50:	fa1f fb8b 	uxth.w	fp, fp
2000dc54:	fb0a b101 	mla	r1, sl, r1, fp
2000dc58:	4411      	add	r1, r2
2000dc5a:	f8d9 2000 	ldr.w	r2, [r9]
2000dc5e:	0c24      	lsrs	r4, r4, #16
2000dc60:	0c12      	lsrs	r2, r2, #16
2000dc62:	fb0a 2404 	mla	r4, sl, r4, r2
2000dc66:	eb04 4411 	add.w	r4, r4, r1, lsr #16
2000dc6a:	b289      	uxth	r1, r1
2000dc6c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
2000dc70:	45f4      	cmp	ip, lr
2000dc72:	f849 1b04 	str.w	r1, [r9], #4
2000dc76:	ea4f 4214 	mov.w	r2, r4, lsr #16
2000dc7a:	d8e4      	bhi.n	2000dc46 <__multiply+0xaa>
2000dc7c:	9901      	ldr	r1, [sp, #4]
2000dc7e:	5072      	str	r2, [r6, r1]
2000dc80:	9a03      	ldr	r2, [sp, #12]
2000dc82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
2000dc86:	3304      	adds	r3, #4
2000dc88:	f1b9 0f00 	cmp.w	r9, #0
2000dc8c:	d01f      	beq.n	2000dcce <__multiply+0x132>
2000dc8e:	6834      	ldr	r4, [r6, #0]
2000dc90:	f105 0114 	add.w	r1, r5, #20
2000dc94:	46b6      	mov	lr, r6
2000dc96:	f04f 0a00 	mov.w	sl, #0
2000dc9a:	880a      	ldrh	r2, [r1, #0]
2000dc9c:	f8be b002 	ldrh.w	fp, [lr, #2]
2000dca0:	fb09 b202 	mla	r2, r9, r2, fp
2000dca4:	4492      	add	sl, r2
2000dca6:	b2a4      	uxth	r4, r4
2000dca8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
2000dcac:	f84e 4b04 	str.w	r4, [lr], #4
2000dcb0:	f851 4b04 	ldr.w	r4, [r1], #4
2000dcb4:	f8be 2000 	ldrh.w	r2, [lr]
2000dcb8:	0c24      	lsrs	r4, r4, #16
2000dcba:	fb09 2404 	mla	r4, r9, r4, r2
2000dcbe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
2000dcc2:	458c      	cmp	ip, r1
2000dcc4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
2000dcc8:	d8e7      	bhi.n	2000dc9a <__multiply+0xfe>
2000dcca:	9a01      	ldr	r2, [sp, #4]
2000dccc:	50b4      	str	r4, [r6, r2]
2000dcce:	3604      	adds	r6, #4
2000dcd0:	e7a3      	b.n	2000dc1a <__multiply+0x7e>
2000dcd2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
2000dcd6:	2b00      	cmp	r3, #0
2000dcd8:	d1a5      	bne.n	2000dc26 <__multiply+0x8a>
2000dcda:	3f01      	subs	r7, #1
2000dcdc:	e7a1      	b.n	2000dc22 <__multiply+0x86>
2000dcde:	bf00      	nop
2000dce0:	2000fc2c 	.word	0x2000fc2c
2000dce4:	2000fcbc 	.word	0x2000fcbc

2000dce8 <__pow5mult>:
2000dce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000dcec:	4615      	mov	r5, r2
2000dcee:	f012 0203 	ands.w	r2, r2, #3
2000dcf2:	4606      	mov	r6, r0
2000dcf4:	460f      	mov	r7, r1
2000dcf6:	d007      	beq.n	2000dd08 <__pow5mult+0x20>
2000dcf8:	4c25      	ldr	r4, [pc, #148]	; (2000dd90 <__pow5mult+0xa8>)
2000dcfa:	3a01      	subs	r2, #1
2000dcfc:	2300      	movs	r3, #0
2000dcfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
2000dd02:	f7ff fe51 	bl	2000d9a8 <__multadd>
2000dd06:	4607      	mov	r7, r0
2000dd08:	10ad      	asrs	r5, r5, #2
2000dd0a:	d03d      	beq.n	2000dd88 <__pow5mult+0xa0>
2000dd0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
2000dd0e:	b97c      	cbnz	r4, 2000dd30 <__pow5mult+0x48>
2000dd10:	2010      	movs	r0, #16
2000dd12:	f7ff fdad 	bl	2000d870 <malloc>
2000dd16:	4602      	mov	r2, r0
2000dd18:	6270      	str	r0, [r6, #36]	; 0x24
2000dd1a:	b928      	cbnz	r0, 2000dd28 <__pow5mult+0x40>
2000dd1c:	4b1d      	ldr	r3, [pc, #116]	; (2000dd94 <__pow5mult+0xac>)
2000dd1e:	481e      	ldr	r0, [pc, #120]	; (2000dd98 <__pow5mult+0xb0>)
2000dd20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
2000dd24:	f000 fd82 	bl	2000e82c <__assert_func>
2000dd28:	e9c0 4401 	strd	r4, r4, [r0, #4]
2000dd2c:	6004      	str	r4, [r0, #0]
2000dd2e:	60c4      	str	r4, [r0, #12]
2000dd30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
2000dd34:	f8d8 4008 	ldr.w	r4, [r8, #8]
2000dd38:	b94c      	cbnz	r4, 2000dd4e <__pow5mult+0x66>
2000dd3a:	f240 2171 	movw	r1, #625	; 0x271
2000dd3e:	4630      	mov	r0, r6
2000dd40:	f7ff ff16 	bl	2000db70 <__i2b>
2000dd44:	2300      	movs	r3, #0
2000dd46:	f8c8 0008 	str.w	r0, [r8, #8]
2000dd4a:	4604      	mov	r4, r0
2000dd4c:	6003      	str	r3, [r0, #0]
2000dd4e:	f04f 0900 	mov.w	r9, #0
2000dd52:	07eb      	lsls	r3, r5, #31
2000dd54:	d50a      	bpl.n	2000dd6c <__pow5mult+0x84>
2000dd56:	4639      	mov	r1, r7
2000dd58:	4622      	mov	r2, r4
2000dd5a:	4630      	mov	r0, r6
2000dd5c:	f7ff ff1e 	bl	2000db9c <__multiply>
2000dd60:	4639      	mov	r1, r7
2000dd62:	4680      	mov	r8, r0
2000dd64:	4630      	mov	r0, r6
2000dd66:	f7ff fdfd 	bl	2000d964 <_Bfree>
2000dd6a:	4647      	mov	r7, r8
2000dd6c:	106d      	asrs	r5, r5, #1
2000dd6e:	d00b      	beq.n	2000dd88 <__pow5mult+0xa0>
2000dd70:	6820      	ldr	r0, [r4, #0]
2000dd72:	b938      	cbnz	r0, 2000dd84 <__pow5mult+0x9c>
2000dd74:	4622      	mov	r2, r4
2000dd76:	4621      	mov	r1, r4
2000dd78:	4630      	mov	r0, r6
2000dd7a:	f7ff ff0f 	bl	2000db9c <__multiply>
2000dd7e:	6020      	str	r0, [r4, #0]
2000dd80:	f8c0 9000 	str.w	r9, [r0]
2000dd84:	4604      	mov	r4, r0
2000dd86:	e7e4      	b.n	2000dd52 <__pow5mult+0x6a>
2000dd88:	4638      	mov	r0, r7
2000dd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000dd8e:	bf00      	nop
2000dd90:	2000fe38 	.word	0x2000fe38
2000dd94:	2000fbb6 	.word	0x2000fbb6
2000dd98:	2000fcbc 	.word	0x2000fcbc

2000dd9c <__lshift>:
2000dd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000dda0:	460c      	mov	r4, r1
2000dda2:	6849      	ldr	r1, [r1, #4]
2000dda4:	6923      	ldr	r3, [r4, #16]
2000dda6:	eb03 1862 	add.w	r8, r3, r2, asr #5
2000ddaa:	68a3      	ldr	r3, [r4, #8]
2000ddac:	4607      	mov	r7, r0
2000ddae:	4691      	mov	r9, r2
2000ddb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
2000ddb4:	f108 0601 	add.w	r6, r8, #1
2000ddb8:	42b3      	cmp	r3, r6
2000ddba:	db0b      	blt.n	2000ddd4 <__lshift+0x38>
2000ddbc:	4638      	mov	r0, r7
2000ddbe:	f7ff fd91 	bl	2000d8e4 <_Balloc>
2000ddc2:	4605      	mov	r5, r0
2000ddc4:	b948      	cbnz	r0, 2000ddda <__lshift+0x3e>
2000ddc6:	4602      	mov	r2, r0
2000ddc8:	4b28      	ldr	r3, [pc, #160]	; (2000de6c <__lshift+0xd0>)
2000ddca:	4829      	ldr	r0, [pc, #164]	; (2000de70 <__lshift+0xd4>)
2000ddcc:	f240 11d9 	movw	r1, #473	; 0x1d9
2000ddd0:	f000 fd2c 	bl	2000e82c <__assert_func>
2000ddd4:	3101      	adds	r1, #1
2000ddd6:	005b      	lsls	r3, r3, #1
2000ddd8:	e7ee      	b.n	2000ddb8 <__lshift+0x1c>
2000ddda:	2300      	movs	r3, #0
2000dddc:	f100 0114 	add.w	r1, r0, #20
2000dde0:	f100 0210 	add.w	r2, r0, #16
2000dde4:	4618      	mov	r0, r3
2000dde6:	4553      	cmp	r3, sl
2000dde8:	db33      	blt.n	2000de52 <__lshift+0xb6>
2000ddea:	6920      	ldr	r0, [r4, #16]
2000ddec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
2000ddf0:	f104 0314 	add.w	r3, r4, #20
2000ddf4:	f019 091f 	ands.w	r9, r9, #31
2000ddf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
2000ddfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
2000de00:	d02b      	beq.n	2000de5a <__lshift+0xbe>
2000de02:	f1c9 0e20 	rsb	lr, r9, #32
2000de06:	468a      	mov	sl, r1
2000de08:	2200      	movs	r2, #0
2000de0a:	6818      	ldr	r0, [r3, #0]
2000de0c:	fa00 f009 	lsl.w	r0, r0, r9
2000de10:	4302      	orrs	r2, r0
2000de12:	f84a 2b04 	str.w	r2, [sl], #4
2000de16:	f853 2b04 	ldr.w	r2, [r3], #4
2000de1a:	459c      	cmp	ip, r3
2000de1c:	fa22 f20e 	lsr.w	r2, r2, lr
2000de20:	d8f3      	bhi.n	2000de0a <__lshift+0x6e>
2000de22:	ebac 0304 	sub.w	r3, ip, r4
2000de26:	3b15      	subs	r3, #21
2000de28:	f023 0303 	bic.w	r3, r3, #3
2000de2c:	3304      	adds	r3, #4
2000de2e:	f104 0015 	add.w	r0, r4, #21
2000de32:	4584      	cmp	ip, r0
2000de34:	bf38      	it	cc
2000de36:	2304      	movcc	r3, #4
2000de38:	50ca      	str	r2, [r1, r3]
2000de3a:	b10a      	cbz	r2, 2000de40 <__lshift+0xa4>
2000de3c:	f108 0602 	add.w	r6, r8, #2
2000de40:	3e01      	subs	r6, #1
2000de42:	4638      	mov	r0, r7
2000de44:	612e      	str	r6, [r5, #16]
2000de46:	4621      	mov	r1, r4
2000de48:	f7ff fd8c 	bl	2000d964 <_Bfree>
2000de4c:	4628      	mov	r0, r5
2000de4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000de52:	f842 0f04 	str.w	r0, [r2, #4]!
2000de56:	3301      	adds	r3, #1
2000de58:	e7c5      	b.n	2000dde6 <__lshift+0x4a>
2000de5a:	3904      	subs	r1, #4
2000de5c:	f853 2b04 	ldr.w	r2, [r3], #4
2000de60:	f841 2f04 	str.w	r2, [r1, #4]!
2000de64:	459c      	cmp	ip, r3
2000de66:	d8f9      	bhi.n	2000de5c <__lshift+0xc0>
2000de68:	e7ea      	b.n	2000de40 <__lshift+0xa4>
2000de6a:	bf00      	nop
2000de6c:	2000fc2c 	.word	0x2000fc2c
2000de70:	2000fcbc 	.word	0x2000fcbc

2000de74 <__mcmp>:
2000de74:	b530      	push	{r4, r5, lr}
2000de76:	6902      	ldr	r2, [r0, #16]
2000de78:	690c      	ldr	r4, [r1, #16]
2000de7a:	1b12      	subs	r2, r2, r4
2000de7c:	d10e      	bne.n	2000de9c <__mcmp+0x28>
2000de7e:	f100 0314 	add.w	r3, r0, #20
2000de82:	3114      	adds	r1, #20
2000de84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
2000de88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
2000de8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
2000de90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
2000de94:	42a5      	cmp	r5, r4
2000de96:	d003      	beq.n	2000dea0 <__mcmp+0x2c>
2000de98:	d305      	bcc.n	2000dea6 <__mcmp+0x32>
2000de9a:	2201      	movs	r2, #1
2000de9c:	4610      	mov	r0, r2
2000de9e:	bd30      	pop	{r4, r5, pc}
2000dea0:	4283      	cmp	r3, r0
2000dea2:	d3f3      	bcc.n	2000de8c <__mcmp+0x18>
2000dea4:	e7fa      	b.n	2000de9c <__mcmp+0x28>
2000dea6:	f04f 32ff 	mov.w	r2, #4294967295
2000deaa:	e7f7      	b.n	2000de9c <__mcmp+0x28>

2000deac <__mdiff>:
2000deac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000deb0:	460c      	mov	r4, r1
2000deb2:	4606      	mov	r6, r0
2000deb4:	4611      	mov	r1, r2
2000deb6:	4620      	mov	r0, r4
2000deb8:	4617      	mov	r7, r2
2000deba:	f7ff ffdb 	bl	2000de74 <__mcmp>
2000debe:	1e05      	subs	r5, r0, #0
2000dec0:	d110      	bne.n	2000dee4 <__mdiff+0x38>
2000dec2:	4629      	mov	r1, r5
2000dec4:	4630      	mov	r0, r6
2000dec6:	f7ff fd0d 	bl	2000d8e4 <_Balloc>
2000deca:	b930      	cbnz	r0, 2000deda <__mdiff+0x2e>
2000decc:	4b39      	ldr	r3, [pc, #228]	; (2000dfb4 <__mdiff+0x108>)
2000dece:	4602      	mov	r2, r0
2000ded0:	f240 2132 	movw	r1, #562	; 0x232
2000ded4:	4838      	ldr	r0, [pc, #224]	; (2000dfb8 <__mdiff+0x10c>)
2000ded6:	f000 fca9 	bl	2000e82c <__assert_func>
2000deda:	2301      	movs	r3, #1
2000dedc:	e9c0 3504 	strd	r3, r5, [r0, #16]
2000dee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000dee4:	bfa4      	itt	ge
2000dee6:	463b      	movge	r3, r7
2000dee8:	4627      	movge	r7, r4
2000deea:	4630      	mov	r0, r6
2000deec:	6879      	ldr	r1, [r7, #4]
2000deee:	bfa6      	itte	ge
2000def0:	461c      	movge	r4, r3
2000def2:	2500      	movge	r5, #0
2000def4:	2501      	movlt	r5, #1
2000def6:	f7ff fcf5 	bl	2000d8e4 <_Balloc>
2000defa:	b920      	cbnz	r0, 2000df06 <__mdiff+0x5a>
2000defc:	4b2d      	ldr	r3, [pc, #180]	; (2000dfb4 <__mdiff+0x108>)
2000defe:	4602      	mov	r2, r0
2000df00:	f44f 7110 	mov.w	r1, #576	; 0x240
2000df04:	e7e6      	b.n	2000ded4 <__mdiff+0x28>
2000df06:	693e      	ldr	r6, [r7, #16]
2000df08:	60c5      	str	r5, [r0, #12]
2000df0a:	6925      	ldr	r5, [r4, #16]
2000df0c:	f107 0114 	add.w	r1, r7, #20
2000df10:	f104 0914 	add.w	r9, r4, #20
2000df14:	f100 0e14 	add.w	lr, r0, #20
2000df18:	f107 0210 	add.w	r2, r7, #16
2000df1c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
2000df20:	eb09 0585 	add.w	r5, r9, r5, lsl #2
2000df24:	46f2      	mov	sl, lr
2000df26:	2700      	movs	r7, #0
2000df28:	f859 3b04 	ldr.w	r3, [r9], #4
2000df2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
2000df30:	fa1f f883 	uxth.w	r8, r3
2000df34:	fa17 f78b 	uxtah	r7, r7, fp
2000df38:	0c1b      	lsrs	r3, r3, #16
2000df3a:	eba7 0808 	sub.w	r8, r7, r8
2000df3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
2000df42:	eb03 4328 	add.w	r3, r3, r8, asr #16
2000df46:	fa1f f888 	uxth.w	r8, r8
2000df4a:	141f      	asrs	r7, r3, #16
2000df4c:	454d      	cmp	r5, r9
2000df4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
2000df52:	f84a 3b04 	str.w	r3, [sl], #4
2000df56:	d8e7      	bhi.n	2000df28 <__mdiff+0x7c>
2000df58:	1b2b      	subs	r3, r5, r4
2000df5a:	3b15      	subs	r3, #21
2000df5c:	f023 0303 	bic.w	r3, r3, #3
2000df60:	3304      	adds	r3, #4
2000df62:	3415      	adds	r4, #21
2000df64:	42a5      	cmp	r5, r4
2000df66:	bf38      	it	cc
2000df68:	2304      	movcc	r3, #4
2000df6a:	4419      	add	r1, r3
2000df6c:	4473      	add	r3, lr
2000df6e:	469e      	mov	lr, r3
2000df70:	460d      	mov	r5, r1
2000df72:	4565      	cmp	r5, ip
2000df74:	d30e      	bcc.n	2000df94 <__mdiff+0xe8>
2000df76:	f10c 0203 	add.w	r2, ip, #3
2000df7a:	1a52      	subs	r2, r2, r1
2000df7c:	f022 0203 	bic.w	r2, r2, #3
2000df80:	3903      	subs	r1, #3
2000df82:	458c      	cmp	ip, r1
2000df84:	bf38      	it	cc
2000df86:	2200      	movcc	r2, #0
2000df88:	441a      	add	r2, r3
2000df8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
2000df8e:	b17b      	cbz	r3, 2000dfb0 <__mdiff+0x104>
2000df90:	6106      	str	r6, [r0, #16]
2000df92:	e7a5      	b.n	2000dee0 <__mdiff+0x34>
2000df94:	f855 8b04 	ldr.w	r8, [r5], #4
2000df98:	fa17 f488 	uxtah	r4, r7, r8
2000df9c:	1422      	asrs	r2, r4, #16
2000df9e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
2000dfa2:	b2a4      	uxth	r4, r4
2000dfa4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
2000dfa8:	f84e 4b04 	str.w	r4, [lr], #4
2000dfac:	1417      	asrs	r7, r2, #16
2000dfae:	e7e0      	b.n	2000df72 <__mdiff+0xc6>
2000dfb0:	3e01      	subs	r6, #1
2000dfb2:	e7ea      	b.n	2000df8a <__mdiff+0xde>
2000dfb4:	2000fc2c 	.word	0x2000fc2c
2000dfb8:	2000fcbc 	.word	0x2000fcbc

2000dfbc <__ulp>:
2000dfbc:	b082      	sub	sp, #8
2000dfbe:	ed8d 0b00 	vstr	d0, [sp]
2000dfc2:	9b01      	ldr	r3, [sp, #4]
2000dfc4:	4912      	ldr	r1, [pc, #72]	; (2000e010 <__ulp+0x54>)
2000dfc6:	4019      	ands	r1, r3
2000dfc8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
2000dfcc:	2900      	cmp	r1, #0
2000dfce:	dd05      	ble.n	2000dfdc <__ulp+0x20>
2000dfd0:	2200      	movs	r2, #0
2000dfd2:	460b      	mov	r3, r1
2000dfd4:	ec43 2b10 	vmov	d0, r2, r3
2000dfd8:	b002      	add	sp, #8
2000dfda:	4770      	bx	lr
2000dfdc:	4249      	negs	r1, r1
2000dfde:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
2000dfe2:	ea4f 5021 	mov.w	r0, r1, asr #20
2000dfe6:	f04f 0200 	mov.w	r2, #0
2000dfea:	f04f 0300 	mov.w	r3, #0
2000dfee:	da04      	bge.n	2000dffa <__ulp+0x3e>
2000dff0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
2000dff4:	fa41 f300 	asr.w	r3, r1, r0
2000dff8:	e7ec      	b.n	2000dfd4 <__ulp+0x18>
2000dffa:	f1a0 0114 	sub.w	r1, r0, #20
2000dffe:	291e      	cmp	r1, #30
2000e000:	bfda      	itte	le
2000e002:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
2000e006:	fa20 f101 	lsrle.w	r1, r0, r1
2000e00a:	2101      	movgt	r1, #1
2000e00c:	460a      	mov	r2, r1
2000e00e:	e7e1      	b.n	2000dfd4 <__ulp+0x18>
2000e010:	7ff00000 	.word	0x7ff00000

2000e014 <__b2d>:
2000e014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000e016:	6905      	ldr	r5, [r0, #16]
2000e018:	f100 0714 	add.w	r7, r0, #20
2000e01c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
2000e020:	1f2e      	subs	r6, r5, #4
2000e022:	f855 4c04 	ldr.w	r4, [r5, #-4]
2000e026:	4620      	mov	r0, r4
2000e028:	f7ff fd52 	bl	2000dad0 <__hi0bits>
2000e02c:	f1c0 0320 	rsb	r3, r0, #32
2000e030:	280a      	cmp	r0, #10
2000e032:	f8df c07c 	ldr.w	ip, [pc, #124]	; 2000e0b0 <__b2d+0x9c>
2000e036:	600b      	str	r3, [r1, #0]
2000e038:	dc14      	bgt.n	2000e064 <__b2d+0x50>
2000e03a:	f1c0 0e0b 	rsb	lr, r0, #11
2000e03e:	fa24 f10e 	lsr.w	r1, r4, lr
2000e042:	42b7      	cmp	r7, r6
2000e044:	ea41 030c 	orr.w	r3, r1, ip
2000e048:	bf34      	ite	cc
2000e04a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
2000e04e:	2100      	movcs	r1, #0
2000e050:	3015      	adds	r0, #21
2000e052:	fa04 f000 	lsl.w	r0, r4, r0
2000e056:	fa21 f10e 	lsr.w	r1, r1, lr
2000e05a:	ea40 0201 	orr.w	r2, r0, r1
2000e05e:	ec43 2b10 	vmov	d0, r2, r3
2000e062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000e064:	42b7      	cmp	r7, r6
2000e066:	bf3a      	itte	cc
2000e068:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
2000e06c:	f1a5 0608 	subcc.w	r6, r5, #8
2000e070:	2100      	movcs	r1, #0
2000e072:	380b      	subs	r0, #11
2000e074:	d017      	beq.n	2000e0a6 <__b2d+0x92>
2000e076:	f1c0 0c20 	rsb	ip, r0, #32
2000e07a:	fa04 f500 	lsl.w	r5, r4, r0
2000e07e:	42be      	cmp	r6, r7
2000e080:	fa21 f40c 	lsr.w	r4, r1, ip
2000e084:	ea45 0504 	orr.w	r5, r5, r4
2000e088:	bf8c      	ite	hi
2000e08a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
2000e08e:	2400      	movls	r4, #0
2000e090:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
2000e094:	fa01 f000 	lsl.w	r0, r1, r0
2000e098:	fa24 f40c 	lsr.w	r4, r4, ip
2000e09c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
2000e0a0:	ea40 0204 	orr.w	r2, r0, r4
2000e0a4:	e7db      	b.n	2000e05e <__b2d+0x4a>
2000e0a6:	ea44 030c 	orr.w	r3, r4, ip
2000e0aa:	460a      	mov	r2, r1
2000e0ac:	e7d7      	b.n	2000e05e <__b2d+0x4a>
2000e0ae:	bf00      	nop
2000e0b0:	3ff00000 	.word	0x3ff00000

2000e0b4 <__d2b>:
2000e0b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
2000e0b8:	4689      	mov	r9, r1
2000e0ba:	2101      	movs	r1, #1
2000e0bc:	ec57 6b10 	vmov	r6, r7, d0
2000e0c0:	4690      	mov	r8, r2
2000e0c2:	f7ff fc0f 	bl	2000d8e4 <_Balloc>
2000e0c6:	4604      	mov	r4, r0
2000e0c8:	b930      	cbnz	r0, 2000e0d8 <__d2b+0x24>
2000e0ca:	4602      	mov	r2, r0
2000e0cc:	4b25      	ldr	r3, [pc, #148]	; (2000e164 <__d2b+0xb0>)
2000e0ce:	4826      	ldr	r0, [pc, #152]	; (2000e168 <__d2b+0xb4>)
2000e0d0:	f240 310a 	movw	r1, #778	; 0x30a
2000e0d4:	f000 fbaa 	bl	2000e82c <__assert_func>
2000e0d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
2000e0dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
2000e0e0:	bb35      	cbnz	r5, 2000e130 <__d2b+0x7c>
2000e0e2:	2e00      	cmp	r6, #0
2000e0e4:	9301      	str	r3, [sp, #4]
2000e0e6:	d028      	beq.n	2000e13a <__d2b+0x86>
2000e0e8:	4668      	mov	r0, sp
2000e0ea:	9600      	str	r6, [sp, #0]
2000e0ec:	f7ff fd10 	bl	2000db10 <__lo0bits>
2000e0f0:	9900      	ldr	r1, [sp, #0]
2000e0f2:	b300      	cbz	r0, 2000e136 <__d2b+0x82>
2000e0f4:	9a01      	ldr	r2, [sp, #4]
2000e0f6:	f1c0 0320 	rsb	r3, r0, #32
2000e0fa:	fa02 f303 	lsl.w	r3, r2, r3
2000e0fe:	430b      	orrs	r3, r1
2000e100:	40c2      	lsrs	r2, r0
2000e102:	6163      	str	r3, [r4, #20]
2000e104:	9201      	str	r2, [sp, #4]
2000e106:	9b01      	ldr	r3, [sp, #4]
2000e108:	61a3      	str	r3, [r4, #24]
2000e10a:	2b00      	cmp	r3, #0
2000e10c:	bf14      	ite	ne
2000e10e:	2202      	movne	r2, #2
2000e110:	2201      	moveq	r2, #1
2000e112:	6122      	str	r2, [r4, #16]
2000e114:	b1d5      	cbz	r5, 2000e14c <__d2b+0x98>
2000e116:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
2000e11a:	4405      	add	r5, r0
2000e11c:	f8c9 5000 	str.w	r5, [r9]
2000e120:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
2000e124:	f8c8 0000 	str.w	r0, [r8]
2000e128:	4620      	mov	r0, r4
2000e12a:	b003      	add	sp, #12
2000e12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2000e130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2000e134:	e7d5      	b.n	2000e0e2 <__d2b+0x2e>
2000e136:	6161      	str	r1, [r4, #20]
2000e138:	e7e5      	b.n	2000e106 <__d2b+0x52>
2000e13a:	a801      	add	r0, sp, #4
2000e13c:	f7ff fce8 	bl	2000db10 <__lo0bits>
2000e140:	9b01      	ldr	r3, [sp, #4]
2000e142:	6163      	str	r3, [r4, #20]
2000e144:	2201      	movs	r2, #1
2000e146:	6122      	str	r2, [r4, #16]
2000e148:	3020      	adds	r0, #32
2000e14a:	e7e3      	b.n	2000e114 <__d2b+0x60>
2000e14c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
2000e150:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
2000e154:	f8c9 0000 	str.w	r0, [r9]
2000e158:	6918      	ldr	r0, [r3, #16]
2000e15a:	f7ff fcb9 	bl	2000dad0 <__hi0bits>
2000e15e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
2000e162:	e7df      	b.n	2000e124 <__d2b+0x70>
2000e164:	2000fc2c 	.word	0x2000fc2c
2000e168:	2000fcbc 	.word	0x2000fcbc

2000e16c <__ratio>:
2000e16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000e170:	468a      	mov	sl, r1
2000e172:	4669      	mov	r1, sp
2000e174:	4683      	mov	fp, r0
2000e176:	f7ff ff4d 	bl	2000e014 <__b2d>
2000e17a:	a901      	add	r1, sp, #4
2000e17c:	4650      	mov	r0, sl
2000e17e:	ec59 8b10 	vmov	r8, r9, d0
2000e182:	ee10 6a10 	vmov	r6, s0
2000e186:	f7ff ff45 	bl	2000e014 <__b2d>
2000e18a:	f8db 3010 	ldr.w	r3, [fp, #16]
2000e18e:	f8da 2010 	ldr.w	r2, [sl, #16]
2000e192:	eba3 0c02 	sub.w	ip, r3, r2
2000e196:	e9dd 3200 	ldrd	r3, r2, [sp]
2000e19a:	1a9b      	subs	r3, r3, r2
2000e19c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
2000e1a0:	ec55 4b10 	vmov	r4, r5, d0
2000e1a4:	2b00      	cmp	r3, #0
2000e1a6:	ee10 0a10 	vmov	r0, s0
2000e1aa:	bfce      	itee	gt
2000e1ac:	464a      	movgt	r2, r9
2000e1ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
2000e1b2:	462a      	movle	r2, r5
2000e1b4:	464f      	mov	r7, r9
2000e1b6:	4629      	mov	r1, r5
2000e1b8:	bfcc      	ite	gt
2000e1ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
2000e1be:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
2000e1c2:	ec47 6b17 	vmov	d7, r6, r7
2000e1c6:	ec41 0b16 	vmov	d6, r0, r1
2000e1ca:	ee87 0b06 	vdiv.f64	d0, d7, d6
2000e1ce:	b003      	add	sp, #12
2000e1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

2000e1d4 <_mprec_log10>:
2000e1d4:	2817      	cmp	r0, #23
2000e1d6:	dc05      	bgt.n	2000e1e4 <_mprec_log10+0x10>
2000e1d8:	4b07      	ldr	r3, [pc, #28]	; (2000e1f8 <_mprec_log10+0x24>)
2000e1da:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
2000e1de:	ed90 0b00 	vldr	d0, [r0]
2000e1e2:	4770      	bx	lr
2000e1e4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2000e1e8:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
2000e1ec:	3801      	subs	r0, #1
2000e1ee:	ee20 0b07 	vmul.f64	d0, d0, d7
2000e1f2:	d1fb      	bne.n	2000e1ec <_mprec_log10+0x18>
2000e1f4:	4770      	bx	lr
2000e1f6:	bf00      	nop
2000e1f8:	2000fd48 	.word	0x2000fd48

2000e1fc <__copybits>:
2000e1fc:	3901      	subs	r1, #1
2000e1fe:	b570      	push	{r4, r5, r6, lr}
2000e200:	1149      	asrs	r1, r1, #5
2000e202:	6914      	ldr	r4, [r2, #16]
2000e204:	3101      	adds	r1, #1
2000e206:	f102 0314 	add.w	r3, r2, #20
2000e20a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
2000e20e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
2000e212:	1f05      	subs	r5, r0, #4
2000e214:	42a3      	cmp	r3, r4
2000e216:	d30c      	bcc.n	2000e232 <__copybits+0x36>
2000e218:	1aa3      	subs	r3, r4, r2
2000e21a:	3b11      	subs	r3, #17
2000e21c:	f023 0303 	bic.w	r3, r3, #3
2000e220:	3211      	adds	r2, #17
2000e222:	42a2      	cmp	r2, r4
2000e224:	bf88      	it	hi
2000e226:	2300      	movhi	r3, #0
2000e228:	4418      	add	r0, r3
2000e22a:	2300      	movs	r3, #0
2000e22c:	4288      	cmp	r0, r1
2000e22e:	d305      	bcc.n	2000e23c <__copybits+0x40>
2000e230:	bd70      	pop	{r4, r5, r6, pc}
2000e232:	f853 6b04 	ldr.w	r6, [r3], #4
2000e236:	f845 6f04 	str.w	r6, [r5, #4]!
2000e23a:	e7eb      	b.n	2000e214 <__copybits+0x18>
2000e23c:	f840 3b04 	str.w	r3, [r0], #4
2000e240:	e7f4      	b.n	2000e22c <__copybits+0x30>

2000e242 <__any_on>:
2000e242:	f100 0214 	add.w	r2, r0, #20
2000e246:	6900      	ldr	r0, [r0, #16]
2000e248:	114b      	asrs	r3, r1, #5
2000e24a:	4298      	cmp	r0, r3
2000e24c:	b510      	push	{r4, lr}
2000e24e:	db11      	blt.n	2000e274 <__any_on+0x32>
2000e250:	dd0a      	ble.n	2000e268 <__any_on+0x26>
2000e252:	f011 011f 	ands.w	r1, r1, #31
2000e256:	d007      	beq.n	2000e268 <__any_on+0x26>
2000e258:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
2000e25c:	fa24 f001 	lsr.w	r0, r4, r1
2000e260:	fa00 f101 	lsl.w	r1, r0, r1
2000e264:	428c      	cmp	r4, r1
2000e266:	d10b      	bne.n	2000e280 <__any_on+0x3e>
2000e268:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2000e26c:	4293      	cmp	r3, r2
2000e26e:	d803      	bhi.n	2000e278 <__any_on+0x36>
2000e270:	2000      	movs	r0, #0
2000e272:	bd10      	pop	{r4, pc}
2000e274:	4603      	mov	r3, r0
2000e276:	e7f7      	b.n	2000e268 <__any_on+0x26>
2000e278:	f853 1d04 	ldr.w	r1, [r3, #-4]!
2000e27c:	2900      	cmp	r1, #0
2000e27e:	d0f5      	beq.n	2000e26c <__any_on+0x2a>
2000e280:	2001      	movs	r0, #1
2000e282:	e7f6      	b.n	2000e272 <__any_on+0x30>

2000e284 <_calloc_r>:
2000e284:	b513      	push	{r0, r1, r4, lr}
2000e286:	434a      	muls	r2, r1
2000e288:	4611      	mov	r1, r2
2000e28a:	9201      	str	r2, [sp, #4]
2000e28c:	f000 f85a 	bl	2000e344 <_malloc_r>
2000e290:	4604      	mov	r4, r0
2000e292:	b118      	cbz	r0, 2000e29c <_calloc_r+0x18>
2000e294:	9a01      	ldr	r2, [sp, #4]
2000e296:	2100      	movs	r1, #0
2000e298:	f7fc fb6c 	bl	2000a974 <memset>
2000e29c:	4620      	mov	r0, r4
2000e29e:	b002      	add	sp, #8
2000e2a0:	bd10      	pop	{r4, pc}
	...

2000e2a4 <_free_r>:
2000e2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
2000e2a6:	2900      	cmp	r1, #0
2000e2a8:	d048      	beq.n	2000e33c <_free_r+0x98>
2000e2aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000e2ae:	9001      	str	r0, [sp, #4]
2000e2b0:	2b00      	cmp	r3, #0
2000e2b2:	f1a1 0404 	sub.w	r4, r1, #4
2000e2b6:	bfb8      	it	lt
2000e2b8:	18e4      	addlt	r4, r4, r3
2000e2ba:	f000 fb13 	bl	2000e8e4 <__malloc_lock>
2000e2be:	4a20      	ldr	r2, [pc, #128]	; (2000e340 <_free_r+0x9c>)
2000e2c0:	9801      	ldr	r0, [sp, #4]
2000e2c2:	6813      	ldr	r3, [r2, #0]
2000e2c4:	4615      	mov	r5, r2
2000e2c6:	b933      	cbnz	r3, 2000e2d6 <_free_r+0x32>
2000e2c8:	6063      	str	r3, [r4, #4]
2000e2ca:	6014      	str	r4, [r2, #0]
2000e2cc:	b003      	add	sp, #12
2000e2ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2000e2d2:	f000 bb0d 	b.w	2000e8f0 <__malloc_unlock>
2000e2d6:	42a3      	cmp	r3, r4
2000e2d8:	d90b      	bls.n	2000e2f2 <_free_r+0x4e>
2000e2da:	6821      	ldr	r1, [r4, #0]
2000e2dc:	1862      	adds	r2, r4, r1
2000e2de:	4293      	cmp	r3, r2
2000e2e0:	bf04      	itt	eq
2000e2e2:	681a      	ldreq	r2, [r3, #0]
2000e2e4:	685b      	ldreq	r3, [r3, #4]
2000e2e6:	6063      	str	r3, [r4, #4]
2000e2e8:	bf04      	itt	eq
2000e2ea:	1852      	addeq	r2, r2, r1
2000e2ec:	6022      	streq	r2, [r4, #0]
2000e2ee:	602c      	str	r4, [r5, #0]
2000e2f0:	e7ec      	b.n	2000e2cc <_free_r+0x28>
2000e2f2:	461a      	mov	r2, r3
2000e2f4:	685b      	ldr	r3, [r3, #4]
2000e2f6:	b10b      	cbz	r3, 2000e2fc <_free_r+0x58>
2000e2f8:	42a3      	cmp	r3, r4
2000e2fa:	d9fa      	bls.n	2000e2f2 <_free_r+0x4e>
2000e2fc:	6811      	ldr	r1, [r2, #0]
2000e2fe:	1855      	adds	r5, r2, r1
2000e300:	42a5      	cmp	r5, r4
2000e302:	d10b      	bne.n	2000e31c <_free_r+0x78>
2000e304:	6824      	ldr	r4, [r4, #0]
2000e306:	4421      	add	r1, r4
2000e308:	1854      	adds	r4, r2, r1
2000e30a:	42a3      	cmp	r3, r4
2000e30c:	6011      	str	r1, [r2, #0]
2000e30e:	d1dd      	bne.n	2000e2cc <_free_r+0x28>
2000e310:	681c      	ldr	r4, [r3, #0]
2000e312:	685b      	ldr	r3, [r3, #4]
2000e314:	6053      	str	r3, [r2, #4]
2000e316:	4421      	add	r1, r4
2000e318:	6011      	str	r1, [r2, #0]
2000e31a:	e7d7      	b.n	2000e2cc <_free_r+0x28>
2000e31c:	d902      	bls.n	2000e324 <_free_r+0x80>
2000e31e:	230c      	movs	r3, #12
2000e320:	6003      	str	r3, [r0, #0]
2000e322:	e7d3      	b.n	2000e2cc <_free_r+0x28>
2000e324:	6825      	ldr	r5, [r4, #0]
2000e326:	1961      	adds	r1, r4, r5
2000e328:	428b      	cmp	r3, r1
2000e32a:	bf04      	itt	eq
2000e32c:	6819      	ldreq	r1, [r3, #0]
2000e32e:	685b      	ldreq	r3, [r3, #4]
2000e330:	6063      	str	r3, [r4, #4]
2000e332:	bf04      	itt	eq
2000e334:	1949      	addeq	r1, r1, r5
2000e336:	6021      	streq	r1, [r4, #0]
2000e338:	6054      	str	r4, [r2, #4]
2000e33a:	e7c7      	b.n	2000e2cc <_free_r+0x28>
2000e33c:	b003      	add	sp, #12
2000e33e:	bd30      	pop	{r4, r5, pc}
2000e340:	20000420 	.word	0x20000420

2000e344 <_malloc_r>:
2000e344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000e346:	1ccd      	adds	r5, r1, #3
2000e348:	f025 0503 	bic.w	r5, r5, #3
2000e34c:	3508      	adds	r5, #8
2000e34e:	2d0c      	cmp	r5, #12
2000e350:	bf38      	it	cc
2000e352:	250c      	movcc	r5, #12
2000e354:	2d00      	cmp	r5, #0
2000e356:	4606      	mov	r6, r0
2000e358:	db01      	blt.n	2000e35e <_malloc_r+0x1a>
2000e35a:	42a9      	cmp	r1, r5
2000e35c:	d903      	bls.n	2000e366 <_malloc_r+0x22>
2000e35e:	230c      	movs	r3, #12
2000e360:	6033      	str	r3, [r6, #0]
2000e362:	2000      	movs	r0, #0
2000e364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000e366:	f000 fabd 	bl	2000e8e4 <__malloc_lock>
2000e36a:	4921      	ldr	r1, [pc, #132]	; (2000e3f0 <_malloc_r+0xac>)
2000e36c:	680a      	ldr	r2, [r1, #0]
2000e36e:	4614      	mov	r4, r2
2000e370:	b99c      	cbnz	r4, 2000e39a <_malloc_r+0x56>
2000e372:	4f20      	ldr	r7, [pc, #128]	; (2000e3f4 <_malloc_r+0xb0>)
2000e374:	683b      	ldr	r3, [r7, #0]
2000e376:	b923      	cbnz	r3, 2000e382 <_malloc_r+0x3e>
2000e378:	4621      	mov	r1, r4
2000e37a:	4630      	mov	r0, r6
2000e37c:	f000 fa1c 	bl	2000e7b8 <_sbrk_r>
2000e380:	6038      	str	r0, [r7, #0]
2000e382:	4629      	mov	r1, r5
2000e384:	4630      	mov	r0, r6
2000e386:	f000 fa17 	bl	2000e7b8 <_sbrk_r>
2000e38a:	1c43      	adds	r3, r0, #1
2000e38c:	d123      	bne.n	2000e3d6 <_malloc_r+0x92>
2000e38e:	230c      	movs	r3, #12
2000e390:	6033      	str	r3, [r6, #0]
2000e392:	4630      	mov	r0, r6
2000e394:	f000 faac 	bl	2000e8f0 <__malloc_unlock>
2000e398:	e7e3      	b.n	2000e362 <_malloc_r+0x1e>
2000e39a:	6823      	ldr	r3, [r4, #0]
2000e39c:	1b5b      	subs	r3, r3, r5
2000e39e:	d417      	bmi.n	2000e3d0 <_malloc_r+0x8c>
2000e3a0:	2b0b      	cmp	r3, #11
2000e3a2:	d903      	bls.n	2000e3ac <_malloc_r+0x68>
2000e3a4:	6023      	str	r3, [r4, #0]
2000e3a6:	441c      	add	r4, r3
2000e3a8:	6025      	str	r5, [r4, #0]
2000e3aa:	e004      	b.n	2000e3b6 <_malloc_r+0x72>
2000e3ac:	6863      	ldr	r3, [r4, #4]
2000e3ae:	42a2      	cmp	r2, r4
2000e3b0:	bf0c      	ite	eq
2000e3b2:	600b      	streq	r3, [r1, #0]
2000e3b4:	6053      	strne	r3, [r2, #4]
2000e3b6:	4630      	mov	r0, r6
2000e3b8:	f000 fa9a 	bl	2000e8f0 <__malloc_unlock>
2000e3bc:	f104 000b 	add.w	r0, r4, #11
2000e3c0:	1d23      	adds	r3, r4, #4
2000e3c2:	f020 0007 	bic.w	r0, r0, #7
2000e3c6:	1ac2      	subs	r2, r0, r3
2000e3c8:	d0cc      	beq.n	2000e364 <_malloc_r+0x20>
2000e3ca:	1a1b      	subs	r3, r3, r0
2000e3cc:	50a3      	str	r3, [r4, r2]
2000e3ce:	e7c9      	b.n	2000e364 <_malloc_r+0x20>
2000e3d0:	4622      	mov	r2, r4
2000e3d2:	6864      	ldr	r4, [r4, #4]
2000e3d4:	e7cc      	b.n	2000e370 <_malloc_r+0x2c>
2000e3d6:	1cc4      	adds	r4, r0, #3
2000e3d8:	f024 0403 	bic.w	r4, r4, #3
2000e3dc:	42a0      	cmp	r0, r4
2000e3de:	d0e3      	beq.n	2000e3a8 <_malloc_r+0x64>
2000e3e0:	1a21      	subs	r1, r4, r0
2000e3e2:	4630      	mov	r0, r6
2000e3e4:	f000 f9e8 	bl	2000e7b8 <_sbrk_r>
2000e3e8:	3001      	adds	r0, #1
2000e3ea:	d1dd      	bne.n	2000e3a8 <_malloc_r+0x64>
2000e3ec:	e7cf      	b.n	2000e38e <_malloc_r+0x4a>
2000e3ee:	bf00      	nop
2000e3f0:	20000420 	.word	0x20000420
2000e3f4:	20000424 	.word	0x20000424

2000e3f8 <__ssputs_r>:
2000e3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000e3fc:	688e      	ldr	r6, [r1, #8]
2000e3fe:	429e      	cmp	r6, r3
2000e400:	4682      	mov	sl, r0
2000e402:	460c      	mov	r4, r1
2000e404:	4690      	mov	r8, r2
2000e406:	461f      	mov	r7, r3
2000e408:	d838      	bhi.n	2000e47c <__ssputs_r+0x84>
2000e40a:	898a      	ldrh	r2, [r1, #12]
2000e40c:	f412 6f90 	tst.w	r2, #1152	; 0x480
2000e410:	d032      	beq.n	2000e478 <__ssputs_r+0x80>
2000e412:	6825      	ldr	r5, [r4, #0]
2000e414:	6909      	ldr	r1, [r1, #16]
2000e416:	eba5 0901 	sub.w	r9, r5, r1
2000e41a:	6965      	ldr	r5, [r4, #20]
2000e41c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
2000e420:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
2000e424:	3301      	adds	r3, #1
2000e426:	444b      	add	r3, r9
2000e428:	106d      	asrs	r5, r5, #1
2000e42a:	429d      	cmp	r5, r3
2000e42c:	bf38      	it	cc
2000e42e:	461d      	movcc	r5, r3
2000e430:	0553      	lsls	r3, r2, #21
2000e432:	d531      	bpl.n	2000e498 <__ssputs_r+0xa0>
2000e434:	4629      	mov	r1, r5
2000e436:	f7ff ff85 	bl	2000e344 <_malloc_r>
2000e43a:	4606      	mov	r6, r0
2000e43c:	b950      	cbnz	r0, 2000e454 <__ssputs_r+0x5c>
2000e43e:	230c      	movs	r3, #12
2000e440:	f8ca 3000 	str.w	r3, [sl]
2000e444:	89a3      	ldrh	r3, [r4, #12]
2000e446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000e44a:	81a3      	strh	r3, [r4, #12]
2000e44c:	f04f 30ff 	mov.w	r0, #4294967295
2000e450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000e454:	6921      	ldr	r1, [r4, #16]
2000e456:	464a      	mov	r2, r9
2000e458:	f7ff fa36 	bl	2000d8c8 <memcpy>
2000e45c:	89a3      	ldrh	r3, [r4, #12]
2000e45e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
2000e462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000e466:	81a3      	strh	r3, [r4, #12]
2000e468:	6126      	str	r6, [r4, #16]
2000e46a:	6165      	str	r5, [r4, #20]
2000e46c:	444e      	add	r6, r9
2000e46e:	eba5 0509 	sub.w	r5, r5, r9
2000e472:	6026      	str	r6, [r4, #0]
2000e474:	60a5      	str	r5, [r4, #8]
2000e476:	463e      	mov	r6, r7
2000e478:	42be      	cmp	r6, r7
2000e47a:	d900      	bls.n	2000e47e <__ssputs_r+0x86>
2000e47c:	463e      	mov	r6, r7
2000e47e:	4632      	mov	r2, r6
2000e480:	6820      	ldr	r0, [r4, #0]
2000e482:	4641      	mov	r1, r8
2000e484:	f000 fa14 	bl	2000e8b0 <memmove>
2000e488:	68a3      	ldr	r3, [r4, #8]
2000e48a:	6822      	ldr	r2, [r4, #0]
2000e48c:	1b9b      	subs	r3, r3, r6
2000e48e:	4432      	add	r2, r6
2000e490:	60a3      	str	r3, [r4, #8]
2000e492:	6022      	str	r2, [r4, #0]
2000e494:	2000      	movs	r0, #0
2000e496:	e7db      	b.n	2000e450 <__ssputs_r+0x58>
2000e498:	462a      	mov	r2, r5
2000e49a:	f000 fa2f 	bl	2000e8fc <_realloc_r>
2000e49e:	4606      	mov	r6, r0
2000e4a0:	2800      	cmp	r0, #0
2000e4a2:	d1e1      	bne.n	2000e468 <__ssputs_r+0x70>
2000e4a4:	6921      	ldr	r1, [r4, #16]
2000e4a6:	4650      	mov	r0, sl
2000e4a8:	f7ff fefc 	bl	2000e2a4 <_free_r>
2000e4ac:	e7c7      	b.n	2000e43e <__ssputs_r+0x46>

2000e4ae <__ssprint_r>:
2000e4ae:	6893      	ldr	r3, [r2, #8]
2000e4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000e4b4:	4680      	mov	r8, r0
2000e4b6:	460c      	mov	r4, r1
2000e4b8:	4617      	mov	r7, r2
2000e4ba:	2b00      	cmp	r3, #0
2000e4bc:	d061      	beq.n	2000e582 <__ssprint_r+0xd4>
2000e4be:	2300      	movs	r3, #0
2000e4c0:	f8d2 a000 	ldr.w	sl, [r2]
2000e4c4:	9301      	str	r3, [sp, #4]
2000e4c6:	469b      	mov	fp, r3
2000e4c8:	f1bb 0f00 	cmp.w	fp, #0
2000e4cc:	d02b      	beq.n	2000e526 <__ssprint_r+0x78>
2000e4ce:	68a6      	ldr	r6, [r4, #8]
2000e4d0:	45b3      	cmp	fp, r6
2000e4d2:	d342      	bcc.n	2000e55a <__ssprint_r+0xac>
2000e4d4:	89a2      	ldrh	r2, [r4, #12]
2000e4d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
2000e4da:	d03e      	beq.n	2000e55a <__ssprint_r+0xac>
2000e4dc:	6825      	ldr	r5, [r4, #0]
2000e4de:	6921      	ldr	r1, [r4, #16]
2000e4e0:	eba5 0901 	sub.w	r9, r5, r1
2000e4e4:	6965      	ldr	r5, [r4, #20]
2000e4e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
2000e4ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
2000e4ee:	f109 0001 	add.w	r0, r9, #1
2000e4f2:	106d      	asrs	r5, r5, #1
2000e4f4:	4458      	add	r0, fp
2000e4f6:	4285      	cmp	r5, r0
2000e4f8:	bf38      	it	cc
2000e4fa:	4605      	movcc	r5, r0
2000e4fc:	0553      	lsls	r3, r2, #21
2000e4fe:	d545      	bpl.n	2000e58c <__ssprint_r+0xde>
2000e500:	4629      	mov	r1, r5
2000e502:	4640      	mov	r0, r8
2000e504:	f7ff ff1e 	bl	2000e344 <_malloc_r>
2000e508:	4606      	mov	r6, r0
2000e50a:	b9a0      	cbnz	r0, 2000e536 <__ssprint_r+0x88>
2000e50c:	230c      	movs	r3, #12
2000e50e:	f8c8 3000 	str.w	r3, [r8]
2000e512:	89a3      	ldrh	r3, [r4, #12]
2000e514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000e518:	81a3      	strh	r3, [r4, #12]
2000e51a:	2300      	movs	r3, #0
2000e51c:	e9c7 3301 	strd	r3, r3, [r7, #4]
2000e520:	f04f 30ff 	mov.w	r0, #4294967295
2000e524:	e02f      	b.n	2000e586 <__ssprint_r+0xd8>
2000e526:	f8da 3000 	ldr.w	r3, [sl]
2000e52a:	f8da b004 	ldr.w	fp, [sl, #4]
2000e52e:	9301      	str	r3, [sp, #4]
2000e530:	f10a 0a08 	add.w	sl, sl, #8
2000e534:	e7c8      	b.n	2000e4c8 <__ssprint_r+0x1a>
2000e536:	464a      	mov	r2, r9
2000e538:	6921      	ldr	r1, [r4, #16]
2000e53a:	f7ff f9c5 	bl	2000d8c8 <memcpy>
2000e53e:	89a2      	ldrh	r2, [r4, #12]
2000e540:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
2000e544:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2000e548:	81a2      	strh	r2, [r4, #12]
2000e54a:	6126      	str	r6, [r4, #16]
2000e54c:	6165      	str	r5, [r4, #20]
2000e54e:	444e      	add	r6, r9
2000e550:	eba5 0509 	sub.w	r5, r5, r9
2000e554:	6026      	str	r6, [r4, #0]
2000e556:	60a5      	str	r5, [r4, #8]
2000e558:	465e      	mov	r6, fp
2000e55a:	455e      	cmp	r6, fp
2000e55c:	bf28      	it	cs
2000e55e:	465e      	movcs	r6, fp
2000e560:	4632      	mov	r2, r6
2000e562:	9901      	ldr	r1, [sp, #4]
2000e564:	6820      	ldr	r0, [r4, #0]
2000e566:	f000 f9a3 	bl	2000e8b0 <memmove>
2000e56a:	68a2      	ldr	r2, [r4, #8]
2000e56c:	1b92      	subs	r2, r2, r6
2000e56e:	60a2      	str	r2, [r4, #8]
2000e570:	6822      	ldr	r2, [r4, #0]
2000e572:	4432      	add	r2, r6
2000e574:	6022      	str	r2, [r4, #0]
2000e576:	68ba      	ldr	r2, [r7, #8]
2000e578:	eba2 030b 	sub.w	r3, r2, fp
2000e57c:	60bb      	str	r3, [r7, #8]
2000e57e:	2b00      	cmp	r3, #0
2000e580:	d1d1      	bne.n	2000e526 <__ssprint_r+0x78>
2000e582:	2000      	movs	r0, #0
2000e584:	6078      	str	r0, [r7, #4]
2000e586:	b003      	add	sp, #12
2000e588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000e58c:	462a      	mov	r2, r5
2000e58e:	4640      	mov	r0, r8
2000e590:	f000 f9b4 	bl	2000e8fc <_realloc_r>
2000e594:	4606      	mov	r6, r0
2000e596:	2800      	cmp	r0, #0
2000e598:	d1d7      	bne.n	2000e54a <__ssprint_r+0x9c>
2000e59a:	6921      	ldr	r1, [r4, #16]
2000e59c:	4640      	mov	r0, r8
2000e59e:	f7ff fe81 	bl	2000e2a4 <_free_r>
2000e5a2:	e7b3      	b.n	2000e50c <__ssprint_r+0x5e>

2000e5a4 <_svfiprintf_r>:
2000e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000e5a8:	4698      	mov	r8, r3
2000e5aa:	898b      	ldrh	r3, [r1, #12]
2000e5ac:	061b      	lsls	r3, r3, #24
2000e5ae:	b09d      	sub	sp, #116	; 0x74
2000e5b0:	4607      	mov	r7, r0
2000e5b2:	460d      	mov	r5, r1
2000e5b4:	4614      	mov	r4, r2
2000e5b6:	d50e      	bpl.n	2000e5d6 <_svfiprintf_r+0x32>
2000e5b8:	690b      	ldr	r3, [r1, #16]
2000e5ba:	b963      	cbnz	r3, 2000e5d6 <_svfiprintf_r+0x32>
2000e5bc:	2140      	movs	r1, #64	; 0x40
2000e5be:	f7ff fec1 	bl	2000e344 <_malloc_r>
2000e5c2:	6028      	str	r0, [r5, #0]
2000e5c4:	6128      	str	r0, [r5, #16]
2000e5c6:	b920      	cbnz	r0, 2000e5d2 <_svfiprintf_r+0x2e>
2000e5c8:	230c      	movs	r3, #12
2000e5ca:	603b      	str	r3, [r7, #0]
2000e5cc:	f04f 30ff 	mov.w	r0, #4294967295
2000e5d0:	e0d1      	b.n	2000e776 <_svfiprintf_r+0x1d2>
2000e5d2:	2340      	movs	r3, #64	; 0x40
2000e5d4:	616b      	str	r3, [r5, #20]
2000e5d6:	2300      	movs	r3, #0
2000e5d8:	9309      	str	r3, [sp, #36]	; 0x24
2000e5da:	2320      	movs	r3, #32
2000e5dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
2000e5e0:	f8cd 800c 	str.w	r8, [sp, #12]
2000e5e4:	2330      	movs	r3, #48	; 0x30
2000e5e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 2000e790 <_svfiprintf_r+0x1ec>
2000e5ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
2000e5ee:	f04f 0901 	mov.w	r9, #1
2000e5f2:	4623      	mov	r3, r4
2000e5f4:	469a      	mov	sl, r3
2000e5f6:	f813 2b01 	ldrb.w	r2, [r3], #1
2000e5fa:	b10a      	cbz	r2, 2000e600 <_svfiprintf_r+0x5c>
2000e5fc:	2a25      	cmp	r2, #37	; 0x25
2000e5fe:	d1f9      	bne.n	2000e5f4 <_svfiprintf_r+0x50>
2000e600:	ebba 0b04 	subs.w	fp, sl, r4
2000e604:	d00b      	beq.n	2000e61e <_svfiprintf_r+0x7a>
2000e606:	465b      	mov	r3, fp
2000e608:	4622      	mov	r2, r4
2000e60a:	4629      	mov	r1, r5
2000e60c:	4638      	mov	r0, r7
2000e60e:	f7ff fef3 	bl	2000e3f8 <__ssputs_r>
2000e612:	3001      	adds	r0, #1
2000e614:	f000 80aa 	beq.w	2000e76c <_svfiprintf_r+0x1c8>
2000e618:	9a09      	ldr	r2, [sp, #36]	; 0x24
2000e61a:	445a      	add	r2, fp
2000e61c:	9209      	str	r2, [sp, #36]	; 0x24
2000e61e:	f89a 3000 	ldrb.w	r3, [sl]
2000e622:	2b00      	cmp	r3, #0
2000e624:	f000 80a2 	beq.w	2000e76c <_svfiprintf_r+0x1c8>
2000e628:	2300      	movs	r3, #0
2000e62a:	f04f 32ff 	mov.w	r2, #4294967295
2000e62e:	e9cd 2305 	strd	r2, r3, [sp, #20]
2000e632:	f10a 0a01 	add.w	sl, sl, #1
2000e636:	9304      	str	r3, [sp, #16]
2000e638:	9307      	str	r3, [sp, #28]
2000e63a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
2000e63e:	931a      	str	r3, [sp, #104]	; 0x68
2000e640:	4654      	mov	r4, sl
2000e642:	2205      	movs	r2, #5
2000e644:	f814 1b01 	ldrb.w	r1, [r4], #1
2000e648:	4851      	ldr	r0, [pc, #324]	; (2000e790 <_svfiprintf_r+0x1ec>)
2000e64a:	f7f1 ff99 	bl	20000580 <memchr>
2000e64e:	9a04      	ldr	r2, [sp, #16]
2000e650:	b9d8      	cbnz	r0, 2000e68a <_svfiprintf_r+0xe6>
2000e652:	06d0      	lsls	r0, r2, #27
2000e654:	bf44      	itt	mi
2000e656:	2320      	movmi	r3, #32
2000e658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2000e65c:	0711      	lsls	r1, r2, #28
2000e65e:	bf44      	itt	mi
2000e660:	232b      	movmi	r3, #43	; 0x2b
2000e662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2000e666:	f89a 3000 	ldrb.w	r3, [sl]
2000e66a:	2b2a      	cmp	r3, #42	; 0x2a
2000e66c:	d015      	beq.n	2000e69a <_svfiprintf_r+0xf6>
2000e66e:	9a07      	ldr	r2, [sp, #28]
2000e670:	4654      	mov	r4, sl
2000e672:	2000      	movs	r0, #0
2000e674:	f04f 0c0a 	mov.w	ip, #10
2000e678:	4621      	mov	r1, r4
2000e67a:	f811 3b01 	ldrb.w	r3, [r1], #1
2000e67e:	3b30      	subs	r3, #48	; 0x30
2000e680:	2b09      	cmp	r3, #9
2000e682:	d94e      	bls.n	2000e722 <_svfiprintf_r+0x17e>
2000e684:	b1b0      	cbz	r0, 2000e6b4 <_svfiprintf_r+0x110>
2000e686:	9207      	str	r2, [sp, #28]
2000e688:	e014      	b.n	2000e6b4 <_svfiprintf_r+0x110>
2000e68a:	eba0 0308 	sub.w	r3, r0, r8
2000e68e:	fa09 f303 	lsl.w	r3, r9, r3
2000e692:	4313      	orrs	r3, r2
2000e694:	9304      	str	r3, [sp, #16]
2000e696:	46a2      	mov	sl, r4
2000e698:	e7d2      	b.n	2000e640 <_svfiprintf_r+0x9c>
2000e69a:	9b03      	ldr	r3, [sp, #12]
2000e69c:	1d19      	adds	r1, r3, #4
2000e69e:	681b      	ldr	r3, [r3, #0]
2000e6a0:	9103      	str	r1, [sp, #12]
2000e6a2:	2b00      	cmp	r3, #0
2000e6a4:	bfbb      	ittet	lt
2000e6a6:	425b      	neglt	r3, r3
2000e6a8:	f042 0202 	orrlt.w	r2, r2, #2
2000e6ac:	9307      	strge	r3, [sp, #28]
2000e6ae:	9307      	strlt	r3, [sp, #28]
2000e6b0:	bfb8      	it	lt
2000e6b2:	9204      	strlt	r2, [sp, #16]
2000e6b4:	7823      	ldrb	r3, [r4, #0]
2000e6b6:	2b2e      	cmp	r3, #46	; 0x2e
2000e6b8:	d10c      	bne.n	2000e6d4 <_svfiprintf_r+0x130>
2000e6ba:	7863      	ldrb	r3, [r4, #1]
2000e6bc:	2b2a      	cmp	r3, #42	; 0x2a
2000e6be:	d135      	bne.n	2000e72c <_svfiprintf_r+0x188>
2000e6c0:	9b03      	ldr	r3, [sp, #12]
2000e6c2:	1d1a      	adds	r2, r3, #4
2000e6c4:	681b      	ldr	r3, [r3, #0]
2000e6c6:	9203      	str	r2, [sp, #12]
2000e6c8:	2b00      	cmp	r3, #0
2000e6ca:	bfb8      	it	lt
2000e6cc:	f04f 33ff 	movlt.w	r3, #4294967295
2000e6d0:	3402      	adds	r4, #2
2000e6d2:	9305      	str	r3, [sp, #20]
2000e6d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2000e7a0 <_svfiprintf_r+0x1fc>
2000e6d8:	7821      	ldrb	r1, [r4, #0]
2000e6da:	2203      	movs	r2, #3
2000e6dc:	4650      	mov	r0, sl
2000e6de:	f7f1 ff4f 	bl	20000580 <memchr>
2000e6e2:	b140      	cbz	r0, 2000e6f6 <_svfiprintf_r+0x152>
2000e6e4:	2340      	movs	r3, #64	; 0x40
2000e6e6:	eba0 000a 	sub.w	r0, r0, sl
2000e6ea:	fa03 f000 	lsl.w	r0, r3, r0
2000e6ee:	9b04      	ldr	r3, [sp, #16]
2000e6f0:	4303      	orrs	r3, r0
2000e6f2:	3401      	adds	r4, #1
2000e6f4:	9304      	str	r3, [sp, #16]
2000e6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
2000e6fa:	4826      	ldr	r0, [pc, #152]	; (2000e794 <_svfiprintf_r+0x1f0>)
2000e6fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
2000e700:	2206      	movs	r2, #6
2000e702:	f7f1 ff3d 	bl	20000580 <memchr>
2000e706:	2800      	cmp	r0, #0
2000e708:	d038      	beq.n	2000e77c <_svfiprintf_r+0x1d8>
2000e70a:	4b23      	ldr	r3, [pc, #140]	; (2000e798 <_svfiprintf_r+0x1f4>)
2000e70c:	bb1b      	cbnz	r3, 2000e756 <_svfiprintf_r+0x1b2>
2000e70e:	9b03      	ldr	r3, [sp, #12]
2000e710:	3307      	adds	r3, #7
2000e712:	f023 0307 	bic.w	r3, r3, #7
2000e716:	3308      	adds	r3, #8
2000e718:	9303      	str	r3, [sp, #12]
2000e71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000e71c:	4433      	add	r3, r6
2000e71e:	9309      	str	r3, [sp, #36]	; 0x24
2000e720:	e767      	b.n	2000e5f2 <_svfiprintf_r+0x4e>
2000e722:	fb0c 3202 	mla	r2, ip, r2, r3
2000e726:	460c      	mov	r4, r1
2000e728:	2001      	movs	r0, #1
2000e72a:	e7a5      	b.n	2000e678 <_svfiprintf_r+0xd4>
2000e72c:	2300      	movs	r3, #0
2000e72e:	3401      	adds	r4, #1
2000e730:	9305      	str	r3, [sp, #20]
2000e732:	4619      	mov	r1, r3
2000e734:	f04f 0c0a 	mov.w	ip, #10
2000e738:	4620      	mov	r0, r4
2000e73a:	f810 2b01 	ldrb.w	r2, [r0], #1
2000e73e:	3a30      	subs	r2, #48	; 0x30
2000e740:	2a09      	cmp	r2, #9
2000e742:	d903      	bls.n	2000e74c <_svfiprintf_r+0x1a8>
2000e744:	2b00      	cmp	r3, #0
2000e746:	d0c5      	beq.n	2000e6d4 <_svfiprintf_r+0x130>
2000e748:	9105      	str	r1, [sp, #20]
2000e74a:	e7c3      	b.n	2000e6d4 <_svfiprintf_r+0x130>
2000e74c:	fb0c 2101 	mla	r1, ip, r1, r2
2000e750:	4604      	mov	r4, r0
2000e752:	2301      	movs	r3, #1
2000e754:	e7f0      	b.n	2000e738 <_svfiprintf_r+0x194>
2000e756:	ab03      	add	r3, sp, #12
2000e758:	9300      	str	r3, [sp, #0]
2000e75a:	462a      	mov	r2, r5
2000e75c:	4b0f      	ldr	r3, [pc, #60]	; (2000e79c <_svfiprintf_r+0x1f8>)
2000e75e:	a904      	add	r1, sp, #16
2000e760:	4638      	mov	r0, r7
2000e762:	f7fc f9a1 	bl	2000aaa8 <_printf_float>
2000e766:	1c42      	adds	r2, r0, #1
2000e768:	4606      	mov	r6, r0
2000e76a:	d1d6      	bne.n	2000e71a <_svfiprintf_r+0x176>
2000e76c:	89ab      	ldrh	r3, [r5, #12]
2000e76e:	065b      	lsls	r3, r3, #25
2000e770:	f53f af2c 	bmi.w	2000e5cc <_svfiprintf_r+0x28>
2000e774:	9809      	ldr	r0, [sp, #36]	; 0x24
2000e776:	b01d      	add	sp, #116	; 0x74
2000e778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000e77c:	ab03      	add	r3, sp, #12
2000e77e:	9300      	str	r3, [sp, #0]
2000e780:	462a      	mov	r2, r5
2000e782:	4b06      	ldr	r3, [pc, #24]	; (2000e79c <_svfiprintf_r+0x1f8>)
2000e784:	a904      	add	r1, sp, #16
2000e786:	4638      	mov	r0, r7
2000e788:	f7fc fc1a 	bl	2000afc0 <_printf_i>
2000e78c:	e7eb      	b.n	2000e766 <_svfiprintf_r+0x1c2>
2000e78e:	bf00      	nop
2000e790:	2000fe44 	.word	0x2000fe44
2000e794:	2000fe4e 	.word	0x2000fe4e
2000e798:	2000aaa9 	.word	0x2000aaa9
2000e79c:	2000e3f9 	.word	0x2000e3f9
2000e7a0:	2000fe4a 	.word	0x2000fe4a
2000e7a4:	00000000 	.word	0x00000000

2000e7a8 <nan>:
2000e7a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 2000e7b0 <nan+0x8>
2000e7ac:	4770      	bx	lr
2000e7ae:	bf00      	nop
2000e7b0:	00000000 	.word	0x00000000
2000e7b4:	7ff80000 	.word	0x7ff80000

2000e7b8 <_sbrk_r>:
2000e7b8:	b538      	push	{r3, r4, r5, lr}
2000e7ba:	4d06      	ldr	r5, [pc, #24]	; (2000e7d4 <_sbrk_r+0x1c>)
2000e7bc:	2300      	movs	r3, #0
2000e7be:	4604      	mov	r4, r0
2000e7c0:	4608      	mov	r0, r1
2000e7c2:	602b      	str	r3, [r5, #0]
2000e7c4:	f7f2 fd10 	bl	200011e8 <_sbrk>
2000e7c8:	1c43      	adds	r3, r0, #1
2000e7ca:	d102      	bne.n	2000e7d2 <_sbrk_r+0x1a>
2000e7cc:	682b      	ldr	r3, [r5, #0]
2000e7ce:	b103      	cbz	r3, 2000e7d2 <_sbrk_r+0x1a>
2000e7d0:	6023      	str	r3, [r4, #0]
2000e7d2:	bd38      	pop	{r3, r4, r5, pc}
2000e7d4:	20000494 	.word	0x20000494

2000e7d8 <strncmp>:
2000e7d8:	b510      	push	{r4, lr}
2000e7da:	b16a      	cbz	r2, 2000e7f8 <strncmp+0x20>
2000e7dc:	3901      	subs	r1, #1
2000e7de:	1884      	adds	r4, r0, r2
2000e7e0:	f810 3b01 	ldrb.w	r3, [r0], #1
2000e7e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
2000e7e8:	4293      	cmp	r3, r2
2000e7ea:	d103      	bne.n	2000e7f4 <strncmp+0x1c>
2000e7ec:	42a0      	cmp	r0, r4
2000e7ee:	d001      	beq.n	2000e7f4 <strncmp+0x1c>
2000e7f0:	2b00      	cmp	r3, #0
2000e7f2:	d1f5      	bne.n	2000e7e0 <strncmp+0x8>
2000e7f4:	1a98      	subs	r0, r3, r2
2000e7f6:	bd10      	pop	{r4, pc}
2000e7f8:	4610      	mov	r0, r2
2000e7fa:	e7fc      	b.n	2000e7f6 <strncmp+0x1e>

2000e7fc <_wctomb_r>:
2000e7fc:	b410      	push	{r4}
2000e7fe:	4c03      	ldr	r4, [pc, #12]	; (2000e80c <_wctomb_r+0x10>)
2000e800:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
2000e804:	46a4      	mov	ip, r4
2000e806:	f85d 4b04 	ldr.w	r4, [sp], #4
2000e80a:	4760      	bx	ip
2000e80c:	2000028c 	.word	0x2000028c

2000e810 <__ascii_wctomb>:
2000e810:	b149      	cbz	r1, 2000e826 <__ascii_wctomb+0x16>
2000e812:	2aff      	cmp	r2, #255	; 0xff
2000e814:	bf85      	ittet	hi
2000e816:	238a      	movhi	r3, #138	; 0x8a
2000e818:	6003      	strhi	r3, [r0, #0]
2000e81a:	700a      	strbls	r2, [r1, #0]
2000e81c:	f04f 30ff 	movhi.w	r0, #4294967295
2000e820:	bf98      	it	ls
2000e822:	2001      	movls	r0, #1
2000e824:	4770      	bx	lr
2000e826:	4608      	mov	r0, r1
2000e828:	4770      	bx	lr
	...

2000e82c <__assert_func>:
2000e82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
2000e82e:	4614      	mov	r4, r2
2000e830:	461a      	mov	r2, r3
2000e832:	4b09      	ldr	r3, [pc, #36]	; (2000e858 <__assert_func+0x2c>)
2000e834:	681b      	ldr	r3, [r3, #0]
2000e836:	4605      	mov	r5, r0
2000e838:	68d8      	ldr	r0, [r3, #12]
2000e83a:	b14c      	cbz	r4, 2000e850 <__assert_func+0x24>
2000e83c:	4b07      	ldr	r3, [pc, #28]	; (2000e85c <__assert_func+0x30>)
2000e83e:	9100      	str	r1, [sp, #0]
2000e840:	e9cd 3401 	strd	r3, r4, [sp, #4]
2000e844:	4906      	ldr	r1, [pc, #24]	; (2000e860 <__assert_func+0x34>)
2000e846:	462b      	mov	r3, r5
2000e848:	f000 f820 	bl	2000e88c <fiprintf>
2000e84c:	f000 fb1e 	bl	2000ee8c <abort>
2000e850:	4b04      	ldr	r3, [pc, #16]	; (2000e864 <__assert_func+0x38>)
2000e852:	461c      	mov	r4, r3
2000e854:	e7f3      	b.n	2000e83e <__assert_func+0x12>
2000e856:	bf00      	nop
2000e858:	20000224 	.word	0x20000224
2000e85c:	2000fe55 	.word	0x2000fe55
2000e860:	2000fe62 	.word	0x2000fe62
2000e864:	2000fe90 	.word	0x2000fe90

2000e868 <__assert>:
2000e868:	b508      	push	{r3, lr}
2000e86a:	4613      	mov	r3, r2
2000e86c:	2200      	movs	r2, #0
2000e86e:	f7ff ffdd 	bl	2000e82c <__assert_func>

2000e872 <_fiprintf_r>:
2000e872:	b40c      	push	{r2, r3}
2000e874:	b507      	push	{r0, r1, r2, lr}
2000e876:	ab04      	add	r3, sp, #16
2000e878:	f853 2b04 	ldr.w	r2, [r3], #4
2000e87c:	9301      	str	r3, [sp, #4]
2000e87e:	f000 f899 	bl	2000e9b4 <_vfiprintf_r>
2000e882:	b003      	add	sp, #12
2000e884:	f85d eb04 	ldr.w	lr, [sp], #4
2000e888:	b002      	add	sp, #8
2000e88a:	4770      	bx	lr

2000e88c <fiprintf>:
2000e88c:	b40e      	push	{r1, r2, r3}
2000e88e:	b503      	push	{r0, r1, lr}
2000e890:	4601      	mov	r1, r0
2000e892:	ab03      	add	r3, sp, #12
2000e894:	4805      	ldr	r0, [pc, #20]	; (2000e8ac <fiprintf+0x20>)
2000e896:	f853 2b04 	ldr.w	r2, [r3], #4
2000e89a:	6800      	ldr	r0, [r0, #0]
2000e89c:	9301      	str	r3, [sp, #4]
2000e89e:	f000 f889 	bl	2000e9b4 <_vfiprintf_r>
2000e8a2:	b002      	add	sp, #8
2000e8a4:	f85d eb04 	ldr.w	lr, [sp], #4
2000e8a8:	b003      	add	sp, #12
2000e8aa:	4770      	bx	lr
2000e8ac:	20000224 	.word	0x20000224

2000e8b0 <memmove>:
2000e8b0:	4288      	cmp	r0, r1
2000e8b2:	b510      	push	{r4, lr}
2000e8b4:	eb01 0402 	add.w	r4, r1, r2
2000e8b8:	d902      	bls.n	2000e8c0 <memmove+0x10>
2000e8ba:	4284      	cmp	r4, r0
2000e8bc:	4623      	mov	r3, r4
2000e8be:	d807      	bhi.n	2000e8d0 <memmove+0x20>
2000e8c0:	1e43      	subs	r3, r0, #1
2000e8c2:	42a1      	cmp	r1, r4
2000e8c4:	d008      	beq.n	2000e8d8 <memmove+0x28>
2000e8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
2000e8ca:	f803 2f01 	strb.w	r2, [r3, #1]!
2000e8ce:	e7f8      	b.n	2000e8c2 <memmove+0x12>
2000e8d0:	4402      	add	r2, r0
2000e8d2:	4601      	mov	r1, r0
2000e8d4:	428a      	cmp	r2, r1
2000e8d6:	d100      	bne.n	2000e8da <memmove+0x2a>
2000e8d8:	bd10      	pop	{r4, pc}
2000e8da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
2000e8de:	f802 4d01 	strb.w	r4, [r2, #-1]!
2000e8e2:	e7f7      	b.n	2000e8d4 <memmove+0x24>

2000e8e4 <__malloc_lock>:
2000e8e4:	4801      	ldr	r0, [pc, #4]	; (2000e8ec <__malloc_lock+0x8>)
2000e8e6:	f000 be48 	b.w	2000f57a <__retarget_lock_acquire_recursive>
2000e8ea:	bf00      	nop
2000e8ec:	2000049c 	.word	0x2000049c

2000e8f0 <__malloc_unlock>:
2000e8f0:	4801      	ldr	r0, [pc, #4]	; (2000e8f8 <__malloc_unlock+0x8>)
2000e8f2:	f000 be48 	b.w	2000f586 <__retarget_lock_release_recursive>
2000e8f6:	bf00      	nop
2000e8f8:	2000049c 	.word	0x2000049c

2000e8fc <_realloc_r>:
2000e8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000e8fe:	4607      	mov	r7, r0
2000e900:	4614      	mov	r4, r2
2000e902:	460e      	mov	r6, r1
2000e904:	b921      	cbnz	r1, 2000e910 <_realloc_r+0x14>
2000e906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
2000e90a:	4611      	mov	r1, r2
2000e90c:	f7ff bd1a 	b.w	2000e344 <_malloc_r>
2000e910:	b922      	cbnz	r2, 2000e91c <_realloc_r+0x20>
2000e912:	f7ff fcc7 	bl	2000e2a4 <_free_r>
2000e916:	4625      	mov	r5, r4
2000e918:	4628      	mov	r0, r5
2000e91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000e91c:	f000 fe98 	bl	2000f650 <_malloc_usable_size_r>
2000e920:	42a0      	cmp	r0, r4
2000e922:	d20f      	bcs.n	2000e944 <_realloc_r+0x48>
2000e924:	4621      	mov	r1, r4
2000e926:	4638      	mov	r0, r7
2000e928:	f7ff fd0c 	bl	2000e344 <_malloc_r>
2000e92c:	4605      	mov	r5, r0
2000e92e:	2800      	cmp	r0, #0
2000e930:	d0f2      	beq.n	2000e918 <_realloc_r+0x1c>
2000e932:	4631      	mov	r1, r6
2000e934:	4622      	mov	r2, r4
2000e936:	f7fe ffc7 	bl	2000d8c8 <memcpy>
2000e93a:	4631      	mov	r1, r6
2000e93c:	4638      	mov	r0, r7
2000e93e:	f7ff fcb1 	bl	2000e2a4 <_free_r>
2000e942:	e7e9      	b.n	2000e918 <_realloc_r+0x1c>
2000e944:	4635      	mov	r5, r6
2000e946:	e7e7      	b.n	2000e918 <_realloc_r+0x1c>

2000e948 <__sfputc_r>:
2000e948:	6893      	ldr	r3, [r2, #8]
2000e94a:	3b01      	subs	r3, #1
2000e94c:	2b00      	cmp	r3, #0
2000e94e:	b410      	push	{r4}
2000e950:	6093      	str	r3, [r2, #8]
2000e952:	da08      	bge.n	2000e966 <__sfputc_r+0x1e>
2000e954:	6994      	ldr	r4, [r2, #24]
2000e956:	42a3      	cmp	r3, r4
2000e958:	db01      	blt.n	2000e95e <__sfputc_r+0x16>
2000e95a:	290a      	cmp	r1, #10
2000e95c:	d103      	bne.n	2000e966 <__sfputc_r+0x1e>
2000e95e:	f85d 4b04 	ldr.w	r4, [sp], #4
2000e962:	f000 b9cb 	b.w	2000ecfc <__swbuf_r>
2000e966:	6813      	ldr	r3, [r2, #0]
2000e968:	1c58      	adds	r0, r3, #1
2000e96a:	6010      	str	r0, [r2, #0]
2000e96c:	7019      	strb	r1, [r3, #0]
2000e96e:	4608      	mov	r0, r1
2000e970:	f85d 4b04 	ldr.w	r4, [sp], #4
2000e974:	4770      	bx	lr

2000e976 <__sfputs_r>:
2000e976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000e978:	4606      	mov	r6, r0
2000e97a:	460f      	mov	r7, r1
2000e97c:	4614      	mov	r4, r2
2000e97e:	18d5      	adds	r5, r2, r3
2000e980:	42ac      	cmp	r4, r5
2000e982:	d101      	bne.n	2000e988 <__sfputs_r+0x12>
2000e984:	2000      	movs	r0, #0
2000e986:	e007      	b.n	2000e998 <__sfputs_r+0x22>
2000e988:	f814 1b01 	ldrb.w	r1, [r4], #1
2000e98c:	463a      	mov	r2, r7
2000e98e:	4630      	mov	r0, r6
2000e990:	f7ff ffda 	bl	2000e948 <__sfputc_r>
2000e994:	1c43      	adds	r3, r0, #1
2000e996:	d1f3      	bne.n	2000e980 <__sfputs_r+0xa>
2000e998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

2000e99a <__sprint_r>:
2000e99a:	b538      	push	{r3, r4, r5, lr}
2000e99c:	6893      	ldr	r3, [r2, #8]
2000e99e:	4614      	mov	r4, r2
2000e9a0:	2500      	movs	r5, #0
2000e9a2:	b913      	cbnz	r3, 2000e9aa <__sprint_r+0x10>
2000e9a4:	6053      	str	r3, [r2, #4]
2000e9a6:	4618      	mov	r0, r3
2000e9a8:	bd38      	pop	{r3, r4, r5, pc}
2000e9aa:	f000 fc5b 	bl	2000f264 <__sfvwrite_r>
2000e9ae:	e9c4 5501 	strd	r5, r5, [r4, #4]
2000e9b2:	e7f9      	b.n	2000e9a8 <__sprint_r+0xe>

2000e9b4 <_vfiprintf_r>:
2000e9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000e9b8:	460d      	mov	r5, r1
2000e9ba:	b09d      	sub	sp, #116	; 0x74
2000e9bc:	4614      	mov	r4, r2
2000e9be:	4698      	mov	r8, r3
2000e9c0:	4606      	mov	r6, r0
2000e9c2:	b118      	cbz	r0, 2000e9cc <_vfiprintf_r+0x18>
2000e9c4:	6983      	ldr	r3, [r0, #24]
2000e9c6:	b90b      	cbnz	r3, 2000e9cc <_vfiprintf_r+0x18>
2000e9c8:	f000 fbb2 	bl	2000f130 <__sinit>
2000e9cc:	4b89      	ldr	r3, [pc, #548]	; (2000ebf4 <_vfiprintf_r+0x240>)
2000e9ce:	429d      	cmp	r5, r3
2000e9d0:	d11b      	bne.n	2000ea0a <_vfiprintf_r+0x56>
2000e9d2:	6875      	ldr	r5, [r6, #4]
2000e9d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
2000e9d6:	07d9      	lsls	r1, r3, #31
2000e9d8:	d405      	bmi.n	2000e9e6 <_vfiprintf_r+0x32>
2000e9da:	89ab      	ldrh	r3, [r5, #12]
2000e9dc:	059a      	lsls	r2, r3, #22
2000e9de:	d402      	bmi.n	2000e9e6 <_vfiprintf_r+0x32>
2000e9e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
2000e9e2:	f000 fdca 	bl	2000f57a <__retarget_lock_acquire_recursive>
2000e9e6:	89ab      	ldrh	r3, [r5, #12]
2000e9e8:	071b      	lsls	r3, r3, #28
2000e9ea:	d501      	bpl.n	2000e9f0 <_vfiprintf_r+0x3c>
2000e9ec:	692b      	ldr	r3, [r5, #16]
2000e9ee:	b9eb      	cbnz	r3, 2000ea2c <_vfiprintf_r+0x78>
2000e9f0:	4629      	mov	r1, r5
2000e9f2:	4630      	mov	r0, r6
2000e9f4:	f000 f9dc 	bl	2000edb0 <__swsetup_r>
2000e9f8:	b1c0      	cbz	r0, 2000ea2c <_vfiprintf_r+0x78>
2000e9fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
2000e9fc:	07dc      	lsls	r4, r3, #31
2000e9fe:	d50e      	bpl.n	2000ea1e <_vfiprintf_r+0x6a>
2000ea00:	f04f 30ff 	mov.w	r0, #4294967295
2000ea04:	b01d      	add	sp, #116	; 0x74
2000ea06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000ea0a:	4b7b      	ldr	r3, [pc, #492]	; (2000ebf8 <_vfiprintf_r+0x244>)
2000ea0c:	429d      	cmp	r5, r3
2000ea0e:	d101      	bne.n	2000ea14 <_vfiprintf_r+0x60>
2000ea10:	68b5      	ldr	r5, [r6, #8]
2000ea12:	e7df      	b.n	2000e9d4 <_vfiprintf_r+0x20>
2000ea14:	4b79      	ldr	r3, [pc, #484]	; (2000ebfc <_vfiprintf_r+0x248>)
2000ea16:	429d      	cmp	r5, r3
2000ea18:	bf08      	it	eq
2000ea1a:	68f5      	ldreq	r5, [r6, #12]
2000ea1c:	e7da      	b.n	2000e9d4 <_vfiprintf_r+0x20>
2000ea1e:	89ab      	ldrh	r3, [r5, #12]
2000ea20:	0598      	lsls	r0, r3, #22
2000ea22:	d4ed      	bmi.n	2000ea00 <_vfiprintf_r+0x4c>
2000ea24:	6da8      	ldr	r0, [r5, #88]	; 0x58
2000ea26:	f000 fdae 	bl	2000f586 <__retarget_lock_release_recursive>
2000ea2a:	e7e9      	b.n	2000ea00 <_vfiprintf_r+0x4c>
2000ea2c:	2300      	movs	r3, #0
2000ea2e:	9309      	str	r3, [sp, #36]	; 0x24
2000ea30:	2320      	movs	r3, #32
2000ea32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
2000ea36:	f8cd 800c 	str.w	r8, [sp, #12]
2000ea3a:	2330      	movs	r3, #48	; 0x30
2000ea3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 2000ec00 <_vfiprintf_r+0x24c>
2000ea40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
2000ea44:	f04f 0901 	mov.w	r9, #1
2000ea48:	4623      	mov	r3, r4
2000ea4a:	469a      	mov	sl, r3
2000ea4c:	f813 2b01 	ldrb.w	r2, [r3], #1
2000ea50:	b10a      	cbz	r2, 2000ea56 <_vfiprintf_r+0xa2>
2000ea52:	2a25      	cmp	r2, #37	; 0x25
2000ea54:	d1f9      	bne.n	2000ea4a <_vfiprintf_r+0x96>
2000ea56:	ebba 0b04 	subs.w	fp, sl, r4
2000ea5a:	d00b      	beq.n	2000ea74 <_vfiprintf_r+0xc0>
2000ea5c:	465b      	mov	r3, fp
2000ea5e:	4622      	mov	r2, r4
2000ea60:	4629      	mov	r1, r5
2000ea62:	4630      	mov	r0, r6
2000ea64:	f7ff ff87 	bl	2000e976 <__sfputs_r>
2000ea68:	3001      	adds	r0, #1
2000ea6a:	f000 80aa 	beq.w	2000ebc2 <_vfiprintf_r+0x20e>
2000ea6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
2000ea70:	445a      	add	r2, fp
2000ea72:	9209      	str	r2, [sp, #36]	; 0x24
2000ea74:	f89a 3000 	ldrb.w	r3, [sl]
2000ea78:	2b00      	cmp	r3, #0
2000ea7a:	f000 80a2 	beq.w	2000ebc2 <_vfiprintf_r+0x20e>
2000ea7e:	2300      	movs	r3, #0
2000ea80:	f04f 32ff 	mov.w	r2, #4294967295
2000ea84:	e9cd 2305 	strd	r2, r3, [sp, #20]
2000ea88:	f10a 0a01 	add.w	sl, sl, #1
2000ea8c:	9304      	str	r3, [sp, #16]
2000ea8e:	9307      	str	r3, [sp, #28]
2000ea90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
2000ea94:	931a      	str	r3, [sp, #104]	; 0x68
2000ea96:	4654      	mov	r4, sl
2000ea98:	2205      	movs	r2, #5
2000ea9a:	f814 1b01 	ldrb.w	r1, [r4], #1
2000ea9e:	4858      	ldr	r0, [pc, #352]	; (2000ec00 <_vfiprintf_r+0x24c>)
2000eaa0:	f7f1 fd6e 	bl	20000580 <memchr>
2000eaa4:	9a04      	ldr	r2, [sp, #16]
2000eaa6:	b9d8      	cbnz	r0, 2000eae0 <_vfiprintf_r+0x12c>
2000eaa8:	06d1      	lsls	r1, r2, #27
2000eaaa:	bf44      	itt	mi
2000eaac:	2320      	movmi	r3, #32
2000eaae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2000eab2:	0713      	lsls	r3, r2, #28
2000eab4:	bf44      	itt	mi
2000eab6:	232b      	movmi	r3, #43	; 0x2b
2000eab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2000eabc:	f89a 3000 	ldrb.w	r3, [sl]
2000eac0:	2b2a      	cmp	r3, #42	; 0x2a
2000eac2:	d015      	beq.n	2000eaf0 <_vfiprintf_r+0x13c>
2000eac4:	9a07      	ldr	r2, [sp, #28]
2000eac6:	4654      	mov	r4, sl
2000eac8:	2000      	movs	r0, #0
2000eaca:	f04f 0c0a 	mov.w	ip, #10
2000eace:	4621      	mov	r1, r4
2000ead0:	f811 3b01 	ldrb.w	r3, [r1], #1
2000ead4:	3b30      	subs	r3, #48	; 0x30
2000ead6:	2b09      	cmp	r3, #9
2000ead8:	d94e      	bls.n	2000eb78 <_vfiprintf_r+0x1c4>
2000eada:	b1b0      	cbz	r0, 2000eb0a <_vfiprintf_r+0x156>
2000eadc:	9207      	str	r2, [sp, #28]
2000eade:	e014      	b.n	2000eb0a <_vfiprintf_r+0x156>
2000eae0:	eba0 0308 	sub.w	r3, r0, r8
2000eae4:	fa09 f303 	lsl.w	r3, r9, r3
2000eae8:	4313      	orrs	r3, r2
2000eaea:	9304      	str	r3, [sp, #16]
2000eaec:	46a2      	mov	sl, r4
2000eaee:	e7d2      	b.n	2000ea96 <_vfiprintf_r+0xe2>
2000eaf0:	9b03      	ldr	r3, [sp, #12]
2000eaf2:	1d19      	adds	r1, r3, #4
2000eaf4:	681b      	ldr	r3, [r3, #0]
2000eaf6:	9103      	str	r1, [sp, #12]
2000eaf8:	2b00      	cmp	r3, #0
2000eafa:	bfbb      	ittet	lt
2000eafc:	425b      	neglt	r3, r3
2000eafe:	f042 0202 	orrlt.w	r2, r2, #2
2000eb02:	9307      	strge	r3, [sp, #28]
2000eb04:	9307      	strlt	r3, [sp, #28]
2000eb06:	bfb8      	it	lt
2000eb08:	9204      	strlt	r2, [sp, #16]
2000eb0a:	7823      	ldrb	r3, [r4, #0]
2000eb0c:	2b2e      	cmp	r3, #46	; 0x2e
2000eb0e:	d10c      	bne.n	2000eb2a <_vfiprintf_r+0x176>
2000eb10:	7863      	ldrb	r3, [r4, #1]
2000eb12:	2b2a      	cmp	r3, #42	; 0x2a
2000eb14:	d135      	bne.n	2000eb82 <_vfiprintf_r+0x1ce>
2000eb16:	9b03      	ldr	r3, [sp, #12]
2000eb18:	1d1a      	adds	r2, r3, #4
2000eb1a:	681b      	ldr	r3, [r3, #0]
2000eb1c:	9203      	str	r2, [sp, #12]
2000eb1e:	2b00      	cmp	r3, #0
2000eb20:	bfb8      	it	lt
2000eb22:	f04f 33ff 	movlt.w	r3, #4294967295
2000eb26:	3402      	adds	r4, #2
2000eb28:	9305      	str	r3, [sp, #20]
2000eb2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2000ec10 <_vfiprintf_r+0x25c>
2000eb2e:	7821      	ldrb	r1, [r4, #0]
2000eb30:	2203      	movs	r2, #3
2000eb32:	4650      	mov	r0, sl
2000eb34:	f7f1 fd24 	bl	20000580 <memchr>
2000eb38:	b140      	cbz	r0, 2000eb4c <_vfiprintf_r+0x198>
2000eb3a:	2340      	movs	r3, #64	; 0x40
2000eb3c:	eba0 000a 	sub.w	r0, r0, sl
2000eb40:	fa03 f000 	lsl.w	r0, r3, r0
2000eb44:	9b04      	ldr	r3, [sp, #16]
2000eb46:	4303      	orrs	r3, r0
2000eb48:	3401      	adds	r4, #1
2000eb4a:	9304      	str	r3, [sp, #16]
2000eb4c:	f814 1b01 	ldrb.w	r1, [r4], #1
2000eb50:	482c      	ldr	r0, [pc, #176]	; (2000ec04 <_vfiprintf_r+0x250>)
2000eb52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
2000eb56:	2206      	movs	r2, #6
2000eb58:	f7f1 fd12 	bl	20000580 <memchr>
2000eb5c:	2800      	cmp	r0, #0
2000eb5e:	d03f      	beq.n	2000ebe0 <_vfiprintf_r+0x22c>
2000eb60:	4b29      	ldr	r3, [pc, #164]	; (2000ec08 <_vfiprintf_r+0x254>)
2000eb62:	bb1b      	cbnz	r3, 2000ebac <_vfiprintf_r+0x1f8>
2000eb64:	9b03      	ldr	r3, [sp, #12]
2000eb66:	3307      	adds	r3, #7
2000eb68:	f023 0307 	bic.w	r3, r3, #7
2000eb6c:	3308      	adds	r3, #8
2000eb6e:	9303      	str	r3, [sp, #12]
2000eb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000eb72:	443b      	add	r3, r7
2000eb74:	9309      	str	r3, [sp, #36]	; 0x24
2000eb76:	e767      	b.n	2000ea48 <_vfiprintf_r+0x94>
2000eb78:	fb0c 3202 	mla	r2, ip, r2, r3
2000eb7c:	460c      	mov	r4, r1
2000eb7e:	2001      	movs	r0, #1
2000eb80:	e7a5      	b.n	2000eace <_vfiprintf_r+0x11a>
2000eb82:	2300      	movs	r3, #0
2000eb84:	3401      	adds	r4, #1
2000eb86:	9305      	str	r3, [sp, #20]
2000eb88:	4619      	mov	r1, r3
2000eb8a:	f04f 0c0a 	mov.w	ip, #10
2000eb8e:	4620      	mov	r0, r4
2000eb90:	f810 2b01 	ldrb.w	r2, [r0], #1
2000eb94:	3a30      	subs	r2, #48	; 0x30
2000eb96:	2a09      	cmp	r2, #9
2000eb98:	d903      	bls.n	2000eba2 <_vfiprintf_r+0x1ee>
2000eb9a:	2b00      	cmp	r3, #0
2000eb9c:	d0c5      	beq.n	2000eb2a <_vfiprintf_r+0x176>
2000eb9e:	9105      	str	r1, [sp, #20]
2000eba0:	e7c3      	b.n	2000eb2a <_vfiprintf_r+0x176>
2000eba2:	fb0c 2101 	mla	r1, ip, r1, r2
2000eba6:	4604      	mov	r4, r0
2000eba8:	2301      	movs	r3, #1
2000ebaa:	e7f0      	b.n	2000eb8e <_vfiprintf_r+0x1da>
2000ebac:	ab03      	add	r3, sp, #12
2000ebae:	9300      	str	r3, [sp, #0]
2000ebb0:	462a      	mov	r2, r5
2000ebb2:	4b16      	ldr	r3, [pc, #88]	; (2000ec0c <_vfiprintf_r+0x258>)
2000ebb4:	a904      	add	r1, sp, #16
2000ebb6:	4630      	mov	r0, r6
2000ebb8:	f7fb ff76 	bl	2000aaa8 <_printf_float>
2000ebbc:	4607      	mov	r7, r0
2000ebbe:	1c78      	adds	r0, r7, #1
2000ebc0:	d1d6      	bne.n	2000eb70 <_vfiprintf_r+0x1bc>
2000ebc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
2000ebc4:	07d9      	lsls	r1, r3, #31
2000ebc6:	d405      	bmi.n	2000ebd4 <_vfiprintf_r+0x220>
2000ebc8:	89ab      	ldrh	r3, [r5, #12]
2000ebca:	059a      	lsls	r2, r3, #22
2000ebcc:	d402      	bmi.n	2000ebd4 <_vfiprintf_r+0x220>
2000ebce:	6da8      	ldr	r0, [r5, #88]	; 0x58
2000ebd0:	f000 fcd9 	bl	2000f586 <__retarget_lock_release_recursive>
2000ebd4:	89ab      	ldrh	r3, [r5, #12]
2000ebd6:	065b      	lsls	r3, r3, #25
2000ebd8:	f53f af12 	bmi.w	2000ea00 <_vfiprintf_r+0x4c>
2000ebdc:	9809      	ldr	r0, [sp, #36]	; 0x24
2000ebde:	e711      	b.n	2000ea04 <_vfiprintf_r+0x50>
2000ebe0:	ab03      	add	r3, sp, #12
2000ebe2:	9300      	str	r3, [sp, #0]
2000ebe4:	462a      	mov	r2, r5
2000ebe6:	4b09      	ldr	r3, [pc, #36]	; (2000ec0c <_vfiprintf_r+0x258>)
2000ebe8:	a904      	add	r1, sp, #16
2000ebea:	4630      	mov	r0, r6
2000ebec:	f7fc f9e8 	bl	2000afc0 <_printf_i>
2000ebf0:	e7e4      	b.n	2000ebbc <_vfiprintf_r+0x208>
2000ebf2:	bf00      	nop
2000ebf4:	2000feb4 	.word	0x2000feb4
2000ebf8:	2000fed4 	.word	0x2000fed4
2000ebfc:	2000fe94 	.word	0x2000fe94
2000ec00:	2000fe44 	.word	0x2000fe44
2000ec04:	2000fe4e 	.word	0x2000fe4e
2000ec08:	2000aaa9 	.word	0x2000aaa9
2000ec0c:	2000e977 	.word	0x2000e977
2000ec10:	2000fe4a 	.word	0x2000fe4a

2000ec14 <vfiprintf>:
2000ec14:	4613      	mov	r3, r2
2000ec16:	460a      	mov	r2, r1
2000ec18:	4601      	mov	r1, r0
2000ec1a:	4802      	ldr	r0, [pc, #8]	; (2000ec24 <vfiprintf+0x10>)
2000ec1c:	6800      	ldr	r0, [r0, #0]
2000ec1e:	f7ff bec9 	b.w	2000e9b4 <_vfiprintf_r>
2000ec22:	bf00      	nop
2000ec24:	20000224 	.word	0x20000224

2000ec28 <cleanup_glue>:
2000ec28:	b538      	push	{r3, r4, r5, lr}
2000ec2a:	460c      	mov	r4, r1
2000ec2c:	6809      	ldr	r1, [r1, #0]
2000ec2e:	4605      	mov	r5, r0
2000ec30:	b109      	cbz	r1, 2000ec36 <cleanup_glue+0xe>
2000ec32:	f7ff fff9 	bl	2000ec28 <cleanup_glue>
2000ec36:	4621      	mov	r1, r4
2000ec38:	4628      	mov	r0, r5
2000ec3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000ec3e:	f7ff bb31 	b.w	2000e2a4 <_free_r>
	...

2000ec44 <_reclaim_reent>:
2000ec44:	4b2c      	ldr	r3, [pc, #176]	; (2000ecf8 <_reclaim_reent+0xb4>)
2000ec46:	681b      	ldr	r3, [r3, #0]
2000ec48:	4283      	cmp	r3, r0
2000ec4a:	b570      	push	{r4, r5, r6, lr}
2000ec4c:	4604      	mov	r4, r0
2000ec4e:	d051      	beq.n	2000ecf4 <_reclaim_reent+0xb0>
2000ec50:	6a43      	ldr	r3, [r0, #36]	; 0x24
2000ec52:	b143      	cbz	r3, 2000ec66 <_reclaim_reent+0x22>
2000ec54:	68db      	ldr	r3, [r3, #12]
2000ec56:	2b00      	cmp	r3, #0
2000ec58:	d14a      	bne.n	2000ecf0 <_reclaim_reent+0xac>
2000ec5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
2000ec5c:	6819      	ldr	r1, [r3, #0]
2000ec5e:	b111      	cbz	r1, 2000ec66 <_reclaim_reent+0x22>
2000ec60:	4620      	mov	r0, r4
2000ec62:	f7ff fb1f 	bl	2000e2a4 <_free_r>
2000ec66:	6961      	ldr	r1, [r4, #20]
2000ec68:	b111      	cbz	r1, 2000ec70 <_reclaim_reent+0x2c>
2000ec6a:	4620      	mov	r0, r4
2000ec6c:	f7ff fb1a 	bl	2000e2a4 <_free_r>
2000ec70:	6a61      	ldr	r1, [r4, #36]	; 0x24
2000ec72:	b111      	cbz	r1, 2000ec7a <_reclaim_reent+0x36>
2000ec74:	4620      	mov	r0, r4
2000ec76:	f7ff fb15 	bl	2000e2a4 <_free_r>
2000ec7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2000ec7c:	b111      	cbz	r1, 2000ec84 <_reclaim_reent+0x40>
2000ec7e:	4620      	mov	r0, r4
2000ec80:	f7ff fb10 	bl	2000e2a4 <_free_r>
2000ec84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
2000ec86:	b111      	cbz	r1, 2000ec8e <_reclaim_reent+0x4a>
2000ec88:	4620      	mov	r0, r4
2000ec8a:	f7ff fb0b 	bl	2000e2a4 <_free_r>
2000ec8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
2000ec90:	b111      	cbz	r1, 2000ec98 <_reclaim_reent+0x54>
2000ec92:	4620      	mov	r0, r4
2000ec94:	f7ff fb06 	bl	2000e2a4 <_free_r>
2000ec98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2000ec9a:	b111      	cbz	r1, 2000eca2 <_reclaim_reent+0x5e>
2000ec9c:	4620      	mov	r0, r4
2000ec9e:	f7ff fb01 	bl	2000e2a4 <_free_r>
2000eca2:	6da1      	ldr	r1, [r4, #88]	; 0x58
2000eca4:	b111      	cbz	r1, 2000ecac <_reclaim_reent+0x68>
2000eca6:	4620      	mov	r0, r4
2000eca8:	f7ff fafc 	bl	2000e2a4 <_free_r>
2000ecac:	6b61      	ldr	r1, [r4, #52]	; 0x34
2000ecae:	b111      	cbz	r1, 2000ecb6 <_reclaim_reent+0x72>
2000ecb0:	4620      	mov	r0, r4
2000ecb2:	f7ff faf7 	bl	2000e2a4 <_free_r>
2000ecb6:	69a3      	ldr	r3, [r4, #24]
2000ecb8:	b1e3      	cbz	r3, 2000ecf4 <_reclaim_reent+0xb0>
2000ecba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2000ecbc:	4620      	mov	r0, r4
2000ecbe:	4798      	blx	r3
2000ecc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2000ecc2:	b1b9      	cbz	r1, 2000ecf4 <_reclaim_reent+0xb0>
2000ecc4:	4620      	mov	r0, r4
2000ecc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
2000ecca:	f7ff bfad 	b.w	2000ec28 <cleanup_glue>
2000ecce:	5949      	ldr	r1, [r1, r5]
2000ecd0:	b941      	cbnz	r1, 2000ece4 <_reclaim_reent+0xa0>
2000ecd2:	3504      	adds	r5, #4
2000ecd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
2000ecd6:	2d80      	cmp	r5, #128	; 0x80
2000ecd8:	68d9      	ldr	r1, [r3, #12]
2000ecda:	d1f8      	bne.n	2000ecce <_reclaim_reent+0x8a>
2000ecdc:	4620      	mov	r0, r4
2000ecde:	f7ff fae1 	bl	2000e2a4 <_free_r>
2000ece2:	e7ba      	b.n	2000ec5a <_reclaim_reent+0x16>
2000ece4:	680e      	ldr	r6, [r1, #0]
2000ece6:	4620      	mov	r0, r4
2000ece8:	f7ff fadc 	bl	2000e2a4 <_free_r>
2000ecec:	4631      	mov	r1, r6
2000ecee:	e7ef      	b.n	2000ecd0 <_reclaim_reent+0x8c>
2000ecf0:	2500      	movs	r5, #0
2000ecf2:	e7ef      	b.n	2000ecd4 <_reclaim_reent+0x90>
2000ecf4:	bd70      	pop	{r4, r5, r6, pc}
2000ecf6:	bf00      	nop
2000ecf8:	20000224 	.word	0x20000224

2000ecfc <__swbuf_r>:
2000ecfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000ecfe:	460e      	mov	r6, r1
2000ed00:	4614      	mov	r4, r2
2000ed02:	4605      	mov	r5, r0
2000ed04:	b118      	cbz	r0, 2000ed0e <__swbuf_r+0x12>
2000ed06:	6983      	ldr	r3, [r0, #24]
2000ed08:	b90b      	cbnz	r3, 2000ed0e <__swbuf_r+0x12>
2000ed0a:	f000 fa11 	bl	2000f130 <__sinit>
2000ed0e:	4b21      	ldr	r3, [pc, #132]	; (2000ed94 <__swbuf_r+0x98>)
2000ed10:	429c      	cmp	r4, r3
2000ed12:	d12b      	bne.n	2000ed6c <__swbuf_r+0x70>
2000ed14:	686c      	ldr	r4, [r5, #4]
2000ed16:	69a3      	ldr	r3, [r4, #24]
2000ed18:	60a3      	str	r3, [r4, #8]
2000ed1a:	89a3      	ldrh	r3, [r4, #12]
2000ed1c:	071a      	lsls	r2, r3, #28
2000ed1e:	d52f      	bpl.n	2000ed80 <__swbuf_r+0x84>
2000ed20:	6923      	ldr	r3, [r4, #16]
2000ed22:	b36b      	cbz	r3, 2000ed80 <__swbuf_r+0x84>
2000ed24:	6923      	ldr	r3, [r4, #16]
2000ed26:	6820      	ldr	r0, [r4, #0]
2000ed28:	1ac0      	subs	r0, r0, r3
2000ed2a:	6963      	ldr	r3, [r4, #20]
2000ed2c:	b2f6      	uxtb	r6, r6
2000ed2e:	4283      	cmp	r3, r0
2000ed30:	4637      	mov	r7, r6
2000ed32:	dc04      	bgt.n	2000ed3e <__swbuf_r+0x42>
2000ed34:	4621      	mov	r1, r4
2000ed36:	4628      	mov	r0, r5
2000ed38:	f000 f936 	bl	2000efa8 <_fflush_r>
2000ed3c:	bb30      	cbnz	r0, 2000ed8c <__swbuf_r+0x90>
2000ed3e:	68a3      	ldr	r3, [r4, #8]
2000ed40:	3b01      	subs	r3, #1
2000ed42:	60a3      	str	r3, [r4, #8]
2000ed44:	6823      	ldr	r3, [r4, #0]
2000ed46:	1c5a      	adds	r2, r3, #1
2000ed48:	6022      	str	r2, [r4, #0]
2000ed4a:	701e      	strb	r6, [r3, #0]
2000ed4c:	6963      	ldr	r3, [r4, #20]
2000ed4e:	3001      	adds	r0, #1
2000ed50:	4283      	cmp	r3, r0
2000ed52:	d004      	beq.n	2000ed5e <__swbuf_r+0x62>
2000ed54:	89a3      	ldrh	r3, [r4, #12]
2000ed56:	07db      	lsls	r3, r3, #31
2000ed58:	d506      	bpl.n	2000ed68 <__swbuf_r+0x6c>
2000ed5a:	2e0a      	cmp	r6, #10
2000ed5c:	d104      	bne.n	2000ed68 <__swbuf_r+0x6c>
2000ed5e:	4621      	mov	r1, r4
2000ed60:	4628      	mov	r0, r5
2000ed62:	f000 f921 	bl	2000efa8 <_fflush_r>
2000ed66:	b988      	cbnz	r0, 2000ed8c <__swbuf_r+0x90>
2000ed68:	4638      	mov	r0, r7
2000ed6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000ed6c:	4b0a      	ldr	r3, [pc, #40]	; (2000ed98 <__swbuf_r+0x9c>)
2000ed6e:	429c      	cmp	r4, r3
2000ed70:	d101      	bne.n	2000ed76 <__swbuf_r+0x7a>
2000ed72:	68ac      	ldr	r4, [r5, #8]
2000ed74:	e7cf      	b.n	2000ed16 <__swbuf_r+0x1a>
2000ed76:	4b09      	ldr	r3, [pc, #36]	; (2000ed9c <__swbuf_r+0xa0>)
2000ed78:	429c      	cmp	r4, r3
2000ed7a:	bf08      	it	eq
2000ed7c:	68ec      	ldreq	r4, [r5, #12]
2000ed7e:	e7ca      	b.n	2000ed16 <__swbuf_r+0x1a>
2000ed80:	4621      	mov	r1, r4
2000ed82:	4628      	mov	r0, r5
2000ed84:	f000 f814 	bl	2000edb0 <__swsetup_r>
2000ed88:	2800      	cmp	r0, #0
2000ed8a:	d0cb      	beq.n	2000ed24 <__swbuf_r+0x28>
2000ed8c:	f04f 37ff 	mov.w	r7, #4294967295
2000ed90:	e7ea      	b.n	2000ed68 <__swbuf_r+0x6c>
2000ed92:	bf00      	nop
2000ed94:	2000feb4 	.word	0x2000feb4
2000ed98:	2000fed4 	.word	0x2000fed4
2000ed9c:	2000fe94 	.word	0x2000fe94

2000eda0 <__swbuf>:
2000eda0:	4b02      	ldr	r3, [pc, #8]	; (2000edac <__swbuf+0xc>)
2000eda2:	460a      	mov	r2, r1
2000eda4:	4601      	mov	r1, r0
2000eda6:	6818      	ldr	r0, [r3, #0]
2000eda8:	f7ff bfa8 	b.w	2000ecfc <__swbuf_r>
2000edac:	20000224 	.word	0x20000224

2000edb0 <__swsetup_r>:
2000edb0:	4b32      	ldr	r3, [pc, #200]	; (2000ee7c <__swsetup_r+0xcc>)
2000edb2:	b570      	push	{r4, r5, r6, lr}
2000edb4:	681d      	ldr	r5, [r3, #0]
2000edb6:	4606      	mov	r6, r0
2000edb8:	460c      	mov	r4, r1
2000edba:	b125      	cbz	r5, 2000edc6 <__swsetup_r+0x16>
2000edbc:	69ab      	ldr	r3, [r5, #24]
2000edbe:	b913      	cbnz	r3, 2000edc6 <__swsetup_r+0x16>
2000edc0:	4628      	mov	r0, r5
2000edc2:	f000 f9b5 	bl	2000f130 <__sinit>
2000edc6:	4b2e      	ldr	r3, [pc, #184]	; (2000ee80 <__swsetup_r+0xd0>)
2000edc8:	429c      	cmp	r4, r3
2000edca:	d10f      	bne.n	2000edec <__swsetup_r+0x3c>
2000edcc:	686c      	ldr	r4, [r5, #4]
2000edce:	89a3      	ldrh	r3, [r4, #12]
2000edd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
2000edd4:	0719      	lsls	r1, r3, #28
2000edd6:	d42c      	bmi.n	2000ee32 <__swsetup_r+0x82>
2000edd8:	06dd      	lsls	r5, r3, #27
2000edda:	d411      	bmi.n	2000ee00 <__swsetup_r+0x50>
2000eddc:	2309      	movs	r3, #9
2000edde:	6033      	str	r3, [r6, #0]
2000ede0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
2000ede4:	81a3      	strh	r3, [r4, #12]
2000ede6:	f04f 30ff 	mov.w	r0, #4294967295
2000edea:	e03e      	b.n	2000ee6a <__swsetup_r+0xba>
2000edec:	4b25      	ldr	r3, [pc, #148]	; (2000ee84 <__swsetup_r+0xd4>)
2000edee:	429c      	cmp	r4, r3
2000edf0:	d101      	bne.n	2000edf6 <__swsetup_r+0x46>
2000edf2:	68ac      	ldr	r4, [r5, #8]
2000edf4:	e7eb      	b.n	2000edce <__swsetup_r+0x1e>
2000edf6:	4b24      	ldr	r3, [pc, #144]	; (2000ee88 <__swsetup_r+0xd8>)
2000edf8:	429c      	cmp	r4, r3
2000edfa:	bf08      	it	eq
2000edfc:	68ec      	ldreq	r4, [r5, #12]
2000edfe:	e7e6      	b.n	2000edce <__swsetup_r+0x1e>
2000ee00:	0758      	lsls	r0, r3, #29
2000ee02:	d512      	bpl.n	2000ee2a <__swsetup_r+0x7a>
2000ee04:	6b61      	ldr	r1, [r4, #52]	; 0x34
2000ee06:	b141      	cbz	r1, 2000ee1a <__swsetup_r+0x6a>
2000ee08:	f104 0344 	add.w	r3, r4, #68	; 0x44
2000ee0c:	4299      	cmp	r1, r3
2000ee0e:	d002      	beq.n	2000ee16 <__swsetup_r+0x66>
2000ee10:	4630      	mov	r0, r6
2000ee12:	f7ff fa47 	bl	2000e2a4 <_free_r>
2000ee16:	2300      	movs	r3, #0
2000ee18:	6363      	str	r3, [r4, #52]	; 0x34
2000ee1a:	89a3      	ldrh	r3, [r4, #12]
2000ee1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
2000ee20:	81a3      	strh	r3, [r4, #12]
2000ee22:	2300      	movs	r3, #0
2000ee24:	6063      	str	r3, [r4, #4]
2000ee26:	6923      	ldr	r3, [r4, #16]
2000ee28:	6023      	str	r3, [r4, #0]
2000ee2a:	89a3      	ldrh	r3, [r4, #12]
2000ee2c:	f043 0308 	orr.w	r3, r3, #8
2000ee30:	81a3      	strh	r3, [r4, #12]
2000ee32:	6923      	ldr	r3, [r4, #16]
2000ee34:	b94b      	cbnz	r3, 2000ee4a <__swsetup_r+0x9a>
2000ee36:	89a3      	ldrh	r3, [r4, #12]
2000ee38:	f403 7320 	and.w	r3, r3, #640	; 0x280
2000ee3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2000ee40:	d003      	beq.n	2000ee4a <__swsetup_r+0x9a>
2000ee42:	4621      	mov	r1, r4
2000ee44:	4630      	mov	r0, r6
2000ee46:	f000 fbc3 	bl	2000f5d0 <__smakebuf_r>
2000ee4a:	89a0      	ldrh	r0, [r4, #12]
2000ee4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
2000ee50:	f010 0301 	ands.w	r3, r0, #1
2000ee54:	d00a      	beq.n	2000ee6c <__swsetup_r+0xbc>
2000ee56:	2300      	movs	r3, #0
2000ee58:	60a3      	str	r3, [r4, #8]
2000ee5a:	6963      	ldr	r3, [r4, #20]
2000ee5c:	425b      	negs	r3, r3
2000ee5e:	61a3      	str	r3, [r4, #24]
2000ee60:	6923      	ldr	r3, [r4, #16]
2000ee62:	b943      	cbnz	r3, 2000ee76 <__swsetup_r+0xc6>
2000ee64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
2000ee68:	d1ba      	bne.n	2000ede0 <__swsetup_r+0x30>
2000ee6a:	bd70      	pop	{r4, r5, r6, pc}
2000ee6c:	0781      	lsls	r1, r0, #30
2000ee6e:	bf58      	it	pl
2000ee70:	6963      	ldrpl	r3, [r4, #20]
2000ee72:	60a3      	str	r3, [r4, #8]
2000ee74:	e7f4      	b.n	2000ee60 <__swsetup_r+0xb0>
2000ee76:	2000      	movs	r0, #0
2000ee78:	e7f7      	b.n	2000ee6a <__swsetup_r+0xba>
2000ee7a:	bf00      	nop
2000ee7c:	20000224 	.word	0x20000224
2000ee80:	2000feb4 	.word	0x2000feb4
2000ee84:	2000fed4 	.word	0x2000fed4
2000ee88:	2000fe94 	.word	0x2000fe94

2000ee8c <abort>:
2000ee8c:	b508      	push	{r3, lr}
2000ee8e:	2006      	movs	r0, #6
2000ee90:	f000 fc5e 	bl	2000f750 <raise>
2000ee94:	2001      	movs	r0, #1
2000ee96:	f7f2 f935 	bl	20001104 <_exit>
	...

2000ee9c <__sflush_r>:
2000ee9c:	898a      	ldrh	r2, [r1, #12]
2000ee9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000eea2:	4605      	mov	r5, r0
2000eea4:	0710      	lsls	r0, r2, #28
2000eea6:	460c      	mov	r4, r1
2000eea8:	d458      	bmi.n	2000ef5c <__sflush_r+0xc0>
2000eeaa:	684b      	ldr	r3, [r1, #4]
2000eeac:	2b00      	cmp	r3, #0
2000eeae:	dc05      	bgt.n	2000eebc <__sflush_r+0x20>
2000eeb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
2000eeb2:	2b00      	cmp	r3, #0
2000eeb4:	dc02      	bgt.n	2000eebc <__sflush_r+0x20>
2000eeb6:	2000      	movs	r0, #0
2000eeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2000eebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
2000eebe:	2e00      	cmp	r6, #0
2000eec0:	d0f9      	beq.n	2000eeb6 <__sflush_r+0x1a>
2000eec2:	2300      	movs	r3, #0
2000eec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
2000eec8:	682f      	ldr	r7, [r5, #0]
2000eeca:	602b      	str	r3, [r5, #0]
2000eecc:	d032      	beq.n	2000ef34 <__sflush_r+0x98>
2000eece:	6d60      	ldr	r0, [r4, #84]	; 0x54
2000eed0:	89a3      	ldrh	r3, [r4, #12]
2000eed2:	075a      	lsls	r2, r3, #29
2000eed4:	d505      	bpl.n	2000eee2 <__sflush_r+0x46>
2000eed6:	6863      	ldr	r3, [r4, #4]
2000eed8:	1ac0      	subs	r0, r0, r3
2000eeda:	6b63      	ldr	r3, [r4, #52]	; 0x34
2000eedc:	b10b      	cbz	r3, 2000eee2 <__sflush_r+0x46>
2000eede:	6c23      	ldr	r3, [r4, #64]	; 0x40
2000eee0:	1ac0      	subs	r0, r0, r3
2000eee2:	2300      	movs	r3, #0
2000eee4:	4602      	mov	r2, r0
2000eee6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
2000eee8:	6a21      	ldr	r1, [r4, #32]
2000eeea:	4628      	mov	r0, r5
2000eeec:	47b0      	blx	r6
2000eeee:	1c43      	adds	r3, r0, #1
2000eef0:	89a3      	ldrh	r3, [r4, #12]
2000eef2:	d106      	bne.n	2000ef02 <__sflush_r+0x66>
2000eef4:	6829      	ldr	r1, [r5, #0]
2000eef6:	291d      	cmp	r1, #29
2000eef8:	d82c      	bhi.n	2000ef54 <__sflush_r+0xb8>
2000eefa:	4a2a      	ldr	r2, [pc, #168]	; (2000efa4 <__sflush_r+0x108>)
2000eefc:	40ca      	lsrs	r2, r1
2000eefe:	07d6      	lsls	r6, r2, #31
2000ef00:	d528      	bpl.n	2000ef54 <__sflush_r+0xb8>
2000ef02:	2200      	movs	r2, #0
2000ef04:	6062      	str	r2, [r4, #4]
2000ef06:	04d9      	lsls	r1, r3, #19
2000ef08:	6922      	ldr	r2, [r4, #16]
2000ef0a:	6022      	str	r2, [r4, #0]
2000ef0c:	d504      	bpl.n	2000ef18 <__sflush_r+0x7c>
2000ef0e:	1c42      	adds	r2, r0, #1
2000ef10:	d101      	bne.n	2000ef16 <__sflush_r+0x7a>
2000ef12:	682b      	ldr	r3, [r5, #0]
2000ef14:	b903      	cbnz	r3, 2000ef18 <__sflush_r+0x7c>
2000ef16:	6560      	str	r0, [r4, #84]	; 0x54
2000ef18:	6b61      	ldr	r1, [r4, #52]	; 0x34
2000ef1a:	602f      	str	r7, [r5, #0]
2000ef1c:	2900      	cmp	r1, #0
2000ef1e:	d0ca      	beq.n	2000eeb6 <__sflush_r+0x1a>
2000ef20:	f104 0344 	add.w	r3, r4, #68	; 0x44
2000ef24:	4299      	cmp	r1, r3
2000ef26:	d002      	beq.n	2000ef2e <__sflush_r+0x92>
2000ef28:	4628      	mov	r0, r5
2000ef2a:	f7ff f9bb 	bl	2000e2a4 <_free_r>
2000ef2e:	2000      	movs	r0, #0
2000ef30:	6360      	str	r0, [r4, #52]	; 0x34
2000ef32:	e7c1      	b.n	2000eeb8 <__sflush_r+0x1c>
2000ef34:	6a21      	ldr	r1, [r4, #32]
2000ef36:	2301      	movs	r3, #1
2000ef38:	4628      	mov	r0, r5
2000ef3a:	47b0      	blx	r6
2000ef3c:	1c41      	adds	r1, r0, #1
2000ef3e:	d1c7      	bne.n	2000eed0 <__sflush_r+0x34>
2000ef40:	682b      	ldr	r3, [r5, #0]
2000ef42:	2b00      	cmp	r3, #0
2000ef44:	d0c4      	beq.n	2000eed0 <__sflush_r+0x34>
2000ef46:	2b1d      	cmp	r3, #29
2000ef48:	d001      	beq.n	2000ef4e <__sflush_r+0xb2>
2000ef4a:	2b16      	cmp	r3, #22
2000ef4c:	d101      	bne.n	2000ef52 <__sflush_r+0xb6>
2000ef4e:	602f      	str	r7, [r5, #0]
2000ef50:	e7b1      	b.n	2000eeb6 <__sflush_r+0x1a>
2000ef52:	89a3      	ldrh	r3, [r4, #12]
2000ef54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000ef58:	81a3      	strh	r3, [r4, #12]
2000ef5a:	e7ad      	b.n	2000eeb8 <__sflush_r+0x1c>
2000ef5c:	690f      	ldr	r7, [r1, #16]
2000ef5e:	2f00      	cmp	r7, #0
2000ef60:	d0a9      	beq.n	2000eeb6 <__sflush_r+0x1a>
2000ef62:	0793      	lsls	r3, r2, #30
2000ef64:	680e      	ldr	r6, [r1, #0]
2000ef66:	bf08      	it	eq
2000ef68:	694b      	ldreq	r3, [r1, #20]
2000ef6a:	600f      	str	r7, [r1, #0]
2000ef6c:	bf18      	it	ne
2000ef6e:	2300      	movne	r3, #0
2000ef70:	eba6 0807 	sub.w	r8, r6, r7
2000ef74:	608b      	str	r3, [r1, #8]
2000ef76:	f1b8 0f00 	cmp.w	r8, #0
2000ef7a:	dd9c      	ble.n	2000eeb6 <__sflush_r+0x1a>
2000ef7c:	6a21      	ldr	r1, [r4, #32]
2000ef7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
2000ef80:	4643      	mov	r3, r8
2000ef82:	463a      	mov	r2, r7
2000ef84:	4628      	mov	r0, r5
2000ef86:	47b0      	blx	r6
2000ef88:	2800      	cmp	r0, #0
2000ef8a:	dc06      	bgt.n	2000ef9a <__sflush_r+0xfe>
2000ef8c:	89a3      	ldrh	r3, [r4, #12]
2000ef8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000ef92:	81a3      	strh	r3, [r4, #12]
2000ef94:	f04f 30ff 	mov.w	r0, #4294967295
2000ef98:	e78e      	b.n	2000eeb8 <__sflush_r+0x1c>
2000ef9a:	4407      	add	r7, r0
2000ef9c:	eba8 0800 	sub.w	r8, r8, r0
2000efa0:	e7e9      	b.n	2000ef76 <__sflush_r+0xda>
2000efa2:	bf00      	nop
2000efa4:	20400001 	.word	0x20400001

2000efa8 <_fflush_r>:
2000efa8:	b538      	push	{r3, r4, r5, lr}
2000efaa:	690b      	ldr	r3, [r1, #16]
2000efac:	4605      	mov	r5, r0
2000efae:	460c      	mov	r4, r1
2000efb0:	b913      	cbnz	r3, 2000efb8 <_fflush_r+0x10>
2000efb2:	2500      	movs	r5, #0
2000efb4:	4628      	mov	r0, r5
2000efb6:	bd38      	pop	{r3, r4, r5, pc}
2000efb8:	b118      	cbz	r0, 2000efc2 <_fflush_r+0x1a>
2000efba:	6983      	ldr	r3, [r0, #24]
2000efbc:	b90b      	cbnz	r3, 2000efc2 <_fflush_r+0x1a>
2000efbe:	f000 f8b7 	bl	2000f130 <__sinit>
2000efc2:	4b14      	ldr	r3, [pc, #80]	; (2000f014 <_fflush_r+0x6c>)
2000efc4:	429c      	cmp	r4, r3
2000efc6:	d11b      	bne.n	2000f000 <_fflush_r+0x58>
2000efc8:	686c      	ldr	r4, [r5, #4]
2000efca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2000efce:	2b00      	cmp	r3, #0
2000efd0:	d0ef      	beq.n	2000efb2 <_fflush_r+0xa>
2000efd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
2000efd4:	07d0      	lsls	r0, r2, #31
2000efd6:	d404      	bmi.n	2000efe2 <_fflush_r+0x3a>
2000efd8:	0599      	lsls	r1, r3, #22
2000efda:	d402      	bmi.n	2000efe2 <_fflush_r+0x3a>
2000efdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
2000efde:	f000 facc 	bl	2000f57a <__retarget_lock_acquire_recursive>
2000efe2:	4628      	mov	r0, r5
2000efe4:	4621      	mov	r1, r4
2000efe6:	f7ff ff59 	bl	2000ee9c <__sflush_r>
2000efea:	6e63      	ldr	r3, [r4, #100]	; 0x64
2000efec:	07da      	lsls	r2, r3, #31
2000efee:	4605      	mov	r5, r0
2000eff0:	d4e0      	bmi.n	2000efb4 <_fflush_r+0xc>
2000eff2:	89a3      	ldrh	r3, [r4, #12]
2000eff4:	059b      	lsls	r3, r3, #22
2000eff6:	d4dd      	bmi.n	2000efb4 <_fflush_r+0xc>
2000eff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
2000effa:	f000 fac4 	bl	2000f586 <__retarget_lock_release_recursive>
2000effe:	e7d9      	b.n	2000efb4 <_fflush_r+0xc>
2000f000:	4b05      	ldr	r3, [pc, #20]	; (2000f018 <_fflush_r+0x70>)
2000f002:	429c      	cmp	r4, r3
2000f004:	d101      	bne.n	2000f00a <_fflush_r+0x62>
2000f006:	68ac      	ldr	r4, [r5, #8]
2000f008:	e7df      	b.n	2000efca <_fflush_r+0x22>
2000f00a:	4b04      	ldr	r3, [pc, #16]	; (2000f01c <_fflush_r+0x74>)
2000f00c:	429c      	cmp	r4, r3
2000f00e:	bf08      	it	eq
2000f010:	68ec      	ldreq	r4, [r5, #12]
2000f012:	e7da      	b.n	2000efca <_fflush_r+0x22>
2000f014:	2000feb4 	.word	0x2000feb4
2000f018:	2000fed4 	.word	0x2000fed4
2000f01c:	2000fe94 	.word	0x2000fe94

2000f020 <fflush>:
2000f020:	4601      	mov	r1, r0
2000f022:	b920      	cbnz	r0, 2000f02e <fflush+0xe>
2000f024:	4b04      	ldr	r3, [pc, #16]	; (2000f038 <fflush+0x18>)
2000f026:	4905      	ldr	r1, [pc, #20]	; (2000f03c <fflush+0x1c>)
2000f028:	6818      	ldr	r0, [r3, #0]
2000f02a:	f000 ba82 	b.w	2000f532 <_fwalk_reent>
2000f02e:	4b04      	ldr	r3, [pc, #16]	; (2000f040 <fflush+0x20>)
2000f030:	6818      	ldr	r0, [r3, #0]
2000f032:	f7ff bfb9 	b.w	2000efa8 <_fflush_r>
2000f036:	bf00      	nop
2000f038:	2000fa18 	.word	0x2000fa18
2000f03c:	2000efa9 	.word	0x2000efa9
2000f040:	20000224 	.word	0x20000224

2000f044 <std>:
2000f044:	2300      	movs	r3, #0
2000f046:	b510      	push	{r4, lr}
2000f048:	4604      	mov	r4, r0
2000f04a:	e9c0 3300 	strd	r3, r3, [r0]
2000f04e:	e9c0 3304 	strd	r3, r3, [r0, #16]
2000f052:	6083      	str	r3, [r0, #8]
2000f054:	8181      	strh	r1, [r0, #12]
2000f056:	6643      	str	r3, [r0, #100]	; 0x64
2000f058:	81c2      	strh	r2, [r0, #14]
2000f05a:	6183      	str	r3, [r0, #24]
2000f05c:	4619      	mov	r1, r3
2000f05e:	2208      	movs	r2, #8
2000f060:	305c      	adds	r0, #92	; 0x5c
2000f062:	f7fb fc87 	bl	2000a974 <memset>
2000f066:	4b05      	ldr	r3, [pc, #20]	; (2000f07c <std+0x38>)
2000f068:	6263      	str	r3, [r4, #36]	; 0x24
2000f06a:	4b05      	ldr	r3, [pc, #20]	; (2000f080 <std+0x3c>)
2000f06c:	62a3      	str	r3, [r4, #40]	; 0x28
2000f06e:	4b05      	ldr	r3, [pc, #20]	; (2000f084 <std+0x40>)
2000f070:	62e3      	str	r3, [r4, #44]	; 0x2c
2000f072:	4b05      	ldr	r3, [pc, #20]	; (2000f088 <std+0x44>)
2000f074:	6224      	str	r4, [r4, #32]
2000f076:	6323      	str	r3, [r4, #48]	; 0x30
2000f078:	bd10      	pop	{r4, pc}
2000f07a:	bf00      	nop
2000f07c:	2000f7b5 	.word	0x2000f7b5
2000f080:	2000f7db 	.word	0x2000f7db
2000f084:	2000f813 	.word	0x2000f813
2000f088:	2000f837 	.word	0x2000f837

2000f08c <_cleanup_r>:
2000f08c:	4901      	ldr	r1, [pc, #4]	; (2000f094 <_cleanup_r+0x8>)
2000f08e:	f000 ba50 	b.w	2000f532 <_fwalk_reent>
2000f092:	bf00      	nop
2000f094:	2000efa9 	.word	0x2000efa9

2000f098 <__fp_lock>:
2000f098:	b508      	push	{r3, lr}
2000f09a:	6e43      	ldr	r3, [r0, #100]	; 0x64
2000f09c:	07da      	lsls	r2, r3, #31
2000f09e:	d405      	bmi.n	2000f0ac <__fp_lock+0x14>
2000f0a0:	8983      	ldrh	r3, [r0, #12]
2000f0a2:	059b      	lsls	r3, r3, #22
2000f0a4:	d402      	bmi.n	2000f0ac <__fp_lock+0x14>
2000f0a6:	6d80      	ldr	r0, [r0, #88]	; 0x58
2000f0a8:	f000 fa67 	bl	2000f57a <__retarget_lock_acquire_recursive>
2000f0ac:	2000      	movs	r0, #0
2000f0ae:	bd08      	pop	{r3, pc}

2000f0b0 <__fp_unlock>:
2000f0b0:	b508      	push	{r3, lr}
2000f0b2:	6e43      	ldr	r3, [r0, #100]	; 0x64
2000f0b4:	07da      	lsls	r2, r3, #31
2000f0b6:	d405      	bmi.n	2000f0c4 <__fp_unlock+0x14>
2000f0b8:	8983      	ldrh	r3, [r0, #12]
2000f0ba:	059b      	lsls	r3, r3, #22
2000f0bc:	d402      	bmi.n	2000f0c4 <__fp_unlock+0x14>
2000f0be:	6d80      	ldr	r0, [r0, #88]	; 0x58
2000f0c0:	f000 fa61 	bl	2000f586 <__retarget_lock_release_recursive>
2000f0c4:	2000      	movs	r0, #0
2000f0c6:	bd08      	pop	{r3, pc}

2000f0c8 <__sfmoreglue>:
2000f0c8:	b570      	push	{r4, r5, r6, lr}
2000f0ca:	1e4a      	subs	r2, r1, #1
2000f0cc:	2568      	movs	r5, #104	; 0x68
2000f0ce:	4355      	muls	r5, r2
2000f0d0:	460e      	mov	r6, r1
2000f0d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
2000f0d6:	f7ff f935 	bl	2000e344 <_malloc_r>
2000f0da:	4604      	mov	r4, r0
2000f0dc:	b140      	cbz	r0, 2000f0f0 <__sfmoreglue+0x28>
2000f0de:	2100      	movs	r1, #0
2000f0e0:	e9c0 1600 	strd	r1, r6, [r0]
2000f0e4:	300c      	adds	r0, #12
2000f0e6:	60a0      	str	r0, [r4, #8]
2000f0e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
2000f0ec:	f7fb fc42 	bl	2000a974 <memset>
2000f0f0:	4620      	mov	r0, r4
2000f0f2:	bd70      	pop	{r4, r5, r6, pc}

2000f0f4 <_cleanup>:
2000f0f4:	4b01      	ldr	r3, [pc, #4]	; (2000f0fc <_cleanup+0x8>)
2000f0f6:	6818      	ldr	r0, [r3, #0]
2000f0f8:	f7ff bfc8 	b.w	2000f08c <_cleanup_r>
2000f0fc:	2000fa18 	.word	0x2000fa18

2000f100 <__sfp_lock_acquire>:
2000f100:	4801      	ldr	r0, [pc, #4]	; (2000f108 <__sfp_lock_acquire+0x8>)
2000f102:	f000 ba3a 	b.w	2000f57a <__retarget_lock_acquire_recursive>
2000f106:	bf00      	nop
2000f108:	200004a0 	.word	0x200004a0

2000f10c <__sfp_lock_release>:
2000f10c:	4801      	ldr	r0, [pc, #4]	; (2000f114 <__sfp_lock_release+0x8>)
2000f10e:	f000 ba3a 	b.w	2000f586 <__retarget_lock_release_recursive>
2000f112:	bf00      	nop
2000f114:	200004a0 	.word	0x200004a0

2000f118 <__sinit_lock_acquire>:
2000f118:	4801      	ldr	r0, [pc, #4]	; (2000f120 <__sinit_lock_acquire+0x8>)
2000f11a:	f000 ba2e 	b.w	2000f57a <__retarget_lock_acquire_recursive>
2000f11e:	bf00      	nop
2000f120:	2000049b 	.word	0x2000049b

2000f124 <__sinit_lock_release>:
2000f124:	4801      	ldr	r0, [pc, #4]	; (2000f12c <__sinit_lock_release+0x8>)
2000f126:	f000 ba2e 	b.w	2000f586 <__retarget_lock_release_recursive>
2000f12a:	bf00      	nop
2000f12c:	2000049b 	.word	0x2000049b

2000f130 <__sinit>:
2000f130:	b510      	push	{r4, lr}
2000f132:	4604      	mov	r4, r0
2000f134:	f7ff fff0 	bl	2000f118 <__sinit_lock_acquire>
2000f138:	69a3      	ldr	r3, [r4, #24]
2000f13a:	b11b      	cbz	r3, 2000f144 <__sinit+0x14>
2000f13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2000f140:	f7ff bff0 	b.w	2000f124 <__sinit_lock_release>
2000f144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
2000f148:	6523      	str	r3, [r4, #80]	; 0x50
2000f14a:	4b13      	ldr	r3, [pc, #76]	; (2000f198 <__sinit+0x68>)
2000f14c:	4a13      	ldr	r2, [pc, #76]	; (2000f19c <__sinit+0x6c>)
2000f14e:	681b      	ldr	r3, [r3, #0]
2000f150:	62a2      	str	r2, [r4, #40]	; 0x28
2000f152:	42a3      	cmp	r3, r4
2000f154:	bf04      	itt	eq
2000f156:	2301      	moveq	r3, #1
2000f158:	61a3      	streq	r3, [r4, #24]
2000f15a:	4620      	mov	r0, r4
2000f15c:	f000 f820 	bl	2000f1a0 <__sfp>
2000f160:	6060      	str	r0, [r4, #4]
2000f162:	4620      	mov	r0, r4
2000f164:	f000 f81c 	bl	2000f1a0 <__sfp>
2000f168:	60a0      	str	r0, [r4, #8]
2000f16a:	4620      	mov	r0, r4
2000f16c:	f000 f818 	bl	2000f1a0 <__sfp>
2000f170:	2200      	movs	r2, #0
2000f172:	60e0      	str	r0, [r4, #12]
2000f174:	2104      	movs	r1, #4
2000f176:	6860      	ldr	r0, [r4, #4]
2000f178:	f7ff ff64 	bl	2000f044 <std>
2000f17c:	68a0      	ldr	r0, [r4, #8]
2000f17e:	2201      	movs	r2, #1
2000f180:	2109      	movs	r1, #9
2000f182:	f7ff ff5f 	bl	2000f044 <std>
2000f186:	68e0      	ldr	r0, [r4, #12]
2000f188:	2202      	movs	r2, #2
2000f18a:	2112      	movs	r1, #18
2000f18c:	f7ff ff5a 	bl	2000f044 <std>
2000f190:	2301      	movs	r3, #1
2000f192:	61a3      	str	r3, [r4, #24]
2000f194:	e7d2      	b.n	2000f13c <__sinit+0xc>
2000f196:	bf00      	nop
2000f198:	2000fa18 	.word	0x2000fa18
2000f19c:	2000f08d 	.word	0x2000f08d

2000f1a0 <__sfp>:
2000f1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000f1a2:	4607      	mov	r7, r0
2000f1a4:	f7ff ffac 	bl	2000f100 <__sfp_lock_acquire>
2000f1a8:	4b1e      	ldr	r3, [pc, #120]	; (2000f224 <__sfp+0x84>)
2000f1aa:	681e      	ldr	r6, [r3, #0]
2000f1ac:	69b3      	ldr	r3, [r6, #24]
2000f1ae:	b913      	cbnz	r3, 2000f1b6 <__sfp+0x16>
2000f1b0:	4630      	mov	r0, r6
2000f1b2:	f7ff ffbd 	bl	2000f130 <__sinit>
2000f1b6:	3648      	adds	r6, #72	; 0x48
2000f1b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
2000f1bc:	3b01      	subs	r3, #1
2000f1be:	d503      	bpl.n	2000f1c8 <__sfp+0x28>
2000f1c0:	6833      	ldr	r3, [r6, #0]
2000f1c2:	b30b      	cbz	r3, 2000f208 <__sfp+0x68>
2000f1c4:	6836      	ldr	r6, [r6, #0]
2000f1c6:	e7f7      	b.n	2000f1b8 <__sfp+0x18>
2000f1c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
2000f1cc:	b9d5      	cbnz	r5, 2000f204 <__sfp+0x64>
2000f1ce:	4b16      	ldr	r3, [pc, #88]	; (2000f228 <__sfp+0x88>)
2000f1d0:	60e3      	str	r3, [r4, #12]
2000f1d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
2000f1d6:	6665      	str	r5, [r4, #100]	; 0x64
2000f1d8:	f000 f9cb 	bl	2000f572 <__retarget_lock_init_recursive>
2000f1dc:	f7ff ff96 	bl	2000f10c <__sfp_lock_release>
2000f1e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
2000f1e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
2000f1e8:	6025      	str	r5, [r4, #0]
2000f1ea:	61a5      	str	r5, [r4, #24]
2000f1ec:	2208      	movs	r2, #8
2000f1ee:	4629      	mov	r1, r5
2000f1f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
2000f1f4:	f7fb fbbe 	bl	2000a974 <memset>
2000f1f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
2000f1fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
2000f200:	4620      	mov	r0, r4
2000f202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000f204:	3468      	adds	r4, #104	; 0x68
2000f206:	e7d9      	b.n	2000f1bc <__sfp+0x1c>
2000f208:	2104      	movs	r1, #4
2000f20a:	4638      	mov	r0, r7
2000f20c:	f7ff ff5c 	bl	2000f0c8 <__sfmoreglue>
2000f210:	4604      	mov	r4, r0
2000f212:	6030      	str	r0, [r6, #0]
2000f214:	2800      	cmp	r0, #0
2000f216:	d1d5      	bne.n	2000f1c4 <__sfp+0x24>
2000f218:	f7ff ff78 	bl	2000f10c <__sfp_lock_release>
2000f21c:	230c      	movs	r3, #12
2000f21e:	603b      	str	r3, [r7, #0]
2000f220:	e7ee      	b.n	2000f200 <__sfp+0x60>
2000f222:	bf00      	nop
2000f224:	2000fa18 	.word	0x2000fa18
2000f228:	ffff0001 	.word	0xffff0001

2000f22c <__fp_lock_all>:
2000f22c:	b508      	push	{r3, lr}
2000f22e:	f7ff ff67 	bl	2000f100 <__sfp_lock_acquire>
2000f232:	4b03      	ldr	r3, [pc, #12]	; (2000f240 <__fp_lock_all+0x14>)
2000f234:	4903      	ldr	r1, [pc, #12]	; (2000f244 <__fp_lock_all+0x18>)
2000f236:	6818      	ldr	r0, [r3, #0]
2000f238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2000f23c:	f000 b95c 	b.w	2000f4f8 <_fwalk>
2000f240:	20000224 	.word	0x20000224
2000f244:	2000f099 	.word	0x2000f099

2000f248 <__fp_unlock_all>:
2000f248:	b508      	push	{r3, lr}
2000f24a:	4b04      	ldr	r3, [pc, #16]	; (2000f25c <__fp_unlock_all+0x14>)
2000f24c:	4904      	ldr	r1, [pc, #16]	; (2000f260 <__fp_unlock_all+0x18>)
2000f24e:	6818      	ldr	r0, [r3, #0]
2000f250:	f000 f952 	bl	2000f4f8 <_fwalk>
2000f254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2000f258:	f7ff bf58 	b.w	2000f10c <__sfp_lock_release>
2000f25c:	20000224 	.word	0x20000224
2000f260:	2000f0b1 	.word	0x2000f0b1

2000f264 <__sfvwrite_r>:
2000f264:	6893      	ldr	r3, [r2, #8]
2000f266:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000f26a:	4606      	mov	r6, r0
2000f26c:	460c      	mov	r4, r1
2000f26e:	4690      	mov	r8, r2
2000f270:	b91b      	cbnz	r3, 2000f27a <__sfvwrite_r+0x16>
2000f272:	2000      	movs	r0, #0
2000f274:	b003      	add	sp, #12
2000f276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000f27a:	898b      	ldrh	r3, [r1, #12]
2000f27c:	0718      	lsls	r0, r3, #28
2000f27e:	d550      	bpl.n	2000f322 <__sfvwrite_r+0xbe>
2000f280:	690b      	ldr	r3, [r1, #16]
2000f282:	2b00      	cmp	r3, #0
2000f284:	d04d      	beq.n	2000f322 <__sfvwrite_r+0xbe>
2000f286:	89a3      	ldrh	r3, [r4, #12]
2000f288:	f8d8 7000 	ldr.w	r7, [r8]
2000f28c:	f013 0902 	ands.w	r9, r3, #2
2000f290:	d16c      	bne.n	2000f36c <__sfvwrite_r+0x108>
2000f292:	f013 0301 	ands.w	r3, r3, #1
2000f296:	f000 809c 	beq.w	2000f3d2 <__sfvwrite_r+0x16e>
2000f29a:	4648      	mov	r0, r9
2000f29c:	46ca      	mov	sl, r9
2000f29e:	46cb      	mov	fp, r9
2000f2a0:	f1bb 0f00 	cmp.w	fp, #0
2000f2a4:	f000 8103 	beq.w	2000f4ae <__sfvwrite_r+0x24a>
2000f2a8:	b950      	cbnz	r0, 2000f2c0 <__sfvwrite_r+0x5c>
2000f2aa:	465a      	mov	r2, fp
2000f2ac:	210a      	movs	r1, #10
2000f2ae:	4650      	mov	r0, sl
2000f2b0:	f7f1 f966 	bl	20000580 <memchr>
2000f2b4:	2800      	cmp	r0, #0
2000f2b6:	f000 80ff 	beq.w	2000f4b8 <__sfvwrite_r+0x254>
2000f2ba:	3001      	adds	r0, #1
2000f2bc:	eba0 090a 	sub.w	r9, r0, sl
2000f2c0:	6820      	ldr	r0, [r4, #0]
2000f2c2:	6921      	ldr	r1, [r4, #16]
2000f2c4:	6963      	ldr	r3, [r4, #20]
2000f2c6:	45d9      	cmp	r9, fp
2000f2c8:	464a      	mov	r2, r9
2000f2ca:	bf28      	it	cs
2000f2cc:	465a      	movcs	r2, fp
2000f2ce:	4288      	cmp	r0, r1
2000f2d0:	f240 80f5 	bls.w	2000f4be <__sfvwrite_r+0x25a>
2000f2d4:	68a5      	ldr	r5, [r4, #8]
2000f2d6:	441d      	add	r5, r3
2000f2d8:	42aa      	cmp	r2, r5
2000f2da:	f340 80f0 	ble.w	2000f4be <__sfvwrite_r+0x25a>
2000f2de:	4651      	mov	r1, sl
2000f2e0:	462a      	mov	r2, r5
2000f2e2:	f7ff fae5 	bl	2000e8b0 <memmove>
2000f2e6:	6823      	ldr	r3, [r4, #0]
2000f2e8:	442b      	add	r3, r5
2000f2ea:	6023      	str	r3, [r4, #0]
2000f2ec:	4621      	mov	r1, r4
2000f2ee:	4630      	mov	r0, r6
2000f2f0:	f7ff fe5a 	bl	2000efa8 <_fflush_r>
2000f2f4:	2800      	cmp	r0, #0
2000f2f6:	d167      	bne.n	2000f3c8 <__sfvwrite_r+0x164>
2000f2f8:	ebb9 0905 	subs.w	r9, r9, r5
2000f2fc:	f040 80f7 	bne.w	2000f4ee <__sfvwrite_r+0x28a>
2000f300:	4621      	mov	r1, r4
2000f302:	4630      	mov	r0, r6
2000f304:	f7ff fe50 	bl	2000efa8 <_fflush_r>
2000f308:	2800      	cmp	r0, #0
2000f30a:	d15d      	bne.n	2000f3c8 <__sfvwrite_r+0x164>
2000f30c:	f8d8 2008 	ldr.w	r2, [r8, #8]
2000f310:	44aa      	add	sl, r5
2000f312:	ebab 0b05 	sub.w	fp, fp, r5
2000f316:	1b55      	subs	r5, r2, r5
2000f318:	f8c8 5008 	str.w	r5, [r8, #8]
2000f31c:	2d00      	cmp	r5, #0
2000f31e:	d1bf      	bne.n	2000f2a0 <__sfvwrite_r+0x3c>
2000f320:	e7a7      	b.n	2000f272 <__sfvwrite_r+0xe>
2000f322:	4621      	mov	r1, r4
2000f324:	4630      	mov	r0, r6
2000f326:	f7ff fd43 	bl	2000edb0 <__swsetup_r>
2000f32a:	2800      	cmp	r0, #0
2000f32c:	d0ab      	beq.n	2000f286 <__sfvwrite_r+0x22>
2000f32e:	f04f 30ff 	mov.w	r0, #4294967295
2000f332:	e79f      	b.n	2000f274 <__sfvwrite_r+0x10>
2000f334:	e9d7 b900 	ldrd	fp, r9, [r7]
2000f338:	3708      	adds	r7, #8
2000f33a:	f1b9 0f00 	cmp.w	r9, #0
2000f33e:	d0f9      	beq.n	2000f334 <__sfvwrite_r+0xd0>
2000f340:	45d1      	cmp	r9, sl
2000f342:	464b      	mov	r3, r9
2000f344:	6a21      	ldr	r1, [r4, #32]
2000f346:	6aa5      	ldr	r5, [r4, #40]	; 0x28
2000f348:	bf28      	it	cs
2000f34a:	4653      	movcs	r3, sl
2000f34c:	465a      	mov	r2, fp
2000f34e:	4630      	mov	r0, r6
2000f350:	47a8      	blx	r5
2000f352:	2800      	cmp	r0, #0
2000f354:	dd38      	ble.n	2000f3c8 <__sfvwrite_r+0x164>
2000f356:	f8d8 3008 	ldr.w	r3, [r8, #8]
2000f35a:	4483      	add	fp, r0
2000f35c:	eba9 0900 	sub.w	r9, r9, r0
2000f360:	1a18      	subs	r0, r3, r0
2000f362:	f8c8 0008 	str.w	r0, [r8, #8]
2000f366:	2800      	cmp	r0, #0
2000f368:	d1e7      	bne.n	2000f33a <__sfvwrite_r+0xd6>
2000f36a:	e782      	b.n	2000f272 <__sfvwrite_r+0xe>
2000f36c:	f04f 0b00 	mov.w	fp, #0
2000f370:	f8df a180 	ldr.w	sl, [pc, #384]	; 2000f4f4 <__sfvwrite_r+0x290>
2000f374:	46d9      	mov	r9, fp
2000f376:	e7e0      	b.n	2000f33a <__sfvwrite_r+0xd6>
2000f378:	e9d7 9a00 	ldrd	r9, sl, [r7]
2000f37c:	3708      	adds	r7, #8
2000f37e:	f1ba 0f00 	cmp.w	sl, #0
2000f382:	d0f9      	beq.n	2000f378 <__sfvwrite_r+0x114>
2000f384:	89a3      	ldrh	r3, [r4, #12]
2000f386:	68a2      	ldr	r2, [r4, #8]
2000f388:	6820      	ldr	r0, [r4, #0]
2000f38a:	0599      	lsls	r1, r3, #22
2000f38c:	d563      	bpl.n	2000f456 <__sfvwrite_r+0x1f2>
2000f38e:	4552      	cmp	r2, sl
2000f390:	d836      	bhi.n	2000f400 <__sfvwrite_r+0x19c>
2000f392:	f413 6f90 	tst.w	r3, #1152	; 0x480
2000f396:	d033      	beq.n	2000f400 <__sfvwrite_r+0x19c>
2000f398:	6921      	ldr	r1, [r4, #16]
2000f39a:	6965      	ldr	r5, [r4, #20]
2000f39c:	eba0 0b01 	sub.w	fp, r0, r1
2000f3a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
2000f3a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
2000f3a8:	f10b 0201 	add.w	r2, fp, #1
2000f3ac:	106d      	asrs	r5, r5, #1
2000f3ae:	4452      	add	r2, sl
2000f3b0:	4295      	cmp	r5, r2
2000f3b2:	bf38      	it	cc
2000f3b4:	4615      	movcc	r5, r2
2000f3b6:	055b      	lsls	r3, r3, #21
2000f3b8:	d53d      	bpl.n	2000f436 <__sfvwrite_r+0x1d2>
2000f3ba:	4629      	mov	r1, r5
2000f3bc:	4630      	mov	r0, r6
2000f3be:	f7fe ffc1 	bl	2000e344 <_malloc_r>
2000f3c2:	b948      	cbnz	r0, 2000f3d8 <__sfvwrite_r+0x174>
2000f3c4:	230c      	movs	r3, #12
2000f3c6:	6033      	str	r3, [r6, #0]
2000f3c8:	89a3      	ldrh	r3, [r4, #12]
2000f3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000f3ce:	81a3      	strh	r3, [r4, #12]
2000f3d0:	e7ad      	b.n	2000f32e <__sfvwrite_r+0xca>
2000f3d2:	4699      	mov	r9, r3
2000f3d4:	469a      	mov	sl, r3
2000f3d6:	e7d2      	b.n	2000f37e <__sfvwrite_r+0x11a>
2000f3d8:	465a      	mov	r2, fp
2000f3da:	6921      	ldr	r1, [r4, #16]
2000f3dc:	9001      	str	r0, [sp, #4]
2000f3de:	f7fe fa73 	bl	2000d8c8 <memcpy>
2000f3e2:	89a2      	ldrh	r2, [r4, #12]
2000f3e4:	9b01      	ldr	r3, [sp, #4]
2000f3e6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
2000f3ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2000f3ee:	81a2      	strh	r2, [r4, #12]
2000f3f0:	6123      	str	r3, [r4, #16]
2000f3f2:	6165      	str	r5, [r4, #20]
2000f3f4:	445b      	add	r3, fp
2000f3f6:	eba5 050b 	sub.w	r5, r5, fp
2000f3fa:	6023      	str	r3, [r4, #0]
2000f3fc:	4652      	mov	r2, sl
2000f3fe:	60a5      	str	r5, [r4, #8]
2000f400:	4552      	cmp	r2, sl
2000f402:	bf28      	it	cs
2000f404:	4652      	movcs	r2, sl
2000f406:	6820      	ldr	r0, [r4, #0]
2000f408:	9201      	str	r2, [sp, #4]
2000f40a:	4649      	mov	r1, r9
2000f40c:	f7ff fa50 	bl	2000e8b0 <memmove>
2000f410:	68a3      	ldr	r3, [r4, #8]
2000f412:	9a01      	ldr	r2, [sp, #4]
2000f414:	1a9b      	subs	r3, r3, r2
2000f416:	60a3      	str	r3, [r4, #8]
2000f418:	6823      	ldr	r3, [r4, #0]
2000f41a:	441a      	add	r2, r3
2000f41c:	4655      	mov	r5, sl
2000f41e:	6022      	str	r2, [r4, #0]
2000f420:	f8d8 0008 	ldr.w	r0, [r8, #8]
2000f424:	44a9      	add	r9, r5
2000f426:	ebaa 0a05 	sub.w	sl, sl, r5
2000f42a:	1b45      	subs	r5, r0, r5
2000f42c:	f8c8 5008 	str.w	r5, [r8, #8]
2000f430:	2d00      	cmp	r5, #0
2000f432:	d1a4      	bne.n	2000f37e <__sfvwrite_r+0x11a>
2000f434:	e71d      	b.n	2000f272 <__sfvwrite_r+0xe>
2000f436:	462a      	mov	r2, r5
2000f438:	4630      	mov	r0, r6
2000f43a:	f7ff fa5f 	bl	2000e8fc <_realloc_r>
2000f43e:	4603      	mov	r3, r0
2000f440:	2800      	cmp	r0, #0
2000f442:	d1d5      	bne.n	2000f3f0 <__sfvwrite_r+0x18c>
2000f444:	6921      	ldr	r1, [r4, #16]
2000f446:	4630      	mov	r0, r6
2000f448:	f7fe ff2c 	bl	2000e2a4 <_free_r>
2000f44c:	89a3      	ldrh	r3, [r4, #12]
2000f44e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2000f452:	81a3      	strh	r3, [r4, #12]
2000f454:	e7b6      	b.n	2000f3c4 <__sfvwrite_r+0x160>
2000f456:	6923      	ldr	r3, [r4, #16]
2000f458:	4283      	cmp	r3, r0
2000f45a:	d302      	bcc.n	2000f462 <__sfvwrite_r+0x1fe>
2000f45c:	6961      	ldr	r1, [r4, #20]
2000f45e:	4551      	cmp	r1, sl
2000f460:	d915      	bls.n	2000f48e <__sfvwrite_r+0x22a>
2000f462:	4552      	cmp	r2, sl
2000f464:	bf28      	it	cs
2000f466:	4652      	movcs	r2, sl
2000f468:	4649      	mov	r1, r9
2000f46a:	4615      	mov	r5, r2
2000f46c:	f7ff fa20 	bl	2000e8b0 <memmove>
2000f470:	68a3      	ldr	r3, [r4, #8]
2000f472:	6822      	ldr	r2, [r4, #0]
2000f474:	1b5b      	subs	r3, r3, r5
2000f476:	442a      	add	r2, r5
2000f478:	60a3      	str	r3, [r4, #8]
2000f47a:	6022      	str	r2, [r4, #0]
2000f47c:	2b00      	cmp	r3, #0
2000f47e:	d1cf      	bne.n	2000f420 <__sfvwrite_r+0x1bc>
2000f480:	4621      	mov	r1, r4
2000f482:	4630      	mov	r0, r6
2000f484:	f7ff fd90 	bl	2000efa8 <_fflush_r>
2000f488:	2800      	cmp	r0, #0
2000f48a:	d0c9      	beq.n	2000f420 <__sfvwrite_r+0x1bc>
2000f48c:	e79c      	b.n	2000f3c8 <__sfvwrite_r+0x164>
2000f48e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
2000f492:	459a      	cmp	sl, r3
2000f494:	bf38      	it	cc
2000f496:	4653      	movcc	r3, sl
2000f498:	6aa5      	ldr	r5, [r4, #40]	; 0x28
2000f49a:	fb93 f3f1 	sdiv	r3, r3, r1
2000f49e:	464a      	mov	r2, r9
2000f4a0:	434b      	muls	r3, r1
2000f4a2:	4630      	mov	r0, r6
2000f4a4:	6a21      	ldr	r1, [r4, #32]
2000f4a6:	47a8      	blx	r5
2000f4a8:	1e05      	subs	r5, r0, #0
2000f4aa:	dcb9      	bgt.n	2000f420 <__sfvwrite_r+0x1bc>
2000f4ac:	e78c      	b.n	2000f3c8 <__sfvwrite_r+0x164>
2000f4ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
2000f4b2:	2000      	movs	r0, #0
2000f4b4:	3708      	adds	r7, #8
2000f4b6:	e6f3      	b.n	2000f2a0 <__sfvwrite_r+0x3c>
2000f4b8:	f10b 0901 	add.w	r9, fp, #1
2000f4bc:	e700      	b.n	2000f2c0 <__sfvwrite_r+0x5c>
2000f4be:	4293      	cmp	r3, r2
2000f4c0:	dc08      	bgt.n	2000f4d4 <__sfvwrite_r+0x270>
2000f4c2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
2000f4c4:	6a21      	ldr	r1, [r4, #32]
2000f4c6:	4652      	mov	r2, sl
2000f4c8:	4630      	mov	r0, r6
2000f4ca:	47a8      	blx	r5
2000f4cc:	1e05      	subs	r5, r0, #0
2000f4ce:	f73f af13 	bgt.w	2000f2f8 <__sfvwrite_r+0x94>
2000f4d2:	e779      	b.n	2000f3c8 <__sfvwrite_r+0x164>
2000f4d4:	4651      	mov	r1, sl
2000f4d6:	9201      	str	r2, [sp, #4]
2000f4d8:	f7ff f9ea 	bl	2000e8b0 <memmove>
2000f4dc:	9a01      	ldr	r2, [sp, #4]
2000f4de:	68a3      	ldr	r3, [r4, #8]
2000f4e0:	1a9b      	subs	r3, r3, r2
2000f4e2:	60a3      	str	r3, [r4, #8]
2000f4e4:	6823      	ldr	r3, [r4, #0]
2000f4e6:	4413      	add	r3, r2
2000f4e8:	6023      	str	r3, [r4, #0]
2000f4ea:	4615      	mov	r5, r2
2000f4ec:	e704      	b.n	2000f2f8 <__sfvwrite_r+0x94>
2000f4ee:	2001      	movs	r0, #1
2000f4f0:	e70c      	b.n	2000f30c <__sfvwrite_r+0xa8>
2000f4f2:	bf00      	nop
2000f4f4:	7ffffc00 	.word	0x7ffffc00

2000f4f8 <_fwalk>:
2000f4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000f4fc:	460f      	mov	r7, r1
2000f4fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
2000f502:	2600      	movs	r6, #0
2000f504:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
2000f508:	f1b8 0801 	subs.w	r8, r8, #1
2000f50c:	d505      	bpl.n	2000f51a <_fwalk+0x22>
2000f50e:	6824      	ldr	r4, [r4, #0]
2000f510:	2c00      	cmp	r4, #0
2000f512:	d1f7      	bne.n	2000f504 <_fwalk+0xc>
2000f514:	4630      	mov	r0, r6
2000f516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2000f51a:	89ab      	ldrh	r3, [r5, #12]
2000f51c:	2b01      	cmp	r3, #1
2000f51e:	d906      	bls.n	2000f52e <_fwalk+0x36>
2000f520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
2000f524:	3301      	adds	r3, #1
2000f526:	d002      	beq.n	2000f52e <_fwalk+0x36>
2000f528:	4628      	mov	r0, r5
2000f52a:	47b8      	blx	r7
2000f52c:	4306      	orrs	r6, r0
2000f52e:	3568      	adds	r5, #104	; 0x68
2000f530:	e7ea      	b.n	2000f508 <_fwalk+0x10>

2000f532 <_fwalk_reent>:
2000f532:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000f536:	4606      	mov	r6, r0
2000f538:	4688      	mov	r8, r1
2000f53a:	f100 0448 	add.w	r4, r0, #72	; 0x48
2000f53e:	2700      	movs	r7, #0
2000f540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
2000f544:	f1b9 0901 	subs.w	r9, r9, #1
2000f548:	d505      	bpl.n	2000f556 <_fwalk_reent+0x24>
2000f54a:	6824      	ldr	r4, [r4, #0]
2000f54c:	2c00      	cmp	r4, #0
2000f54e:	d1f7      	bne.n	2000f540 <_fwalk_reent+0xe>
2000f550:	4638      	mov	r0, r7
2000f552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000f556:	89ab      	ldrh	r3, [r5, #12]
2000f558:	2b01      	cmp	r3, #1
2000f55a:	d907      	bls.n	2000f56c <_fwalk_reent+0x3a>
2000f55c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
2000f560:	3301      	adds	r3, #1
2000f562:	d003      	beq.n	2000f56c <_fwalk_reent+0x3a>
2000f564:	4629      	mov	r1, r5
2000f566:	4630      	mov	r0, r6
2000f568:	47c0      	blx	r8
2000f56a:	4307      	orrs	r7, r0
2000f56c:	3568      	adds	r5, #104	; 0x68
2000f56e:	e7e9      	b.n	2000f544 <_fwalk_reent+0x12>

2000f570 <__retarget_lock_init>:
2000f570:	4770      	bx	lr

2000f572 <__retarget_lock_init_recursive>:
2000f572:	4770      	bx	lr

2000f574 <__retarget_lock_close>:
2000f574:	4770      	bx	lr

2000f576 <__retarget_lock_close_recursive>:
2000f576:	4770      	bx	lr

2000f578 <__retarget_lock_acquire>:
2000f578:	4770      	bx	lr

2000f57a <__retarget_lock_acquire_recursive>:
2000f57a:	4770      	bx	lr

2000f57c <__retarget_lock_try_acquire>:
2000f57c:	2001      	movs	r0, #1
2000f57e:	4770      	bx	lr

2000f580 <__retarget_lock_try_acquire_recursive>:
2000f580:	2001      	movs	r0, #1
2000f582:	4770      	bx	lr

2000f584 <__retarget_lock_release>:
2000f584:	4770      	bx	lr

2000f586 <__retarget_lock_release_recursive>:
2000f586:	4770      	bx	lr

2000f588 <__swhatbuf_r>:
2000f588:	b570      	push	{r4, r5, r6, lr}
2000f58a:	460e      	mov	r6, r1
2000f58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2000f590:	2900      	cmp	r1, #0
2000f592:	b096      	sub	sp, #88	; 0x58
2000f594:	4614      	mov	r4, r2
2000f596:	461d      	mov	r5, r3
2000f598:	da07      	bge.n	2000f5aa <__swhatbuf_r+0x22>
2000f59a:	2300      	movs	r3, #0
2000f59c:	602b      	str	r3, [r5, #0]
2000f59e:	89b3      	ldrh	r3, [r6, #12]
2000f5a0:	061a      	lsls	r2, r3, #24
2000f5a2:	d410      	bmi.n	2000f5c6 <__swhatbuf_r+0x3e>
2000f5a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
2000f5a8:	e00e      	b.n	2000f5c8 <__swhatbuf_r+0x40>
2000f5aa:	466a      	mov	r2, sp
2000f5ac:	f000 f96a 	bl	2000f884 <_fstat_r>
2000f5b0:	2800      	cmp	r0, #0
2000f5b2:	dbf2      	blt.n	2000f59a <__swhatbuf_r+0x12>
2000f5b4:	9a01      	ldr	r2, [sp, #4]
2000f5b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
2000f5ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
2000f5be:	425a      	negs	r2, r3
2000f5c0:	415a      	adcs	r2, r3
2000f5c2:	602a      	str	r2, [r5, #0]
2000f5c4:	e7ee      	b.n	2000f5a4 <__swhatbuf_r+0x1c>
2000f5c6:	2340      	movs	r3, #64	; 0x40
2000f5c8:	2000      	movs	r0, #0
2000f5ca:	6023      	str	r3, [r4, #0]
2000f5cc:	b016      	add	sp, #88	; 0x58
2000f5ce:	bd70      	pop	{r4, r5, r6, pc}

2000f5d0 <__smakebuf_r>:
2000f5d0:	898b      	ldrh	r3, [r1, #12]
2000f5d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
2000f5d4:	079d      	lsls	r5, r3, #30
2000f5d6:	4606      	mov	r6, r0
2000f5d8:	460c      	mov	r4, r1
2000f5da:	d507      	bpl.n	2000f5ec <__smakebuf_r+0x1c>
2000f5dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
2000f5e0:	6023      	str	r3, [r4, #0]
2000f5e2:	6123      	str	r3, [r4, #16]
2000f5e4:	2301      	movs	r3, #1
2000f5e6:	6163      	str	r3, [r4, #20]
2000f5e8:	b002      	add	sp, #8
2000f5ea:	bd70      	pop	{r4, r5, r6, pc}
2000f5ec:	ab01      	add	r3, sp, #4
2000f5ee:	466a      	mov	r2, sp
2000f5f0:	f7ff ffca 	bl	2000f588 <__swhatbuf_r>
2000f5f4:	9900      	ldr	r1, [sp, #0]
2000f5f6:	4605      	mov	r5, r0
2000f5f8:	4630      	mov	r0, r6
2000f5fa:	f7fe fea3 	bl	2000e344 <_malloc_r>
2000f5fe:	b948      	cbnz	r0, 2000f614 <__smakebuf_r+0x44>
2000f600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2000f604:	059a      	lsls	r2, r3, #22
2000f606:	d4ef      	bmi.n	2000f5e8 <__smakebuf_r+0x18>
2000f608:	f023 0303 	bic.w	r3, r3, #3
2000f60c:	f043 0302 	orr.w	r3, r3, #2
2000f610:	81a3      	strh	r3, [r4, #12]
2000f612:	e7e3      	b.n	2000f5dc <__smakebuf_r+0xc>
2000f614:	4b0d      	ldr	r3, [pc, #52]	; (2000f64c <__smakebuf_r+0x7c>)
2000f616:	62b3      	str	r3, [r6, #40]	; 0x28
2000f618:	89a3      	ldrh	r3, [r4, #12]
2000f61a:	6020      	str	r0, [r4, #0]
2000f61c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000f620:	81a3      	strh	r3, [r4, #12]
2000f622:	9b00      	ldr	r3, [sp, #0]
2000f624:	6163      	str	r3, [r4, #20]
2000f626:	9b01      	ldr	r3, [sp, #4]
2000f628:	6120      	str	r0, [r4, #16]
2000f62a:	b15b      	cbz	r3, 2000f644 <__smakebuf_r+0x74>
2000f62c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
2000f630:	4630      	mov	r0, r6
2000f632:	f000 f939 	bl	2000f8a8 <_isatty_r>
2000f636:	b128      	cbz	r0, 2000f644 <__smakebuf_r+0x74>
2000f638:	89a3      	ldrh	r3, [r4, #12]
2000f63a:	f023 0303 	bic.w	r3, r3, #3
2000f63e:	f043 0301 	orr.w	r3, r3, #1
2000f642:	81a3      	strh	r3, [r4, #12]
2000f644:	89a0      	ldrh	r0, [r4, #12]
2000f646:	4305      	orrs	r5, r0
2000f648:	81a5      	strh	r5, [r4, #12]
2000f64a:	e7cd      	b.n	2000f5e8 <__smakebuf_r+0x18>
2000f64c:	2000f08d 	.word	0x2000f08d

2000f650 <_malloc_usable_size_r>:
2000f650:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000f654:	1f18      	subs	r0, r3, #4
2000f656:	2b00      	cmp	r3, #0
2000f658:	bfbc      	itt	lt
2000f65a:	580b      	ldrlt	r3, [r1, r0]
2000f65c:	18c0      	addlt	r0, r0, r3
2000f65e:	4770      	bx	lr

2000f660 <_init_signal_r>:
2000f660:	b538      	push	{r3, r4, r5, lr}
2000f662:	6c44      	ldr	r4, [r0, #68]	; 0x44
2000f664:	4605      	mov	r5, r0
2000f666:	b954      	cbnz	r4, 2000f67e <_init_signal_r+0x1e>
2000f668:	2180      	movs	r1, #128	; 0x80
2000f66a:	f7fe fe6b 	bl	2000e344 <_malloc_r>
2000f66e:	6468      	str	r0, [r5, #68]	; 0x44
2000f670:	b138      	cbz	r0, 2000f682 <_init_signal_r+0x22>
2000f672:	1f03      	subs	r3, r0, #4
2000f674:	307c      	adds	r0, #124	; 0x7c
2000f676:	f843 4f04 	str.w	r4, [r3, #4]!
2000f67a:	4283      	cmp	r3, r0
2000f67c:	d1fb      	bne.n	2000f676 <_init_signal_r+0x16>
2000f67e:	2000      	movs	r0, #0
2000f680:	bd38      	pop	{r3, r4, r5, pc}
2000f682:	f04f 30ff 	mov.w	r0, #4294967295
2000f686:	e7fb      	b.n	2000f680 <_init_signal_r+0x20>

2000f688 <_signal_r>:
2000f688:	291f      	cmp	r1, #31
2000f68a:	b570      	push	{r4, r5, r6, lr}
2000f68c:	4604      	mov	r4, r0
2000f68e:	460d      	mov	r5, r1
2000f690:	4616      	mov	r6, r2
2000f692:	d904      	bls.n	2000f69e <_signal_r+0x16>
2000f694:	2316      	movs	r3, #22
2000f696:	6003      	str	r3, [r0, #0]
2000f698:	f04f 30ff 	mov.w	r0, #4294967295
2000f69c:	e006      	b.n	2000f6ac <_signal_r+0x24>
2000f69e:	6c43      	ldr	r3, [r0, #68]	; 0x44
2000f6a0:	b12b      	cbz	r3, 2000f6ae <_signal_r+0x26>
2000f6a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
2000f6a4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
2000f6a8:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
2000f6ac:	bd70      	pop	{r4, r5, r6, pc}
2000f6ae:	f7ff ffd7 	bl	2000f660 <_init_signal_r>
2000f6b2:	2800      	cmp	r0, #0
2000f6b4:	d0f5      	beq.n	2000f6a2 <_signal_r+0x1a>
2000f6b6:	e7ef      	b.n	2000f698 <_signal_r+0x10>

2000f6b8 <_raise_r>:
2000f6b8:	291f      	cmp	r1, #31
2000f6ba:	b538      	push	{r3, r4, r5, lr}
2000f6bc:	4604      	mov	r4, r0
2000f6be:	460d      	mov	r5, r1
2000f6c0:	d904      	bls.n	2000f6cc <_raise_r+0x14>
2000f6c2:	2316      	movs	r3, #22
2000f6c4:	6003      	str	r3, [r0, #0]
2000f6c6:	f04f 30ff 	mov.w	r0, #4294967295
2000f6ca:	bd38      	pop	{r3, r4, r5, pc}
2000f6cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
2000f6ce:	b112      	cbz	r2, 2000f6d6 <_raise_r+0x1e>
2000f6d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
2000f6d4:	b94b      	cbnz	r3, 2000f6ea <_raise_r+0x32>
2000f6d6:	4620      	mov	r0, r4
2000f6d8:	f000 f86a 	bl	2000f7b0 <_getpid_r>
2000f6dc:	462a      	mov	r2, r5
2000f6de:	4601      	mov	r1, r0
2000f6e0:	4620      	mov	r0, r4
2000f6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000f6e6:	f000 b851 	b.w	2000f78c <_kill_r>
2000f6ea:	2b01      	cmp	r3, #1
2000f6ec:	d00a      	beq.n	2000f704 <_raise_r+0x4c>
2000f6ee:	1c59      	adds	r1, r3, #1
2000f6f0:	d103      	bne.n	2000f6fa <_raise_r+0x42>
2000f6f2:	2316      	movs	r3, #22
2000f6f4:	6003      	str	r3, [r0, #0]
2000f6f6:	2001      	movs	r0, #1
2000f6f8:	e7e7      	b.n	2000f6ca <_raise_r+0x12>
2000f6fa:	2400      	movs	r4, #0
2000f6fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
2000f700:	4628      	mov	r0, r5
2000f702:	4798      	blx	r3
2000f704:	2000      	movs	r0, #0
2000f706:	e7e0      	b.n	2000f6ca <_raise_r+0x12>

2000f708 <__sigtramp_r>:
2000f708:	291f      	cmp	r1, #31
2000f70a:	b538      	push	{r3, r4, r5, lr}
2000f70c:	4604      	mov	r4, r0
2000f70e:	460d      	mov	r5, r1
2000f710:	d902      	bls.n	2000f718 <__sigtramp_r+0x10>
2000f712:	f04f 30ff 	mov.w	r0, #4294967295
2000f716:	bd38      	pop	{r3, r4, r5, pc}
2000f718:	6c43      	ldr	r3, [r0, #68]	; 0x44
2000f71a:	b12b      	cbz	r3, 2000f728 <__sigtramp_r+0x20>
2000f71c:	6c62      	ldr	r2, [r4, #68]	; 0x44
2000f71e:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
2000f722:	b933      	cbnz	r3, 2000f732 <__sigtramp_r+0x2a>
2000f724:	2001      	movs	r0, #1
2000f726:	e7f6      	b.n	2000f716 <__sigtramp_r+0xe>
2000f728:	f7ff ff9a 	bl	2000f660 <_init_signal_r>
2000f72c:	2800      	cmp	r0, #0
2000f72e:	d0f5      	beq.n	2000f71c <__sigtramp_r+0x14>
2000f730:	e7ef      	b.n	2000f712 <__sigtramp_r+0xa>
2000f732:	1c59      	adds	r1, r3, #1
2000f734:	d008      	beq.n	2000f748 <__sigtramp_r+0x40>
2000f736:	2b01      	cmp	r3, #1
2000f738:	d008      	beq.n	2000f74c <__sigtramp_r+0x44>
2000f73a:	2400      	movs	r4, #0
2000f73c:	4628      	mov	r0, r5
2000f73e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
2000f742:	4798      	blx	r3
2000f744:	4620      	mov	r0, r4
2000f746:	e7e6      	b.n	2000f716 <__sigtramp_r+0xe>
2000f748:	2002      	movs	r0, #2
2000f74a:	e7e4      	b.n	2000f716 <__sigtramp_r+0xe>
2000f74c:	2003      	movs	r0, #3
2000f74e:	e7e2      	b.n	2000f716 <__sigtramp_r+0xe>

2000f750 <raise>:
2000f750:	4b02      	ldr	r3, [pc, #8]	; (2000f75c <raise+0xc>)
2000f752:	4601      	mov	r1, r0
2000f754:	6818      	ldr	r0, [r3, #0]
2000f756:	f7ff bfaf 	b.w	2000f6b8 <_raise_r>
2000f75a:	bf00      	nop
2000f75c:	20000224 	.word	0x20000224

2000f760 <signal>:
2000f760:	4b02      	ldr	r3, [pc, #8]	; (2000f76c <signal+0xc>)
2000f762:	460a      	mov	r2, r1
2000f764:	4601      	mov	r1, r0
2000f766:	6818      	ldr	r0, [r3, #0]
2000f768:	f7ff bf8e 	b.w	2000f688 <_signal_r>
2000f76c:	20000224 	.word	0x20000224

2000f770 <_init_signal>:
2000f770:	4b01      	ldr	r3, [pc, #4]	; (2000f778 <_init_signal+0x8>)
2000f772:	6818      	ldr	r0, [r3, #0]
2000f774:	f7ff bf74 	b.w	2000f660 <_init_signal_r>
2000f778:	20000224 	.word	0x20000224

2000f77c <__sigtramp>:
2000f77c:	4b02      	ldr	r3, [pc, #8]	; (2000f788 <__sigtramp+0xc>)
2000f77e:	4601      	mov	r1, r0
2000f780:	6818      	ldr	r0, [r3, #0]
2000f782:	f7ff bfc1 	b.w	2000f708 <__sigtramp_r>
2000f786:	bf00      	nop
2000f788:	20000224 	.word	0x20000224

2000f78c <_kill_r>:
2000f78c:	b538      	push	{r3, r4, r5, lr}
2000f78e:	4d07      	ldr	r5, [pc, #28]	; (2000f7ac <_kill_r+0x20>)
2000f790:	2300      	movs	r3, #0
2000f792:	4604      	mov	r4, r0
2000f794:	4608      	mov	r0, r1
2000f796:	4611      	mov	r1, r2
2000f798:	602b      	str	r3, [r5, #0]
2000f79a:	f7f1 fca9 	bl	200010f0 <_kill>
2000f79e:	1c43      	adds	r3, r0, #1
2000f7a0:	d102      	bne.n	2000f7a8 <_kill_r+0x1c>
2000f7a2:	682b      	ldr	r3, [r5, #0]
2000f7a4:	b103      	cbz	r3, 2000f7a8 <_kill_r+0x1c>
2000f7a6:	6023      	str	r3, [r4, #0]
2000f7a8:	bd38      	pop	{r3, r4, r5, pc}
2000f7aa:	bf00      	nop
2000f7ac:	20000494 	.word	0x20000494

2000f7b0 <_getpid_r>:
2000f7b0:	f7f1 bc9c 	b.w	200010ec <_getpid>

2000f7b4 <__sread>:
2000f7b4:	b510      	push	{r4, lr}
2000f7b6:	460c      	mov	r4, r1
2000f7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2000f7bc:	f000 f896 	bl	2000f8ec <_read_r>
2000f7c0:	2800      	cmp	r0, #0
2000f7c2:	bfab      	itete	ge
2000f7c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
2000f7c6:	89a3      	ldrhlt	r3, [r4, #12]
2000f7c8:	181b      	addge	r3, r3, r0
2000f7ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
2000f7ce:	bfac      	ite	ge
2000f7d0:	6563      	strge	r3, [r4, #84]	; 0x54
2000f7d2:	81a3      	strhlt	r3, [r4, #12]
2000f7d4:	bd10      	pop	{r4, pc}

2000f7d6 <__seofread>:
2000f7d6:	2000      	movs	r0, #0
2000f7d8:	4770      	bx	lr

2000f7da <__swrite>:
2000f7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000f7de:	461f      	mov	r7, r3
2000f7e0:	898b      	ldrh	r3, [r1, #12]
2000f7e2:	05db      	lsls	r3, r3, #23
2000f7e4:	4605      	mov	r5, r0
2000f7e6:	460c      	mov	r4, r1
2000f7e8:	4616      	mov	r6, r2
2000f7ea:	d505      	bpl.n	2000f7f8 <__swrite+0x1e>
2000f7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2000f7f0:	2302      	movs	r3, #2
2000f7f2:	2200      	movs	r2, #0
2000f7f4:	f000 f868 	bl	2000f8c8 <_lseek_r>
2000f7f8:	89a3      	ldrh	r3, [r4, #12]
2000f7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
2000f7fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2000f802:	81a3      	strh	r3, [r4, #12]
2000f804:	4632      	mov	r2, r6
2000f806:	463b      	mov	r3, r7
2000f808:	4628      	mov	r0, r5
2000f80a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
2000f80e:	f000 b817 	b.w	2000f840 <_write_r>

2000f812 <__sseek>:
2000f812:	b510      	push	{r4, lr}
2000f814:	460c      	mov	r4, r1
2000f816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2000f81a:	f000 f855 	bl	2000f8c8 <_lseek_r>
2000f81e:	1c43      	adds	r3, r0, #1
2000f820:	89a3      	ldrh	r3, [r4, #12]
2000f822:	bf15      	itete	ne
2000f824:	6560      	strne	r0, [r4, #84]	; 0x54
2000f826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
2000f82a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
2000f82e:	81a3      	strheq	r3, [r4, #12]
2000f830:	bf18      	it	ne
2000f832:	81a3      	strhne	r3, [r4, #12]
2000f834:	bd10      	pop	{r4, pc}

2000f836 <__sclose>:
2000f836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2000f83a:	f000 b813 	b.w	2000f864 <_close_r>
	...

2000f840 <_write_r>:
2000f840:	b538      	push	{r3, r4, r5, lr}
2000f842:	4d07      	ldr	r5, [pc, #28]	; (2000f860 <_write_r+0x20>)
2000f844:	4604      	mov	r4, r0
2000f846:	4608      	mov	r0, r1
2000f848:	4611      	mov	r1, r2
2000f84a:	2200      	movs	r2, #0
2000f84c:	602a      	str	r2, [r5, #0]
2000f84e:	461a      	mov	r2, r3
2000f850:	f7f1 fc6c 	bl	2000112c <_write>
2000f854:	1c43      	adds	r3, r0, #1
2000f856:	d102      	bne.n	2000f85e <_write_r+0x1e>
2000f858:	682b      	ldr	r3, [r5, #0]
2000f85a:	b103      	cbz	r3, 2000f85e <_write_r+0x1e>
2000f85c:	6023      	str	r3, [r4, #0]
2000f85e:	bd38      	pop	{r3, r4, r5, pc}
2000f860:	20000494 	.word	0x20000494

2000f864 <_close_r>:
2000f864:	b538      	push	{r3, r4, r5, lr}
2000f866:	4d06      	ldr	r5, [pc, #24]	; (2000f880 <_close_r+0x1c>)
2000f868:	2300      	movs	r3, #0
2000f86a:	4604      	mov	r4, r0
2000f86c:	4608      	mov	r0, r1
2000f86e:	602b      	str	r3, [r5, #0]
2000f870:	f7f1 fc6a 	bl	20001148 <_close>
2000f874:	1c43      	adds	r3, r0, #1
2000f876:	d102      	bne.n	2000f87e <_close_r+0x1a>
2000f878:	682b      	ldr	r3, [r5, #0]
2000f87a:	b103      	cbz	r3, 2000f87e <_close_r+0x1a>
2000f87c:	6023      	str	r3, [r4, #0]
2000f87e:	bd38      	pop	{r3, r4, r5, pc}
2000f880:	20000494 	.word	0x20000494

2000f884 <_fstat_r>:
2000f884:	b538      	push	{r3, r4, r5, lr}
2000f886:	4d07      	ldr	r5, [pc, #28]	; (2000f8a4 <_fstat_r+0x20>)
2000f888:	2300      	movs	r3, #0
2000f88a:	4604      	mov	r4, r0
2000f88c:	4608      	mov	r0, r1
2000f88e:	4611      	mov	r1, r2
2000f890:	602b      	str	r3, [r5, #0]
2000f892:	f7f1 fc5d 	bl	20001150 <_fstat>
2000f896:	1c43      	adds	r3, r0, #1
2000f898:	d102      	bne.n	2000f8a0 <_fstat_r+0x1c>
2000f89a:	682b      	ldr	r3, [r5, #0]
2000f89c:	b103      	cbz	r3, 2000f8a0 <_fstat_r+0x1c>
2000f89e:	6023      	str	r3, [r4, #0]
2000f8a0:	bd38      	pop	{r3, r4, r5, pc}
2000f8a2:	bf00      	nop
2000f8a4:	20000494 	.word	0x20000494

2000f8a8 <_isatty_r>:
2000f8a8:	b538      	push	{r3, r4, r5, lr}
2000f8aa:	4d06      	ldr	r5, [pc, #24]	; (2000f8c4 <_isatty_r+0x1c>)
2000f8ac:	2300      	movs	r3, #0
2000f8ae:	4604      	mov	r4, r0
2000f8b0:	4608      	mov	r0, r1
2000f8b2:	602b      	str	r3, [r5, #0]
2000f8b4:	f7f1 fc52 	bl	2000115c <_isatty>
2000f8b8:	1c43      	adds	r3, r0, #1
2000f8ba:	d102      	bne.n	2000f8c2 <_isatty_r+0x1a>
2000f8bc:	682b      	ldr	r3, [r5, #0]
2000f8be:	b103      	cbz	r3, 2000f8c2 <_isatty_r+0x1a>
2000f8c0:	6023      	str	r3, [r4, #0]
2000f8c2:	bd38      	pop	{r3, r4, r5, pc}
2000f8c4:	20000494 	.word	0x20000494

2000f8c8 <_lseek_r>:
2000f8c8:	b538      	push	{r3, r4, r5, lr}
2000f8ca:	4d07      	ldr	r5, [pc, #28]	; (2000f8e8 <_lseek_r+0x20>)
2000f8cc:	4604      	mov	r4, r0
2000f8ce:	4608      	mov	r0, r1
2000f8d0:	4611      	mov	r1, r2
2000f8d2:	2200      	movs	r2, #0
2000f8d4:	602a      	str	r2, [r5, #0]
2000f8d6:	461a      	mov	r2, r3
2000f8d8:	f7f1 fc42 	bl	20001160 <_lseek>
2000f8dc:	1c43      	adds	r3, r0, #1
2000f8de:	d102      	bne.n	2000f8e6 <_lseek_r+0x1e>
2000f8e0:	682b      	ldr	r3, [r5, #0]
2000f8e2:	b103      	cbz	r3, 2000f8e6 <_lseek_r+0x1e>
2000f8e4:	6023      	str	r3, [r4, #0]
2000f8e6:	bd38      	pop	{r3, r4, r5, pc}
2000f8e8:	20000494 	.word	0x20000494

2000f8ec <_read_r>:
2000f8ec:	b538      	push	{r3, r4, r5, lr}
2000f8ee:	4d07      	ldr	r5, [pc, #28]	; (2000f90c <_read_r+0x20>)
2000f8f0:	4604      	mov	r4, r0
2000f8f2:	4608      	mov	r0, r1
2000f8f4:	4611      	mov	r1, r2
2000f8f6:	2200      	movs	r2, #0
2000f8f8:	602a      	str	r2, [r5, #0]
2000f8fa:	461a      	mov	r2, r3
2000f8fc:	f7f1 fc08 	bl	20001110 <_read>
2000f900:	1c43      	adds	r3, r0, #1
2000f902:	d102      	bne.n	2000f90a <_read_r+0x1e>
2000f904:	682b      	ldr	r3, [r5, #0]
2000f906:	b103      	cbz	r3, 2000f90a <_read_r+0x1e>
2000f908:	6023      	str	r3, [r4, #0]
2000f90a:	bd38      	pop	{r3, r4, r5, pc}
2000f90c:	20000494 	.word	0x20000494

2000f910 <__EH_FRAME_BEGIN__>:
2000f910:	00000000                                ....

2000f914 <_init>:
2000f914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000f916:	bf00      	nop
2000f918:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000f91a:	bc08      	pop	{r3}
2000f91c:	469e      	mov	lr, r3
2000f91e:	4770      	bx	lr

2000f920 <_fini>:
2000f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000f922:	bf00      	nop
2000f924:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000f926:	bc08      	pop	{r3}
2000f928:	469e      	mov	lr, r3
2000f92a:	4770      	bx	lr
